#ifndef DEFINE_FUNC_ATTRIBUTES
# define DEFINE_FUNC_ATTRIBUTES
#endif
#include "nvim/func_attr.h"
#undef DEFINE_FUNC_ATTRIBUTES
int open_buffer(int read_stdin, exarg_T *eap, int flags );
void set_bufref(bufref_T *bufref, buf_T *buf);
_Bool bufref_valid(bufref_T *bufref);
_Bool buf_valid(buf_T *buf) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
void close_buffer(win_T *win, buf_T *buf, int action, int abort_if_last);
void buf_clear_file(buf_T *buf);
void buf_clear(void);
void buf_freeall(buf_T *buf, int flags);
void goto_buffer(exarg_T *eap, int start, int dir, int count);
void handle_swap_exists(bufref_T *old_curbuf);
char_u *do_bufdel(int command, char_u *arg, int addr_count, int start_bnr, int end_bnr, int forceit );
int do_buffer(int action, int start, int dir, int count, int forceit );
void set_curbuf(buf_T *buf, int action);
void enter_buffer(buf_T *buf);
void do_autochdir(void);
buf_T *buflist_new(char_u *ffname, char_u *sfname, linenr_T lnum, int flags);
void free_buf_options(buf_T *buf, int free_p_ff);
int buflist_getfile(int n, linenr_T lnum, int options, int forceit);
void buflist_getfpos(void);
buf_T *buflist_findname_exp(char_u *fname);
buf_T *buflist_findname(char_u *ffname);
int buflist_findpat(const char_u *pattern, const char_u *pattern_end, int unlisted, int diffmode, int curtab_only );
int ExpandBufnames(char_u *pat, int *num_file, char_u ***file, int options);
buf_T *buflist_findnr(int nr);
char_u *buflist_nr2name(int n, int fullname, int helptail );
void buflist_setfpos(buf_T *const buf, win_T *const win, linenr_T lnum, colnr_T col, _Bool copy_options) FUNC_ATTR_NONNULL_ALL;
void get_winopts(buf_T *buf);
pos_T *buflist_findfpos(buf_T *buf);
linenr_T buflist_findlnum(buf_T *buf);
void buflist_list(exarg_T *eap);
int buflist_name_nr(int fnum, char_u **fname, linenr_T *lnum);
int setfname(buf_T *buf, char_u *ffname, char_u *sfname, int message );
void buf_set_name(int fnum, char_u *name);
void buf_name_changed(buf_T *buf);
buf_T *setaltfname(char_u *ffname, char_u *sfname, linenr_T lnum);
char_u *getaltfname(int errmsg );
int buflist_add(char_u *fname, int flags);
void buflist_altfpos(win_T *win);
_Bool otherfile(char_u *ffname) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL;
void buf_set_file_id(buf_T *buf);
void fileinfo(int fullname, int shorthelp, int dont_truncate );
void col_print(char_u *buf, size_t buflen, int col, int vcol);
void maketitle(void);
void resettitle(void);
int build_stl_str_hl(win_T *wp, char_u *out, size_t outlen, char_u *fmt, int use_sandbox, char_u fillchar, int maxwidth, struct stl_hlrec *hltab, StlClickRecord *tabtab );
void get_rel_pos(win_T *wp, char_u *buf, int buflen);
void fname_expand(buf_T *buf, char_u **ffname, char_u **sfname);
char_u *alist_name(aentry_T *aep);
void do_arg_all(int count, int forceit, int keep_tabs );
void ex_buffer_all(exarg_T *eap);
void do_modelines(int flags);
char_u *buf_spname(buf_T *buf);
_Bool find_win_for_buf(buf_T *buf, win_T **wp, tabpage_T **tp);
void buf_addsign(buf_T *buf, int id, linenr_T lnum, int typenr );
linenr_T buf_change_sign_type(buf_T *buf, int markId, int typenr );
int buf_getsigntype(buf_T *buf, linenr_T lnum, int type );
linenr_T buf_delsign(buf_T *buf, int id );
int buf_findsign(buf_T *buf, int id );
int buf_findsign_id(buf_T *buf, linenr_T lnum );
void buf_delete_signs(buf_T *buf);
void buf_delete_all_signs(void);
void sign_list_placed(buf_T *rbuf);
void sign_mark_adjust(linenr_T line1, linenr_T line2, long amount, long amount_after);
BufhlLine *bufhl_tree_ref(BufhlInfo *b, linenr_T line, _Bool put);
int bufhl_add_hl(buf_T *buf, int src_id, int hl_id, linenr_T lnum, colnr_T col_start, colnr_T col_end);
void bufhl_add_hl_pos_offset(buf_T *buf, int src_id, int hl_id, lpos_T pos_start, lpos_T pos_end, colnr_T offset);
void bufhl_clear_line_range(buf_T *buf, int src_id, linenr_T line_start, linenr_T line_end);
void bufhl_clear_all(buf_T *buf);
void bufhl_mark_adjust(buf_T *buf, linenr_T line1, linenr_T line2, long amount, long amount_after, _Bool end_temp);
_Bool bufhl_start_line(buf_T *buf, linenr_T lnum, BufhlLineInfo *info);
int bufhl_get_attr(BufhlLineInfo *info, colnr_T col);
void set_buflisted(int on);
_Bool buf_contents_changed(buf_T *buf) FUNC_ATTR_NONNULL_ALL;
void wipe_buffer(buf_T *buf, int aucmd );
void buf_open_scratch(handle_T bufnr, char *bufname);
#include "nvim/func_attr.h"
