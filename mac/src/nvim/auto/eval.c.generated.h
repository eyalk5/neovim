#ifndef DEFINE_FUNC_ATTRIBUTES
# define DEFINE_FUNC_ATTRIBUTES
#endif
#include "nvim/func_attr.h"
#undef DEFINE_FUNC_ATTRIBUTES
static inline kh_functions_t *kh_init_functions(void);
static inline void kh_dealloc_functions(kh_functions_t *h);
static inline void kh_destroy_functions(kh_functions_t *h);
static inline void kh_clear_functions(kh_functions_t *h);
static inline khint_t kh_get_functions(const kh_functions_t *h, kh_cstr_t key);
static inline void kh_resize_functions(kh_functions_t *h, khint_t new_n_buckets);
static inline khint_t kh_put_functions(kh_functions_t *h, kh_cstr_t key, int *ret);
static inline void kh_del_functions(kh_functions_t *h, khint_t x);
static void prepare_vimvar(int idx, typval_T *save_tv);
static void restore_vimvar(int idx, typval_T *save_tv);
static int ex_let_vars(char_u *arg_start, typval_T *tv, int copy, int semicolon, int var_count, char_u *nextchars );
static const char_u *skip_var_list(const char_u *arg, int *var_count, int *semicolon);
static const char_u *skip_var_one(const char_u *arg);
static void list_hashtable_vars(hashtab_T *ht, const char *prefix, int empty, int *first);
static void list_glob_vars(int *first);
static void list_buf_vars(int *first);
static void list_win_vars(int *first);
static void list_tab_vars(int *first);
static void list_vim_vars(int *first);
static void list_script_vars(int *first);
static void list_func_vars(int *first);
static const char *list_arg_vars(exarg_T *eap, const char *arg, int *first);
static char_u *ex_let_one(char_u *arg, typval_T *const tv, const _Bool copy, const char_u *const endchars, const char_u *const op) FUNC_ATTR_NONNULL_ARG(1, 2) FUNC_ATTR_WARN_UNUSED_RESULT;
static char_u *get_lval(char_u *const name, typval_T *const rettv, lval_T *const lp, const _Bool unlet, const _Bool skip, const int flags, const int fne_flags) FUNC_ATTR_NONNULL_ARG(1, 3);
static void clear_lval(lval_T *lp);
static void set_var_lval(lval_T *lp, char_u *endp, typval_T *rettv, int copy, const char_u *op);
static void ex_unletlock(exarg_T *eap, char_u *argstart, int deep);
static int do_unlet_var(lval_T *const lp, char_u *const name_end, int forceit);
static int do_lock_var(lval_T *lp, char_u *const name_end, const int deep, const _Bool lock);
static char_u *cat_prefix_varname(int prefix, char_u *name);
static int pattern_match(char_u *pat, char_u *text, int ic);
static int eval1(char_u **arg, typval_T *rettv, int evaluate);
static int eval2(char_u **arg, typval_T *rettv, int evaluate);
static int eval3(char_u **arg, typval_T *rettv, int evaluate);
static int eval4(char_u **arg, typval_T *rettv, int evaluate);
static int eval5(char_u **arg, typval_T *rettv, int evaluate);
static int eval6(char_u **arg, typval_T *rettv, int evaluate, int want_string) FUNC_ATTR_NO_SANITIZE_UNDEFINED;
static int eval7(char_u **arg, typval_T *rettv, int evaluate, int want_string );
static int eval_index(char_u **arg, typval_T *rettv, int evaluate, int verbose );
static int get_option_tv(const char **const arg, typval_T *const rettv, const _Bool evaluate) FUNC_ATTR_NONNULL_ARG(1);
static int get_string_tv(char_u **arg, typval_T *rettv, int evaluate);
static int get_lit_string_tv(char_u **arg, typval_T *rettv, int evaluate);
static void partial_free(partial_T *pt);
static int get_list_tv(char_u **arg, typval_T *rettv, int evaluate);
static int free_unref_items(int copyID);
static inline _Bool set_ref_in_fmark(fmark_T fm, int copyID) FUNC_ATTR_WARN_UNUSED_RESULT;
static inline _Bool set_ref_list(list_T *list, int copyID) FUNC_ATTR_WARN_UNUSED_RESULT;
static inline _Bool set_ref_dict(dict_T *dict, int copyID) FUNC_ATTR_WARN_UNUSED_RESULT;
static _Bool set_ref_in_funccal(funccall_T *fc, int copyID);
static int get_dict_tv(char_u **arg, typval_T *rettv, int evaluate);
static int get_function_args(char_u **argp, char_u endchar, garray_T *newargs, int *varargs, _Bool skip);
static void register_closure(ufunc_T *fp);
static int get_lambda_tv(char_u **arg, typval_T *rettv, _Bool evaluate);
static int get_env_tv(char_u **arg, typval_T *rettv, int evaluate);
static const VimLFuncDef *find_internal_func(const char *const name) FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL;
static char_u *deref_func_name(const char *name, int *lenp, partial_T **const partialp, _Bool no_autoload) FUNC_ATTR_NONNULL_ARG(1, 2);
static int get_func_tv(char_u *name, int len, typval_T *rettv, char_u **arg, linenr_T firstline, linenr_T lastline, int *doesrange, int evaluate, partial_T *partial, dict_T *selfdict );
static char_u *fname_trans_sid(const char_u *const name, char_u *const fname_buf, char_u **const tofree, int *const error) FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT;
static void emsg_funcname(char *ermsg, char_u *name);
static int non_zero_arg(typval_T *argvars);
static void float_op_wrapper(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void api_wrapper(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_abs(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_add(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_and(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_api_info(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_append(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_argc(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_argidx(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_arglistid(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_argv(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void prepare_assert_error(garray_T *gap);
static void ga_concat_esc(garray_T *gap, char_u *str);
static void fill_assert_error(garray_T *gap, typval_T *opt_msg_tv, char_u *exp_str, typval_T *exp_tv, typval_T *got_tv, assert_type_T atype);
static void assert_error(garray_T *gap);
static void assert_equal_common(typval_T *argvars, assert_type_T atype);
static void f_assert_equal(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_assert_notequal(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_assert_report(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_assert_exception(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_assert_fails(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void assert_bool(typval_T *argvars, _Bool is_true);
static void f_assert_false(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void assert_match_common(typval_T *argvars, assert_type_T atype);
static void f_assert_inrange(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_assert_match(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_assert_notmatch(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_assert_true(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_atan2(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_browse(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_browsedir(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static buf_T *find_buffer(typval_T *avar);
static void f_bufexists(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_buflisted(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_bufloaded(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static buf_T *get_buf_tv(typval_T *tv, int curtab_only);
static void f_bufname(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_bufnr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void buf_win_common(typval_T *argvars, typval_T *rettv, _Bool get_nr);
static void f_bufwinid(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_bufwinnr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_byte2line(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void byteidx(typval_T *argvars, typval_T *rettv, int comp);
static void f_byteidx(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_byteidxcomp(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_call(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_changenr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_chanclose(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_chansend(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_char2nr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_cindent(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_clearmatches(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_col(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_complete(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_complete_add(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_complete_check(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_confirm(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_copy(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_count(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_cscope_connection(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_cursor(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_deepcopy(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_delete(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_dictwatcheradd(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_dictwatcherdel(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_did_filetype(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_diff_filler(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_diff_hlID(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_empty(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_escape(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_eval(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_eventhandler(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_executable(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static char_u *get_list_line(int c, void *cookie, int indent);
static void f_execute(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_exepath(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_exists(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_expand(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_menu_get(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_extend(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_feedkeys(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_filereadable(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_filewritable(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void findfilendir(typval_T *argvars, typval_T *rettv, int find_what);
static void filter_map(typval_T *argvars, typval_T *rettv, int map);
static int filter_map_one(typval_T *tv, typval_T *expr, int map, int *remp);
static void f_filter(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_finddir(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_findfile(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_float2nr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_fmod(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_fnameescape(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_fnamemodify(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void foldclosed_both(typval_T *argvars, typval_T *rettv, int end);
static void f_foldclosed(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_foldclosedend(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_foldlevel(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_foldtext(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_foldtextresult(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_foreground(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void common_function(typval_T *argvars, typval_T *rettv, _Bool is_funcref, FunPtr fptr);
static void f_funcref(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_function(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_garbagecollect(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_get(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void get_buffer_signs(buf_T *buf, list_T *l);
static dict_T *get_buffer_info(buf_T *buf);
static void f_getbufinfo(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void get_buffer_lines(buf_T *buf, linenr_T start, linenr_T end, int retlist, typval_T *rettv);
static linenr_T tv_get_lnum_buf(const typval_T *const tv, const buf_T *const buf) FUNC_ATTR_NONNULL_ARG(1) FUNC_ATTR_WARN_UNUSED_RESULT;
static void f_getbufline(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getbufvar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getchar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getcharmod(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getcharsearch(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getcmdline(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getcmdpos(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getcmdtype(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getcmdwintype(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getcompletion(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getcwd(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getfontname(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getfperm(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getfsize(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getftime(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getftype(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getline(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void get_qf_loc_list(int is_qf, win_T *wp, typval_T *what_arg, typval_T *rettv);
static void f_getloclist(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getmatches(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getpid(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void getpos_both(typval_T *argvars, typval_T *rettv, _Bool getcurpos);
static void f_getcurpos(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getpos(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getqflist(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getreg(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getregtype(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static dict_T *get_tabpage_info(tabpage_T *tp, int tp_idx);
static void f_gettabinfo(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_gettabvar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_gettabwinvar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static dict_T *get_win_info(win_T *wp, int16_t tpnr, int16_t winnr);
static void f_getwininfo(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getwinposx(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_getwinposy(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static win_T *find_win_by_nr(typval_T *vp, tabpage_T *tp );
static win_T *find_tabwin(typval_T *wvp, typval_T *tvp);
static void f_getwinvar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void getwinvar(typval_T *argvars, typval_T *rettv, int off );
static void f_glob(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_globpath(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_glob2regpat(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_has(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_has_key(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_haslocaldir(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_hasmapto(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_histadd(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_histdel(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_histget(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_histnr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_hlID(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_hlexists(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_hostname(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_iconv(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_indent(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_index(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_input(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_inputdialog(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_inputlist(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_inputrestore(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_inputsave(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_inputsecret(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_insert(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_invert(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_isdirectory(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_islocked(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void dict_list(typval_T *const tv, typval_T *const rettv, const DictListType what);
static void f_id(typval_T *argvars, typval_T *rettv, FunPtr fptr) FUNC_ATTR_NONNULL_ALL;
static void f_items(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_jobpid(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_jobresize(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static char **tv_to_argv(typval_T *cmd_tv, const char **cmd, _Bool *executable);
static void f_jobstart(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_jobstop(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_jobwait(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_join(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_json_decode(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_json_encode(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_keys(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_last_buffer_nr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_len(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void libcall_common(typval_T *argvars, typval_T *rettv, int out_type);
static void f_libcall(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_libcallnr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_line(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_line2byte(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_lispindent(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_localtime(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void get_maparg(typval_T *argvars, typval_T *rettv, int exact);
static void f_luaeval(typval_T *argvars, typval_T *rettv, FunPtr fptr) FUNC_ATTR_NONNULL_ALL;
static void f_map(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_maparg(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_mapcheck(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void find_some_match(typval_T *const argvars, typval_T *const rettv, const SomeMatchType type);
static void f_match(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_matchadd(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_matchaddpos(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_matcharg(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_matchdelete(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_matchend(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_matchlist(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_matchstr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_matchstrpos(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void max_min(const typval_T *const tv, typval_T *const rettv, const _Bool domax) FUNC_ATTR_NONNULL_ALL;
static void f_max(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_min(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_mkdir(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_mode(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_msgpackdump(typval_T *argvars, typval_T *rettv, FunPtr fptr) FUNC_ATTR_NONNULL_ALL;
static void f_msgpackparse(typval_T *argvars, typval_T *rettv, FunPtr fptr) FUNC_ATTR_NONNULL_ALL;
static void f_nextnonblank(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_nr2char(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_or(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_pathshorten(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_pow(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_prevnonblank(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_printf(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_pumvisible(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_pyeval(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_py3eval(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_range(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_readfile(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static int list2proftime(typval_T *arg, proftime_T *tm) FUNC_ATTR_NONNULL_ALL;
static void f_reltime(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_reltimestr(typval_T *argvars, typval_T *rettv, FunPtr fptr) FUNC_ATTR_NONNULL_ALL;
static void f_remove(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_rename(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_repeat(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_resolve(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_reverse(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static int get_search_arg(typval_T *varp, int *flagsp);
static int search_cmn(typval_T *argvars, pos_T *match_pos, int *flagsp);
static void f_rpcnotify(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_rpcrequest(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_rpcstart(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_rpcstop(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_screenattr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_screenchar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_screencol(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_screenrow(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_search(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_searchdecl(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static int searchpair_cmn(typval_T *argvars, pos_T *match_pos);
static void f_searchpair(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_searchpairpos(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_searchpos(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_serverlist(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_serverstart(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_serverstop(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_setbufvar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_setcharsearch(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_setcmdpos(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_setfperm(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_setline(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void set_qf_ll_list(win_T *wp, typval_T *args, typval_T *rettv) FUNC_ATTR_NONNULL_ARG(2, 3);
static void f_setloclist(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_setmatches(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_setpos(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_setqflist(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_setreg(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_settabvar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_settabwinvar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_setwinvar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void setwinvar(typval_T *argvars, typval_T *rettv, int off);
static void f_sha256(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_shellescape(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_shiftwidth(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_simplify(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_sockconnect(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static int item_compare(const void *s1, const void *s2, _Bool keep_zero);
static int item_compare_keeping_zero(const void *s1, const void *s2);
static int item_compare_not_keeping_zero(const void *s1, const void *s2);
static int item_compare2(const void *s1, const void *s2, _Bool keep_zero);
static int item_compare2_keeping_zero(const void *s1, const void *s2);
static int item_compare2_not_keeping_zero(const void *s1, const void *s2);
static void do_sort_uniq(typval_T *argvars, typval_T *rettv, _Bool sort);
static void f_sort(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_stdioopen(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_uniq(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_reltimefloat(typval_T *argvars, typval_T *rettv, FunPtr fptr) FUNC_ATTR_NONNULL_ALL;
static void f_soundfold(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_spellbadword(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_spellsuggest(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_split(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_str2float(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_str2nr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_strftime(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_strgetchar(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_stridx(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_string(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_strlen(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_strchars(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_strdisplaywidth(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_strwidth(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_strcharpart(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_strpart(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_strridx(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_strtrans(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_submatch(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_substitute(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_synID(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_synIDattr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_synIDtrans(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_synconcealed(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_synstack(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static list_T *string_to_list(const char *str, size_t len, const _Bool keepempty);
static void get_system_output_as_rettv(typval_T *argvars, typval_T *rettv, _Bool retlist);
static void f_system(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_systemlist(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_tabpagebuflist(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_tabpagenr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static int get_winnr(tabpage_T *tp, typval_T *argvar);
static void f_tabpagewinnr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_tagfiles(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_taglist(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_tempname(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_termopen(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_test_garbagecollect_now(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static _Bool set_ref_in_callback(Callback *callback, int copyID, ht_stack_T **ht_stack, list_stack_T **list_stack);
static _Bool set_ref_in_callback_reader(CallbackReader *reader, int copyID, ht_stack_T **ht_stack, list_stack_T **list_stack);
static void add_timer_info(typval_T *rettv, timer_T *timer);
static void add_timer_info_all(typval_T *rettv);
static void f_timer_info(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_timer_pause(typval_T *argvars, typval_T *unused, FunPtr fptr);
static void f_timer_start(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_timer_stop(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_timer_stopall(typval_T *argvars, typval_T *unused, FunPtr fptr);
static void timer_due_cb(TimeWatcher *tw, void *data);
static void timer_stop(timer_T *timer);
static void timer_close_cb(TimeWatcher *tw, void *data);
static void timer_decref(timer_T *timer);
static void timer_stop_all(void);
static void f_tolower(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_toupper(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_tr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_type(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_undofile(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_undotree(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_values(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_virtcol(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_visualmode(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_wildmenumode(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_win_findbuf(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_win_getid(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_win_gotoid(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_win_id2tabwin(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_win_id2win(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_winbufnr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_wincol(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_winheight(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_winline(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_winnr(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_winrestcmd(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_winrestview(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_winsaveview(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static _Bool write_list(FileDescriptor *const fp, const list_T *const list, const _Bool binary) FUNC_ATTR_NONNULL_ARG(1);
static char *save_tv_as_string(typval_T *tv, ptrdiff_t *const len, _Bool endnl) FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_ALL;
static void f_winwidth(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_wordcount(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_writefile(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static void f_xor(typval_T *argvars, typval_T *rettv, FunPtr fptr);
static int list2fpos(typval_T *arg, pos_T *posp, int *fnump, colnr_T *curswantp);
static int get_env_len(const char_u **arg);
static int get_id_len(const char **const arg);
static int get_name_len(const char **const arg, char **alias, int evaluate, int verbose);
static const char_u *find_name_end(const char_u *arg, const char_u **expr_start, const char_u **expr_end, int flags);
static char_u *make_expanded_name(const char_u *in_start, char_u *expr_start, char_u *expr_end, char_u *in_end);
static int eval_isnamec(int c);
static int eval_isnamec1(int c);
static int get_var_tv(const char *name, int len, typval_T *rettv, dictitem_T **dip, int verbose, int no_autoload );
static void check_vars(const char *name, size_t len);
static int handle_subscript(const char **const arg, typval_T *rettv, int evaluate, int verbose );
static dictitem_T *find_var(const char *const name, const size_t name_len, hashtab_T **htp, int no_autoload);
static dictitem_T *find_var_in_ht(hashtab_T *const ht, int htname, const char *const varname, const size_t varname_len, int no_autoload) FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL;
static funccall_T *get_funccal(void);
static hashtab_T *get_funccal_args_ht(void);
static hashtab_T *get_funccal_local_ht(void);
static hashtab_T *find_var_ht_dict(const char *name, const size_t name_len, const char **varname, dict_T **d);
static hashtab_T *find_var_ht(const char *name, const size_t name_len, const char **varname);
static void vars_clear_ext(hashtab_T *ht, int free_val);
static void delete_var(hashtab_T *ht, hashitem_T *hi);
static void list_one_var(dictitem_T *v, const char *prefix, int *first);
static void list_one_var_a(const char *prefix, const char *name, const ptrdiff_t name_len, const int type, const char *string, int *first);
static void set_var(const char *name, const size_t name_len, typval_T *const tv, const _Bool copy) FUNC_ATTR_NONNULL_ALL;
static _Bool var_check_fixed(const int flags, const char *name, size_t name_len) FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL;
static const char *find_option_end(const char **const arg, int *const opt_flags);
static char_u *trans_function_name(char_u **pp, int skip, int flags, funcdict_T *fdp, partial_T **partial );
static int eval_fname_script(const char *const p);
static inline _Bool eval_fname_sid(const char *const name) FUNC_ATTR_PURE FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL;
static void list_func_head(ufunc_T *fp, int indent);
static ufunc_T *find_func(const char_u *name);
static _Bool function_exists(const char *const name, _Bool no_deref);
static _Bool builtin_function(const char *name, int len);
static void func_do_profile(ufunc_T *fp);
static void prof_sort_list(FILE *fd, ufunc_T **sorttab, int st_len, char *title, int prefer_self );
static void prof_func_line(FILE *fd, int count, proftime_T *total, proftime_T *self, int prefer_self );
static int prof_total_cmp(const void *s1, const void *s2);
static int prof_self_cmp(const void *s1, const void *s2);
static _Bool script_autoload(const char *const name, const size_t name_len, const _Bool reload);
static char *autoload_name(const char *const name, const size_t name_len) FUNC_ATTR_MALLOC FUNC_ATTR_WARN_UNUSED_RESULT;
static void cat_func_name(char_u *buf, ufunc_T *fp);
static _Bool func_name_refcount(char_u *name);
static _Bool func_remove(ufunc_T *fp);
static void func_clear(ufunc_T *fp, _Bool force);
static void func_free(ufunc_T *fp);
static void func_clear_free(ufunc_T *fp, _Bool force);
static inline _Bool fc_referenced(const funccall_T *const fc) FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL;
static void funccal_unref(funccall_T *fc, ufunc_T *fp, _Bool force);
static int can_free_funccal(funccall_T *fc, int copyID);
static void free_funccal(funccall_T *fc, int free_val );
static void add_nr_var(dict_T *dp, dictitem_T *v, char *name, varnumber_T nr);
static var_flavour_T var_flavour(char_u *varname);
static inline _Bool common_job_callbacks(dict_T *vopts, CallbackReader *on_stdout, CallbackReader *on_stderr, Callback *on_exit);
static Channel *find_job(uint64_t id, _Bool show_error);
static void script_host_eval(char *name, typval_T *argvars, typval_T *rettv);
#include "nvim/func_attr.h"
