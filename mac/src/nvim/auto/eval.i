# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 331 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2







# 1 "/usr/include/assert.h" 1 3 4
# 42 "/usr/include/assert.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 587 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/sys/_symbol_aliasing.h" 1 3 4
# 588 "/usr/include/sys/cdefs.h" 2 3 4
# 653 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/sys/_posix_availability.h" 1 3 4
# 654 "/usr/include/sys/cdefs.h" 2 3 4
# 43 "/usr/include/assert.h" 2 3 4
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/float.h" 1 3 4
# 10 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/inttypes.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/inttypes.h" 3 4
# 1 "/usr/include/inttypes.h" 1 3 4
# 224 "/usr/include/inttypes.h" 3 4
# 1 "/usr/include/Availability.h" 1 3 4
# 190 "/usr/include/Availability.h" 3 4
# 1 "/usr/include/AvailabilityInternal.h" 1 3 4
# 191 "/usr/include/Availability.h" 2 3 4
# 225 "/usr/include/inttypes.h" 2 3 4

# 1 "/usr/include/_types.h" 1 3 4
# 27 "/usr/include/_types.h" 3 4
# 1 "/usr/include/sys/_types.h" 1 3 4
# 33 "/usr/include/sys/_types.h" 3 4
# 1 "/usr/include/machine/_types.h" 1 3 4
# 32 "/usr/include/machine/_types.h" 3 4
# 1 "/usr/include/i386/_types.h" 1 3 4
# 37 "/usr/include/i386/_types.h" 3 4
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 70 "/usr/include/i386/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef long int __darwin_ptrdiff_t;







typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 33 "/usr/include/machine/_types.h" 2 3 4
# 34 "/usr/include/sys/_types.h" 2 3 4
# 55 "/usr/include/sys/_types.h" 3 4
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];


# 1 "/usr/include/sys/_pthread/_pthread_types.h" 1 3 4
# 57 "/usr/include/sys/_pthread/_pthread_types.h" 3 4
struct __darwin_pthread_handler_rec {
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};

struct _opaque_pthread_attr_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_cond_t {
 long __sig;
 char __opaque[40];
};

struct _opaque_pthread_condattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_mutex_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_mutexattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_once_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_rwlock_t {
 long __sig;
 char __opaque[192];
};

struct _opaque_pthread_rwlockattr_t {
 long __sig;
 char __opaque[16];
};

struct _opaque_pthread_t {
 long __sig;
 struct __darwin_pthread_handler_rec *__cleanup_stack;
 char __opaque[8176];
};

typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
# 81 "/usr/include/sys/_types.h" 2 3 4
# 28 "/usr/include/_types.h" 2 3 4
# 39 "/usr/include/_types.h" 3 4
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;
# 227 "/usr/include/inttypes.h" 2 3 4
# 1 "/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 33 "/usr/include/sys/_types/_wchar_t.h" 3 4
typedef __darwin_wchar_t wchar_t;
# 228 "/usr/include/inttypes.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stdint.h" 1 3 4
# 63 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 18 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/sys/_types/_int8_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int8_t.h" 3 4
typedef signed char int8_t;
# 19 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/sys/_types/_int16_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int16_t.h" 3 4
typedef short int16_t;
# 20 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/sys/_types/_int32_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int32_t.h" 3 4
typedef int int32_t;
# 21 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/sys/_types/_int64_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int64_t.h" 3 4
typedef long long int64_t;
# 22 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/_types/_uint8_t.h" 1 3 4
# 31 "/usr/include/_types/_uint8_t.h" 3 4
typedef unsigned char uint8_t;
# 24 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint16_t.h" 1 3 4
# 31 "/usr/include/_types/_uint16_t.h" 3 4
typedef unsigned short uint16_t;
# 25 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint32_t.h" 1 3 4
# 31 "/usr/include/_types/_uint32_t.h" 3 4
typedef unsigned int uint32_t;
# 26 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint64_t.h" 1 3 4
# 31 "/usr/include/_types/_uint64_t.h" 3 4
typedef unsigned long long uint64_t;
# 27 "/usr/include/stdint.h" 2 3 4


typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;






# 1 "/usr/include/sys/_types/_intptr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_intptr_t.h" 3 4
typedef __darwin_intptr_t intptr_t;
# 54 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/sys/_types/_uintptr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_uintptr_t.h" 3 4
typedef unsigned long uintptr_t;
# 55 "/usr/include/stdint.h" 2 3 4



# 1 "/usr/include/_types/_intmax_t.h" 1 3 4
# 32 "/usr/include/_types/_intmax_t.h" 3 4
typedef long int intmax_t;
# 59 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uintmax_t.h" 1 3 4
# 32 "/usr/include/_types/_uintmax_t.h" 3 4
typedef long unsigned int uintmax_t;
# 60 "/usr/include/stdint.h" 2 3 4
# 64 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stdint.h" 2 3 4
# 230 "/usr/include/inttypes.h" 2 3 4




__attribute__((availability(macosx,introduced=10.4)))
extern intmax_t
imaxabs(intmax_t j);


typedef struct {
 intmax_t quot;
 intmax_t rem;
} imaxdiv_t;

__attribute__((availability(macosx,introduced=10.4)))
extern imaxdiv_t
imaxdiv(intmax_t __numer, intmax_t __denom);


__attribute__((availability(macosx,introduced=10.4)))
extern intmax_t
strtoimax(const char * restrict __nptr,
   char ** restrict __endptr,
   int __base);

__attribute__((availability(macosx,introduced=10.4)))
extern uintmax_t
strtoumax(const char * restrict __nptr,
   char ** restrict __endptr,
   int __base);


__attribute__((availability(macosx,introduced=10.4)))
extern intmax_t
wcstoimax(const wchar_t * restrict __nptr,
   wchar_t ** restrict __endptr,
   int __base);

__attribute__((availability(macosx,introduced=10.4)))
extern uintmax_t
wcstoumax(const wchar_t * restrict __nptr,
   wchar_t ** restrict __endptr,
   int __base);
# 31 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/inttypes.h" 2 3 4
# 11 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stdarg.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 50 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 12 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/usr/include/string.h" 1 3 4
# 64 "/usr/include/string.h" 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_size_t.h" 3 4
typedef __darwin_size_t size_t;
# 65 "/usr/include/string.h" 2 3 4
# 1 "/usr/include/sys/_types/_null.h" 1 3 4
# 66 "/usr/include/string.h" 2 3 4




void *memchr(const void *__s, int __c, size_t __n);
int memcmp(const void *__s1, const void *__s2, size_t __n);
void *memcpy(void *__dst, const void *__src, size_t __n);
void *memmove(void *__dst, const void *__src, size_t __len);
void *memset(void *__b, int __c, size_t __len);
char *strcat(char *__s1, const char *__s2);
char *strchr(const char *__s, int __c);
int strcmp(const char *__s1, const char *__s2);
int strcoll(const char *__s1, const char *__s2);
char *strcpy(char *__dst, const char *__src);
size_t strcspn(const char *__s, const char *__charset);
char *strerror(int __errnum) __asm("_" "strerror" );
size_t strlen(const char *__s);
char *strncat(char *__s1, const char *__s2, size_t __n);
int strncmp(const char *__s1, const char *__s2, size_t __n);
char *strncpy(char *__dst, const char *__src, size_t __n);
char *strpbrk(const char *__s, const char *__charset);
char *strrchr(const char *__s, int __c);
size_t strspn(const char *__s, const char *__charset);
char *strstr(const char *__big, const char *__little);
char *strtok(char *__str, const char *__sep);
size_t strxfrm(char *__s1, const char *__s2, size_t __n);
# 104 "/usr/include/string.h" 3 4
char *strtok_r(char *__str, const char *__sep, char **__lasts);
# 116 "/usr/include/string.h" 3 4
int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen);
char *strdup(const char *__s1);
void *memccpy(void *__dst, const void *__src, int __c, size_t __n);
# 130 "/usr/include/string.h" 3 4
char *stpcpy(char *__dst, const char *__src);
char *stpncpy(char *__dst, const char *__src, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
char *strndup(const char *__s1, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
size_t strnlen(const char *__s1, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
char *strsignal(int __sig);







# 1 "/usr/include/sys/_types/_rsize_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_rsize_t.h" 3 4
typedef __darwin_size_t rsize_t;
# 142 "/usr/include/string.h" 2 3 4
# 1 "/usr/include/sys/_types/_errno_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_errno_t.h" 3 4
typedef int errno_t;
# 143 "/usr/include/string.h" 2 3 4


errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n) __attribute__((availability(macosx,introduced=10.9)));







# 1 "/usr/include/sys/_types/_ssize_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_ssize_t.h" 3 4
typedef __darwin_ssize_t ssize_t;
# 153 "/usr/include/string.h" 2 3 4


void *memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len) __attribute__((availability(macosx,introduced=10.7)));
void memset_pattern4(void *__b, const void *__pattern4, size_t __len) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern8(void *__b, const void *__pattern8, size_t __len) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern16(void *__b, const void *__pattern16, size_t __len) __attribute__((availability(macosx,introduced=10.5)));

char *strcasestr(const char *__big, const char *__little);
char *strnstr(const char *__big, const char *__little, size_t __len);
size_t strlcat(char *__dst, const char *__source, size_t __size);
size_t strlcpy(char *__dst, const char *__source, size_t __size);
void strmode(int __mode, char *__bp);
char *strsep(char **__stringp, const char *__delim);


void swab(const void * restrict, void * restrict, ssize_t);


__attribute__((availability(macosx,introduced=10.12.1))) __attribute__((availability(ios,introduced=10.1)))
__attribute__((availability(tvos,introduced=10.0.1))) __attribute__((availability(watchos,introduced=3.1)))

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len);








# 1 "/usr/include/strings.h" 1 3 4
# 70 "/usr/include/strings.h" 3 4
int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t) ;
void bzero(void *, size_t) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;


int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);





int ffsl(long) __attribute__((availability(macosx,introduced=10.5)));
int ffsll(long long) __attribute__((availability(macosx,introduced=10.9)));
int fls(int) __attribute__((availability(macosx,introduced=10.5)));
int flsl(long) __attribute__((availability(macosx,introduced=10.5)));
int flsll(long long) __attribute__((availability(macosx,introduced=10.9)));



# 1 "/usr/include/string.h" 1 3 4
# 93 "/usr/include/strings.h" 2 3 4
# 183 "/usr/include/string.h" 2 3 4
# 192 "/usr/include/string.h" 3 4
# 1 "/usr/include/secure/_string.h" 1 3 4
# 33 "/usr/include/secure/_string.h" 3 4
# 1 "/usr/include/secure/_common.h" 1 3 4
# 34 "/usr/include/secure/_string.h" 2 3 4
# 193 "/usr/include/string.h" 2 3 4
# 13 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 65 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/sys/wait.h" 1 3 4
# 79 "/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;






# 1 "/usr/include/sys/_types/_pid_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_pid_t.h" 3 4
typedef __darwin_pid_t pid_t;
# 90 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/_types/_id_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_id_t.h" 3 4
typedef __darwin_id_t id_t;
# 91 "/usr/include/sys/wait.h" 2 3 4
# 109 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/sys/signal.h" 1 3 4
# 73 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/sys/appleapiopts.h" 1 3 4
# 74 "/usr/include/sys/signal.h" 2 3 4








# 1 "/usr/include/machine/signal.h" 1 3 4
# 32 "/usr/include/machine/signal.h" 3 4
# 1 "/usr/include/i386/signal.h" 1 3 4
# 39 "/usr/include/i386/signal.h" 3 4
typedef int sig_atomic_t;
# 33 "/usr/include/machine/signal.h" 2 3 4
# 83 "/usr/include/sys/signal.h" 2 3 4
# 146 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/machine/_mcontext.h" 1 3 4
# 29 "/usr/include/machine/_mcontext.h" 3 4
# 1 "/usr/include/i386/_mcontext.h" 1 3 4
# 33 "/usr/include/i386/_mcontext.h" 3 4
# 1 "/usr/include/mach/i386/_structs.h" 1 3 4
# 43 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_thread_state
{
    unsigned int __eax;
    unsigned int __ebx;
    unsigned int __ecx;
    unsigned int __edx;
    unsigned int __edi;
    unsigned int __esi;
    unsigned int __ebp;
    unsigned int __esp;
    unsigned int __ss;
    unsigned int __eflags;
    unsigned int __eip;
    unsigned int __cs;
    unsigned int __ds;
    unsigned int __es;
    unsigned int __fs;
    unsigned int __gs;
};
# 89 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_control
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
      :2,
    __pc :2,





    __rc :2,






             :1,
      :3;
};
typedef struct __darwin_fp_control __darwin_fp_control_t;
# 147 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_status
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
    __stkflt :1,
    __errsumm :1,
    __c0 :1,
    __c1 :1,
    __c2 :1,
    __tos :3,
    __c3 :1,
    __busy :1;
};
typedef struct __darwin_fp_status __darwin_fp_status_t;
# 191 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_mmst_reg
{
 char __mmst_reg[10];
 char __mmst_rsrv[6];
};
# 210 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_xmm_reg
{
 char __xmm_reg[16];
};
# 232 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_float_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
};


struct __darwin_i386_avx_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
};
# 402 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_exception_state
{
 __uint16_t __trapno;
 __uint16_t __cpu;
 __uint32_t __err;
 __uint32_t __faultvaddr;
};
# 422 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state32
{
 unsigned int __dr0;
 unsigned int __dr1;
 unsigned int __dr2;
 unsigned int __dr3;
 unsigned int __dr4;
 unsigned int __dr5;
 unsigned int __dr6;
 unsigned int __dr7;
};
# 454 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_thread_state64
{
 __uint64_t __rax;
 __uint64_t __rbx;
 __uint64_t __rcx;
 __uint64_t __rdx;
 __uint64_t __rdi;
 __uint64_t __rsi;
 __uint64_t __rbp;
 __uint64_t __rsp;
 __uint64_t __r8;
 __uint64_t __r9;
 __uint64_t __r10;
 __uint64_t __r11;
 __uint64_t __r12;
 __uint64_t __r13;
 __uint64_t __r14;
 __uint64_t __r15;
 __uint64_t __rip;
 __uint64_t __rflags;
 __uint64_t __cs;
 __uint64_t __fs;
 __uint64_t __gs;
};
# 509 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_float_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
};


struct __darwin_x86_avx_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
};
# 751 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_exception_state64
{
    __uint16_t __trapno;
    __uint16_t __cpu;
    __uint32_t __err;
    __uint64_t __faultvaddr;
};
# 771 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state64
{
 __uint64_t __dr0;
 __uint64_t __dr1;
 __uint64_t __dr2;
 __uint64_t __dr3;
 __uint64_t __dr4;
 __uint64_t __dr5;
 __uint64_t __dr6;
 __uint64_t __dr7;
};
# 34 "/usr/include/i386/_mcontext.h" 2 3 4




struct __darwin_mcontext32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_float_state __fs;
};


struct __darwin_mcontext_avx32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx_state __fs;
};
# 76 "/usr/include/i386/_mcontext.h" 3 4
struct __darwin_mcontext64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};


struct __darwin_mcontext_avx64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx_state64 __fs;
};
# 115 "/usr/include/i386/_mcontext.h" 3 4
typedef struct __darwin_mcontext64 *mcontext_t;
# 30 "/usr/include/machine/_mcontext.h" 2 3 4
# 147 "/usr/include/sys/signal.h" 2 3 4

# 1 "/usr/include/sys/_pthread/_pthread_attr_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_attr_t.h" 3 4
typedef __darwin_pthread_attr_t pthread_attr_t;
# 149 "/usr/include/sys/signal.h" 2 3 4

# 1 "/usr/include/sys/_types/_sigaltstack.h" 1 3 4
# 36 "/usr/include/sys/_types/_sigaltstack.h" 3 4
struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
typedef struct __darwin_sigaltstack stack_t;
# 151 "/usr/include/sys/signal.h" 2 3 4
# 1 "/usr/include/sys/_types/_ucontext.h" 1 3 4
# 34 "/usr/include/sys/_types/_ucontext.h" 3 4
struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext64 *uc_mcontext;



};


typedef struct __darwin_ucontext ucontext_t;
# 152 "/usr/include/sys/signal.h" 2 3 4


# 1 "/usr/include/sys/_types/_sigset_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_sigset_t.h" 3 4
typedef __darwin_sigset_t sigset_t;
# 155 "/usr/include/sys/signal.h" 2 3 4

# 1 "/usr/include/sys/_types/_uid_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_uid_t.h" 3 4
typedef __darwin_uid_t uid_t;
# 157 "/usr/include/sys/signal.h" 2 3 4

union sigval {

 int sival_int;
 void *sival_ptr;
};





struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 269 "/usr/include/sys/signal.h" 3 4
union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
         void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};
# 331 "/usr/include/sys/signal.h" 3 4
typedef void (*sig_t)(int);
# 348 "/usr/include/sys/signal.h" 3 4
struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};
# 367 "/usr/include/sys/signal.h" 3 4
struct sigstack {
 char *ss_sp;
 int ss_onstack;
};
# 390 "/usr/include/sys/signal.h" 3 4
void (*signal(int, void (*)(int)))(int);
# 110 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/resource.h" 1 3 4
# 80 "/usr/include/sys/resource.h" 3 4
# 1 "/usr/include/sys/_types/_timeval.h" 1 3 4
# 30 "/usr/include/sys/_types/_timeval.h" 3 4
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 81 "/usr/include/sys/resource.h" 2 3 4








typedef __uint64_t rlim_t;
# 152 "/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 163 "/usr/include/sys/resource.h" 3 4
 long ru_maxrss;

 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;


};
# 192 "/usr/include/sys/resource.h" 3 4
typedef void *rusage_info_t;

struct rusage_info_v0 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
};

struct rusage_info_v1 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
};

struct rusage_info_v2 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
};

struct rusage_info_v3 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
};

typedef struct rusage_info_v3 rusage_info_current;
# 325 "/usr/include/sys/resource.h" 3 4
struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};
# 353 "/usr/include/sys/resource.h" 3 4
struct proc_rlimit_control_wakeupmon {
 uint32_t wm_flags;
 int32_t wm_rate;
};
# 385 "/usr/include/sys/resource.h" 3 4
int getpriority(int, id_t);

int getiopolicy_np(int, int) __attribute__((availability(macosx,introduced=10.5)));

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int) __attribute__((availability(macosx,introduced=10.5)));

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );
# 111 "/usr/include/sys/wait.h" 2 3 4
# 186 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/machine/endian.h" 1 3 4
# 35 "/usr/include/machine/endian.h" 3 4
# 1 "/usr/include/i386/endian.h" 1 3 4
# 99 "/usr/include/i386/endian.h" 3 4
# 1 "/usr/include/sys/_endian.h" 1 3 4
# 130 "/usr/include/sys/_endian.h" 3 4
# 1 "/usr/include/libkern/_OSByteOrder.h" 1 3 4
# 66 "/usr/include/libkern/_OSByteOrder.h" 3 4
# 1 "/usr/include/libkern/i386/_OSByteOrder.h" 1 3 4
# 44 "/usr/include/libkern/i386/_OSByteOrder.h" 3 4
static inline
__uint16_t
_OSSwapInt16(
    __uint16_t _data
)
{
    return ((__uint16_t)((_data << 8) | (_data >> 8)));
}

static inline
__uint32_t
_OSSwapInt32(
    __uint32_t _data
)
{

    return __builtin_bswap32(_data);




}


static inline
__uint64_t
_OSSwapInt64(
    __uint64_t _data
)
{
    return __builtin_bswap64(_data);
}
# 67 "/usr/include/libkern/_OSByteOrder.h" 2 3 4
# 131 "/usr/include/sys/_endian.h" 2 3 4
# 100 "/usr/include/i386/endian.h" 2 3 4
# 36 "/usr/include/machine/endian.h" 2 3 4
# 187 "/usr/include/sys/wait.h" 2 3 4







union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
    w_Coredump:1,
    w_Retcode:8,
    w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
    w_Stopsig:8,
    w_Filler:16;






 } w_S;
};
# 248 "/usr/include/sys/wait.h" 3 4
pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);
# 66 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/alloca.h" 1 3 4
# 32 "/usr/include/alloca.h" 3 4
void *alloca(size_t);
# 68 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/sys/_types/_ct_rune_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_ct_rune_t.h" 3 4
typedef __darwin_ct_rune_t ct_rune_t;
# 77 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/sys/_types/_rune_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_rune_t.h" 3 4
typedef __darwin_rune_t rune_t;
# 78 "/usr/include/stdlib.h" 2 3 4


# 1 "/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 81 "/usr/include/stdlib.h" 2 3 4

typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;
# 117 "/usr/include/stdlib.h" 3 4
extern int __mb_cur_max;
# 128 "/usr/include/stdlib.h" 3 4
void abort(void) __attribute__((noreturn));
int abs(int) __attribute__((const));
int atexit(void (* _Nonnull)(void));
double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (* _Nonnull __compar)(const void *, const void *));
void *calloc(size_t __count, size_t __size) __attribute__((__warn_unused_result__));
div_t div(int, int) __attribute__((const));
void exit(int) __attribute__((noreturn));
void free(void *);
char *getenv(const char *);
long labs(long) __attribute__((const));
ldiv_t ldiv(long, long) __attribute__((const));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);

void *malloc(size_t __size) __attribute__((__warn_unused_result__));
int mblen(const char *__s, size_t __n);
size_t mbstowcs(wchar_t * restrict , const char * restrict, size_t);
int mbtowc(wchar_t * restrict, const char * restrict, size_t);
int posix_memalign(void **__memptr, size_t __alignment, size_t __size) __attribute__((availability(macosx,introduced=10.6)));
void qsort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));
int rand(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
void *realloc(void *__ptr, size_t __size) __attribute__((__warn_unused_result__));
void srand(unsigned) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *__str, char **__endptr, int __base);
long double
  strtold(const char *, char **);

long long
  strtoll(const char *__str, char **__endptr, int __base);

unsigned long
  strtoul(const char *__str, char **__endptr, int __base);

unsigned long long
  strtoull(const char *__str, char **__endptr, int __base);
# 184 "/usr/include/stdlib.h" 3 4
__attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead.")))
__attribute__((availability(macosx,introduced=10.0)))
__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
int system(const char *) __asm("_" "system" );



size_t wcstombs(char * restrict, const wchar_t * restrict, size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((noreturn));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *restrict, int *restrict);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *restrict, int *restrict);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
char *mktemp(char *);
int mkstemp(char *);
long mrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
long nrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
int posix_openpt(int);
char *ptsname(int);
int putenv(char *) __asm("_" "putenv" );
long random(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
int rand_r(unsigned *) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

char *realpath(const char * restrict, char * restrict) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char * __name, const char * __value, int __overwrite) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );







# 1 "/usr/include/machine/types.h" 1 3 4
# 35 "/usr/include/machine/types.h" 3 4
# 1 "/usr/include/i386/types.h" 1 3 4
# 81 "/usr/include/i386/types.h" 3 4
# 1 "/usr/include/sys/_types/_u_int8_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int8_t.h" 3 4
typedef unsigned char u_int8_t;
# 82 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_int16_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int16_t.h" 3 4
typedef unsigned short u_int16_t;
# 83 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_int32_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int32_t.h" 3 4
typedef unsigned int u_int32_t;
# 84 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_int64_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int64_t.h" 3 4
typedef unsigned long long u_int64_t;
# 85 "/usr/include/i386/types.h" 2 3 4


typedef int64_t register_t;
# 97 "/usr/include/i386/types.h" 3 4
typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;







typedef u_int64_t syscall_arg_t;
# 36 "/usr/include/machine/types.h" 2 3 4
# 252 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/sys/_types/_dev_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_dev_t.h" 3 4
typedef __darwin_dev_t dev_t;
# 254 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/sys/_types/_mode_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_mode_t.h" 3 4
typedef __darwin_mode_t mode_t;
# 255 "/usr/include/stdlib.h" 2 3 4


uint32_t arc4random(void);
void arc4random_addrandom(unsigned char * , int )
    __attribute__((availability(macosx,introduced=10.0))) __attribute__((availability(macosx,deprecated=10.12,message="use arc4random_stir")))
    __attribute__((availability(ios,introduced=2.0))) __attribute__((availability(ios,deprecated=10.0,message="use arc4random_stir")))
    __attribute__((availability(tvos,introduced=2.0))) __attribute__((availability(tvos,deprecated=10.0,message="use arc4random_stir")))
    __attribute__((availability(watchos,introduced=1.0))) __attribute__((availability(watchos,deprecated=3.0,message="use arc4random_stir")));
void arc4random_buf(void * __buf, size_t __nbytes) __attribute__((availability(macosx,introduced=10.7)));
void arc4random_stir(void);
uint32_t
  arc4random_uniform(uint32_t __upper_bound) __attribute__((availability(macosx,introduced=10.7)));

int atexit_b(void (^ _Nonnull)(void)) __attribute__((availability(macosx,introduced=10.6)));
void *bsearch_b(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (^ _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));



char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" "$1050") __attribute__((availability(macosx,introduced=10.0,deprecated=10.5,message="Use posix_spawn APIs instead."))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);

int heapsort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));

int heapsort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

int mergesort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));

int mergesort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

void psort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

void psort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

void psort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* _Nonnull __compar)(void *, const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

void qsort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

void qsort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* _Nonnull __compar)(void *, const void *, const void *));
int radixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
void setprogname(const char *);
int sradixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
void sranddev(void);
void srandomdev(void);
void *reallocf(void *__ptr, size_t __size);

long long
  strtoq(const char *__str, char **__endptr, int __base);
unsigned long long
  strtouq(const char *__str, char **__endptr, int __base);

extern char *suboptarg;
void *valloc(size_t);
# 14 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stdbool.h" 1 3 4
# 15 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/usr/include/math.h" 1 3 4
# 44 "/usr/include/math.h" 3 4
    typedef float float_t;
    typedef double double_t;
# 111 "/usr/include/math.h" 3 4
extern int __math_errhandling(void);
# 144 "/usr/include/math.h" 3 4
extern int __fpclassifyf(float);
extern int __fpclassifyd(double);
extern int __fpclassifyl(long double);
# 188 "/usr/include/math.h" 3 4
inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float);
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double);
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double);
inline __attribute__ ((__always_inline__)) int __inline_isinff(float);
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double);
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnand(double);
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double);
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double);
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float);
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double);
inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double);

inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float __x) {
    return __x == __x && __builtin_fabsf(__x) != __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double __x) {
    return __x == __x && __builtin_fabs(__x) != __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double __x) {
    return __x == __x && __builtin_fabsl(__x) != __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isinff(float __x) {
    return __builtin_fabsf(__x) == __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double __x) {
    return __builtin_fabs(__x) == __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double __x) {
    return __builtin_fabsl(__x) == __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnand(double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float __x) {
    union { float __f; unsigned int __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 31);
}
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double __x) {
    union { double __f; unsigned long long __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 63);
}

inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double __x) {
    union {
        long double __ld;
        struct{ unsigned long long __m; unsigned short __sexp; } __p;
    } __u;
    __u.__ld = __x;
    return (int)(__u.__p.__sexp >> 15);
}







inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float __x) {
    return __inline_isfinitef(__x) && __builtin_fabsf(__x) >= 1.17549435e-38F;
}
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double __x) {
    return __inline_isfinited(__x) && __builtin_fabs(__x) >= 2.2250738585072014e-308;
}
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double __x) {
    return __inline_isfinitel(__x) && __builtin_fabsl(__x) >= 3.36210314311209350626e-4932L;
}
# 322 "/usr/include/math.h" 3 4
extern float acosf(float);
extern double acos(double);
extern long double acosl(long double);

extern float asinf(float);
extern double asin(double);
extern long double asinl(long double);

extern float atanf(float);
extern double atan(double);
extern long double atanl(long double);

extern float atan2f(float, float);
extern double atan2(double, double);
extern long double atan2l(long double, long double);

extern float cosf(float);
extern double cos(double);
extern long double cosl(long double);

extern float sinf(float);
extern double sin(double);
extern long double sinl(long double);

extern float tanf(float);
extern double tan(double);
extern long double tanl(long double);

extern float acoshf(float);
extern double acosh(double);
extern long double acoshl(long double);

extern float asinhf(float);
extern double asinh(double);
extern long double asinhl(long double);

extern float atanhf(float);
extern double atanh(double);
extern long double atanhl(long double);

extern float coshf(float);
extern double cosh(double);
extern long double coshl(long double);

extern float sinhf(float);
extern double sinh(double);
extern long double sinhl(long double);

extern float tanhf(float);
extern double tanh(double);
extern long double tanhl(long double);

extern float expf(float);
extern double exp(double);
extern long double expl(long double);

extern float exp2f(float);
extern double exp2(double);
extern long double exp2l(long double);

extern float expm1f(float);
extern double expm1(double);
extern long double expm1l(long double);

extern float logf(float);
extern double log(double);
extern long double logl(long double);

extern float log10f(float);
extern double log10(double);
extern long double log10l(long double);

extern float log2f(float);
extern double log2(double);
extern long double log2l(long double);

extern float log1pf(float);
extern double log1p(double);
extern long double log1pl(long double);

extern float logbf(float);
extern double logb(double);
extern long double logbl(long double);

extern float modff(float, float *);
extern double modf(double, double *);
extern long double modfl(long double, long double *);

extern float ldexpf(float, int);
extern double ldexp(double, int);
extern long double ldexpl(long double, int);

extern float frexpf(float, int *);
extern double frexp(double, int *);
extern long double frexpl(long double, int *);

extern int ilogbf(float);
extern int ilogb(double);
extern int ilogbl(long double);

extern float scalbnf(float, int);
extern double scalbn(double, int);
extern long double scalbnl(long double, int);

extern float scalblnf(float, long int);
extern double scalbln(double, long int);
extern long double scalblnl(long double, long int);

extern float fabsf(float);
extern double fabs(double);
extern long double fabsl(long double);

extern float cbrtf(float);
extern double cbrt(double);
extern long double cbrtl(long double);

extern float hypotf(float, float);
extern double hypot(double, double);
extern long double hypotl(long double, long double);

extern float powf(float, float);
extern double pow(double, double);
extern long double powl(long double, long double);

extern float sqrtf(float);
extern double sqrt(double);
extern long double sqrtl(long double);

extern float erff(float);
extern double erf(double);
extern long double erfl(long double);

extern float erfcf(float);
extern double erfc(double);
extern long double erfcl(long double);




extern float lgammaf(float);
extern double lgamma(double);
extern long double lgammal(long double);

extern float tgammaf(float);
extern double tgamma(double);
extern long double tgammal(long double);

extern float ceilf(float);
extern double ceil(double);
extern long double ceill(long double);

extern float floorf(float);
extern double floor(double);
extern long double floorl(long double);

extern float nearbyintf(float);
extern double nearbyint(double);
extern long double nearbyintl(long double);

extern float rintf(float);
extern double rint(double);
extern long double rintl(long double);

extern long int lrintf(float);
extern long int lrint(double);
extern long int lrintl(long double);

extern float roundf(float);
extern double round(double);
extern long double roundl(long double);

extern long int lroundf(float);
extern long int lround(double);
extern long int lroundl(long double);




extern long long int llrintf(float);
extern long long int llrint(double);
extern long long int llrintl(long double);

extern long long int llroundf(float);
extern long long int llround(double);
extern long long int llroundl(long double);


extern float truncf(float);
extern double trunc(double);
extern long double truncl(long double);

extern float fmodf(float, float);
extern double fmod(double, double);
extern long double fmodl(long double, long double);

extern float remainderf(float, float);
extern double remainder(double, double);
extern long double remainderl(long double, long double);

extern float remquof(float, float, int *);
extern double remquo(double, double, int *);
extern long double remquol(long double, long double, int *);

extern float copysignf(float, float);
extern double copysign(double, double);
extern long double copysignl(long double, long double);

extern float nanf(const char *);
extern double nan(const char *);
extern long double nanl(const char *);

extern float nextafterf(float, float);
extern double nextafter(double, double);
extern long double nextafterl(long double, long double);

extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);

extern float fdimf(float, float);
extern double fdim(double, double);
extern long double fdiml(long double, long double);

extern float fmaxf(float, float);
extern double fmax(double, double);
extern long double fmaxl(long double, long double);

extern float fminf(float, float);
extern double fmin(double, double);
extern long double fminl(long double, long double);

extern float fmaf(float, float, float);
extern double fma(double, double, double);
extern long double fmal(long double, long double, long double);
# 565 "/usr/include/math.h" 3 4
extern float __inff(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
extern double __inf(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
extern long double __infl(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern float __nan(void) __attribute__((availability(macosx,introduced=10.0)));
# 597 "/usr/include/math.h" 3 4
extern float __exp10f(float) __attribute__((availability(macosx,introduced=10.9)));
extern double __exp10(double) __attribute__((availability(macosx,introduced=10.9)));





inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp);
inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp);
# 614 "/usr/include/math.h" 3 4
extern float __cospif(float) __attribute__((availability(macosx,introduced=10.9)));
extern double __cospi(double) __attribute__((availability(macosx,introduced=10.9)));
extern float __sinpif(float) __attribute__((availability(macosx,introduced=10.9)));
extern double __sinpi(double) __attribute__((availability(macosx,introduced=10.9)));
extern float __tanpif(float) __attribute__((availability(macosx,introduced=10.9)));
extern double __tanpi(double) __attribute__((availability(macosx,introduced=10.9)));
# 645 "/usr/include/math.h" 3 4
inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp);
inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp);






struct __float2 { float __sinval; float __cosval; };
struct __double2 { double __sinval; double __cosval; };

extern struct __float2 __sincosf_stret(float);
extern struct __double2 __sincos_stret(double);
extern struct __float2 __sincospif_stret(float);
extern struct __double2 __sincospi_stret(double);

inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincosf_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincos_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincospif_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincospi_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}







extern double j0(double) __attribute__((availability(macosx,introduced=10.0)));
extern double j1(double) __attribute__((availability(macosx,introduced=10.0)));
extern double jn(int, double) __attribute__((availability(macosx,introduced=10.0)));
extern double y0(double) __attribute__((availability(macosx,introduced=10.0)));
extern double y1(double) __attribute__((availability(macosx,introduced=10.0)));
extern double yn(int, double) __attribute__((availability(macosx,introduced=10.0)));
extern double scalb(double, double);
extern int signgam;
# 751 "/usr/include/math.h" 3 4
extern long int rinttol(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern long int roundtol(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern double drem(double, double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern int finite(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern double gamma(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern double significand(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));


struct exception {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
};

extern int matherr(struct exception *) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
# 16 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/limits.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 64 "/usr/include/limits.h" 3 4
# 1 "/usr/include/machine/limits.h" 1 3 4





# 1 "/usr/include/i386/limits.h" 1 3 4
# 40 "/usr/include/i386/limits.h" 3 4
# 1 "/usr/include/i386/_limits.h" 1 3 4
# 41 "/usr/include/i386/limits.h" 2 3 4
# 7 "/usr/include/machine/limits.h" 2 3 4
# 65 "/usr/include/limits.h" 2 3 4
# 1 "/usr/include/sys/syslimits.h" 1 3 4
# 66 "/usr/include/limits.h" 2 3 4
# 38 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/limits.h" 2 3 4
# 17 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 1
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/util.h" 1
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/object.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/object.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/zone.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/zone.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sysdep.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sysdep.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language/stdc.h" 1
# 11 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language/stdc.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/version_number.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language/stdc.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1






# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/detail/test.h" 1
# 8 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 2
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language/stdc.h" 2
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language/stdcpp.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language/stdcpp.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language/stdcpp.h" 2
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language/objc.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language/objc.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language/objc.h" 2
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/language.h" 2
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/alpha.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/alpha.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/alpha.h" 2
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/arm.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/arm.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/arm.h" 2
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/blackfin.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/blackfin.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/blackfin.h" 2
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/convex.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/convex.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/convex.h" 2
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/ia64.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/ia64.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/ia64.h" 2
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/m68k.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/m68k.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/m68k.h" 2
# 19 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/mips.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/mips.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/mips.h" 2
# 20 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/parisc.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/parisc.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/parisc.h" 2
# 21 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/ppc.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/ppc.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/ppc.h" 2
# 22 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/pyramid.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/pyramid.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/pyramid.h" 2
# 23 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/rs6k.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/rs6k.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/rs6k.h" 2
# 24 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/sparc.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/sparc.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/sparc.h" 2
# 25 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/superh.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/superh.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/superh.h" 2
# 26 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/sys370.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/sys370.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/sys370.h" 2
# 27 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/sys390.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/sys390.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/sys390.h" 2
# 28 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86.h" 1







# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/32.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/32.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/32.h" 2
# 82 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/32.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86.h" 1







# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/32.h" 1
# 9 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/64.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/64.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/64.h" 2
# 45 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/64.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86.h" 1







# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/32.h" 1
# 9 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/64.h" 1
# 10 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 46 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/64.h" 2
# 10 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 83 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/32.h" 2
# 9 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86/64.h" 1
# 10 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/x86.h" 2
# 29 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/z.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/z.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture/z.h" 2
# 30 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/architecture.h" 2
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/borland.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/borland.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/borland.h" 2
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/clang.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/clang.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/clang.h" 2
# 43 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/clang.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/detail/comp_detected.h" 1
# 44 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/clang.h" 2
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/comeau.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/comeau.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/comeau.h" 2
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/compaq.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/compaq.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/compaq.h" 2
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/diab.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/diab.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/diab.h" 2
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/digitalmars.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/digitalmars.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/digitalmars.h" 2
# 19 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/dignus.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/dignus.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/dignus.h" 2
# 20 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/edg.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/edg.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/edg.h" 2
# 21 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/ekopath.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/ekopath.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/ekopath.h" 2
# 22 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/gcc_xml.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/gcc_xml.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/gcc_xml.h" 2
# 23 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/gcc.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/gcc.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/clang.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/gcc.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/gcc.h" 2
# 24 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/greenhills.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/greenhills.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/greenhills.h" 2
# 25 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/hp_acc.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/hp_acc.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/hp_acc.h" 2
# 26 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/iar.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/iar.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/iar.h" 2
# 27 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/ibm.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/ibm.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/ibm.h" 2
# 28 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/intel.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/intel.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/intel.h" 2
# 29 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/kai.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/kai.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/kai.h" 2
# 30 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/llvm.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/llvm.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/clang.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/llvm.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/llvm.h" 2
# 31 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/metaware.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/metaware.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/metaware.h" 2
# 32 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/metrowerks.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/metrowerks.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/metrowerks.h" 2
# 33 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/microtec.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/microtec.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/microtec.h" 2
# 34 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/mpw.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/mpw.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/mpw.h" 2
# 35 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/palm.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/palm.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/palm.h" 2
# 36 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/pgi.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/pgi.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/pgi.h" 2
# 37 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/sgi_mipspro.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/sgi_mipspro.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/sgi_mipspro.h" 2
# 38 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/sunpro.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/sunpro.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/sunpro.h" 2
# 39 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/tendra.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/tendra.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/tendra.h" 2
# 40 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/visualc.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/visualc.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/clang.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/visualc.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/visualc.h" 2
# 41 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/watcom.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/watcom.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler/watcom.h" 2
# 42 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/compiler.h" 2
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/_prefix.h" 1
# 11 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/_prefix.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/detail/_cassert.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/detail/_cassert.h"
# 1 "/usr/include/assert.h" 1 3 4
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/detail/_cassert.h" 2
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/_prefix.h" 2
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/gnu.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/gnu.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/gnu.h" 2




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 51 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 118 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 3 4
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/__stddef_max_align_t.h" 1 3 4
# 32 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/__stddef_max_align_t.h" 3 4
typedef long double max_align_t;
# 119 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 2 3 4
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/gnu.h" 2
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/uc.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/uc.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/uc.h" 2
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/vms.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/vms.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/vms.h" 2
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/zos.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/zos.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/zos.h" 2
# 19 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c.h" 2
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/_prefix.h" 1
# 21 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/_prefix.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/detail/_exception.h" 1
# 22 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/_prefix.h" 2
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/cxx.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/cxx.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/cxx.h" 2
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/dinkumware.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/dinkumware.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/dinkumware.h" 2
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/libcomo.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/libcomo.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/libcomo.h" 2
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/modena.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/modena.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/modena.h" 2
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/msl.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/msl.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/msl.h" 2
# 19 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/roguewave.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/roguewave.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/roguewave.h" 2
# 20 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/sgi.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/sgi.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/sgi.h" 2
# 21 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/stdcpp3.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/stdcpp3.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/stdcpp3.h" 2
# 22 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/stlport.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/stlport.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/stlport.h" 2
# 23 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/vacpp.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/vacpp.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std/vacpp.h" 2
# 24 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/std.h" 2
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library.h" 2
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/aix.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/aix.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/aix.h" 2
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/amigaos.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/amigaos.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/amigaos.h" 2
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/android.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/android.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/android.h" 2
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/beos.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/beos.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/beos.h" 2
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/macos.h" 1
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/macos.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/ios.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/ios.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/ios.h" 2
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/macos.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 21 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/macos.h" 2
# 57 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/macos.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/detail/os_detected.h" 1
# 58 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/macos.h" 2
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 20 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 52 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 11 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 95 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 11 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 95 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 96 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 11 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/free.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 95 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 96 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 97 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 11 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/open.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 95 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 96 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 97 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 98 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 11 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/net.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 95 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 96 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 97 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 98 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 99 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/net.h" 2
# 99 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/open.h" 2
# 98 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 99 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/free.h" 2
# 97 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 98 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 99 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 2
# 96 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 97 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 98 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 99 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 2
# 53 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 54 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 55 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 56 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 57 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 19 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/cygwin.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/cygwin.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/cygwin.h" 2
# 20 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/haiku.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/haiku.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/haiku.h" 2
# 21 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/hpux.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/hpux.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/hpux.h" 2
# 22 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/irix.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/irix.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/irix.h" 2
# 23 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/ios.h" 1
# 24 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/linux.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/linux.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/linux.h" 2
# 25 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/macos.h" 1
# 26 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/os400.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/os400.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/os400.h" 2
# 27 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/qnxnto.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/qnxnto.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/qnxnto.h" 2
# 28 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/solaris.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/solaris.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/solaris.h" 2
# 29 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/unix.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/unix.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/unix.h" 2
# 30 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/vms.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/vms.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/vms.h" 2
# 31 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/windows.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/windows.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/windows.h" 2
# 32 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os.h" 2
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/other.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/other.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/other/endian.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/other/endian.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/other/endian.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/library/c/gnu.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/other/endian.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/macos.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/other/endian.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 1
# 94 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/bsdi.h" 1
# 95 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/dragonfly.h" 1
# 96 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/free.h" 1
# 97 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/open.h" 1
# 98 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd/net.h" 1
# 99 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/bsd.h" 2
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/other/endian.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/android.h" 1
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/other/endian.h" 2
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/other.h" 2
# 19 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/mingw.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/mingw.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/mingw.h" 2
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_desktop.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_desktop.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_desktop.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/windows.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_desktop.h" 2
# 16 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_store.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_store.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_store.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/windows.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_store.h" 2
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_phone.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_phone.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_phone.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/windows.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_phone.h" 2
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_runtime.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_runtime.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/make.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_runtime.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/os/windows.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform/windows_runtime.h" 2
# 19 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/platform.h" 2
# 20 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd.h" 1








# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/x86.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/x86.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/x86/versions.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/x86.h" 2
# 10 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/x86_amd.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/x86_amd.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/x86_amd/versions.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/x86_amd.h" 2
# 11 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/arm.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/arm.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/arm/versions.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/arm.h" 2
# 12 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/ppc.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/ppc.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/ppc/versions.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd/ppc.h" 2
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware/simd.h" 2
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/hardware.h" 2
# 21 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef/version.h" 1
# 23 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/predef.h" 2
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sysdep.h" 2


# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sysdep.h" 2
# 63 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sysdep.h"
    typedef unsigned int _msgpack_atomic_counter_t;
# 82 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sysdep.h"
# 1 "/usr/include/arpa/inet.h" 1 3 4
# 71 "/usr/include/arpa/inet.h" 3 4
# 1 "/usr/include/netinet/in.h" 1 3 4
# 72 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/include/sys/_types/_in_addr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_in_addr_t.h" 3 4
typedef __uint32_t in_addr_t;
# 73 "/usr/include/netinet/in.h" 2 3 4

# 1 "/usr/include/sys/_types/_in_port_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_in_port_t.h" 3 4
typedef __uint16_t in_port_t;
# 75 "/usr/include/netinet/in.h" 2 3 4






# 1 "/usr/include/sys/socket.h" 1 3 4
# 75 "/usr/include/sys/socket.h" 3 4
# 1 "/usr/include/sys/types.h" 1 3 4
# 84 "/usr/include/sys/types.h" 3 4
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;

typedef unsigned long u_long;


typedef unsigned short ushort;
typedef unsigned int uint;


typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;

typedef char * caddr_t;
typedef int32_t daddr_t;



typedef u_int32_t fixpt_t;


# 1 "/usr/include/sys/_types/_blkcnt_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_blkcnt_t.h" 3 4
typedef __darwin_blkcnt_t blkcnt_t;
# 107 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_blksize_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_blksize_t.h" 3 4
typedef __darwin_blksize_t blksize_t;
# 108 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_gid_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_gid_t.h" 3 4
typedef __darwin_gid_t gid_t;
# 109 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_ino_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_ino_t.h" 3 4
typedef __darwin_ino_t ino_t;
# 112 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_ino64_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_ino64_t.h" 3 4
typedef __darwin_ino64_t ino64_t;
# 115 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_key_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_key_t.h" 3 4
typedef __int32_t key_t;
# 118 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/sys/_types/_nlink_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_nlink_t.h" 3 4
typedef __uint16_t nlink_t;
# 120 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_off_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_off_t.h" 3 4
typedef __darwin_off_t off_t;
# 123 "/usr/include/sys/types.h" 2 3 4

typedef int32_t segsz_t;
typedef int32_t swblk_t;
# 161 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/_types/_clock_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_clock_t.h" 3 4
typedef __darwin_clock_t clock_t;
# 162 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_time_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_time_t.h" 3 4
typedef __darwin_time_t time_t;
# 165 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/sys/_types/_useconds_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_useconds_t.h" 3 4
typedef __darwin_useconds_t useconds_t;
# 167 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_suseconds_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_suseconds_t.h" 3 4
typedef __darwin_suseconds_t suseconds_t;
# 168 "/usr/include/sys/types.h" 2 3 4
# 180 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/_types/_fd_def.h" 1 3 4
# 46 "/usr/include/sys/_types/_fd_def.h" 3 4
typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;



static __inline int
__darwin_fd_isset(int _n, const struct fd_set *_p)
{
 return (_p->fds_bits[(unsigned long)_n/(sizeof(__int32_t) * 8)] & ((__int32_t)(((unsigned long)1)<<((unsigned long)_n % (sizeof(__int32_t) * 8)))));
}
# 181 "/usr/include/sys/types.h" 2 3 4




typedef __int32_t fd_mask;








# 1 "/usr/include/sys/_types/_fd_setsize.h" 1 3 4
# 194 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_set.h" 1 3 4
# 195 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_clr.h" 1 3 4
# 196 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_zero.h" 1 3 4
# 197 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_isset.h" 1 3 4
# 198 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_fd_copy.h" 1 3 4
# 201 "/usr/include/sys/types.h" 2 3 4
# 212 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/_pthread/_pthread_cond_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_cond_t.h" 3 4
typedef __darwin_pthread_cond_t pthread_cond_t;
# 213 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_condattr_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_condattr_t.h" 3 4
typedef __darwin_pthread_condattr_t pthread_condattr_t;
# 214 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_mutex_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_mutex_t.h" 3 4
typedef __darwin_pthread_mutex_t pthread_mutex_t;
# 215 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 3 4
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
# 216 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_once_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_once_t.h" 3 4
typedef __darwin_pthread_once_t pthread_once_t;
# 217 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_rwlock_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_rwlock_t.h" 3 4
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
# 218 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 3 4
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
# 219 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_t.h" 3 4
typedef __darwin_pthread_t pthread_t;
# 220 "/usr/include/sys/types.h" 2 3 4



# 1 "/usr/include/sys/_pthread/_pthread_key_t.h" 1 3 4
# 30 "/usr/include/sys/_pthread/_pthread_key_t.h" 3 4
typedef __darwin_pthread_key_t pthread_key_t;
# 224 "/usr/include/sys/types.h" 2 3 4




# 1 "/usr/include/sys/_types/_fsblkcnt_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_fsblkcnt_t.h" 3 4
typedef __darwin_fsblkcnt_t fsblkcnt_t;
# 229 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fsfilcnt_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_fsfilcnt_t.h" 3 4
typedef __darwin_fsfilcnt_t fsfilcnt_t;
# 230 "/usr/include/sys/types.h" 2 3 4
# 76 "/usr/include/sys/socket.h" 2 3 4

# 1 "/usr/include/machine/_param.h" 1 3 4
# 29 "/usr/include/machine/_param.h" 3 4
# 1 "/usr/include/i386/_param.h" 1 3 4
# 30 "/usr/include/machine/_param.h" 2 3 4
# 78 "/usr/include/sys/socket.h" 2 3 4
# 1 "/usr/include/net/net_kev.h" 1 3 4
# 79 "/usr/include/sys/socket.h" 2 3 4
# 94 "/usr/include/sys/socket.h" 3 4
# 1 "/usr/include/sys/_types/_sa_family_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_sa_family_t.h" 3 4
typedef __uint8_t sa_family_t;
# 95 "/usr/include/sys/socket.h" 2 3 4
# 1 "/usr/include/sys/_types/_socklen_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_socklen_t.h" 3 4
typedef __darwin_socklen_t socklen_t;
# 96 "/usr/include/sys/socket.h" 2 3 4
# 106 "/usr/include/sys/socket.h" 3 4
# 1 "/usr/include/sys/_types/_iovec_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_iovec_t.h" 3 4
struct iovec {
 void * iov_base;
 size_t iov_len;
};
# 107 "/usr/include/sys/socket.h" 2 3 4
# 286 "/usr/include/sys/socket.h" 3 4
typedef __uint32_t sae_associd_t;



typedef __uint32_t sae_connid_t;
# 300 "/usr/include/sys/socket.h" 3 4
typedef struct sa_endpoints {
 unsigned int sae_srcif;
 const struct sockaddr *sae_srcaddr;
 socklen_t sae_srcaddrlen;
 const struct sockaddr *sae_dstaddr;
 socklen_t sae_dstaddrlen;
} sa_endpoints_t;





struct linger {
 int l_onoff;
 int l_linger;
};
# 330 "/usr/include/sys/socket.h" 3 4
struct so_np_extensions {
 u_int32_t npx_flags;
 u_int32_t npx_mask;
};
# 404 "/usr/include/sys/socket.h" 3 4
struct sockaddr {
 __uint8_t sa_len;
 sa_family_t sa_family;
 char sa_data[14];
};
# 417 "/usr/include/sys/socket.h" 3 4
struct sockproto {
 __uint16_t sp_family;
 __uint16_t sp_protocol;
};
# 437 "/usr/include/sys/socket.h" 3 4
struct sockaddr_storage {
 __uint8_t ss_len;
 sa_family_t ss_family;
 char __ss_pad1[((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t))];
 __int64_t __ss_align;
 char __ss_pad2[(128 - sizeof(__uint8_t) - sizeof(sa_family_t) - ((sizeof(__int64_t)) - sizeof(__uint8_t) - sizeof(sa_family_t)) - (sizeof(__int64_t)))];
};
# 536 "/usr/include/sys/socket.h" 3 4
struct msghdr {
 void *msg_name;
 socklen_t msg_namelen;
 struct iovec *msg_iov;
 int msg_iovlen;
 void *msg_control;
 socklen_t msg_controllen;
 int msg_flags;
};
# 577 "/usr/include/sys/socket.h" 3 4
struct cmsghdr {
 socklen_t cmsg_len;
 int cmsg_level;
 int cmsg_type;

};
# 668 "/usr/include/sys/socket.h" 3 4
struct sf_hdtr {
 struct iovec *headers;
 int hdr_cnt;
 struct iovec *trailers;
 int trl_cnt;
};







int accept(int, struct sockaddr * restrict, socklen_t * restrict)
  __asm("_" "accept" );
int bind(int, const struct sockaddr *, socklen_t) __asm("_" "bind" );
int connect(int, const struct sockaddr *, socklen_t) __asm("_" "connect" );
int getpeername(int, struct sockaddr * restrict, socklen_t * restrict)
  __asm("_" "getpeername" );
int getsockname(int, struct sockaddr * restrict, socklen_t * restrict)
  __asm("_" "getsockname" );
int getsockopt(int, int, int, void * restrict, socklen_t * restrict);
int listen(int, int) __asm("_" "listen" );
ssize_t recv(int, void *, size_t, int) __asm("_" "recv" );
ssize_t recvfrom(int, void *, size_t, int, struct sockaddr * restrict,
  socklen_t * restrict) __asm("_" "recvfrom" );
ssize_t recvmsg(int, struct msghdr *, int) __asm("_" "recvmsg" );
ssize_t send(int, const void *, size_t, int) __asm("_" "send" );
ssize_t sendmsg(int, const struct msghdr *, int) __asm("_" "sendmsg" );
ssize_t sendto(int, const void *, size_t,
  int, const struct sockaddr *, socklen_t) __asm("_" "sendto" );
int setsockopt(int, int, int, const void *, socklen_t);
int shutdown(int, int);
int sockatmark(int) __attribute__((availability(macosx,introduced=10.5)));
int socket(int, int, int);
int socketpair(int, int, int, int *) __asm("_" "socketpair" );


int sendfile(int, int, off_t, off_t *, struct sf_hdtr *, int);



void pfctlinput(int, struct sockaddr *);
int connectx(int, const sa_endpoints_t *, sae_associd_t, unsigned int,
    const struct iovec *, unsigned int, size_t *, sae_connid_t *);
int disconnectx(int, sae_associd_t, sae_connid_t);
# 82 "/usr/include/netinet/in.h" 2 3 4
# 301 "/usr/include/netinet/in.h" 3 4
struct in_addr {
 in_addr_t s_addr;
};
# 374 "/usr/include/netinet/in.h" 3 4
struct sockaddr_in {
 __uint8_t sin_len;
 sa_family_t sin_family;
 in_port_t sin_port;
 struct in_addr sin_addr;
 char sin_zero[8];
};
# 393 "/usr/include/netinet/in.h" 3 4
struct ip_opts {
 struct in_addr ip_dst;
 char ip_opts[40];
};
# 501 "/usr/include/netinet/in.h" 3 4
struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};






struct ip_mreqn {
 struct in_addr imr_multiaddr;
 struct in_addr imr_address;
 int imr_ifindex;
};

#pragma pack(4)



struct ip_mreq_source {
 struct in_addr imr_multiaddr;
 struct in_addr imr_sourceaddr;
 struct in_addr imr_interface;
};





struct group_req {
 uint32_t gr_interface;
 struct sockaddr_storage gr_group;
};

struct group_source_req {
 uint32_t gsr_interface;
 struct sockaddr_storage gsr_group;
 struct sockaddr_storage gsr_source;
};
# 549 "/usr/include/netinet/in.h" 3 4
struct __msfilterreq {
 uint32_t msfr_ifindex;
 uint32_t msfr_fmode;
 uint32_t msfr_nsrcs;
 uint32_t __msfr_align;
 struct sockaddr_storage msfr_group;
 struct sockaddr_storage *msfr_srcs;
};



#pragma pack()
struct sockaddr;






int setipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t,
     uint32_t, struct in_addr *) __attribute__((availability(macosx,introduced=10.7)));
int getipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t *,
     uint32_t *, struct in_addr *) __attribute__((availability(macosx,introduced=10.7)));
int setsourcefilter(int, uint32_t, struct sockaddr *, socklen_t,
     uint32_t, uint32_t, struct sockaddr_storage *) __attribute__((availability(macosx,introduced=10.7)));
int getsourcefilter(int, uint32_t, struct sockaddr *, socklen_t,
     uint32_t *, uint32_t *, struct sockaddr_storage *) __attribute__((availability(macosx,introduced=10.7)));
# 612 "/usr/include/netinet/in.h" 3 4
struct in_pktinfo {
 unsigned int ipi_ifindex;
 struct in_addr ipi_spec_dst;
 struct in_addr ipi_addr;
};
# 654 "/usr/include/netinet/in.h" 3 4
# 1 "/usr/include/netinet6/in6.h" 1 3 4
# 152 "/usr/include/netinet6/in6.h" 3 4
struct in6_addr {
 union {
  __uint8_t __u6_addr8[16];
  __uint16_t __u6_addr16[8];
  __uint32_t __u6_addr32[4];
 } __u6_addr;
};
# 170 "/usr/include/netinet6/in6.h" 3 4
struct sockaddr_in6 {
 __uint8_t sin6_len;
 sa_family_t sin6_family;
 in_port_t sin6_port;
 __uint32_t sin6_flowinfo;
 struct in6_addr sin6_addr;
 __uint32_t sin6_scope_id;
};
# 212 "/usr/include/netinet6/in6.h" 3 4
extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;

extern const struct in6_addr in6addr_nodelocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allnodes;
extern const struct in6_addr in6addr_linklocal_allrouters;
extern const struct in6_addr in6addr_linklocal_allv2routers;
# 528 "/usr/include/netinet6/in6.h" 3 4
struct ipv6_mreq {
 struct in6_addr ipv6mr_multiaddr;
 unsigned int ipv6mr_interface;
};




struct in6_pktinfo {
 struct in6_addr ipi6_addr;
 unsigned int ipi6_ifindex;
};




struct ip6_mtuinfo {
 struct sockaddr_in6 ip6m_addr;
 uint32_t ip6m_mtu;
};
# 625 "/usr/include/netinet6/in6.h" 3 4
struct cmsghdr;

extern int inet6_option_space(int);
extern int inet6_option_init(void *, struct cmsghdr **, int);
extern int inet6_option_append(struct cmsghdr *, const __uint8_t *, int, int);
extern __uint8_t *inet6_option_alloc(struct cmsghdr *, int, int, int);
extern int inet6_option_next(const struct cmsghdr *, __uint8_t **);
extern int inet6_option_find(const struct cmsghdr *, __uint8_t **, int);

extern size_t inet6_rthdr_space(int, int);
extern struct cmsghdr *inet6_rthdr_init(void *, int);
extern int inet6_rthdr_add(struct cmsghdr *, const struct in6_addr *,
    unsigned int);
extern int inet6_rthdr_lasthop(struct cmsghdr *, unsigned int);



extern int inet6_rthdr_segments(const struct cmsghdr *);
extern struct in6_addr *inet6_rthdr_getaddr(struct cmsghdr *, int);
extern int inet6_rthdr_getflags(const struct cmsghdr *, int);

extern int inet6_opt_init(void *, socklen_t);
extern int inet6_opt_append(void *, socklen_t, int, __uint8_t, socklen_t,
    __uint8_t, void **);
extern int inet6_opt_finish(void *, socklen_t, int);
extern int inet6_opt_set_val(void *, int, void *, socklen_t);

extern int inet6_opt_next(void *, socklen_t, int, __uint8_t *, socklen_t *,
    void **);
extern int inet6_opt_find(void *, socklen_t, int, __uint8_t, socklen_t *,
    void **);
extern int inet6_opt_get_val(void *, int, void *, socklen_t);
extern socklen_t inet6_rth_space(int, int);
extern void *inet6_rth_init(void *, socklen_t, int, int);
extern int inet6_rth_add(void *, const struct in6_addr *);
extern int inet6_rth_reverse(const void *, void *);
extern int inet6_rth_segments(const void *);
extern struct in6_addr *inet6_rth_getaddr(const void *, int);
extern void addrsel_policy_init(void);
# 655 "/usr/include/netinet/in.h" 2 3 4






int bindresvport(int, struct sockaddr_in *);
struct sockaddr;
int bindresvport_sa(int, struct sockaddr *);
# 72 "/usr/include/arpa/inet.h" 2 3 4



in_addr_t inet_addr(const char *);
char *inet_ntoa(struct in_addr);
const char *inet_ntop(int, const void *, char *, socklen_t);
int inet_pton(int, const char *, void *);


int ascii2addr(int, const char *, void *);
char *addr2ascii(int, const void *, int, char *);
int inet_aton(const char *, struct in_addr *);
in_addr_t inet_lnaof(struct in_addr);
struct in_addr inet_makeaddr(in_addr_t, in_addr_t);
in_addr_t inet_netof(struct in_addr);
in_addr_t inet_network(const char *);
char *inet_net_ntop(int, const void *, int, char *, __darwin_size_t);
int inet_net_pton(int, const char *, void *, __darwin_size_t);
char *inet_neta(in_addr_t, char *, __darwin_size_t);
unsigned int inet_nsap_addr(const char *, unsigned char *, int);
char *inet_nsap_ntoa(int, const unsigned char *, char *);
# 83 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sysdep.h" 2
# 198 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sysdep.h"
# 1 "/usr/include/TargetConditionals.h" 1 3 4
# 199 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sysdep.h" 2
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/zone.h" 2
# 26 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/zone.h"
typedef struct msgpack_zone_finalizer {
    void (*func)(void* data);
    void* data;
} msgpack_zone_finalizer;

typedef struct msgpack_zone_finalizer_array {
    msgpack_zone_finalizer* tail;
    msgpack_zone_finalizer* end;
    msgpack_zone_finalizer* array;
} msgpack_zone_finalizer_array;

struct msgpack_zone_chunk;
typedef struct msgpack_zone_chunk msgpack_zone_chunk;

typedef struct msgpack_zone_chunk_list {
    size_t free;
    char* ptr;
    msgpack_zone_chunk* head;
} msgpack_zone_chunk_list;

typedef struct msgpack_zone {
    msgpack_zone_chunk_list chunk_list;
    msgpack_zone_finalizer_array finalizer_array;
    size_t chunk_size;
} msgpack_zone;






_Bool msgpack_zone_init(msgpack_zone* zone, size_t chunk_size);

void msgpack_zone_destroy(msgpack_zone* zone);


msgpack_zone* msgpack_zone_new(size_t chunk_size);

void msgpack_zone_free(msgpack_zone* zone);

static inline void* msgpack_zone_malloc(msgpack_zone* zone, size_t size);
static inline void* msgpack_zone_malloc_no_align(msgpack_zone* zone, size_t size);

static inline _Bool msgpack_zone_push_finalizer(msgpack_zone* zone,
        void (*func)(void* data), void* data);

static inline void msgpack_zone_swap(msgpack_zone* a, msgpack_zone* b);


_Bool msgpack_zone_is_empty(msgpack_zone* zone);


void msgpack_zone_clear(msgpack_zone* zone);
# 88 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/zone.h"
void* msgpack_zone_malloc_expand(msgpack_zone* zone, size_t size);

static inline void* msgpack_zone_malloc_no_align(msgpack_zone* zone, size_t size)
{
    char* ptr;
    msgpack_zone_chunk_list* cl = &zone->chunk_list;

    if(zone->chunk_list.free < size) {
        return msgpack_zone_malloc_expand(zone, size);
    }

    ptr = cl->ptr;
    cl->free -= size;
    cl->ptr += size;

    return ptr;
}

static inline void* msgpack_zone_malloc(msgpack_zone* zone, size_t size)
{
    char* aligned =
        (char*)(
            (size_t)(
                zone->chunk_list.ptr + (sizeof(void*) - 1)
            ) / sizeof(void*) * sizeof(void*)
        );
    size_t adjusted_size = size + (aligned - zone->chunk_list.ptr);
    if(zone->chunk_list.free >= adjusted_size) {
        zone->chunk_list.free -= adjusted_size;
        zone->chunk_list.ptr += adjusted_size;
        return aligned;
    }
    {
        void* ptr = msgpack_zone_malloc_expand(zone, size + (sizeof(void*) - 1));
        if (ptr) {
            return (char*)((size_t)(ptr) / sizeof(void*) * sizeof(void*));
        }
    }
    return ((void*)0);
}


_Bool msgpack_zone_push_finalizer_expand(msgpack_zone* zone,
        void (*func)(void* data), void* data);

static inline _Bool msgpack_zone_push_finalizer(msgpack_zone* zone,
        void (*func)(void* data), void* data)
{
    msgpack_zone_finalizer_array* const fa = &zone->finalizer_array;
    msgpack_zone_finalizer* fin = fa->tail;

    if(fin == fa->end) {
        return msgpack_zone_push_finalizer_expand(zone, func, data);
    }

    fin->func = func;
    fin->data = data;

    ++fa->tail;

    return 1;
}

static inline void msgpack_zone_swap(msgpack_zone* a, msgpack_zone* b)
{
    msgpack_zone tmp = *a;
    *a = *b;
    *b = tmp;
}
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/object.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 71 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/sys/_types/_va_list.h" 1 3 4
# 31 "/usr/include/sys/_types/_va_list.h" 3 4
typedef __darwin_va_list va_list;
# 72 "/usr/include/stdio.h" 2 3 4



# 1 "/usr/include/sys/stdio.h" 1 3 4
# 39 "/usr/include/sys/stdio.h" 3 4
int renameat(int, const char *, int, const char *) __attribute__((availability(macosx,introduced=10.10)));






int renamex_np(const char *, const char *, unsigned int) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int renameatx_np(int, const char *, int, const char *, unsigned int) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
# 76 "/usr/include/stdio.h" 2 3 4

typedef __darwin_off_t fpos_t;
# 88 "/usr/include/stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 122 "/usr/include/stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (* _Nullable _close)(void *);
 int (* _Nullable _read) (void *, char *, int);
 fpos_t (* _Nullable _seek) (void *, fpos_t, int);
 int (* _Nullable _write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;


extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;
# 231 "/usr/include/stdio.h" 3 4
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * restrict, fpos_t *);
char *fgets(char * restrict, int, FILE *);



FILE *fopen(const char * restrict __filename, const char * restrict __mode) __asm("_" "fopen" );

int fprintf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * restrict, FILE * restrict) __asm("_" "fputs" );
size_t fread(void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream);
FILE *freopen(const char * restrict, const char * restrict,
                 FILE * restrict) __asm("_" "freopen" );
int fscanf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * restrict __ptr, size_t __size, size_t __nitems, FILE * restrict __stream) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);
char *gets(char *);
void perror(const char *);
int printf(const char * restrict, ...) __attribute__((__format__ (__printf__, 1, 2)));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *__old, const char *__new);
void rewind(FILE *);
int scanf(const char * restrict, ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * restrict, char * restrict);
int setvbuf(FILE * restrict, char * restrict, int, size_t);
int sprintf(char * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3))) __attribute__((__availability__(swift, unavailable, message="Use snprintf instead.")));
int sscanf(const char * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);

__attribute__((__availability__(swift, unavailable, message="Use mkstemp(3) instead.")))

__attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * restrict, va_list) __attribute__((__format__ (__printf__, 1, 0)));
int vsprintf(char * restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0))) __attribute__((__availability__(swift, unavailable, message="Use vsnprintf instead.")));
# 297 "/usr/include/stdio.h" 3 4
char *ctermid(char *);





FILE *fdopen(int, const char *) __asm("_" "fdopen" );

int fileno(FILE *);
# 321 "/usr/include/stdio.h" 3 4
int pclose(FILE *) __attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead.")));



FILE *popen(const char *, const char *) __asm("_" "popen" ) __attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead.")));
# 342 "/usr/include/stdio.h" 3 4
int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);
# 353 "/usr/include/stdio.h" 3 4
inline __attribute__ ((__always_inline__)) int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 379 "/usr/include/stdio.h" 3 4
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



int getw(FILE *);
int putw(int, FILE *);


__attribute__((__availability__(swift, unavailable, message="Use mkstemp(3) instead.")))

__attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tempnam(const char *__dir, const char *__prefix) __asm("_" "tempnam" );
# 420 "/usr/include/stdio.h" 3 4
int fseeko(FILE * __stream, off_t __offset, int __whence);
off_t ftello(FILE * __stream);





int snprintf(char * restrict __str, size_t __size, const char * restrict __format, ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * restrict __stream, const char * restrict __format, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * restrict __format, va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * restrict __str, size_t __size, const char * restrict __format, va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * restrict __str, const char * restrict __format, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
# 445 "/usr/include/stdio.h" 3 4
int dprintf(int, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3))) __attribute__((availability(macosx,introduced=10.7)));
int vdprintf(int, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0))) __attribute__((availability(macosx,introduced=10.7)));
ssize_t getdelim(char ** restrict __linep, size_t * restrict __linecapp, int __delimiter, FILE * restrict __stream) __attribute__((availability(macosx,introduced=10.7)));
ssize_t getline(char ** restrict __linep, size_t * restrict __linecapp, FILE * restrict __stream) __attribute__((availability(macosx,introduced=10.7)));
# 458 "/usr/include/stdio.h" 3 4
extern const int sys_nerr;
extern const char *const sys_errlist[];

int asprintf(char ** restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
char *ctermid_r(char *);
char *fgetln(FILE *, size_t *);
const char *fmtcheck(const char *, const char *);
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char ** restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));
FILE *zopen(const char *, const char *, int);





FILE *funopen(const void *,
                 int (* _Nullable)(void *, char *, int),
                 int (* _Nullable)(void *, const char *, int),
                 fpos_t (* _Nullable)(void *, fpos_t, int),
                 int (* _Nullable)(void *));
# 498 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/secure/_stdio.h" 1 3 4
# 42 "/usr/include/secure/_stdio.h" 3 4
extern int __sprintf_chk (char * restrict, int, size_t,
     const char * restrict, ...);
# 52 "/usr/include/secure/_stdio.h" 3 4
extern int __snprintf_chk (char * restrict, size_t, int, size_t,
      const char * restrict, ...);







extern int __vsprintf_chk (char * restrict, int, size_t,
      const char * restrict, va_list);







extern int __vsnprintf_chk (char * restrict, size_t, int, size_t,
       const char * restrict, va_list);
# 499 "/usr/include/stdio.h" 2 3 4
# 15 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/object.h" 2
# 27 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/object.h"
typedef enum {
    MSGPACK_OBJECT_NIL = 0x00,
    MSGPACK_OBJECT_BOOLEAN = 0x01,
    MSGPACK_OBJECT_POSITIVE_INTEGER = 0x02,
    MSGPACK_OBJECT_NEGATIVE_INTEGER = 0x03,
    MSGPACK_OBJECT_FLOAT32 = 0x0a,
    MSGPACK_OBJECT_FLOAT64 = 0x04,
    MSGPACK_OBJECT_FLOAT = 0x04,



    MSGPACK_OBJECT_STR = 0x05,
    MSGPACK_OBJECT_ARRAY = 0x06,
    MSGPACK_OBJECT_MAP = 0x07,
    MSGPACK_OBJECT_BIN = 0x08,
    MSGPACK_OBJECT_EXT = 0x09
} msgpack_object_type;


struct msgpack_object;
struct msgpack_object_kv;

typedef struct {
    uint32_t size;
    struct msgpack_object* ptr;
} msgpack_object_array;

typedef struct {
    uint32_t size;
    struct msgpack_object_kv* ptr;
} msgpack_object_map;

typedef struct {
    uint32_t size;
    const char* ptr;
} msgpack_object_str;

typedef struct {
    uint32_t size;
    const char* ptr;
} msgpack_object_bin;

typedef struct {
    int8_t type;
    uint32_t size;
    const char* ptr;
} msgpack_object_ext;

typedef union {
    _Bool boolean;
    uint64_t u64;
    int64_t i64;



    double f64;
    msgpack_object_array array;
    msgpack_object_map map;
    msgpack_object_str str;
    msgpack_object_bin bin;
    msgpack_object_ext ext;
} msgpack_object_union;

typedef struct msgpack_object {
    msgpack_object_type type;
    msgpack_object_union via;
} msgpack_object;

typedef struct msgpack_object_kv {
    msgpack_object key;
    msgpack_object val;
} msgpack_object_kv;


void msgpack_object_print(FILE* out, msgpack_object o);


int msgpack_object_print_buffer(char *buffer, size_t buffer_size, msgpack_object o);


_Bool msgpack_object_equal(const msgpack_object x, const msgpack_object y);
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_define.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack.h" 2
# 35 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack.h"
typedef int (*msgpack_packer_write)(void* data, const char* buf, size_t len);

typedef struct msgpack_packer {
    void* data;
    msgpack_packer_write callback;
} msgpack_packer;

static void msgpack_packer_init(msgpack_packer* pk, void* data, msgpack_packer_write callback);

static msgpack_packer* msgpack_packer_new(void* data, msgpack_packer_write callback);
static void msgpack_packer_free(msgpack_packer* pk);

static int msgpack_pack_char(msgpack_packer* pk, char d);

static int msgpack_pack_signed_char(msgpack_packer* pk, signed char d);
static int msgpack_pack_short(msgpack_packer* pk, short d);
static int msgpack_pack_int(msgpack_packer* pk, int d);
static int msgpack_pack_long(msgpack_packer* pk, long d);
static int msgpack_pack_long_long(msgpack_packer* pk, long long d);
static int msgpack_pack_unsigned_char(msgpack_packer* pk, unsigned char d);
static int msgpack_pack_unsigned_short(msgpack_packer* pk, unsigned short d);
static int msgpack_pack_unsigned_int(msgpack_packer* pk, unsigned int d);
static int msgpack_pack_unsigned_long(msgpack_packer* pk, unsigned long d);
static int msgpack_pack_unsigned_long_long(msgpack_packer* pk, unsigned long long d);

static int msgpack_pack_uint8(msgpack_packer* pk, uint8_t d);
static int msgpack_pack_uint16(msgpack_packer* pk, uint16_t d);
static int msgpack_pack_uint32(msgpack_packer* pk, uint32_t d);
static int msgpack_pack_uint64(msgpack_packer* pk, uint64_t d);
static int msgpack_pack_int8(msgpack_packer* pk, int8_t d);
static int msgpack_pack_int16(msgpack_packer* pk, int16_t d);
static int msgpack_pack_int32(msgpack_packer* pk, int32_t d);
static int msgpack_pack_int64(msgpack_packer* pk, int64_t d);

static int msgpack_pack_fix_uint8(msgpack_packer* pk, uint8_t d);
static int msgpack_pack_fix_uint16(msgpack_packer* pk, uint16_t d);
static int msgpack_pack_fix_uint32(msgpack_packer* pk, uint32_t d);
static int msgpack_pack_fix_uint64(msgpack_packer* pk, uint64_t d);
static int msgpack_pack_fix_int8(msgpack_packer* pk, int8_t d);
static int msgpack_pack_fix_int16(msgpack_packer* pk, int16_t d);
static int msgpack_pack_fix_int32(msgpack_packer* pk, int32_t d);
static int msgpack_pack_fix_int64(msgpack_packer* pk, int64_t d);

static int msgpack_pack_float(msgpack_packer* pk, float d);
static int msgpack_pack_double(msgpack_packer* pk, double d);

static int msgpack_pack_nil(msgpack_packer* pk);
static int msgpack_pack_true(msgpack_packer* pk);
static int msgpack_pack_false(msgpack_packer* pk);

static int msgpack_pack_array(msgpack_packer* pk, size_t n);

static int msgpack_pack_map(msgpack_packer* pk, size_t n);

static int msgpack_pack_str(msgpack_packer* pk, size_t l);
static int msgpack_pack_str_body(msgpack_packer* pk, const void* b, size_t l);

static int msgpack_pack_v4raw(msgpack_packer* pk, size_t l);
static int msgpack_pack_v4raw_body(msgpack_packer* pk, const void* b, size_t l);

static int msgpack_pack_bin(msgpack_packer* pk, size_t l);
static int msgpack_pack_bin_body(msgpack_packer* pk, const void* b, size_t l);

static int msgpack_pack_ext(msgpack_packer* pk, size_t l, int8_t type);
static int msgpack_pack_ext_body(msgpack_packer* pk, const void* b, size_t l);

int msgpack_pack_object(msgpack_packer* pk, msgpack_object d);
# 121 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h" 1
# 271 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
inline int msgpack_pack_fix_uint8(msgpack_packer* x, uint8_t d)
{
    unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]};
    return (*(x)->callback)((x)->data, (const char*)buf, 2);
}

inline int msgpack_pack_fix_uint16(msgpack_packer* x, uint16_t d)
{
    unsigned char buf[3];
    buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p(d) ? ((__uint16_t)((((__uint16_t)(d) & 0xff00) >> 8) | (((__uint16_t)(d) & 0x00ff) << 8))) : _OSSwapInt16(d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 3);
}

inline int msgpack_pack_fix_uint32(msgpack_packer* x, uint32_t d)
{
    unsigned char buf[5];
    buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p(d) ? ((__uint32_t)((((__uint32_t)(d) & 0xff000000) >> 24) | (((__uint32_t)(d) & 0x00ff0000) >> 8) | (((__uint32_t)(d) & 0x0000ff00) << 8) | (((__uint32_t)(d) & 0x000000ff) << 24))) : _OSSwapInt32(d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 5);
}

inline int msgpack_pack_fix_uint64(msgpack_packer* x, uint64_t d)
{
    unsigned char buf[9];
    buf[0] = 0xcf; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 9);
}

inline int msgpack_pack_fix_int8(msgpack_packer* x, int8_t d)
{
    unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]};
    return (*(x)->callback)((x)->data, (const char*)buf, 2);
}

inline int msgpack_pack_fix_int16(msgpack_packer* x, int16_t d)
{
    unsigned char buf[3];
    buf[0] = 0xd1; do { uint16_t val = ((__uint16_t)(__builtin_constant_p(d) ? ((__uint16_t)((((__uint16_t)(d) & 0xff00) >> 8) | (((__uint16_t)(d) & 0x00ff) << 8))) : _OSSwapInt16(d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 3);
}

inline int msgpack_pack_fix_int32(msgpack_packer* x, int32_t d)
{
    unsigned char buf[5];
    buf[0] = 0xd2; do { uint32_t val = (__builtin_constant_p(d) ? ((__uint32_t)((((__uint32_t)(d) & 0xff000000) >> 24) | (((__uint32_t)(d) & 0x00ff0000) >> 8) | (((__uint32_t)(d) & 0x0000ff00) << 8) | (((__uint32_t)(d) & 0x000000ff) << 24))) : _OSSwapInt32(d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 5);
}

inline int msgpack_pack_fix_int64(msgpack_packer* x, int64_t d)
{
    unsigned char buf[9];
    buf[0] = 0xd3; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 9);
}





inline int msgpack_pack_uint8(msgpack_packer* x, uint8_t d)
{
    do { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } while(0);
}

inline int msgpack_pack_uint16(msgpack_packer* x, uint16_t d)
{
    do { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } while(0);
}

inline int msgpack_pack_uint32(msgpack_packer* x, uint32_t d)
{
    do { if(d < (1<<8)) { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else { if(d < (1<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p((uint32_t)d) ? ((__uint32_t)((((__uint32_t)((uint32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } } while(0);
}

inline int msgpack_pack_uint64(msgpack_packer* x, uint64_t d)
{
    do { if(d < (1ULL<<8)) { if(d < (1ULL<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else { if(d < (1ULL<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else if(d < (1ULL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p((uint32_t)d) ? ((__uint32_t)((((__uint32_t)((uint32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } while(0);
}

inline int msgpack_pack_int8(msgpack_packer* x, int8_t d)
{
    do { if(d < -(1<<5)) { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } } while(0);
}

inline int msgpack_pack_int16(msgpack_packer* x, int16_t d)
{
    do { if(d < -(1<<5)) { if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((int16_t)d) ? ((__uint16_t)((((__uint16_t)((int16_t)d) & 0xff00) >> 8) | (((__uint16_t)((int16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((int16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } } while(0);
}

inline int msgpack_pack_int32(msgpack_packer* x, int32_t d)
{
    do { if(d < -(1<<5)) { if(d < -(1<<15)) { unsigned char buf[5]; buf[0] = 0xd2; do { uint32_t val = (__builtin_constant_p((int32_t)d) ? ((__uint32_t)((((__uint32_t)((int32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((int32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((int32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((int32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((int32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((int16_t)d) ? ((__uint16_t)((((__uint16_t)((int16_t)d) & 0xff00) >> 8) | (((__uint16_t)((int16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((int16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else if(d < (1<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p((uint32_t)d) ? ((__uint32_t)((((__uint32_t)((uint32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } } while(0);
}

inline int msgpack_pack_int64(msgpack_packer* x, int64_t d)
{
    do { if(d < -(1LL<<5)) { if(d < -(1LL<<15)) { if(d < -(1LL<<31)) { unsigned char buf[9]; buf[0] = 0xd3; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } else { unsigned char buf[5]; buf[0] = 0xd2; do { uint32_t val = (__builtin_constant_p((int32_t)d) ? ((__uint32_t)((((__uint32_t)((int32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((int32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((int32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((int32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((int32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } else { if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((int16_t)d) ? ((__uint16_t)((((__uint16_t)((int16_t)d) & 0xff00) >> 8) | (((__uint16_t)((int16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((int16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1LL<<16)) { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } else { if(d < (1LL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p((uint32_t)d) ? ((__uint32_t)((((__uint32_t)((uint32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } } while(0);
}

inline int msgpack_pack_char(msgpack_packer* x, char d)
{


        do { if(d < -(1<<5)) { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } } while(0);






}

inline int msgpack_pack_signed_char(msgpack_packer* x, signed char d)
{
    do { if(d < -(1<<5)) { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } } while(0);
}

inline int msgpack_pack_unsigned_char(msgpack_packer* x, unsigned char d)
{
    do { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } while(0);
}



inline int msgpack_pack_short(msgpack_packer* x, short d)
{
# 407 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < -(1<<5)) { if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((int16_t)d) ? ((__uint16_t)((((__uint16_t)((int16_t)d) & 0xff00) >> 8) | (((__uint16_t)((int16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((int16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } } while(0);
# 423 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_int(msgpack_packer* x, int d)
{
# 440 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < -(1<<5)) { if(d < -(1<<15)) { unsigned char buf[5]; buf[0] = 0xd2; do { uint32_t val = (__builtin_constant_p((int32_t)d) ? ((__uint32_t)((((__uint32_t)((int32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((int32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((int32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((int32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((int32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((int16_t)d) ? ((__uint16_t)((((__uint16_t)((int16_t)d) & 0xff00) >> 8) | (((__uint16_t)((int16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((int16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else if(d < (1<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p((uint32_t)d) ? ((__uint32_t)((((__uint32_t)((uint32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } } while(0);
# 454 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_long(msgpack_packer* x, long d)
{
# 473 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < -(1LL<<5)) { if(d < -(1LL<<15)) { if(d < -(1LL<<31)) { unsigned char buf[9]; buf[0] = 0xd3; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } else { unsigned char buf[5]; buf[0] = 0xd2; do { uint32_t val = (__builtin_constant_p((int32_t)d) ? ((__uint32_t)((((__uint32_t)((int32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((int32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((int32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((int32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((int32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } else { if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((int16_t)d) ? ((__uint16_t)((((__uint16_t)((int16_t)d) & 0xff00) >> 8) | (((__uint16_t)((int16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((int16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1LL<<16)) { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } else { if(d < (1LL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p((uint32_t)d) ? ((__uint32_t)((((__uint32_t)((uint32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } } while(0);
# 485 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_long_long(msgpack_packer* x, long long d)
{
# 504 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < -(1LL<<5)) { if(d < -(1LL<<15)) { if(d < -(1LL<<31)) { unsigned char buf[9]; buf[0] = 0xd3; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } else { unsigned char buf[5]; buf[0] = 0xd2; do { uint32_t val = (__builtin_constant_p((int32_t)d) ? ((__uint32_t)((((__uint32_t)((int32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((int32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((int32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((int32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((int32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } else { if(d < -(1<<7)) { unsigned char buf[3]; buf[0] = 0xd1; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((int16_t)d) ? ((__uint16_t)((((__uint16_t)((int16_t)d) & 0xff00) >> 8) | (((__uint16_t)((int16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((int16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[2] = {0xd0, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } } else if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { if(d < (1LL<<16)) { if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } else { if(d < (1LL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p((uint32_t)d) ? ((__uint32_t)((((__uint32_t)((uint32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } } while(0);
# 516 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_unsigned_short(msgpack_packer* x, unsigned short d)
{
# 531 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else if(d < (1<<8)) { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } else { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } } while(0);
# 547 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_unsigned_int(msgpack_packer* x, unsigned int d)
{
# 564 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < (1<<8)) { if(d < (1<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else { if(d < (1<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p((uint32_t)d) ? ((__uint32_t)((((__uint32_t)((uint32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } } } while(0);
# 578 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_unsigned_long(msgpack_packer* x, unsigned long d)
{
# 597 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < (1ULL<<8)) { if(d < (1ULL<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else { if(d < (1ULL<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else if(d < (1ULL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p((uint32_t)d) ? ((__uint32_t)((((__uint32_t)((uint32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } while(0);
# 609 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
}

inline int msgpack_pack_unsigned_long_long(msgpack_packer* x, unsigned long long d)
{
# 628 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
    do { if(d < (1ULL<<8)) { if(d < (1ULL<<7)) { return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1); } else { unsigned char buf[2] = {0xcc, ((uint8_t*)&d)[0]}; return (*(x)->callback)((x)->data, (const char*)buf, 2); } } else { if(d < (1ULL<<16)) { unsigned char buf[3]; buf[0] = 0xcd; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)d) ? ((__uint16_t)((((__uint16_t)((uint16_t)d) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)d) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)d))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 3); } else if(d < (1ULL<<32)) { unsigned char buf[5]; buf[0] = 0xce; do { uint32_t val = (__builtin_constant_p((uint32_t)d) ? ((__uint32_t)((((__uint32_t)((uint32_t)d) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)d) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)d) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)d) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)d)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 5); } else { unsigned char buf[9]; buf[0] = 0xcf; do { uint64_t val = (__builtin_constant_p(d) ? ((__uint64_t)((((__uint64_t)(d) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(d) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(d) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(d) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(d) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(d) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(d) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(d) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(d)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0); return (*(x)->callback)((x)->data, (const char*)buf, 9); } } } while(0);
# 640 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
}
# 651 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack_template.h"
inline int msgpack_pack_float(msgpack_packer* x, float d)
{
    unsigned char buf[5];
    union { float f; uint32_t i; } mem;
    mem.f = d;
    buf[0] = 0xca; do { uint32_t val = (__builtin_constant_p(mem.i) ? ((__uint32_t)((((__uint32_t)(mem.i) & 0xff000000) >> 24) | (((__uint32_t)(mem.i) & 0x00ff0000) >> 8) | (((__uint32_t)(mem.i) & 0x0000ff00) << 8) | (((__uint32_t)(mem.i) & 0x000000ff) << 24))) : _OSSwapInt32(mem.i)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 5);
}

inline int msgpack_pack_double(msgpack_packer* x, double d)
{
    unsigned char buf[9];
    union { double f; uint64_t i; } mem;
    mem.f = d;
    buf[0] = 0xcb;






    do { uint64_t val = (__builtin_constant_p(mem.i) ? ((__uint64_t)((((__uint64_t)(mem.i) & 0xff00000000000000ULL) >> 56) | (((__uint64_t)(mem.i) & 0x00ff000000000000ULL) >> 40) | (((__uint64_t)(mem.i) & 0x0000ff0000000000ULL) >> 24) | (((__uint64_t)(mem.i) & 0x000000ff00000000ULL) >> 8) | (((__uint64_t)(mem.i) & 0x00000000ff000000ULL) << 8) | (((__uint64_t)(mem.i) & 0x0000000000ff0000ULL) << 24) | (((__uint64_t)(mem.i) & 0x000000000000ff00ULL) << 40) | (((__uint64_t)(mem.i) & 0x00000000000000ffULL) << 56))) : _OSSwapInt64(mem.i)); __builtin___memcpy_chk (&buf[1], &val, 8, __builtin_object_size (&buf[1], 0)); } while(0);
    return (*(x)->callback)((x)->data, (const char*)buf, 9);
}






inline int msgpack_pack_nil(msgpack_packer* x)
{
    static const unsigned char d = 0xc0;
    return (*(x)->callback)((x)->data, (const char*)&d, 1);
}






inline int msgpack_pack_true(msgpack_packer* x)
{
    static const unsigned char d = 0xc3;
    return (*(x)->callback)((x)->data, (const char*)&d, 1);
}

inline int msgpack_pack_false(msgpack_packer* x)
{
    static const unsigned char d = 0xc2;
    return (*(x)->callback)((x)->data, (const char*)&d, 1);
}






inline int msgpack_pack_array(msgpack_packer* x, size_t n)
{
    if(n < 16) {
        unsigned char d = 0x90 | (uint8_t)n;
        return (*(x)->callback)((x)->data, (const char*)&d, 1);
    } else if(n < 65536) {
        unsigned char buf[3];
        buf[0] = 0xdc; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)n) ? ((__uint16_t)((((__uint16_t)((uint16_t)n) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)n) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)n))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 3);
    } else {
        unsigned char buf[5];
        buf[0] = 0xdd; do { uint32_t val = (__builtin_constant_p((uint32_t)n) ? ((__uint32_t)((((__uint32_t)((uint32_t)n) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)n) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)n) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)n) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)n)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 5);
    }
}






inline int msgpack_pack_map(msgpack_packer* x, size_t n)
{
    if(n < 16) {
        unsigned char d = 0x80 | (uint8_t)n;
        return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1);
    } else if(n < 65536) {
        unsigned char buf[3];
        buf[0] = 0xde; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)n) ? ((__uint16_t)((((__uint16_t)((uint16_t)n) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)n) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)n))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 3);
    } else {
        unsigned char buf[5];
        buf[0] = 0xdf; do { uint32_t val = (__builtin_constant_p((uint32_t)n) ? ((__uint32_t)((((__uint32_t)((uint32_t)n) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)n) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)n) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)n) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)n)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 5);
    }
}






inline int msgpack_pack_str(msgpack_packer* x, size_t l)
{
    if(l < 32) {
        unsigned char d = 0xa0 | (uint8_t)l;
        return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1);
    } else if(l < 256) {
        unsigned char buf[2];
        buf[0] = 0xd9; buf[1] = (uint8_t)l;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } else if(l < 65536) {
        unsigned char buf[3];
        buf[0] = 0xda; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)l) ? ((__uint16_t)((((__uint16_t)((uint16_t)l) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)l) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)l))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 3);
    } else {
        unsigned char buf[5];
        buf[0] = 0xdb; do { uint32_t val = (__builtin_constant_p((uint32_t)l) ? ((__uint32_t)((((__uint32_t)((uint32_t)l) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)l) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)l) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)l) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)l)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 5);
    }
}

inline int msgpack_pack_str_body(msgpack_packer* x, const void* b, size_t l)
{
    return (*(x)->callback)((x)->data, (const char*)(const unsigned char*)b, l);
}





inline int msgpack_pack_v4raw(msgpack_packer* x, size_t l)
{
    if(l < 32) {
        unsigned char d = 0xa0 | (uint8_t)l;
        return (*(x)->callback)((x)->data, (const char*)&((uint8_t*)&d)[0], 1);
    } else if(l < 65536) {
        unsigned char buf[3];
        buf[0] = 0xda; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)l) ? ((__uint16_t)((((__uint16_t)((uint16_t)l) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)l) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)l))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 3);
    } else {
        unsigned char buf[5];
        buf[0] = 0xdb; do { uint32_t val = (__builtin_constant_p((uint32_t)l) ? ((__uint32_t)((((__uint32_t)((uint32_t)l) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)l) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)l) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)l) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)l)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 5);
    }
}

inline int msgpack_pack_v4raw_body(msgpack_packer* x, const void* b, size_t l)
{
    return (*(x)->callback)((x)->data, (const char*)(const unsigned char*)b, l);
}





inline int msgpack_pack_bin(msgpack_packer* x, size_t l)
{
    if(l < 256) {
        unsigned char buf[2];
        buf[0] = 0xc4; buf[1] = (uint8_t)l;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } else if(l < 65536) {
        unsigned char buf[3];
        buf[0] = 0xc5; do { uint16_t val = ((__uint16_t)(__builtin_constant_p((uint16_t)l) ? ((__uint16_t)((((__uint16_t)((uint16_t)l) & 0xff00) >> 8) | (((__uint16_t)((uint16_t)l) & 0x00ff) << 8))) : _OSSwapInt16((uint16_t)l))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 3);
    } else {
        unsigned char buf[5];
        buf[0] = 0xc6; do { uint32_t val = (__builtin_constant_p((uint32_t)l) ? ((__uint32_t)((((__uint32_t)((uint32_t)l) & 0xff000000) >> 24) | (((__uint32_t)((uint32_t)l) & 0x00ff0000) >> 8) | (((__uint32_t)((uint32_t)l) & 0x0000ff00) << 8) | (((__uint32_t)((uint32_t)l) & 0x000000ff) << 24))) : _OSSwapInt32((uint32_t)l)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0);
        return (*(x)->callback)((x)->data, (const char*)buf, 5);
    }
}

inline int msgpack_pack_bin_body(msgpack_packer* x, const void* b, size_t l)
{
    return (*(x)->callback)((x)->data, (const char*)(const unsigned char*)b, l);
}





inline int msgpack_pack_ext(msgpack_packer* x, size_t l, int8_t type)
{
    switch(l) {
    case 1: {
        unsigned char buf[2];
        buf[0] = 0xd4;
        buf[1] = type;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } break;
    case 2: {
        unsigned char buf[2];
        buf[0] = 0xd5;
        buf[1] = type;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } break;
    case 4: {
        unsigned char buf[2];
        buf[0] = 0xd6;
        buf[1] = type;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } break;
    case 8: {
        unsigned char buf[2];
        buf[0] = 0xd7;
        buf[1] = type;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } break;
    case 16: {
        unsigned char buf[2];
        buf[0] = 0xd8;
        buf[1] = type;
        return (*(x)->callback)((x)->data, (const char*)buf, 2);
    } break;
    default:
        if(l < 256) {
            unsigned char buf[3];
            buf[0] = 0xc7;
            buf[1] = (unsigned char)l;
            buf[2] = type;
            return (*(x)->callback)((x)->data, (const char*)buf, 3);
        } else if(l < 65536) {
            unsigned char buf[4];
            buf[0] = 0xc8;
            do { uint16_t val = ((__uint16_t)(__builtin_constant_p(l) ? ((__uint16_t)((((__uint16_t)(l) & 0xff00) >> 8) | (((__uint16_t)(l) & 0x00ff) << 8))) : _OSSwapInt16(l))); __builtin___memcpy_chk (&buf[1], &val, 2, __builtin_object_size (&buf[1], 0)); } while(0);
            buf[3] = type;
            return (*(x)->callback)((x)->data, (const char*)buf, 4);
        } else {
            unsigned char buf[6];
            buf[0] = 0xc9;
            do { uint32_t val = (__builtin_constant_p(l) ? ((__uint32_t)((((__uint32_t)(l) & 0xff000000) >> 24) | (((__uint32_t)(l) & 0x00ff0000) >> 8) | (((__uint32_t)(l) & 0x0000ff00) << 8) | (((__uint32_t)(l) & 0x000000ff) << 24))) : _OSSwapInt32(l)); __builtin___memcpy_chk (&buf[1], &val, 4, __builtin_object_size (&buf[1], 0)); } while(0);
            buf[5] = type;
            return (*(x)->callback)((x)->data, (const char*)buf, 6);
        }
        break;
    }
}

inline int msgpack_pack_ext_body(msgpack_packer* x, const void* b, size_t l)
{
    return (*(x)->callback)((x)->data, (const char*)(const unsigned char*)b, l);
}
# 122 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/pack.h" 2

inline void msgpack_packer_init(msgpack_packer* pk, void* data, msgpack_packer_write callback)
{
    pk->data = data;
    pk->callback = callback;
}

inline msgpack_packer* msgpack_packer_new(void* data, msgpack_packer_write callback)
{
    msgpack_packer* pk = (msgpack_packer*)calloc(1, sizeof(msgpack_packer));
    if(!pk) { return ((void*)0); }
    msgpack_packer_init(pk, data, callback);
    return pk;
}

inline void msgpack_packer_free(msgpack_packer* pk)
{
    free(pk);
}
# 20 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/unpack.h" 1
# 28 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/unpack.h"
typedef struct msgpack_unpacked {
    msgpack_zone* zone;
    msgpack_object data;
} msgpack_unpacked;

typedef enum {
    MSGPACK_UNPACK_SUCCESS = 2,
    MSGPACK_UNPACK_EXTRA_BYTES = 1,
    MSGPACK_UNPACK_CONTINUE = 0,
    MSGPACK_UNPACK_PARSE_ERROR = -1,
    MSGPACK_UNPACK_NOMEM_ERROR = -2
} msgpack_unpack_return;



msgpack_unpack_return
msgpack_unpack_next(msgpack_unpacked* result,
        const char* data, size_t len, size_t* off);
# 56 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/unpack.h"
typedef struct msgpack_unpacker {
    char* buffer;
    size_t used;
    size_t free;
    size_t off;
    size_t parsed;
    msgpack_zone* z;
    size_t initial_buffer_size;
    void* ctx;
} msgpack_unpacker;
# 77 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/unpack.h"
_Bool msgpack_unpacker_init(msgpack_unpacker* mpac, size_t initial_buffer_size);





void msgpack_unpacker_destroy(msgpack_unpacker* mpac);







msgpack_unpacker* msgpack_unpacker_new(size_t initial_buffer_size);





void msgpack_unpacker_free(msgpack_unpacker* mpac);
# 111 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/unpack.h"
static inline _Bool msgpack_unpacker_reserve_buffer(msgpack_unpacker* mpac, size_t size);
# 120 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/unpack.h"
static inline char* msgpack_unpacker_buffer(msgpack_unpacker* mpac);
# 129 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/unpack.h"
static inline size_t msgpack_unpacker_buffer_capacity(const msgpack_unpacker* mpac);
# 138 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/unpack.h"
static inline void msgpack_unpacker_buffer_consumed(msgpack_unpacker* mpac, size_t size);
# 147 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/unpack.h"
msgpack_unpack_return msgpack_unpacker_next(msgpack_unpacker* mpac, msgpack_unpacked* pac);
# 157 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/unpack.h"
msgpack_unpack_return msgpack_unpacker_next_with_size(msgpack_unpacker* mpac,
                                                      msgpack_unpacked* result,
                                                      size_t *p_bytes);







static inline void msgpack_unpacked_init(msgpack_unpacked* result);




static inline void msgpack_unpacked_destroy(msgpack_unpacked* result);





static inline msgpack_zone* msgpack_unpacked_release_zone(msgpack_unpacked* result);



int msgpack_unpacker_execute(msgpack_unpacker* mpac);


msgpack_object msgpack_unpacker_data(msgpack_unpacker* mpac);


msgpack_zone* msgpack_unpacker_release_zone(msgpack_unpacker* mpac);


void msgpack_unpacker_reset_zone(msgpack_unpacker* mpac);


void msgpack_unpacker_reset(msgpack_unpacker* mpac);

static inline size_t msgpack_unpacker_message_size(const msgpack_unpacker* mpac);







msgpack_unpack_return
msgpack_unpack(const char* data, size_t len, size_t* off,
        msgpack_zone* result_zone, msgpack_object* result);




static inline size_t msgpack_unpacker_parsed_size(const msgpack_unpacker* mpac);


_Bool msgpack_unpacker_flush_zone(msgpack_unpacker* mpac);


_Bool msgpack_unpacker_expand_buffer(msgpack_unpacker* mpac, size_t size);

static inline _Bool msgpack_unpacker_reserve_buffer(msgpack_unpacker* mpac, size_t size)
{
    if(mpac->free >= size) { return 1; }
    return msgpack_unpacker_expand_buffer(mpac, size);
}

static inline char* msgpack_unpacker_buffer(msgpack_unpacker* mpac)
{
    return mpac->buffer + mpac->used;
}

static inline size_t msgpack_unpacker_buffer_capacity(const msgpack_unpacker* mpac)
{
    return mpac->free;
}

static inline void msgpack_unpacker_buffer_consumed(msgpack_unpacker* mpac, size_t size)
{
    mpac->used += size;
    mpac->free -= size;
}

static inline size_t msgpack_unpacker_message_size(const msgpack_unpacker* mpac)
{
    return mpac->parsed - mpac->off + mpac->used;
}

static inline size_t msgpack_unpacker_parsed_size(const msgpack_unpacker* mpac)
{
    return mpac->parsed;
}


static inline void msgpack_unpacked_init(msgpack_unpacked* result)
{
    __builtin___memset_chk (result, 0, sizeof(msgpack_unpacked), __builtin_object_size (result, 0));
}

static inline void msgpack_unpacked_destroy(msgpack_unpacked* result)
{
    if(result->zone != ((void*)0)) {
        msgpack_zone_free(result->zone);
        result->zone = ((void*)0);
        __builtin___memset_chk (&result->data, 0, sizeof(msgpack_object), __builtin_object_size (&result->data, 0));
    }
}

static inline msgpack_zone* msgpack_unpacked_release_zone(msgpack_unpacked* result)
{
    if(result->zone != ((void*)0)) {
        msgpack_zone* z = result->zone;
        result->zone = ((void*)0);
        return z;
    }
    return ((void*)0);
}
# 21 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sbuffer.h" 1
# 27 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/sbuffer.h"
typedef struct msgpack_sbuffer {
    size_t size;
    char* data;
    size_t alloc;
} msgpack_sbuffer;

static inline void msgpack_sbuffer_init(msgpack_sbuffer* sbuf)
{
    __builtin___memset_chk (sbuf, 0, sizeof(msgpack_sbuffer), __builtin_object_size (sbuf, 0));
}

static inline void msgpack_sbuffer_destroy(msgpack_sbuffer* sbuf)
{
    free(sbuf->data);
}

static inline msgpack_sbuffer* msgpack_sbuffer_new(void)
{
    return (msgpack_sbuffer*)calloc(1, sizeof(msgpack_sbuffer));
}

static inline void msgpack_sbuffer_free(msgpack_sbuffer* sbuf)
{
    if(sbuf == ((void*)0)) { return; }
    msgpack_sbuffer_destroy(sbuf);
    free(sbuf);
}





static inline int msgpack_sbuffer_write(void* data, const char* buf, size_t len)
{
    msgpack_sbuffer* sbuf = (msgpack_sbuffer*)data;

    if(sbuf->alloc - sbuf->size < len) {
        void* tmp;
        size_t nsize = (sbuf->alloc) ?
                sbuf->alloc * 2 : 8192;

        while(nsize < sbuf->size + len) {
            size_t tmp_nsize = nsize * 2;
            if (tmp_nsize <= nsize) {
                nsize = sbuf->size + len;
                break;
            }
            nsize = tmp_nsize;
        }

        tmp = realloc(sbuf->data, nsize);
        if(!tmp) { return -1; }

        sbuf->data = (char*)tmp;
        sbuf->alloc = nsize;
    }

    __builtin___memcpy_chk (sbuf->data + sbuf->size, buf, len, __builtin_object_size (sbuf->data + sbuf->size, 0));
    sbuf->size += len;
    return 0;
}

static inline char* msgpack_sbuffer_release(msgpack_sbuffer* sbuf)
{
    char* tmp = sbuf->data;
    sbuf->size = 0;
    sbuf->data = ((void*)0);
    sbuf->alloc = 0;
    return tmp;
}

static inline void msgpack_sbuffer_clear(msgpack_sbuffer* sbuf)
{
    sbuf->size = 0;
}
# 22 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/vrefbuffer.h" 1
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/vrefbuffer.h"
# 1 "/usr/include/sys/uio.h" 1 3 4
# 90 "/usr/include/sys/uio.h" 3 4
enum uio_rw { UIO_READ, UIO_WRITE };





ssize_t readv(int, const struct iovec *, int) __asm("_" "readv" );
ssize_t writev(int, const struct iovec *, int) __asm("_" "writev" );
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/vrefbuffer.h" 2
# 36 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/vrefbuffer.h"
struct msgpack_vrefbuffer_chunk;
typedef struct msgpack_vrefbuffer_chunk msgpack_vrefbuffer_chunk;

typedef struct msgpack_vrefbuffer_inner_buffer {
    size_t free;
    char* ptr;
    msgpack_vrefbuffer_chunk* head;
} msgpack_vrefbuffer_inner_buffer;

typedef struct msgpack_vrefbuffer {
    struct iovec* tail;
    struct iovec* end;
    struct iovec* array;

    size_t chunk_size;
    size_t ref_size;

    msgpack_vrefbuffer_inner_buffer inner_buffer;
} msgpack_vrefbuffer;
# 66 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/vrefbuffer.h"
_Bool msgpack_vrefbuffer_init(msgpack_vrefbuffer* vbuf,
        size_t ref_size, size_t chunk_size);

void msgpack_vrefbuffer_destroy(msgpack_vrefbuffer* vbuf);

static inline msgpack_vrefbuffer* msgpack_vrefbuffer_new(size_t ref_size, size_t chunk_size);
static inline void msgpack_vrefbuffer_free(msgpack_vrefbuffer* vbuf);

static inline int msgpack_vrefbuffer_write(void* data, const char* buf, size_t len);

static inline const struct iovec* msgpack_vrefbuffer_vec(const msgpack_vrefbuffer* vref);
static inline size_t msgpack_vrefbuffer_veclen(const msgpack_vrefbuffer* vref);


int msgpack_vrefbuffer_append_copy(msgpack_vrefbuffer* vbuf,
        const char* buf, size_t len);


int msgpack_vrefbuffer_append_ref(msgpack_vrefbuffer* vbuf,
        const char* buf, size_t len);


int msgpack_vrefbuffer_migrate(msgpack_vrefbuffer* vbuf, msgpack_vrefbuffer* to);


void msgpack_vrefbuffer_clear(msgpack_vrefbuffer* vref);




static inline msgpack_vrefbuffer* msgpack_vrefbuffer_new(size_t ref_size, size_t chunk_size)
{
    msgpack_vrefbuffer* vbuf = (msgpack_vrefbuffer*)malloc(sizeof(msgpack_vrefbuffer));
    if (vbuf == ((void*)0)) return ((void*)0);
    if(!msgpack_vrefbuffer_init(vbuf, ref_size, chunk_size)) {
        free(vbuf);
        return ((void*)0);
    }
    return vbuf;
}

static inline void msgpack_vrefbuffer_free(msgpack_vrefbuffer* vbuf)
{
    if(vbuf == ((void*)0)) { return; }
    msgpack_vrefbuffer_destroy(vbuf);
    free(vbuf);
}

static inline int msgpack_vrefbuffer_write(void* data, const char* buf, size_t len)
{
    msgpack_vrefbuffer* vbuf = (msgpack_vrefbuffer*)data;

    if(len < vbuf->ref_size) {
        return msgpack_vrefbuffer_append_copy(vbuf, buf, len);
    } else {
        return msgpack_vrefbuffer_append_ref(vbuf, buf, len);
    }
}

static inline const struct iovec* msgpack_vrefbuffer_vec(const msgpack_vrefbuffer* vref)
{
    return vref->array;
}

static inline size_t msgpack_vrefbuffer_veclen(const msgpack_vrefbuffer* vref)
{
    return (size_t)(vref->tail - vref->array);
}
# 23 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/version.h" 1
# 18 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/version.h"
const char* msgpack_version(void);

int msgpack_version_major(void);

int msgpack_version_minor(void);

int msgpack_version_revision(void);


# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/version_master.h" 1
# 27 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack/version.h" 2
# 24 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 2
# 18 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/assert.h" 1
# 20 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h" 1



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/types.h" 1






typedef void *vim_acl_T;



typedef unsigned char char_u;


typedef uint32_t u8char_T;

typedef struct expand expand_T;






typedef char_u schar_T;
typedef unsigned short sattr_T;


typedef struct {
  schar_T *ScreenLines;
  sattr_T *ScreenAttrs;
  unsigned *LineOffset;
  char_u *LineWraps;

  u8char_T *ScreenLinesUC;
  u8char_T *ScreenLinesC[6];
  int Screen_mco;

  int Rows;
  int Columns;
} ScreenGrid;
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/pos.h" 1



typedef long linenr_T;




typedef int colnr_T;
# 19 "/Users/a/Documents/projects/neovim-src/src/nvim/pos.h"
typedef struct {
  linenr_T lnum;
  colnr_T col;
  colnr_T coladd;
} pos_T;






typedef struct {
  linenr_T lnum;
  colnr_T col;
} lpos_T;
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h" 2








# 1 "/Users/a/Documents/projects/neovim-src/build/config/auto/config.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h" 2
# 24 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h"
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/os_defs.h" 1



# 1 "/usr/include/ctype.h" 1 3 4
# 70 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/runetype.h" 1 3 4
# 49 "/usr/include/runetype.h" 3 4
# 1 "/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 50 "/usr/include/runetype.h" 2 3 4
# 1 "/usr/include/sys/_types/_wint_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_wint_t.h" 3 4
typedef __darwin_wint_t wint_t;
# 51 "/usr/include/runetype.h" 2 3 4
# 60 "/usr/include/runetype.h" 3 4
typedef struct {
 __darwin_rune_t __min;
 __darwin_rune_t __max;
 __darwin_rune_t __map;
 __uint32_t *__types;
} _RuneEntry;

typedef struct {
 int __nranges;
 _RuneEntry *__ranges;
} _RuneRange;

typedef struct {
 char __name[14];
 __uint32_t __mask;
} _RuneCharClass;

typedef struct {
 char __magic[8];
 char __encoding[32];

 __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, char const **);
 int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);
 __darwin_rune_t __invalid_rune;

 __uint32_t __runetype[(1 <<8 )];
 __darwin_rune_t __maplower[(1 <<8 )];
 __darwin_rune_t __mapupper[(1 <<8 )];






 _RuneRange __runetype_ext;
 _RuneRange __maplower_ext;
 _RuneRange __mapupper_ext;

 void *__variable;
 int __variable_len;




 int __ncharclasses;
 _RuneCharClass *__charclasses;
} _RuneLocale;




extern _RuneLocale _DefaultRuneLocale;
extern _RuneLocale *_CurrentRuneLocale;
# 71 "/usr/include/ctype.h" 2 3 4
# 129 "/usr/include/ctype.h" 3 4
unsigned long ___runetype(__darwin_ct_rune_t);
__darwin_ct_rune_t ___tolower(__darwin_ct_rune_t);
__darwin_ct_rune_t ___toupper(__darwin_ct_rune_t);


inline int
isascii(int _c)
{
 return ((_c & ~0x7F) == 0);
}
# 148 "/usr/include/ctype.h" 3 4
int __maskrune(__darwin_ct_rune_t, unsigned long);



inline int
__istype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (isascii(_c) ? !!(_DefaultRuneLocale.__runetype[_c] & _f)
  : !!__maskrune(_c, _f));

}

inline __darwin_ct_rune_t
__isctype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (_c < 0 || _c >= (1 <<8 )) ? 0 :
  !!(_DefaultRuneLocale.__runetype[_c] & _f);

}
# 188 "/usr/include/ctype.h" 3 4
__darwin_ct_rune_t __toupper(__darwin_ct_rune_t);
__darwin_ct_rune_t __tolower(__darwin_ct_rune_t);



inline int
__wcwidth(__darwin_ct_rune_t _c)
{
 unsigned int _x;

 if (_c == 0)
  return (0);
 _x = (unsigned int)__maskrune(_c, 0xe0000000L|0x00040000L);
 if ((_x & 0xe0000000L) != 0)
  return ((_x & 0xe0000000L) >> 30);
 return ((_x & 0x00040000L) != 0 ? 1 : -1);
}






inline int
isalnum(int _c)
{
 return (__istype(_c, 0x00000100L|0x00000400L));
}

inline int
isalpha(int _c)
{
 return (__istype(_c, 0x00000100L));
}

inline int
isblank(int _c)
{
 return (__istype(_c, 0x00020000L));
}

inline int
iscntrl(int _c)
{
 return (__istype(_c, 0x00000200L));
}


inline int
isdigit(int _c)
{
 return (__isctype(_c, 0x00000400L));
}

inline int
isgraph(int _c)
{
 return (__istype(_c, 0x00000800L));
}

inline int
islower(int _c)
{
 return (__istype(_c, 0x00001000L));
}

inline int
isprint(int _c)
{
 return (__istype(_c, 0x00040000L));
}

inline int
ispunct(int _c)
{
 return (__istype(_c, 0x00002000L));
}

inline int
isspace(int _c)
{
 return (__istype(_c, 0x00004000L));
}

inline int
isupper(int _c)
{
 return (__istype(_c, 0x00008000L));
}


inline int
isxdigit(int _c)
{
 return (__isctype(_c, 0x00010000L));
}

inline int
toascii(int _c)
{
 return (_c & 0x7F);
}

inline int
tolower(int _c)
{
        return (__tolower(_c));
}

inline int
toupper(int _c)
{
        return (__toupper(_c));
}


inline int
digittoint(int _c)
{
 return (__maskrune(_c, 0x0F));
}

inline int
ishexnumber(int _c)
{
 return (__istype(_c, 0x00010000L));
}

inline int
isideogram(int _c)
{
 return (__istype(_c, 0x00080000L));
}

inline int
isnumber(int _c)
{
 return (__istype(_c, 0x00000400L));
}

inline int
isphonogram(int _c)
{
 return (__istype(_c, 0x00200000L));
}

inline int
isrune(int _c)
{
 return (__istype(_c, 0xFFFFFFF0L));
}

inline int
isspecial(int _c)
{
 return (__istype(_c, 0x00100000L));
}
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/os/os_defs.h" 2


# 1 "/usr/include/sys/param.h" 1 3 4
# 107 "/usr/include/sys/param.h" 3 4
# 1 "/usr/include/machine/param.h" 1 3 4
# 35 "/usr/include/machine/param.h" 3 4
# 1 "/usr/include/i386/param.h" 1 3 4
# 36 "/usr/include/machine/param.h" 2 3 4
# 108 "/usr/include/sys/param.h" 2 3 4
# 8 "/Users/a/Documents/projects/neovim-src/src/nvim/os/os_defs.h" 2
# 1 "/usr/include/sys/stat.h" 1 3 4
# 78 "/usr/include/sys/stat.h" 3 4
# 1 "/usr/include/sys/_types/_timespec.h" 1 3 4
# 30 "/usr/include/sys/_types/_timespec.h" 3 4
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 79 "/usr/include/sys/stat.h" 2 3 4
# 110 "/usr/include/sys/stat.h" 3 4
struct ostat {
 __uint16_t st_dev;
 ino_t st_ino;
 mode_t st_mode;
 nlink_t st_nlink;
 __uint16_t st_uid;
 __uint16_t st_gid;
 __uint16_t st_rdev;
 __int32_t st_size;
 struct timespec st_atimespec;
 struct timespec st_mtimespec;
 struct timespec st_ctimespec;
 __int32_t st_blksize;
 __int32_t st_blocks;
 __uint32_t st_flags;
 __uint32_t st_gen;
};
# 182 "/usr/include/sys/stat.h" 3 4
struct stat { dev_t st_dev; mode_t st_mode; nlink_t st_nlink; __darwin_ino64_t st_ino; uid_t st_uid; gid_t st_gid; dev_t st_rdev; struct timespec st_atimespec; struct timespec st_mtimespec; struct timespec st_ctimespec; struct timespec st_birthtimespec; off_t st_size; blkcnt_t st_blocks; blksize_t st_blksize; __uint32_t st_flags; __uint32_t st_gen; __int32_t st_lspare; __int64_t st_qspare[2]; };
# 221 "/usr/include/sys/stat.h" 3 4
struct stat64 { dev_t st_dev; mode_t st_mode; nlink_t st_nlink; __darwin_ino64_t st_ino; uid_t st_uid; gid_t st_gid; dev_t st_rdev; struct timespec st_atimespec; struct timespec st_mtimespec; struct timespec st_ctimespec; struct timespec st_birthtimespec; off_t st_size; blkcnt_t st_blocks; blksize_t st_blksize; __uint32_t st_flags; __uint32_t st_gen; __int32_t st_lspare; __int64_t st_qspare[2]; };
# 241 "/usr/include/sys/stat.h" 3 4
# 1 "/usr/include/sys/_types/_s_ifmt.h" 1 3 4
# 242 "/usr/include/sys/stat.h" 2 3 4
# 352 "/usr/include/sys/stat.h" 3 4
int chmod(const char *, mode_t) __asm("_" "chmod" );
int fchmod(int, mode_t) __asm("_" "fchmod" );
int fstat(int, struct stat *) __asm("_" "fstat" "$INODE64");
int lstat(const char *, struct stat *) __asm("_" "lstat" "$INODE64");
int mkdir(const char *, mode_t);
int mkfifo(const char *, mode_t);
int stat(const char *, struct stat *) __asm("_" "stat" "$INODE64");
int mknod(const char *, mode_t, dev_t);
mode_t umask(mode_t);


int fchmodat(int, const char *, mode_t, int) __attribute__((availability(macosx,introduced=10.10)));
int fstatat(int, const char *, struct stat *, int) __asm("_" "fstatat" "$INODE64") __attribute__((availability(macosx,introduced=10.10)));
int mkdirat(int, const char *, mode_t) __attribute__((availability(macosx,introduced=10.10)));





# 1 "/usr/include/sys/_types/_filesec_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_filesec_t.h" 3 4
struct _filesec;
typedef struct _filesec *filesec_t;
# 371 "/usr/include/sys/stat.h" 2 3 4

int chflags(const char *, __uint32_t);
int chmodx_np(const char *, filesec_t);
int fchflags(int, __uint32_t);
int fchmodx_np(int, filesec_t);
int fstatx_np(int, struct stat *, filesec_t) __asm("_" "fstatx_np" "$INODE64");
int lchflags(const char *, __uint32_t) __attribute__((availability(macosx,introduced=10.5)));
int lchmod(const char *, mode_t) __attribute__((availability(macosx,introduced=10.5)));
int lstatx_np(const char *, struct stat *, filesec_t) __asm("_" "lstatx_np" "$INODE64");
int mkdirx_np(const char *, filesec_t);
int mkfifox_np(const char *, filesec_t);
int statx_np(const char *, struct stat *, filesec_t) __asm("_" "statx_np" "$INODE64");
int umaskx_np(filesec_t) __attribute__((availability(macosx,introduced=10.4,deprecated=10.6)));



int fstatx64_np(int, struct stat64 *, filesec_t) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
int lstatx64_np(const char *, struct stat64 *, filesec_t) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
int statx64_np(const char *, struct stat64 *, filesec_t) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
int fstat64(int, struct stat64 *) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
int lstat64(const char *, struct stat64 *) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
int stat64(const char *, struct stat64 *) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/os/os_defs.h" 2





# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/unix_defs.h" 1





# 1 "/usr/include/unistd.h" 1 3 4
# 72 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/sys/unistd.h" 1 3 4
# 84 "/usr/include/sys/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_posix_vdisable.h" 1 3 4
# 85 "/usr/include/sys/unistd.h" 2 3 4
# 122 "/usr/include/sys/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_seek_set.h" 1 3 4
# 123 "/usr/include/sys/unistd.h" 2 3 4
# 132 "/usr/include/sys/unistd.h" 3 4
struct accessx_descriptor {
 unsigned int ad_name_offset;
 int ad_flags;
 int ad_pad[2];
};
# 186 "/usr/include/sys/unistd.h" 3 4
int getattrlistbulk(int, void *, void *, size_t, uint64_t) __attribute__((availability(macosx,introduced=10.10)));
# 204 "/usr/include/sys/unistd.h" 3 4
int faccessat(int, const char *, int, int) __attribute__((availability(macosx,introduced=10.10)));
int fchownat(int, const char *, uid_t, gid_t, int) __attribute__((availability(macosx,introduced=10.10)));
int linkat(int, const char *, int, const char *, int) __attribute__((availability(macosx,introduced=10.10)));
ssize_t readlinkat(int, const char *, char *, size_t) __attribute__((availability(macosx,introduced=10.10)));
int symlinkat(const char *, int, const char *) __attribute__((availability(macosx,introduced=10.10)));
int unlinkat(int, const char *, int) __attribute__((availability(macosx,introduced=10.10)));
int getattrlistat(int, const char *, void *, void *, size_t, unsigned long) __attribute__((availability(macosx,introduced=10.10)));
# 73 "/usr/include/unistd.h" 2 3 4
# 429 "/usr/include/unistd.h" 3 4
void _exit(int) __attribute__((noreturn));
int access(const char *, int);
unsigned int
  alarm(unsigned int);
int chdir(const char *);
int chown(const char *, uid_t, gid_t);

int close(int) __asm("_" "close" );

int dup(int);
int dup2(int, int);
int execl(const char * __path, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execle(const char * __path, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execlp(const char * __file, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execv(const char * __path, char * const * __argv) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execve(const char * __file, char * const * __argv, char * const * __envp) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execvp(const char * __file, char * const * __argv) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
pid_t fork(void) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
long fpathconf(int, int);
char *getcwd(char *, size_t);
gid_t getegid(void);
uid_t geteuid(void);
gid_t getgid(void);



int getgroups(int, gid_t []);

char *getlogin(void);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
uid_t getuid(void);
int isatty(int);
int link(const char *, const char *);
off_t lseek(int, off_t, int);
long pathconf(const char *, int);

int pause(void) __asm("_" "pause" );

int pipe(int [2]);

ssize_t read(int, void *, size_t) __asm("_" "read" );

int rmdir(const char *);
int setgid(gid_t);
int setpgid(pid_t, pid_t);
pid_t setsid(void);
int setuid(uid_t);

unsigned int
  sleep(unsigned int) __asm("_" "sleep" );

long sysconf(int);
pid_t tcgetpgrp(int);
int tcsetpgrp(int, pid_t);
char *ttyname(int);


int ttyname_r(int, char *, size_t) __asm("_" "ttyname_r" );




int unlink(const char *);

ssize_t write(int __fd, const void * __buf, size_t __nbyte) __asm("_" "write" );
# 506 "/usr/include/unistd.h" 3 4
size_t confstr(int, char *, size_t) __asm("_" "confstr" );

int getopt(int, char * const [], const char *) __asm("_" "getopt" );

extern char *optarg;
extern int optind, opterr, optopt;
# 536 "/usr/include/unistd.h" 3 4
__attribute__((deprecated)) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))

void *brk(const void *);
int chroot(const char *) ;


char *crypt(const char *, const char *);






void encrypt(char *, int) __asm("_" "encrypt" );



int fchdir(int);
long gethostid(void);
pid_t getpgid(pid_t);
pid_t getsid(pid_t);



int getdtablesize(void) ;
int getpagesize(void) __attribute__((const)) ;
char *getpass(const char *) ;




char *getwd(char *) ;


int lchown(const char *, uid_t, gid_t) __asm("_" "lchown" );

int lockf(int, int, off_t) __asm("_" "lockf" );

int nice(int) __asm("_" "nice" );

ssize_t pread(int __fd, void * __buf, size_t __nbyte, off_t __offset) __asm("_" "pread" );

ssize_t pwrite(int __fd, const void * __buf, size_t __nbyte, off_t __offset) __asm("_" "pwrite" );






__attribute__((deprecated)) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))

void *sbrk(int);



pid_t setpgrp(void) __asm("_" "setpgrp" );




int setregid(gid_t, gid_t) __asm("_" "setregid" );

int setreuid(uid_t, uid_t) __asm("_" "setreuid" );

void swab(const void * restrict, void * restrict, ssize_t);
void sync(void);
int truncate(const char *, off_t);
useconds_t ualarm(useconds_t, useconds_t);
int usleep(useconds_t) __asm("_" "usleep" );
pid_t vfork(void) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));


int fsync(int) __asm("_" "fsync" );

int ftruncate(int, off_t);
int getlogin_r(char *, size_t);
# 624 "/usr/include/unistd.h" 3 4
int fchown(int, uid_t, gid_t);
int gethostname(char *, size_t);
ssize_t readlink(const char * restrict, char * restrict, size_t);
int setegid(gid_t);
int seteuid(uid_t);
int symlink(const char *, const char *);
# 638 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 114 "/usr/include/sys/select.h" 3 4
int pselect(int, fd_set * restrict, fd_set * restrict,
  fd_set * restrict, const struct timespec * restrict,
  const sigset_t * restrict)




  __asm("_" "pselect" "$1050")




  ;



# 1 "/usr/include/sys/_select.h" 1 3 4
# 39 "/usr/include/sys/_select.h" 3 4
int select(int, fd_set * restrict, fd_set * restrict,
  fd_set * restrict, struct timeval * restrict)




  __asm("_" "select" "$1050")




  ;
# 130 "/usr/include/sys/select.h" 2 3 4
# 639 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/sys/_types/_uuid_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_uuid_t.h" 3 4
typedef __darwin_uuid_t uuid_t;
# 643 "/usr/include/unistd.h" 2 3 4


void _Exit(int) __attribute__((noreturn));
int accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t);
int acct(const char *);
int add_profil(char *, size_t, unsigned long, unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
void endusershell(void);
int execvP(const char * __file, const char * __searchpath, char * const * __argv) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
char *fflagstostr(unsigned long);
int getdomainname(char *, int);
int getgrouplist(const char *, int, int *, int *);





# 1 "/usr/include/gethostuuid.h" 1 3 4
# 39 "/usr/include/gethostuuid.h" 3 4
int gethostuuid(uuid_t, const struct timespec *) __attribute__((availability(macosx,introduced=10.5)));
# 659 "/usr/include/unistd.h" 2 3 4




mode_t getmode(const void *, mode_t);
int getpeereid(int, uid_t *, gid_t *);
int getsgroups_np(int *, uuid_t);
char *getusershell(void);
int getwgroups_np(int *, uuid_t);
int initgroups(const char *, int);
int issetugid(void);
char *mkdtemp(char *);
int mknod(const char *, mode_t, dev_t);
int mkpath_np(const char *path, mode_t omode) __attribute__((availability(macosx,introduced=10.8)));
int mkpathat_np(int dfd, const char *path, mode_t omode)
  __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int mkstemp(char *);
int mkstemps(char *, int);
char *mktemp(char *);
int mkostemp(char *path, int oflags)
  __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int mkostemps(char *path, int slen, int oflags)
  __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));

int mkstemp_dprotected_np(char *path, int dpclass, int dpflags)
  __attribute__((availability(macosx,unavailable))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int nfssvc(int, void *);
int profil(char *, size_t, unsigned long, unsigned int);
int pthread_setugid_np(uid_t, gid_t);
int pthread_getugid_np( uid_t *, gid_t *);
int reboot(int);
int revoke(const char *);

__attribute__((deprecated)) int rcmd(char **, int, const char *, const char *, const char *, int *);
__attribute__((deprecated)) int rcmd_af(char **, int, const char *, const char *, const char *, int *,
  int);
__attribute__((deprecated)) int rresvport(int *);
__attribute__((deprecated)) int rresvport_af(int *, int);
__attribute__((deprecated)) int iruserok(unsigned long, int, const char *, const char *);
__attribute__((deprecated)) int iruserok_sa(const void *, int, int, const char *, const char *);
__attribute__((deprecated)) int ruserok(const char *, int, const char *, const char *);

int setdomainname(const char *, int);
int setgroups(int, const gid_t *);
void sethostid(long);
int sethostname(const char *, int);

void setkey(const char *) __asm("_" "setkey" );



int setlogin(const char *);
void *setmode(const char *) __asm("_" "setmode" );
int setrgid(gid_t);
int setruid(uid_t);
int setsgroups_np(int, const uuid_t);
void setusershell(void);
int setwgroups_np(int, const uuid_t);
int strtofflags(char **, unsigned long *, unsigned long *);
int swapon(const char *);
int ttyslot(void);
int undelete(const char *);
int unwhiteout(const char *);
void *valloc(size_t);

__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
__attribute__((availability(ios,deprecated=10.0,message="syscall(2) is unsupported; " "please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost().")))

__attribute__((availability(macosx,deprecated=10.12,message="syscall(2) is unsupported; " "please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost().")))

int syscall(int, ...);

extern char *suboptarg;
int getsubopt(char **, char * const *, char **);



int fgetattrlist(int,void*,void*,size_t,unsigned int) __attribute__((availability(macosx,introduced=10.6)));
int fsetattrlist(int,void*,void*,size_t,unsigned int) __attribute__((availability(macosx,introduced=10.6)));
int getattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "getattrlist" );
int setattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "setattrlist" );
int exchangedata(const char*,const char*,unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int getdirentriesattr(int,void*,void*,size_t,unsigned int*,unsigned int*,unsigned int*,unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
# 757 "/usr/include/unistd.h" 3 4
struct fssearchblock;
struct searchstate;

int searchfs(const char *, struct fssearchblock *, unsigned long *, unsigned int, unsigned int, struct searchstate *) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int fsctl(const char *,unsigned long,void*,unsigned int);
int ffsctl(int,unsigned long,void*,unsigned int) __attribute__((availability(macosx,introduced=10.6)));




int fsync_volume_np(int, int) __attribute__((availability(macosx,introduced=10.8)));
int sync_volume_np(const char *, int) __attribute__((availability(macosx,introduced=10.8)));

extern int optreset;
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/os/unix_defs.h" 2
# 15 "/Users/a/Documents/projects/neovim-src/src/nvim/os/os_defs.h" 2



enum {
  OS_STDIN_FILENO = 0,
  OS_STDOUT_FILENO = 1,
  OS_STDERR_FILENO = 2,
};
# 25 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h" 2


enum { NUMBUFLEN = 65 };






# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/keymap.h" 1



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/strings.h" 1







# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 1




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 2



# 1 "/usr/include/assert.h" 1 3 4
# 10 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 2



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/hashtab.h" 1



# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/hashtab.h" 2






extern char hash_removed;


typedef size_t hash_T;
# 38 "/Users/a/Documents/projects/neovim-src/src/nvim/hashtab.h"
typedef struct hashitem_S {

  hash_T hi_hash;







  char_u *hi_key;
} hashitem_T;
# 62 "/Users/a/Documents/projects/neovim-src/src/nvim/hashtab.h"
typedef struct hashtable_S {
  hash_T ht_mask;

  size_t ht_used;
  size_t ht_filled;
  int ht_locked;
  hashitem_T *ht_array;

  hashitem_T ht_smallarray[16];
} hashtab_T;
# 14 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/garray.h" 1



# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/garray.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/log.h" 1
# 8 "/Users/a/Documents/projects/neovim-src/src/nvim/garray.h" 2




typedef struct growarray {
  int ga_len;
  int ga_maxlen;
  int ga_itemsize;
  int ga_growsize;
  void *ga_data;
} garray_T;
# 37 "/Users/a/Documents/projects/neovim-src/src/nvim/garray.h"
static inline void *ga_append_via_ptr(garray_T *gap, size_t item_size)
{
  if ((int)item_size != gap->ga_itemsize) {
                                                                           ;
  }
  ga_grow(gap, 1);
  return ((char *)gap->ga_data) + (item_size * (size_t)gap->ga_len++);
}
# 15 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/mbyte.h" 1







# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/iconv.h" 1
# 25 "/Users/a/Documents/projects/neovim-src/src/nvim/iconv.h"
# 1 "/usr/include/errno.h" 1 3 4
# 23 "/usr/include/errno.h" 3 4
# 1 "/usr/include/sys/errno.h" 1 3 4
# 80 "/usr/include/sys/errno.h" 3 4
extern int * __error(void);
# 24 "/usr/include/errno.h" 2 3 4
# 26 "/Users/a/Documents/projects/neovim-src/src/nvim/iconv.h" 2

# 1 "/usr/include/iconv.h" 1 3 4
# 29 "/usr/include/iconv.h" 3 4
extern int _libiconv_version;
# 51 "/usr/include/iconv.h" 3 4
typedef void* iconv_t;
# 62 "/usr/include/iconv.h" 3 4
iconv_t iconv_open (const char* , const char* );






size_t iconv (iconv_t ,
 char ** restrict , size_t * restrict ,
 char ** restrict , size_t * restrict );


int iconv_close (iconv_t );






# 1 "/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 81 "/usr/include/iconv.h" 2 3 4


int iconvctl (iconv_t , int , void* );


typedef void (*iconv_unicode_char_hook) (unsigned int uc, void* data);

typedef void (*iconv_wide_char_hook) (wchar_t wc, void* data);

struct iconv_hooks {
  iconv_unicode_char_hook uc_hook;
  iconv_wide_char_hook wc_hook;
  void* data;
};





typedef void (*iconv_unicode_mb_to_uc_fallback)
             (const char* inbuf, size_t inbufsize,
              void (*write_replacement) (const unsigned int *buf, size_t buflen,
                                         void* callback_arg),
              void* callback_arg,
              void* data);




typedef void (*iconv_unicode_uc_to_mb_fallback)
             (unsigned int code,
              void (*write_replacement) (const char *buf, size_t buflen,
                                         void* callback_arg),
              void* callback_arg,
              void* data);





typedef void (*iconv_wchar_mb_to_wc_fallback)
             (const char* inbuf, size_t inbufsize,
              void (*write_replacement) (const wchar_t *buf, size_t buflen,
                                         void* callback_arg),
              void* callback_arg,
              void* data);




typedef void (*iconv_wchar_wc_to_mb_fallback)
             (wchar_t code,
              void (*write_replacement) (const char *buf, size_t buflen,
                                         void* callback_arg),
              void* callback_arg,
              void* data);







struct iconv_fallbacks {
  iconv_unicode_mb_to_uc_fallback mb_to_uc_fallback;
  iconv_unicode_uc_to_mb_fallback uc_to_mb_fallback;
  iconv_wchar_mb_to_wc_fallback mb_to_wc_fallback;
  iconv_wchar_wc_to_mb_fallback wc_to_mb_fallback;
  void* data;
};
# 162 "/usr/include/iconv.h" 3 4
void iconvlist (int (* ) (unsigned int ,
                                      const char * const * ,
                                      void* ),
                       void* );



extern const char * iconv_canonicalize (const char * name);
# 178 "/usr/include/iconv.h" 3 4
void libiconv_set_relocation_prefix (const char * ,
         const char * );
# 28 "/Users/a/Documents/projects/neovim-src/src/nvim/iconv.h" 2
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/mbyte.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 44 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h"
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/macros.h" 1
# 45 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 2
# 10 "/Users/a/Documents/projects/neovim-src/src/nvim/mbyte.h" 2
# 54 "/Users/a/Documents/projects/neovim-src/src/nvim/mbyte.h"
typedef enum {
  CONV_NONE = 0,
  CONV_TO_UTF8 = 1,
  CONV_9_TO_UTF8 = 2,
  CONV_TO_LATIN1 = 3,
  CONV_TO_LATIN9 = 4,
  CONV_ICONV = 5,
} ConvFlags;
# 70 "/Users/a/Documents/projects/neovim-src/src/nvim/mbyte.h"
typedef struct {
  int vc_type;
  int vc_factor;

  iconv_t vc_fd;

  _Bool vc_fail;

} vimconv_T;

extern const uint8_t utf8len_tab_zero[256];

extern const uint8_t utf8len_tab[256];





static inline int mb_strcmp_ic(_Bool ic, const char *s1, const char *s2)
  __attribute__((nonnull)) __attribute__ ((pure)) __attribute__((warn_unused_result));






static inline int mb_strcmp_ic(_Bool ic, const char *s1, const char *s2)
{
  return (ic ? mb_stricmp(s1, s2) : strcmp(s1, s2));
}
# 16 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 17 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/queue.h" 1
# 23 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/queue.h"
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 24 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/queue.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 26 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/queue.h" 2

typedef struct _queue {
  struct _queue *next;
  struct _queue *prev;
} QUEUE;
# 43 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/queue.h"
static inline int QUEUE_EMPTY(const QUEUE *const q)
  FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
{
  return q == q->next;
}



static inline void QUEUE_INIT(QUEUE *const q) FUNC_ATTR_ALWAYS_INLINE
{
  q->next = q;
  q->prev = q;
}

static inline void QUEUE_ADD(QUEUE *const h, QUEUE *const n)
  FUNC_ATTR_ALWAYS_INLINE
{
  h->prev->next = n->next;
  n->next->prev = h->prev;
  h->prev = n->prev;
  h->prev->next = h;
}

static inline void QUEUE_INSERT_HEAD(QUEUE *const h, QUEUE *const q)
  FUNC_ATTR_ALWAYS_INLINE
{
  q->next = h->next;
  q->prev = h;
  q->next->prev = q;
  h->next = q;
}

static inline void QUEUE_INSERT_TAIL(QUEUE *const h, QUEUE *const q)
  FUNC_ATTR_ALWAYS_INLINE
{
  q->next = h;
  q->prev = h->prev;
  q->prev->next = q;
  h->prev = q;
}

static inline void QUEUE_REMOVE(QUEUE *const q) FUNC_ATTR_ALWAYS_INLINE
{
  q->prev->next = q->next;
  q->next->prev = q->prev;
}
# 18 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/profile.h" 1




# 1 "/usr/include/time.h" 1 3 4
# 74 "/usr/include/time.h" 3 4
struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};
# 97 "/usr/include/time.h" 3 4
extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" );

extern int daylight;


char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" );
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" );
size_t strftime(char * restrict, size_t, const char * restrict, const struct tm * restrict) __asm("_" "strftime" );
char *strptime(const char * restrict, const char * restrict, struct tm * restrict) __asm("_" "strptime" );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * restrict, char * restrict);
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * restrict, struct tm * restrict);
struct tm *localtime_r(const time_t * restrict, struct tm * restrict);


time_t posix2time(time_t);



void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *__rqtp, struct timespec *__rmtp) __asm("_" "nanosleep" );
# 152 "/usr/include/time.h" 3 4
typedef enum {
_CLOCK_REALTIME __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 0,

_CLOCK_MONOTONIC __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 6,


_CLOCK_MONOTONIC_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 4,

_CLOCK_MONOTONIC_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 5,

_CLOCK_UPTIME_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 8,

_CLOCK_UPTIME_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 9,


_CLOCK_PROCESS_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 12,

_CLOCK_THREAD_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 16

} clockid_t;

__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
int clock_getres(clockid_t __clock_id, struct timespec *__res);

__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
int clock_gettime(clockid_t __clock_id, struct timespec *__tp);


__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
__uint64_t clock_gettime_nsec_np(clockid_t __clock_id);


__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,unavailable)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable)))
int clock_settime(clockid_t __clock_id, const struct timespec *__tp);
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/profile.h" 2

typedef uint64_t proftime_T;
# 19 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/gettext.h" 1




# 1 "/usr/local/opt/gettext/include/libintl.h" 1
# 20 "/usr/local/opt/gettext/include/libintl.h"
# 1 "/usr/include/locale.h" 1 3 4
# 40 "/usr/include/locale.h" 3 4
# 1 "/usr/include/_locale.h" 1 3 4
# 43 "/usr/include/_locale.h" 3 4
struct lconv {
 char *decimal_point;
 char *thousands_sep;
 char *grouping;
 char *int_curr_symbol;
 char *currency_symbol;
 char *mon_decimal_point;
 char *mon_thousands_sep;
 char *mon_grouping;
 char *positive_sign;
 char *negative_sign;
 char int_frac_digits;
 char frac_digits;
 char p_cs_precedes;
 char p_sep_by_space;
 char n_cs_precedes;
 char n_sep_by_space;
 char p_sign_posn;
 char n_sign_posn;
 char int_p_cs_precedes;
 char int_n_cs_precedes;
 char int_p_sep_by_space;
 char int_n_sep_by_space;
 char int_p_sign_posn;
 char int_n_sign_posn;
};




struct lconv *localeconv(void);
# 41 "/usr/include/locale.h" 2 3 4
# 53 "/usr/include/locale.h" 3 4
char *setlocale(int, const char *);
# 21 "/usr/local/opt/gettext/include/libintl.h" 2

# 1 "/usr/include/xlocale.h" 1 3 4
# 33 "/usr/include/xlocale.h" 3 4
struct _xlocale;
typedef struct _xlocale * locale_t;



# 1 "/usr/include/_xlocale.h" 1 3 4
# 30 "/usr/include/_xlocale.h" 3 4
int ___mb_cur_max(void);
int ___mb_cur_max_l(locale_t);
# 38 "/usr/include/xlocale.h" 2 3 4
# 66 "/usr/include/xlocale.h" 3 4
extern const locale_t _c_locale;

locale_t duplocale(locale_t);
int freelocale(locale_t);
struct lconv * localeconv_l(locale_t);
locale_t newlocale(int, const char *, locale_t);
const char * querylocale(int, locale_t);
locale_t uselocale(locale_t);




# 1 "/usr/include/xlocale/_ctype.h" 1 3 4
# 35 "/usr/include/xlocale/_ctype.h" 3 4
unsigned long ___runetype_l(__darwin_ct_rune_t, locale_t);
__darwin_ct_rune_t ___tolower_l(__darwin_ct_rune_t, locale_t);
__darwin_ct_rune_t ___toupper_l(__darwin_ct_rune_t, locale_t);



int __maskrune_l(__darwin_ct_rune_t, unsigned long, locale_t);


inline int
__istype_l(__darwin_ct_rune_t _c, unsigned long _f, locale_t _l)
{
 return !!(isascii(_c) ? (_DefaultRuneLocale.__runetype[_c] & _f)
  : __maskrune_l(_c, _f, _l));
}

inline __darwin_ct_rune_t
__toupper_l(__darwin_ct_rune_t _c, locale_t _l)
{
 return isascii(_c) ? _DefaultRuneLocale.__mapupper[_c]
  : ___toupper_l(_c, _l);
}

inline __darwin_ct_rune_t
__tolower_l(__darwin_ct_rune_t _c, locale_t _l)
{
 return isascii(_c) ? _DefaultRuneLocale.__maplower[_c]
  : ___tolower_l(_c, _l);
}

inline int
__wcwidth_l(__darwin_ct_rune_t _c, locale_t _l)
{
 unsigned int _x;

 if (_c == 0)
  return (0);
 _x = (unsigned int)__maskrune_l(_c, 0xe0000000L|0x00040000L, _l);
 if ((_x & 0xe0000000L) != 0)
  return ((_x & 0xe0000000L) >> 30);
 return ((_x & 0x00040000L) != 0 ? 1 : -1);
}



inline int
digittoint_l(int c, locale_t l)
{
 return (__maskrune_l(c, 0x0F, l));
}

inline int
isalnum_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000100L|0x00000400L, l));
}

inline int
isalpha_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000100L, l));
}

inline int
isblank_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00020000L, l));
}

inline int
iscntrl_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000200L, l));
}

inline int
isdigit_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000400L, l));
}

inline int
isgraph_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000800L, l));
}

inline int
ishexnumber_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00010000L, l));
}

inline int
isideogram_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00080000L, l));
}

inline int
islower_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00001000L, l));
}

inline int
isnumber_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00000400L, l));
}

inline int
isphonogram_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00200000L, l));
}

inline int
isprint_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00040000L, l));
}

inline int
ispunct_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00002000L, l));
}

inline int
isrune_l(int c, locale_t l)
{
 return (__istype_l(c, 0xFFFFFFF0L, l));
}

inline int
isspace_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00004000L, l));
}

inline int
isspecial_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00100000L, l));
}

inline int
isupper_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00008000L, l));
}

inline int
isxdigit_l(int c, locale_t l)
{
 return (__istype_l(c, 0x00010000L, l));
}

inline int
tolower_l(int c, locale_t l)
{
        return (__tolower_l(c, l));
}

inline int
toupper_l(int c, locale_t l)
{
        return (__toupper_l(c, l));
}
# 78 "/usr/include/xlocale.h" 2 3 4





# 1 "/usr/include/xlocale/_inttypes.h" 1 3 4
# 28 "/usr/include/xlocale/_inttypes.h" 3 4
intmax_t strtoimax_l(const char * restrict nptr, char ** restrict endptr,
  int base, locale_t);
uintmax_t strtoumax_l(const char * restrict nptr, char ** restrict endptr,
  int base, locale_t);
intmax_t wcstoimax_l(const wchar_t * restrict nptr,
  wchar_t ** restrict endptr, int base, locale_t);
uintmax_t wcstoumax_l(const wchar_t * restrict nptr,
  wchar_t ** restrict endptr, int base, locale_t);
# 84 "/usr/include/xlocale.h" 2 3 4
# 95 "/usr/include/xlocale.h" 3 4
# 1 "/usr/include/xlocale/_stdio.h" 1 3 4
# 29 "/usr/include/xlocale/_stdio.h" 3 4
int fprintf_l(FILE * restrict, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 3, 4)));
int fscanf_l(FILE * restrict, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__scanf__, 3, 4)));
int printf_l(locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 2, 3)));
int scanf_l(locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__scanf__, 2, 3)));
int sprintf_l(char * restrict, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 3, 4))) __attribute__((__availability__(swift, unavailable, message="Use snprintf_l instead.")));
int sscanf_l(const char * restrict, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__scanf__, 3, 4)));
int vfprintf_l(FILE * restrict, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 3, 0)));
int vprintf_l(locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 2, 0)));
int vsprintf_l(char * restrict, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 3, 0))) __attribute__((__availability__(swift, unavailable, message="Use vsnprintf_l instead.")));


int snprintf_l(char * restrict, size_t, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 4, 5)));
int vfscanf_l(FILE * restrict, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__scanf__, 3, 0)));
int vscanf_l(locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__scanf__, 2, 0)));
int vsnprintf_l(char * restrict, size_t, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 4, 0)));
int vsscanf_l(const char * restrict, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__scanf__, 3, 0)));



int dprintf_l(int, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 3, 4))) __attribute__((availability(macosx,introduced=10.7)));
int vdprintf_l(int, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 3, 0))) __attribute__((availability(macosx,introduced=10.7)));




int asprintf_l(char ** restrict, locale_t restrict, const char * restrict, ...)
        __attribute__((__format__ (__printf__, 3, 4)));
int vasprintf_l(char ** restrict, locale_t restrict, const char * restrict, va_list)
        __attribute__((__format__ (__printf__, 3, 0)));
# 96 "/usr/include/xlocale.h" 2 3 4


# 1 "/usr/include/xlocale/_stdlib.h" 1 3 4
# 28 "/usr/include/xlocale/_stdlib.h" 3 4
double atof_l(const char *, locale_t);
int atoi_l(const char *, locale_t);
long atol_l(const char *, locale_t);

long long
  atoll_l(const char *, locale_t);

int mblen_l(const char *, size_t, locale_t);
size_t mbstowcs_l(wchar_t * restrict , const char * restrict, size_t,
     locale_t);
int mbtowc_l(wchar_t * restrict, const char * restrict, size_t,
     locale_t);
double strtod_l(const char *, char **, locale_t) __asm("_" "strtod_l" );
float strtof_l(const char *, char **, locale_t) __asm("_" "strtof_l" );
long strtol_l(const char *, char **, int, locale_t);
long double
  strtold_l(const char *, char **, locale_t);
long long
  strtoll_l(const char *, char **, int, locale_t);

long long
  strtoq_l(const char *, char **, int, locale_t);

unsigned long
  strtoul_l(const char *, char **, int, locale_t);
unsigned long long
  strtoull_l(const char *, char **, int, locale_t);

unsigned long long
  strtouq_l(const char *, char **, int, locale_t);

size_t wcstombs_l(char * restrict, const wchar_t * restrict, size_t,
     locale_t);
int wctomb_l(char *, wchar_t, locale_t);
# 99 "/usr/include/xlocale.h" 2 3 4


# 1 "/usr/include/xlocale/_string.h" 1 3 4
# 28 "/usr/include/xlocale/_string.h" 3 4
int strcoll_l(const char *, const char *, locale_t);
size_t strxfrm_l(char *, const char *, size_t, locale_t);
int strcasecmp_l(const char *, const char *, locale_t);
char *strcasestr_l(const char *, const char *, locale_t);
int strncasecmp_l(const char *, const char *, size_t, locale_t);
# 102 "/usr/include/xlocale.h" 2 3 4


# 1 "/usr/include/xlocale/_time.h" 1 3 4
# 28 "/usr/include/xlocale/_time.h" 3 4
size_t strftime_l(char * restrict, size_t, const char * restrict,
  const struct tm * restrict, locale_t)
  __asm("_" "strftime_l" ) __attribute__((__format__ (__strftime__, 3, 0)));
char *strptime_l(const char * restrict, const char * restrict,
  struct tm * restrict, locale_t)
  __asm("_" "strptime_l" ) __attribute__((__format__ (__strftime__, 2, 0)));
# 105 "/usr/include/xlocale.h" 2 3 4
# 23 "/usr/local/opt/gettext/include/libintl.h" 2
# 58 "/usr/local/opt/gettext/include/libintl.h"
extern int libintl_version;
# 134 "/usr/local/opt/gettext/include/libintl.h"
extern char *libintl_gettext (const char *__msgid)

       __attribute__ ((__format_arg__ (1)));
# 152 "/usr/local/opt/gettext/include/libintl.h"
extern char *libintl_dgettext (const char *__domainname, const char *__msgid)

       __attribute__ ((__format_arg__ (2)));
# 172 "/usr/local/opt/gettext/include/libintl.h"
extern char *libintl_dcgettext (const char *__domainname, const char *__msgid,
                        int __category)

       __attribute__ ((__format_arg__ (2)));
# 194 "/usr/local/opt/gettext/include/libintl.h"
extern char *libintl_ngettext (const char *__msgid1, const char *__msgid2,
                       unsigned long int __n)

       __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));
# 215 "/usr/local/opt/gettext/include/libintl.h"
extern char *libintl_dngettext (const char *__domainname,
                        const char *__msgid1, const char *__msgid2,
                        unsigned long int __n)

       __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));
# 239 "/usr/local/opt/gettext/include/libintl.h"
extern char *libintl_dcngettext (const char *__domainname,
                         const char *__msgid1, const char *__msgid2,
                         unsigned long int __n, int __category)

       __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));
# 261 "/usr/local/opt/gettext/include/libintl.h"
extern char *libintl_textdomain (const char *__domainname)
                                     ;
# 279 "/usr/local/opt/gettext/include/libintl.h"
extern char *libintl_bindtextdomain (const char *__domainname, const char *__dirname)
                                         ;
# 297 "/usr/local/opt/gettext/include/libintl.h"
extern char *libintl_bind_textdomain_codeset (const char *__domainname,
                                      const char *__codeset)
                                                  ;
# 433 "/usr/local/opt/gettext/include/libintl.h"
extern char *libintl_setlocale (int, const char *);






extern locale_t libintl_newlocale (int, const char *, locale_t);
# 455 "/usr/local/opt/gettext/include/libintl.h"
extern void
       libintl_set_relocation_prefix (const char *orig_prefix,
                                      const char *curr_prefix);
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/gettext.h" 2
# 21 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/message.h" 1





# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/message.h" 2
# 77 "/Users/a/Documents/projects/neovim-src/src/nvim/message.h"
typedef struct msg_hist {
  struct msg_hist *next;
  char_u *msg;
  int attr;
} MessageHistoryEntry;


extern MessageHistoryEntry *first_msg_hist;

extern MessageHistoryEntry *last_msg_hist;
# 22 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h" 2



typedef int64_t varnumber_T;
typedef uint64_t uvarnumber_T;


typedef double float_T;


enum { DO_NOT_FREE_CNT = (2147483647 / 2) };
# 44 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h"
typedef struct listvar_S list_T;
typedef struct dictvar_S dict_T;
typedef struct partial_S partial_T;

typedef struct ufunc ufunc_T;

typedef enum {
  kCallbackNone = 0,
  kCallbackFuncref,
  kCallbackPartial,
} CallbackType;

typedef struct {
  union {
    char_u *funcref;
    partial_T *partial;
  } data;
  CallbackType type;
} Callback;



typedef struct dict_watcher {
  Callback callback;
  char *key_pattern;
  size_t key_pattern_len;
  QUEUE node;
  _Bool busy;
} DictWatcher;


typedef enum {
  kSpecialVarFalse,
  kSpecialVarTrue,
  kSpecialVarNull,
} SpecialVarValue;


typedef enum {
  VAR_UNLOCKED = 0,
  VAR_LOCKED = 1,
  VAR_FIXED = 2,
} VarLockStatus;


typedef enum {
  VAR_UNKNOWN = 0,
  VAR_NUMBER,
  VAR_STRING,
  VAR_FUNC,
  VAR_LIST,
  VAR_DICT,
  VAR_FLOAT,
  VAR_SPECIAL,

  VAR_PARTIAL,
} VarType;


typedef struct {
  VarType v_type;
  VarLockStatus v_lock;
  union typval_vval_union {
    varnumber_T v_number;
    SpecialVarValue v_special;
    float_T v_float;
    char_u *v_string;
    list_T *v_list;
    dict_T *v_dict;
    partial_T *v_partial;
  } vval;
} typval_T;


typedef enum {
  VAR_NO_SCOPE = 0,
  VAR_SCOPE = 1,
  VAR_DEF_SCOPE = 2,

} ScopeType;


typedef struct listitem_S listitem_T;

struct listitem_S {
  listitem_T *li_next;
  listitem_T *li_prev;
  typval_T li_tv;
};


typedef struct listwatch_S listwatch_T;

struct listwatch_S {
  listitem_T *lw_item;
  listwatch_T *lw_next;
};


struct listvar_S {
  listitem_T *lv_first;
  listitem_T *lv_last;
  int lv_refcount;
  int lv_len;
  listwatch_T *lv_watch;
  int lv_idx;
  listitem_T *lv_idx_item;
  int lv_copyID;
  list_T *lv_copylist;
  VarLockStatus lv_lock;
  list_T *lv_used_next;
  list_T *lv_used_prev;
};


typedef struct {
  list_T sl_list;
  listitem_T sl_items[10];
} staticList10_T;
# 181 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h"
struct dictitem_S {
  typval_T di_tv;
  char_u di_flags;
  char_u di_key[1];
};
# 200 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h"
typedef struct { typval_T di_tv; uint8_t di_flags; char_u di_key[1]; } ScopeDictDictItem;






typedef struct { typval_T di_tv; uint8_t di_flags; char_u di_key[]; } dictitem_T;


typedef enum {
  DI_FLAGS_RO = 1,
  DI_FLAGS_RO_SBX = 2,
  DI_FLAGS_FIX = 4,
  DI_FLAGS_LOCK = 8,
  DI_FLAGS_ALLOC = 16,
} DictItemFlags;


struct dictvar_S {
  VarLockStatus dv_lock;
  ScopeType dv_scope;

  int dv_refcount;
  int dv_copyID;
  hashtab_T dv_hashtab;
  dict_T *dv_copydict;
  dict_T *dv_used_next;
  dict_T *dv_used_prev;
  QUEUE watchers;
};


typedef int scid_T;




typedef struct funccall_S funccall_T;


struct ufunc {
  int uf_varargs;
  int uf_flags;
  int uf_calls;
  _Bool uf_cleared;
  garray_T uf_args;
  garray_T uf_lines;
  int uf_profiling;

  int uf_tm_count;
  proftime_T uf_tm_total;
  proftime_T uf_tm_self;
  proftime_T uf_tm_children;

  int *uf_tml_count;
  proftime_T *uf_tml_total;
  proftime_T *uf_tml_self;
  proftime_T uf_tml_start;
  proftime_T uf_tml_children;
  proftime_T uf_tml_wait;
  int uf_tml_idx;
  int uf_tml_execed;
  scid_T uf_script_ID;

  int uf_refcount;
  funccall_T *uf_scoped;
  char_u uf_name[1];


};




struct partial_S {
  int pt_refcount;
  char_u *pt_name;
  ufunc_T *pt_func;

  _Bool pt_auto;

  int pt_argc;
  typval_T *pt_argv;
  dict_T *pt_dict;
};


typedef struct ht_stack_S {
  hashtab_T *ht;
  struct ht_stack_S *prev;
} ht_stack_T;


typedef struct list_stack_S {
  list_T *list;
  struct list_stack_S *prev;
} list_stack_T;


typedef struct {
  listitem_T *item;
  int idx;
} ListSortItem;

typedef int (*ListSorter)(const void *, const void *);
# 319 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h"
static inline void tv_list_ref(list_T *const l)
{
  if (l == ((void*)0)) {
    return;
  }
  l->lv_refcount++;
}

static inline VarLockStatus tv_list_locked(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result));






static inline VarLockStatus tv_list_locked(const list_T *const l)
{
  if (l == ((void*)0)) {
    return VAR_FIXED;
  }
  return l->lv_lock;
}







static inline void tv_list_set_lock(list_T *const l,
                                    const VarLockStatus lock)
{
  if (l == ((void*)0)) {
    ((void)0);
    return;
  }
  l->lv_lock = lock;
}







static inline void tv_list_set_copyid(list_T *const l,
                                      const int copyid)
  FUNC_ATTR_NONNULL_ALL
{
  l->lv_copyID = copyid;
}

static inline int tv_list_len(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result));




static inline int tv_list_len(const list_T *const l)
{
  if (l == ((void*)0)) {
    return 0;
  }
  return l->lv_len;
}

static inline int tv_list_copyid(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result)) __attribute__((nonnull));






static inline int tv_list_copyid(const list_T *const l)
{
  return l->lv_copyID;
}

static inline list_T *tv_list_latest_copy(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result)) __attribute__((nonnull));
# 409 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h"
static inline list_T *tv_list_latest_copy(const list_T *const l)
{
  return l->lv_copylist;
}

static inline int tv_list_uidx(const list_T *const l, int n)
  __attribute__ ((pure)) __attribute__((warn_unused_result));







static inline int tv_list_uidx(const list_T *const l, int n)
{

  if (n < 0) {
    n += tv_list_len(l);
  }


  if (n < 0 || n >= tv_list_len(l)) {
    return -1;
  }
  return n;
}

static inline _Bool tv_list_has_watchers(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result));
# 447 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h"
static inline _Bool tv_list_has_watchers(const list_T *const l)
{
  return l && l->lv_watch;
}

static inline listitem_T *tv_list_first(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result));






static inline listitem_T *tv_list_first(const list_T *const l)
{
  if (l == ((void*)0)) {
    return ((void*)0);
  }
  return l->lv_first;
}

static inline listitem_T *tv_list_last(const list_T *const l)
  __attribute__ ((pure)) __attribute__((warn_unused_result));






static inline listitem_T *tv_list_last(const list_T *const l)
{
  if (l == ((void*)0)) {
    return ((void*)0);
  }
  return l->lv_last;
}

static inline long tv_dict_len(const dict_T *const d)
  __attribute__ ((pure)) __attribute__((warn_unused_result));




static inline long tv_dict_len(const dict_T *const d)
{
  if (d == ((void*)0)) {
    return 0L;
  }
  return (long)d->dv_hashtab.ht_used;
}

static inline _Bool tv_dict_is_watched(const dict_T *const d)
  __attribute__ ((pure)) __attribute__((warn_unused_result));






static inline _Bool tv_dict_is_watched(const dict_T *const d)
{
  return d && !QUEUE_EMPTY(&d->watchers);
}






static inline void tv_init(typval_T *const tv)
{
  if (tv != ((void*)0)) {
    __builtin___memset_chk (tv, 0, sizeof(*tv), __builtin_object_size (tv, 0));
  }
}
# 533 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h"
extern const char *const tv_empty_string;


extern _Bool tv_in_free_unref_items;
# 622 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h"
static inline _Bool tv_get_float_chk(const typval_T *const tv,
                                    float_T *const ret_f)
  __attribute__((nonnull)) __attribute__((warn_unused_result));


_Bool emsgf(const char *const fmt, ...);
# 637 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h"
static inline _Bool tv_get_float_chk(const typval_T *const tv,
                                    float_T *const ret_f)
{
  if (tv->v_type == VAR_FLOAT) {
    *ret_f = tv->vval.v_float;
    return 1;
  }
  if (tv->v_type == VAR_NUMBER) {
    *ret_f = (float_T)tv->vval.v_number;
    return 1;
  }
  emsgf(libintl_gettext((char *)("E808: Number or Float required")));
  return 0;
}

static inline DictWatcher *tv_dict_watcher_node_data(QUEUE *q)
  __attribute__((nonnull)) __attribute__((returns_nonnull)) __attribute__ ((pure))
  __attribute__((warn_unused_result)) __attribute__((always_inline));





static inline DictWatcher *tv_dict_watcher_node_data(QUEUE *q)
{
  return ((DictWatcher *)((char *)(q) - __builtin_offsetof(DictWatcher, node)));
}

static inline _Bool tv_is_func(const typval_T tv)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_CONST;
# 675 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/typval.h"
static inline _Bool tv_is_func(const typval_T tv)
{
  return tv.v_type == VAR_FUNC || tv.v_type == VAR_PARTIAL;
}
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/strings.h" 2
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/keymap.h" 2
# 122 "/Users/a/Documents/projects/neovim-src/src/nvim/keymap.h"
enum key_extra {
  KE_NAME = 3

  , KE_S_UP
  , KE_S_DOWN

  , KE_S_F1
  , KE_S_F2
  , KE_S_F3
  , KE_S_F4
  , KE_S_F5
  , KE_S_F6
  , KE_S_F7
  , KE_S_F8
  , KE_S_F9
  , KE_S_F10

  , KE_S_F11
  , KE_S_F12
  , KE_S_F13
  , KE_S_F14
  , KE_S_F15
  , KE_S_F16
  , KE_S_F17
  , KE_S_F18
  , KE_S_F19
  , KE_S_F20

  , KE_S_F21
  , KE_S_F22
  , KE_S_F23
  , KE_S_F24
  , KE_S_F25
  , KE_S_F26
  , KE_S_F27
  , KE_S_F28
  , KE_S_F29
  , KE_S_F30

  , KE_S_F31
  , KE_S_F32
  , KE_S_F33
  , KE_S_F34
  , KE_S_F35
  , KE_S_F36
  , KE_S_F37

  , KE_MOUSE





  , KE_LEFTMOUSE
  , KE_LEFTDRAG
  , KE_LEFTRELEASE
  , KE_MIDDLEMOUSE
  , KE_MIDDLEDRAG
  , KE_MIDDLERELEASE
  , KE_RIGHTMOUSE
  , KE_RIGHTDRAG
  , KE_RIGHTRELEASE

  , KE_IGNORE

  , KE_TAB
  , KE_S_TAB_OLD

  , KE_XF1
  , KE_XF2
  , KE_XF3
  , KE_XF4
  , KE_XEND
  , KE_ZEND
  , KE_XHOME
  , KE_ZHOME
  , KE_XUP
  , KE_XDOWN
  , KE_XLEFT
  , KE_XRIGHT

  , KE_LEFTMOUSE_NM
  , KE_LEFTRELEASE_NM

  , KE_S_XF1
  , KE_S_XF2
  , KE_S_XF3
  , KE_S_XF4




  , KE_MOUSEDOWN
  , KE_MOUSEUP
  , KE_MOUSELEFT
  , KE_MOUSERIGHT

  , KE_KINS
  , KE_KDEL

  , KE_CSI
  , KE_SNR
  , KE_PLUG
  , KE_CMDWIN

  , KE_C_LEFT
  , KE_C_RIGHT
  , KE_C_HOME
  , KE_C_END

  , KE_X1MOUSE
  , KE_X1DRAG
  , KE_X1RELEASE
  , KE_X2MOUSE
  , KE_X2DRAG
  , KE_X2RELEASE

  , KE_DROP
  , KE_NOP
  , KE_FOCUSGAINED
  , KE_FOCUSLOST
  , KE_EVENT
  , KE_PASTE

};
# 34 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h" 2
# 80 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h"
typedef enum {
  kDirectionNotSet = 0,
  FORWARD = 1,
  BACKWARD = (-1),
  FORWARD_FILE = 3,
  BACKWARD_FILE = (-3),
} Direction;
# 108 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h"
enum {
  EXPAND_UNSUCCESSFUL = -2,
  EXPAND_OK = -1,
  EXPAND_NOTHING = 0,
  EXPAND_COMMANDS,
  EXPAND_FILES,
  EXPAND_DIRECTORIES,
  EXPAND_SETTINGS,
  EXPAND_BOOL_SETTINGS,
  EXPAND_TAGS,
  EXPAND_OLD_SETTING,
  EXPAND_HELP,
  EXPAND_BUFFERS,
  EXPAND_EVENTS,
  EXPAND_MENUS,
  EXPAND_SYNTAX,
  EXPAND_HIGHLIGHT,
  EXPAND_AUGROUP,
  EXPAND_USER_VARS,
  EXPAND_MAPPINGS,
  EXPAND_TAGS_LISTFILES,
  EXPAND_FUNCTIONS,
  EXPAND_USER_FUNC,
  EXPAND_EXPRESSION,
  EXPAND_MENUNAMES,
  EXPAND_USER_COMMANDS,
  EXPAND_USER_CMD_FLAGS,
  EXPAND_USER_NARGS,
  EXPAND_USER_COMPLETE,
  EXPAND_ENV_VARS,
  EXPAND_LANGUAGE,
  EXPAND_COLORS,
  EXPAND_COMPILER,
  EXPAND_USER_DEFINED,
  EXPAND_USER_LIST,
  EXPAND_SHELLCMD,
  EXPAND_CSCOPE,
  EXPAND_SIGN,
  EXPAND_PROFILE,
  EXPAND_BEHAVE,
  EXPAND_FILETYPE,
  EXPAND_FILES_IN_PATH,
  EXPAND_OWNSYNTAX,
  EXPAND_LOCALES,
  EXPAND_HISTORY,
  EXPAND_USER,
  EXPAND_SYNTIME,
  EXPAND_USER_ADDR_TYPE,
  EXPAND_PACKADD,
  EXPAND_MESSAGES,
};
# 196 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h"
enum { FOLD_TEXT_LEN = 51 };
# 290 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h"
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h" 1







# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_eval.h" 1




# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_cmds_defs.h" 1







# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/normal.h" 1





# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 1








typedef struct file_buffer buf_T;



typedef struct {
  buf_T *br_buf;
  int br_fnum;
  int br_buf_free_count;
} bufref_T;





# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/highlight_defs.h" 1







typedef int32_t RgbValue;



typedef enum {
  HLF_8 = 0

  , HLF_EOB
  , HLF_TERM
  , HLF_TERMNC
  , HLF_AT

  , HLF_D
  , HLF_E
  , HLF_I
  , HLF_L
  , HLF_M
  , HLF_CM
  , HLF_N
  , HLF_CLN
  , HLF_R
  , HLF_S
  , HLF_SNC
  , HLF_C
  , HLF_T
  , HLF_V
  , HLF_VNC
  , HLF_W
  , HLF_WM
  , HLF_FL
  , HLF_FC
  , HLF_ADD
  , HLF_CHD
  , HLF_DED
  , HLF_TXD
  , HLF_SC
  , HLF_CONCEAL
  , HLF_SPB
  , HLF_SPC
  , HLF_SPR
  , HLF_SPL
  , HLF_PNI
  , HLF_PSI
  , HLF_PSB
  , HLF_PST
  , HLF_TP
  , HLF_TPS
  , HLF_TPF
  , HLF_CUC
  , HLF_CUL
  , HLF_MC
  , HLF_QFL
  , HLF_0
  , HLF_INACTIVE
  , HLF_COUNT
} hlf_T;

extern const char *hlf_names[] ;
# 116 "/Users/a/Documents/projects/neovim-src/src/nvim/highlight_defs.h"
extern int highlight_attr[HLF_COUNT];
extern int highlight_user[9];
extern int highlight_stlnc[9];
extern int cterm_normal_fg_color ;
extern int cterm_normal_fg_bold ;
extern int cterm_normal_bg_color ;
extern RgbValue normal_fg ;
extern RgbValue normal_bg ;
extern RgbValue normal_sp ;
# 23 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/option_defs.h" 1
# 153 "/Users/a/Documents/projects/neovim-src/src/nvim/option_defs.h"
enum {
  SHM_RO = 'r',
  SHM_MOD = 'm',
  SHM_FILE = 'f',
  SHM_LAST = 'i',
  SHM_TEXT = 'x',
  SHM_LINES = 'l',
  SHM_NEW = 'n',
  SHM_WRI = 'w',
  SHM_ABBREVIATIONS = 'a',
  SHM_WRITE = 'W',
  SHM_TRUNC = 't',
  SHM_TRUNCALL = 'T',
  SHM_OVER = 'o',
  SHM_OVERALL = 'O',
  SHM_SEARCH = 's',
  SHM_ATTENTION = 'A',
  SHM_INTRO = 'I',
  SHM_COMPLETIONMENU = 'c',
  SHM_RECORDING = 'q',
  SHM_FILEINFO = 'F',
};
# 227 "/Users/a/Documents/projects/neovim-src/src/nvim/option_defs.h"
enum {
  STL_FILEPATH = 'f',
  STL_FULLPATH = 'F',
  STL_FILENAME = 't',
  STL_COLUMN = 'c',
  STL_VIRTCOL = 'v',
  STL_VIRTCOL_ALT = 'V',
  STL_LINE = 'l',
  STL_NUMLINES = 'L',
  STL_BUFNO = 'n',
  STL_KEYMAP = 'k',
  STL_OFFSET = 'o',
  STL_OFFSET_X = 'O',
  STL_BYTEVAL = 'b',
  STL_BYTEVAL_X = 'B',
  STL_ROFLAG = 'r',
  STL_ROFLAG_ALT = 'R',
  STL_HELPFLAG = 'h',
  STL_HELPFLAG_ALT = 'H',
  STL_FILETYPE = 'y',
  STL_FILETYPE_ALT = 'Y',
  STL_PREVIEWFLAG = 'w',
  STL_PREVIEWFLAG_ALT = 'W',
  STL_MODIFIED = 'm',
  STL_MODIFIED_ALT = 'M',
  STL_QUICKFIX = 'q',
  STL_PERCENTAGE = 'p',
  STL_ALTPERCENT = 'P',
  STL_ARGLISTSTAT = 'a',
  STL_PAGENUM = 'N',
  STL_VIM_EXPR = '{',
  STL_SEPARATE = '=',
  STL_TRUNCMARK = '<',
  STL_USER_HL = '*',
  STL_HIGHLIGHT = '#',
  STL_TABPAGENR = 'T',
  STL_TABCLOSENR = 'X',
  STL_CLICK_FUNC = '@',
};
# 296 "/Users/a/Documents/projects/neovim-src/src/nvim/option_defs.h"
extern long p_aleph;
extern int p_acd;
extern char_u *p_ambw;
extern int p_ar;
extern int p_aw;
extern int p_awa;
extern char_u *p_bs;
extern char_u *p_bg;
extern int p_bk;
extern char_u *p_bkc;
extern unsigned int bkc_flags;
# 316 "/Users/a/Documents/projects/neovim-src/src/nvim/option_defs.h"
extern char_u *p_bdir;
extern char_u *p_bex;
extern char_u *p_bo;
extern unsigned bo_flags;
# 349 "/Users/a/Documents/projects/neovim-src/src/nvim/option_defs.h"
extern char_u *p_bsk;
extern char_u *p_breakat;
extern char_u *p_cmp;
extern unsigned cmp_flags;





extern char_u *p_enc;
extern int p_deco;
extern char_u *p_ccv;
extern char_u *p_cedit;
extern char_u *p_cb;
extern unsigned cb_flags;






extern long p_cwh;
extern long p_ch;
extern int p_confirm;
extern int p_cp;
extern char_u *p_cot;
extern long p_ph;
extern char_u *p_cpo;
extern char_u *p_csprg;
extern int p_csre;
extern char_u *p_csqf;


extern int p_cst;
extern long p_csto;
extern long p_cspc;
extern int p_csverbose;
extern char_u *p_debug;
extern char_u *p_def;
extern char_u *p_inc;
extern char_u *p_dip;
extern char_u *p_dex;
extern char_u *p_dict;
extern int p_dg;
extern char_u *p_dir;
extern char_u *p_dy;
extern unsigned dy_flags;






extern int p_ed;
extern int p_emoji;
extern char_u *p_ead;
extern int p_ea;
extern char_u *p_ep;
extern int p_eb;
extern char_u *p_ef;
extern char_u *p_efm;
extern char_u *p_gefm;
extern char_u *p_gp;
extern char_u *p_ei;
extern int p_exrc;
extern char_u *p_fencs;
extern char_u *p_ffs;
extern int p_fic;
extern char_u *p_fcl;
extern long p_fdls;
extern char_u *p_fdo;
extern unsigned fdo_flags;
# 437 "/Users/a/Documents/projects/neovim-src/src/nvim/option_defs.h"
extern char_u *p_fp;
extern int p_fs;
extern int p_gd;
extern char_u *p_pdev;
extern char_u *p_penc;
extern char_u *p_pexpr;
extern char_u *p_pmfn;
extern char_u *p_pmcs;
extern char_u *p_pfn;
extern char_u *p_popt;
extern char_u *p_header;
extern int p_prompt;
extern char_u *p_guicursor;
extern char_u *p_guifont;
extern char_u *p_guifontset;
extern char_u *p_guifontwide;
extern char_u *p_hf;
extern long p_hh;
extern char_u *p_hlg;
extern int p_hid;



extern char_u *p_hl;
extern int p_hls;
extern long p_hi;
extern int p_hkmap;
extern int p_hkmapp;
extern int p_fkmap;
extern int p_altkeymap;
extern int p_arshape;
extern int p_icon;
extern char_u *p_iconstring;
extern int p_ic;
extern int p_is;
extern char_u *p_icm;
extern int p_im;
extern char_u *p_isf;
extern char_u *p_isi;
extern char_u *p_isp;
extern int p_js;
extern char_u *p_kp;
extern char_u *p_km;
extern char_u *p_langmap;
extern int p_lnr;
extern int p_lrm;
extern char_u *p_lm;
extern char_u *p_lispwords;
extern long p_ls;
extern long p_stal;
extern char_u *p_lcs;

extern int p_lz;
extern int p_lpl;
extern int p_magic;
extern char_u *p_menc;
extern char_u *p_mef;
extern char_u *p_mp;
extern char_u *p_cc;
extern int p_cc_cols[256];
extern long p_mat;
extern long p_mco;
extern long p_mfd;
extern long p_mmd;
extern long p_mm;
extern long p_mmp;
extern long p_mmt;
extern long p_mis;
extern char_u *p_msm;
extern long p_mls;
extern char_u *p_mouse;
extern char_u *p_mousem;
extern long p_mouset;
extern int p_more;
extern char_u *p_opfunc;
extern char_u *p_para;
extern int p_paste;
extern char_u *p_pt;
extern char_u *p_pex;
extern char_u *p_pm;
extern char_u *p_path;
extern char_u *p_cdpath;
extern long p_rdt;
extern int p_remap;
extern long p_re;
extern long p_report;
extern long p_pvh;
extern int p_ari;
extern int p_ri;
extern int p_ru;
extern char_u *p_ruf;
extern char_u *p_pp;
extern char_u *p_rtp;
extern long p_scbk;
extern long p_sj;
extern long p_so;
extern char_u *p_sbo;
extern char_u *p_sections;
extern int p_secure;
extern char_u *p_sel;
extern char_u *p_slm;
extern char_u *p_ssop;
extern unsigned ssop_flags;
# 565 "/Users/a/Documents/projects/neovim-src/src/nvim/option_defs.h"
extern char_u *p_sh;
extern char_u *p_shcf;
extern char_u *p_sp;
extern char_u *p_shq;
extern char_u *p_sxq;
extern char_u *p_sxe;
extern char_u *p_srr;
extern int p_stmp;



extern char_u *p_stl;
extern int p_sr;
extern char_u *p_shm;
extern char_u *p_sbr;
extern int p_sc;
extern int p_sft;
extern int p_sm;
extern int p_smd;
extern long p_ss;
extern long p_siso;
extern int p_scs;
extern int p_sta;
extern int p_sb;
extern long p_tpm;
extern char_u *p_tal;
extern char_u *p_sps;
extern int p_spr;
extern int p_sol;
extern char_u *p_su;
extern char_u *p_swb;
extern unsigned swb_flags;
# 606 "/Users/a/Documents/projects/neovim-src/src/nvim/option_defs.h"
extern int p_tbs;
extern char_u *p_tc;
extern unsigned tc_flags;
# 618 "/Users/a/Documents/projects/neovim-src/src/nvim/option_defs.h"
extern long p_tl;
extern int p_tr;
extern char_u *p_tags;
extern int p_tgst;
extern int p_tbidi;
extern int p_terse;
extern int p_to;
extern int p_timeout;
extern long p_tm;
extern int p_title;
extern long p_titlelen;
extern char_u *p_titleold;
extern char_u *p_titlestring;
extern char_u *p_tsr;
extern int p_tgc;
extern int p_ttimeout;
extern long p_ttm;
extern char_u *p_udir;
extern long p_ul;
extern long p_ur;
extern long p_uc;
extern long p_ut;
extern char_u *p_fcs;
extern char_u *p_shada;
extern char_u *p_vdir;
extern char_u *p_vop;
extern unsigned vop_flags;
extern int p_vb;
extern char_u *p_ve;
extern unsigned ve_flags;







extern long p_verbose;



extern char_u *p_vfile;

extern int p_warn;
extern char_u *p_wop;
extern long p_window;
extern char_u *p_wak;
extern char_u *p_wig;
extern char_u *p_ww;
extern long p_wc;
extern long p_wcm;
extern int p_wic;
extern char_u *p_wim;
extern int p_wmnu;
extern long p_wh;
extern long p_wmh;
extern long p_wmw;
extern long p_wiw;
extern int p_ws;
extern int p_write;
extern int p_wa;
extern int p_wb;
extern long p_wd;

extern int p_force_on;
extern int p_force_off;






enum {
  BV_AI = 0
  , BV_AR
  , BV_BH
  , BV_BKC
  , BV_BT
  , BV_EFM
  , BV_GP
  , BV_MP
  , BV_BIN
  , BV_BL
  , BV_BOMB
  , BV_CHANNEL
  , BV_CI
  , BV_CIN
  , BV_CINK
  , BV_CINO
  , BV_CINW
  , BV_CM
  , BV_CMS
  , BV_COM
  , BV_CPT
  , BV_DICT
  , BV_TSR
  , BV_CFU
  , BV_DEF
  , BV_INC
  , BV_EOL
  , BV_FIXEOL
  , BV_EP
  , BV_ET
  , BV_FENC
  , BV_FP
  , BV_BEXPR
  , BV_FEX
  , BV_FF
  , BV_FLP
  , BV_FO
  , BV_FT
  , BV_IMI
  , BV_IMS
  , BV_INDE
  , BV_INDK
  , BV_INEX
  , BV_INF
  , BV_ISK
  , BV_KMAP
  , BV_KP
  , BV_LISP
  , BV_LW
  , BV_MENC
  , BV_MA
  , BV_ML
  , BV_MOD
  , BV_MPS
  , BV_NF
  , BV_OFU
  , BV_PATH
  , BV_PI
  , BV_QE
  , BV_RO
  , BV_SCBK
  , BV_SI
  , BV_SMC
  , BV_SYN
  , BV_SPC
  , BV_SPF
  , BV_SPL
  , BV_STS
  , BV_SUA
  , BV_SW
  , BV_SWF
  , BV_TAGS
  , BV_TC
  , BV_TS
  , BV_TW
  , BV_TX
  , BV_UDF
  , BV_UL
  , BV_WM
  , BV_COUNT
};






enum {
  WV_LIST = 0
  , WV_ARAB
  , WV_COCU
  , WV_COLE
  , WV_CRBIND
  , WV_BRI
  , WV_BRIOPT
  , WV_DIFF
  , WV_FDC
  , WV_FEN
  , WV_FDI
  , WV_FDL
  , WV_FDM
  , WV_FML
  , WV_FDN
  , WV_FDE
  , WV_FDT
  , WV_FMR
  , WV_LBR
  , WV_NU
  , WV_RNU
  , WV_NUW
  , WV_PVW
  , WV_RL
  , WV_RLC
  , WV_SCBIND
  , WV_SCROLL
  , WV_SPELL
  , WV_CUC
  , WV_CUL
  , WV_CC
  , WV_STL
  , WV_WFH
  , WV_WFW
  , WV_WRAP
  , WV_SCL
  , WV_WINHL
  , WV_COUNT
};
# 27 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/mark_defs.h" 1




# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/time.h" 1







typedef uint64_t Timestamp;
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/mark_defs.h" 2
# 35 "/Users/a/Documents/projects/neovim-src/src/nvim/mark_defs.h"
typedef struct filemark {
  pos_T mark;
  int fnum;
  Timestamp timestamp;
  dict_T *additional_data;
} fmark_T;


typedef struct xfilemark {
  fmark_T fmark;
  char_u *fname;
} xfmark_T;
# 29 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/undo_defs.h" 1








typedef struct u_header u_header_T;


typedef struct {
  pos_T vi_start;
  pos_T vi_end;
  int vi_mode;
  colnr_T vi_curswant;
} visualinfo_T;


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 1
# 20 "/Users/a/Documents/projects/neovim-src/src/nvim/undo_defs.h" 2

typedef struct u_entry u_entry_T;
struct u_entry {
  u_entry_T *ue_next;
  linenr_T ue_top;
  linenr_T ue_bot;
  linenr_T ue_lcount;
  char_u **ue_array;
  long ue_size;



};

struct u_header {


  union {
    u_header_T *ptr;
    long seq;
  } uh_next;
  union {
    u_header_T *ptr;
    long seq;
  } uh_prev;
  union {
    u_header_T *ptr;
    long seq;
  } uh_alt_next;
  union {
    u_header_T *ptr;
    long seq;
  } uh_alt_prev;
  long uh_seq;
  int uh_walk;
  u_entry_T *uh_entry;
  u_entry_T *uh_getbot_entry;
  pos_T uh_cursor;
  long uh_cursor_vcol;
  int uh_flags;
  fmark_T uh_namedm[('z' - 'a' + 1)];
  visualinfo_T uh_visual;
  time_t uh_time;
  long uh_save_nr;




};






typedef struct {
  buf_T *bi_buf;
  FILE *bi_fp;
} bufinfo_T;
# 31 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2







# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/api/private/defs.h" 1







# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/api/private/defs.h" 2
# 23 "/Users/a/Documents/projects/neovim-src/src/nvim/api/private/defs.h"
typedef int handle_T;


typedef enum {
  kErrorTypeNone = -1,
  kErrorTypeException,
  kErrorTypeValidation
} ErrorType;

typedef enum {
  kMessageTypeRequest,
  kMessageTypeResponse,
  kMessageTypeNotification
} MessageType;
# 50 "/Users/a/Documents/projects/neovim-src/src/nvim/api/private/defs.h"
static inline _Bool is_internal_call(uint64_t channel_id)
  __attribute__((always_inline)) __attribute__((const));






static inline _Bool is_internal_call(const uint64_t channel_id)
{
  return !!(channel_id & (((uint64_t)1) << (sizeof(uint64_t) * 8 - 1)));
}

typedef struct {
  ErrorType type;
  char *msg;
} Error;

typedef _Bool Boolean;
typedef int64_t Integer;
typedef double Float;







typedef struct {
  char *data;
  size_t size;
} String;

typedef handle_T Buffer;
typedef handle_T Window;
typedef handle_T Tabpage;

typedef struct object Object;

typedef struct {
  Object *items;
  size_t size, capacity;
} Array;

typedef struct key_value_pair KeyValuePair;

typedef struct {
  KeyValuePair *items;
  size_t size, capacity;
} Dictionary;

typedef enum {
  kObjectTypeNil = 0,
  kObjectTypeBoolean,
  kObjectTypeInteger,
  kObjectTypeFloat,
  kObjectTypeString,
  kObjectTypeArray,
  kObjectTypeDictionary,

  kObjectTypeBuffer,
  kObjectTypeWindow,
  kObjectTypeTabpage,
} ObjectType;

struct object {
  ObjectType type;
  union {
    Boolean boolean;
    Integer integer;
    Float floating;
    String string;
    Array array;
    Dictionary dictionary;
  } data;
};

struct key_value_pair {
  String key;
  Object value;
};
# 39 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/map.h" 1





# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/map_defs.h" 1



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/khash.h" 1
# 133 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/khash.h"
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/memory.h" 1





# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/memory.h" 2



typedef void *(*MemMalloc)(size_t);


typedef void (*MemFree)(void *);


typedef void *(*MemCalloc)(size_t, size_t);


typedef void *(*MemRealloc)(void *, size_t);
# 134 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/khash.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 136 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/khash.h" 2




typedef unsigned int khint32_t;





typedef unsigned long khint64_t;
# 157 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/khash.h"
typedef khint32_t khint_t;
typedef khint_t khiter_t;
# 459 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/khash.h"
static inline khint_t __ac_X31_hash_string(const char *s)
{
 khint_t h = (khint_t)*s;
 if (h) for (++s ; *s; ++s) h = (h << 5) - h + (uint8_t)*s;
 return h;
}
# 476 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/khash.h"
static inline khint_t __ac_Wang_hash(khint_t key)
{
    key += ~(key << 15);
    key ^= (key >> 10);
    key += (key << 3);
    key ^= (key >> 6);
    key += ~(key << 11);
    key ^= (key >> 16);
    return key;
}
# 700 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/khash.h"
typedef const char *kh_cstr_t;
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/map_defs.h" 2

typedef const char * cstr_t;
typedef void * ptr_t;
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/map.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/api/private/dispatch.h" 1





typedef Object (*ApiDispatchWrapper)(uint64_t channel_id,
                                     Array args,
                                     Error *error);



typedef struct {
  ApiDispatchWrapper fn;
  _Bool async;

} MsgpackRpcRequestHandler;
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/map.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/bufhl_defs.h" 1




# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/kvec.h" 1
# 134 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/kvec.h"
static inline void *_memcpy_free(void *const restrict dest,
                                 void *const restrict src,
                                 const size_t size)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_NONNULL_RET FUNC_ATTR_ALWAYS_INLINE
{
  __builtin___memcpy_chk (dest, src, size, __builtin_object_size (dest, 0));
  xfree(src);
  return dest;
}
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/bufhl_defs.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/kbtree.h" 1
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/bufhl_defs.h" 2



typedef struct {
  int src_id;
  int hl_id;
  colnr_T start;
  colnr_T stop;
} BufhlItem;

typedef struct { size_t size; size_t capacity; BufhlItem *items; } BufhlItemVec;

typedef struct {
  linenr_T line;
  BufhlItemVec items;
} BufhlLine;


typedef struct {
  BufhlItemVec entries;
  int current;
  colnr_T valid_to;
} BufhlLineInfo;


 typedef struct kbnode_bufhl_s kbnode_bufhl_t; struct kbnode_bufhl_s { int32_t n; _Bool is_internal; BufhlLine * key[2*10 -1]; kbnode_bufhl_t *ptr[]; } ; typedef struct { kbnode_bufhl_t *root; int n_keys, n_nodes; } kbtree_bufhl_t; typedef struct { kbnode_bufhl_t *x; int i; } kbpos_bufhl_t; typedef struct { kbpos_bufhl_t stack[64], *p; } kbitr_bufhl_t; static inline int __kb_getp_aux_bufhl(const kbnode_bufhl_t * restrict x, BufhlLine * * restrict k, int *r) { int tr, *rr, begin = 0, end = x->n; if (x->n == 0) return -1; rr = r? r : &tr; while (begin < end) { int mid = (begin + end) >> 1; if (((int)((((x->key)[mid])->line - (*k)->line))) < 0) begin = mid + 1; else end = mid; } if (begin == x->n) { *rr = 1; return x->n - 1; } if ((*rr = ((int)(((*k)->line - ((x->key)[begin])->line)))) < 0) --begin; return begin; } static BufhlLine * *kb_getp_bufhl(kbtree_bufhl_t *b, BufhlLine * * restrict k) { if (!b->root) { return 0; } int i, r = 0; kbnode_bufhl_t *x = b->root; while (x) { i = __kb_getp_aux_bufhl(x, k, &r); if (i >= 0 && r == 0) return &(x->key)[i]; if (x->is_internal == 0) return 0; x = (x->ptr)[i + 1]; } return 0; } static inline BufhlLine * *kb_get_bufhl(kbtree_bufhl_t *b, BufhlLine * k) { return kb_getp_bufhl(b, &k); } static inline void kb_intervalp_bufhl(kbtree_bufhl_t *b, BufhlLine * * restrict k, BufhlLine * **lower, BufhlLine * **upper) { if (!b->root) { return; } int i, r = 0; kbnode_bufhl_t *x = b->root; *lower = *upper = 0; while (x) { i = __kb_getp_aux_bufhl(x, k, &r); if (i >= 0 && r == 0) { *lower = *upper = &(x->key)[i]; return; } if (i >= 0) *lower = &(x->key)[i]; if (i < x->n - 1) *upper = &(x->key)[i + 1]; if (x->is_internal == 0) return; x = (x->ptr)[i + 1]; } } static inline void kb_interval_bufhl(kbtree_bufhl_t *b, BufhlLine * k, BufhlLine * **lower, BufhlLine * **upper) { kb_intervalp_bufhl(b, &k, lower, upper); } static inline void __kb_split_bufhl(kbtree_bufhl_t *b, kbnode_bufhl_t *x, int i, kbnode_bufhl_t *y) { kbnode_bufhl_t *z; z = (kbnode_bufhl_t*)xcalloc(1, y->is_internal? (sizeof(kbnode_bufhl_t)+(2*10)*sizeof(void *)) : sizeof(kbnode_bufhl_t)); ++b->n_nodes; z->is_internal = y->is_internal; z->n = 10 - 1; __builtin___memcpy_chk ((z->key), &(y->key)[10], sizeof(BufhlLine *) * (10 - 1), __builtin_object_size ((z->key), 0)); if (y->is_internal) __builtin___memcpy_chk ((z->ptr), &(y->ptr)[10], sizeof(void*) * 10, __builtin_object_size ((z->ptr), 0)); y->n = 10 - 1; __builtin___memmove_chk (&(x->ptr)[i + 2], &(x->ptr)[i + 1], sizeof(void*) * (unsigned int)(x->n - i), __builtin_object_size (&(x->ptr)[i + 2], 0)); (x->ptr)[i + 1] = z; __builtin___memmove_chk (&(x->key)[i + 1], &(x->key)[i], sizeof(BufhlLine *) * (unsigned int)(x->n - i), __builtin_object_size (&(x->key)[i + 1], 0)); (x->key)[i] = (y->key)[10 - 1]; ++x->n; } static inline BufhlLine * *__kb_putp_aux_bufhl(kbtree_bufhl_t *b, kbnode_bufhl_t *x, BufhlLine * * restrict k) { int i = x->n - 1; BufhlLine * *ret; if (x->is_internal == 0) { i = __kb_getp_aux_bufhl(x, k, 0); if (i != x->n - 1) __builtin___memmove_chk (&(x->key)[i + 2], &(x->key)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(BufhlLine *), __builtin_object_size (&(x->key)[i + 2], 0)); ret = &(x->key)[i + 1]; *ret = *k; ++x->n; } else { i = __kb_getp_aux_bufhl(x, k, 0) + 1; if ((x->ptr)[i]->n == 2 * 10 - 1) { __kb_split_bufhl(b, x, i, (x->ptr)[i]); if (((int)(((*k)->line - ((x->key)[i])->line))) > 0) ++i; } ret = __kb_putp_aux_bufhl(b, (x->ptr)[i], k); } return ret; } static inline BufhlLine * *kb_putp_bufhl(kbtree_bufhl_t *b, BufhlLine * * restrict k) { if (!b->root) { b->root = (kbnode_bufhl_t*)xcalloc(1, (sizeof(kbnode_bufhl_t)+(2*10)*sizeof(void *))); ++b->n_nodes; } kbnode_bufhl_t *r, *s; ++b->n_keys; r = b->root; if (r->n == 2 * 10 - 1) { ++b->n_nodes; s = (kbnode_bufhl_t*)xcalloc(1, (sizeof(kbnode_bufhl_t)+(2*10)*sizeof(void *))); b->root = s; s->is_internal = 1; s->n = 0; (s->ptr)[0] = r; __kb_split_bufhl(b, s, 0, r); r = s; } return __kb_putp_aux_bufhl(b, r, k); } static inline void kb_put_bufhl(kbtree_bufhl_t *b, BufhlLine * k) { kb_putp_bufhl(b, &k); } static inline BufhlLine * __kb_delp_aux_bufhl(kbtree_bufhl_t *b, kbnode_bufhl_t *x, BufhlLine * * restrict k, int s) { int yn, zn, i, r = 0; kbnode_bufhl_t *xp, *y, *z; BufhlLine * kp; if (x == 0) return *k; if (s) { r = x->is_internal == 0? 0 : s == 1? 1 : -1; i = s == 1? x->n - 1 : -1; } else i = __kb_getp_aux_bufhl(x, k, &r); if (x->is_internal == 0) { if (s == 2) ++i; kp = (x->key)[i]; __builtin___memmove_chk (&(x->key)[i], &(x->key)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(BufhlLine *), __builtin_object_size (&(x->key)[i], 0)); --x->n; return kp; } if (r == 0) { if ((yn = (x->ptr)[i]->n) >= 10) { xp = (x->ptr)[i]; kp = (x->key)[i]; (x->key)[i] = __kb_delp_aux_bufhl(b, xp, 0, 1); return kp; } else if ((zn = (x->ptr)[i + 1]->n) >= 10) { xp = (x->ptr)[i + 1]; kp = (x->key)[i]; (x->key)[i] = __kb_delp_aux_bufhl(b, xp, 0, 2); return kp; } else if (yn == 10 - 1 && zn == 10 - 1) { y = (x->ptr)[i]; z = (x->ptr)[i + 1]; (y->key)[y->n++] = *k; __builtin___memmove_chk (&(y->key)[y->n], (z->key), (unsigned int)z->n * sizeof(BufhlLine *), __builtin_object_size (&(y->key)[y->n], 0)); if (y->is_internal) __builtin___memmove_chk (&(y->ptr)[y->n], (z->ptr), (unsigned int)(z->n + 1) * sizeof(void*), __builtin_object_size (&(y->ptr)[y->n], 0)); y->n += z->n; __builtin___memmove_chk (&(x->key)[i], &(x->key)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(BufhlLine *), __builtin_object_size (&(x->key)[i], 0)); __builtin___memmove_chk (&(x->ptr)[i + 1], &(x->ptr)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*), __builtin_object_size (&(x->ptr)[i + 1], 0)); --x->n; xfree(z); return __kb_delp_aux_bufhl(b, y, k, s); } } ++i; if ((xp = (x->ptr)[i])->n == 10 - 1) { if (i > 0 && (y = (x->ptr)[i - 1])->n >= 10) { __builtin___memmove_chk (&(xp->key)[1], (xp->key), (unsigned int)xp->n * sizeof(BufhlLine *), __builtin_object_size (&(xp->key)[1], 0)); if (xp->is_internal) __builtin___memmove_chk (&(xp->ptr)[1], (xp->ptr), (unsigned int)(xp->n + 1) * sizeof(void*), __builtin_object_size (&(xp->ptr)[1], 0)); (xp->key)[0] = (x->key)[i - 1]; (x->key)[i - 1] = (y->key)[y->n - 1]; if (xp->is_internal) (xp->ptr)[0] = (y->ptr)[y->n]; --y->n; ++xp->n; } else if (i < x->n && (y = (x->ptr)[i + 1])->n >= 10) { (xp->key)[xp->n++] = (x->key)[i]; (x->key)[i] = (y->key)[0]; if (xp->is_internal) (xp->ptr)[xp->n] = (y->ptr)[0]; --y->n; __builtin___memmove_chk ((y->key), &(y->key)[1], (unsigned int)y->n * sizeof(BufhlLine *), __builtin_object_size ((y->key), 0)); if (y->is_internal) __builtin___memmove_chk ((y->ptr), &(y->ptr)[1], (unsigned int)(y->n + 1) * sizeof(void*), __builtin_object_size ((y->ptr), 0)); } else if (i > 0 && (y = (x->ptr)[i - 1])->n == 10 - 1) { (y->key)[y->n++] = (x->key)[i - 1]; __builtin___memmove_chk (&(y->key)[y->n], (xp->key), (unsigned int)xp->n * sizeof(BufhlLine *), __builtin_object_size (&(y->key)[y->n], 0)); if (y->is_internal) __builtin___memmove_chk (&(y->ptr)[y->n], (xp->ptr), (unsigned int)(xp->n + 1) * sizeof(void*), __builtin_object_size (&(y->ptr)[y->n], 0)); y->n += xp->n; __builtin___memmove_chk (&(x->key)[i - 1], &(x->key)[i], (unsigned int)(x->n - i) * sizeof(BufhlLine *), __builtin_object_size (&(x->key)[i - 1], 0)); __builtin___memmove_chk (&(x->ptr)[i], &(x->ptr)[i + 1], (unsigned int)(x->n - i) * sizeof(void*), __builtin_object_size (&(x->ptr)[i], 0)); --x->n; xfree(xp); xp = y; } else if (i < x->n && (y = (x->ptr)[i + 1])->n == 10 - 1) { (xp->key)[xp->n++] = (x->key)[i]; __builtin___memmove_chk (&(xp->key)[xp->n], (y->key), (unsigned int)y->n * sizeof(BufhlLine *), __builtin_object_size (&(xp->key)[xp->n], 0)); if (xp->is_internal) __builtin___memmove_chk (&(xp->ptr)[xp->n], (y->ptr), (unsigned int)(y->n + 1) * sizeof(void*), __builtin_object_size (&(xp->ptr)[xp->n], 0)); xp->n += y->n; __builtin___memmove_chk (&(x->key)[i], &(x->key)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(BufhlLine *), __builtin_object_size (&(x->key)[i], 0)); __builtin___memmove_chk (&(x->ptr)[i + 1], &(x->ptr)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*), __builtin_object_size (&(x->ptr)[i + 1], 0)); --x->n; xfree(y); } } return __kb_delp_aux_bufhl(b, xp, k, s); } static inline BufhlLine * kb_delp_bufhl(kbtree_bufhl_t *b, BufhlLine * * restrict k) { kbnode_bufhl_t *x; BufhlLine * ret; ret = __kb_delp_aux_bufhl(b, b->root, k, 0); --b->n_keys; if (b->root->n == 0 && b->root->is_internal) { --b->n_nodes; x = b->root; b->root = (x->ptr)[0]; xfree(x); } return ret; } static inline BufhlLine * kb_del_bufhl(kbtree_bufhl_t *b, BufhlLine * k) { return kb_delp_bufhl(b, &k); } static inline void kb_itr_first_bufhl(kbtree_bufhl_t *b, kbitr_bufhl_t *itr) { itr->p = 0; if (b->n_keys == 0) return; itr->p = itr->stack; itr->p->x = b->root; itr->p->i = 0; while (itr->p->x->is_internal && (itr->p->x->ptr)[0] != 0) { kbnode_bufhl_t *x = itr->p->x; ++itr->p; itr->p->x = (x->ptr)[0]; itr->p->i = 0; } } static inline int kb_itr_next_bufhl(kbtree_bufhl_t *b, kbitr_bufhl_t *itr) { if (itr->p < itr->stack) return 0; for (;;) { ++itr->p->i; while (itr->p->x && itr->p->i <= itr->p->x->n) { itr->p[1].i = 0; itr->p[1].x = itr->p->x->is_internal? (itr->p->x->ptr)[itr->p->i] : 0; ++itr->p; } --itr->p; if (itr->p < itr->stack) return 0; if (itr->p->x && itr->p->i < itr->p->x->n) return 1; } } static inline int kb_itr_prev_bufhl(kbtree_bufhl_t *b, kbitr_bufhl_t *itr) { if (itr->p < itr->stack) return 0; for (;;) { while (itr->p->x && itr->p->i >= 0) { itr->p[1].x = itr->p->x->is_internal? (itr->p->x->ptr)[itr->p->i] : 0; itr->p[1].i = itr->p[1].x ? itr->p[1].x->n : -1; ++itr->p; } --itr->p; if (itr->p < itr->stack) return 0; --itr->p->i; if (itr->p->x && itr->p->i >= 0) return 1; } } static inline int kb_itr_getp_bufhl(kbtree_bufhl_t *b, BufhlLine * * restrict k, kbitr_bufhl_t *itr) { if (b->n_keys == 0) { itr->p = ((void*)0); return 0; } int i, r = 0; itr->p = itr->stack; itr->p->x = b->root; while (itr->p->x) { i = __kb_getp_aux_bufhl(itr->p->x, k, &r); itr->p->i = i; if (i >= 0 && r == 0) return 1; ++itr->p->i; itr->p[1].x = itr->p->x->is_internal? (itr->p->x->ptr)[i + 1] : 0; ++itr->p; } return 0; } static inline int kb_itr_get_bufhl(kbtree_bufhl_t *b, BufhlLine * k, kbitr_bufhl_t *itr) { return kb_itr_getp_bufhl(b,&k,itr); } static inline void kb_del_itr_bufhl(kbtree_bufhl_t *b, kbitr_bufhl_t *itr) { BufhlLine * k = ((itr)->p->x->key)[(itr)->p->i]; kb_delp_bufhl(b, &k); kb_itr_getp_bufhl(b, &k, itr); }
typedef kbtree_bufhl_t BufhlInfo;
# 10 "/Users/a/Documents/projects/neovim-src/src/nvim/map.h" 2
# 27 "/Users/a/Documents/projects/neovim-src/src/nvim/map.h"
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; int *keys; int *vals; } kh_int_int_map_t; extern kh_int_int_map_t *kh_init_int_int_map(void); extern void kh_dealloc_int_int_map(kh_int_int_map_t *h); extern void kh_destroy_int_int_map(kh_int_int_map_t *h); extern void kh_clear_int_int_map(kh_int_int_map_t *h); extern khint_t kh_get_int_int_map(const kh_int_int_map_t *h, int key); extern void kh_resize_int_int_map(kh_int_int_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_int_int_map(kh_int_int_map_t *h, int key, int *ret); extern void kh_del_int_int_map(kh_int_int_map_t *h, khint_t x); typedef struct { kh_int_int_map_t *table; } Map_int_int; Map_int_int *map_int_int_new(void); void map_int_int_free(Map_int_int *map); int map_int_int_get(Map_int_int *map, int key); _Bool map_int_int_has(Map_int_int *map, int key); int map_int_int_put(Map_int_int *map, int key, int value); int *map_int_int_ref(Map_int_int *map, int key, _Bool put); int map_int_int_del(Map_int_int *map, int key); void map_int_int_clear(Map_int_int *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; cstr_t *keys; ptr_t *vals; } kh_cstr_t_ptr_t_map_t; extern kh_cstr_t_ptr_t_map_t *kh_init_cstr_t_ptr_t_map(void); extern void kh_dealloc_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h); extern void kh_destroy_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h); extern void kh_clear_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h); extern khint_t kh_get_cstr_t_ptr_t_map(const kh_cstr_t_ptr_t_map_t *h, cstr_t key); extern void kh_resize_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h, cstr_t key, int *ret); extern void kh_del_cstr_t_ptr_t_map(kh_cstr_t_ptr_t_map_t *h, khint_t x); typedef struct { kh_cstr_t_ptr_t_map_t *table; } Map_cstr_t_ptr_t; Map_cstr_t_ptr_t *map_cstr_t_ptr_t_new(void); void map_cstr_t_ptr_t_free(Map_cstr_t_ptr_t *map); ptr_t map_cstr_t_ptr_t_get(Map_cstr_t_ptr_t *map, cstr_t key); _Bool map_cstr_t_ptr_t_has(Map_cstr_t_ptr_t *map, cstr_t key); ptr_t map_cstr_t_ptr_t_put(Map_cstr_t_ptr_t *map, cstr_t key, ptr_t value); ptr_t *map_cstr_t_ptr_t_ref(Map_cstr_t_ptr_t *map, cstr_t key, _Bool put); ptr_t map_cstr_t_ptr_t_del(Map_cstr_t_ptr_t *map, cstr_t key); void map_cstr_t_ptr_t_clear(Map_cstr_t_ptr_t *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; ptr_t *keys; ptr_t *vals; } kh_ptr_t_ptr_t_map_t; extern kh_ptr_t_ptr_t_map_t *kh_init_ptr_t_ptr_t_map(void); extern void kh_dealloc_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h); extern void kh_destroy_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h); extern void kh_clear_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h); extern khint_t kh_get_ptr_t_ptr_t_map(const kh_ptr_t_ptr_t_map_t *h, ptr_t key); extern void kh_resize_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h, ptr_t key, int *ret); extern void kh_del_ptr_t_ptr_t_map(kh_ptr_t_ptr_t_map_t *h, khint_t x); typedef struct { kh_ptr_t_ptr_t_map_t *table; } Map_ptr_t_ptr_t; Map_ptr_t_ptr_t *map_ptr_t_ptr_t_new(void); void map_ptr_t_ptr_t_free(Map_ptr_t_ptr_t *map); ptr_t map_ptr_t_ptr_t_get(Map_ptr_t_ptr_t *map, ptr_t key); _Bool map_ptr_t_ptr_t_has(Map_ptr_t_ptr_t *map, ptr_t key); ptr_t map_ptr_t_ptr_t_put(Map_ptr_t_ptr_t *map, ptr_t key, ptr_t value); ptr_t *map_ptr_t_ptr_t_ref(Map_ptr_t_ptr_t *map, ptr_t key, _Bool put); ptr_t map_ptr_t_ptr_t_del(Map_ptr_t_ptr_t *map, ptr_t key); void map_ptr_t_ptr_t_clear(Map_ptr_t_ptr_t *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; uint64_t *keys; ptr_t *vals; } kh_uint64_t_ptr_t_map_t; extern kh_uint64_t_ptr_t_map_t *kh_init_uint64_t_ptr_t_map(void); extern void kh_dealloc_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h); extern void kh_destroy_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h); extern void kh_clear_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h); extern khint_t kh_get_uint64_t_ptr_t_map(const kh_uint64_t_ptr_t_map_t *h, uint64_t key); extern void kh_resize_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h, uint64_t key, int *ret); extern void kh_del_uint64_t_ptr_t_map(kh_uint64_t_ptr_t_map_t *h, khint_t x); typedef struct { kh_uint64_t_ptr_t_map_t *table; } Map_uint64_t_ptr_t; Map_uint64_t_ptr_t *map_uint64_t_ptr_t_new(void); void map_uint64_t_ptr_t_free(Map_uint64_t_ptr_t *map); ptr_t map_uint64_t_ptr_t_get(Map_uint64_t_ptr_t *map, uint64_t key); _Bool map_uint64_t_ptr_t_has(Map_uint64_t_ptr_t *map, uint64_t key); ptr_t map_uint64_t_ptr_t_put(Map_uint64_t_ptr_t *map, uint64_t key, ptr_t value); ptr_t *map_uint64_t_ptr_t_ref(Map_uint64_t_ptr_t *map, uint64_t key, _Bool put); ptr_t map_uint64_t_ptr_t_del(Map_uint64_t_ptr_t *map, uint64_t key); void map_uint64_t_ptr_t_clear(Map_uint64_t_ptr_t *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; handle_T *keys; ptr_t *vals; } kh_handle_T_ptr_t_map_t; extern kh_handle_T_ptr_t_map_t *kh_init_handle_T_ptr_t_map(void); extern void kh_dealloc_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h); extern void kh_destroy_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h); extern void kh_clear_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h); extern khint_t kh_get_handle_T_ptr_t_map(const kh_handle_T_ptr_t_map_t *h, handle_T key); extern void kh_resize_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h, handle_T key, int *ret); extern void kh_del_handle_T_ptr_t_map(kh_handle_T_ptr_t_map_t *h, khint_t x); typedef struct { kh_handle_T_ptr_t_map_t *table; } Map_handle_T_ptr_t; Map_handle_T_ptr_t *map_handle_T_ptr_t_new(void); void map_handle_T_ptr_t_free(Map_handle_T_ptr_t *map); ptr_t map_handle_T_ptr_t_get(Map_handle_T_ptr_t *map, handle_T key); _Bool map_handle_T_ptr_t_has(Map_handle_T_ptr_t *map, handle_T key); ptr_t map_handle_T_ptr_t_put(Map_handle_T_ptr_t *map, handle_T key, ptr_t value); ptr_t *map_handle_T_ptr_t_ref(Map_handle_T_ptr_t *map, handle_T key, _Bool put); ptr_t map_handle_T_ptr_t_del(Map_handle_T_ptr_t *map, handle_T key); void map_handle_T_ptr_t_clear(Map_handle_T_ptr_t *map);
typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; String *keys; MsgpackRpcRequestHandler *vals; } kh_String_MsgpackRpcRequestHandler_map_t; extern kh_String_MsgpackRpcRequestHandler_map_t *kh_init_String_MsgpackRpcRequestHandler_map(void); extern void kh_dealloc_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h); extern void kh_destroy_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h); extern void kh_clear_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h); extern khint_t kh_get_String_MsgpackRpcRequestHandler_map(const kh_String_MsgpackRpcRequestHandler_map_t *h, String key); extern void kh_resize_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h, khint_t new_n_buckets); extern khint_t kh_put_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h, String key, int *ret); extern void kh_del_String_MsgpackRpcRequestHandler_map(kh_String_MsgpackRpcRequestHandler_map_t *h, khint_t x); typedef struct { kh_String_MsgpackRpcRequestHandler_map_t *table; } Map_String_MsgpackRpcRequestHandler; Map_String_MsgpackRpcRequestHandler *map_String_MsgpackRpcRequestHandler_new(void); void map_String_MsgpackRpcRequestHandler_free(Map_String_MsgpackRpcRequestHandler *map); MsgpackRpcRequestHandler map_String_MsgpackRpcRequestHandler_get(Map_String_MsgpackRpcRequestHandler *map, String key); _Bool map_String_MsgpackRpcRequestHandler_has(Map_String_MsgpackRpcRequestHandler *map, String key); MsgpackRpcRequestHandler map_String_MsgpackRpcRequestHandler_put(Map_String_MsgpackRpcRequestHandler *map, String key, MsgpackRpcRequestHandler value); MsgpackRpcRequestHandler *map_String_MsgpackRpcRequestHandler_ref(Map_String_MsgpackRpcRequestHandler *map, String key, _Bool put); MsgpackRpcRequestHandler map_String_MsgpackRpcRequestHandler_del(Map_String_MsgpackRpcRequestHandler *map, String key); void map_String_MsgpackRpcRequestHandler_clear(Map_String_MsgpackRpcRequestHandler *map);
# 41 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2
# 91 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
typedef struct window_S win_T;
typedef struct wininfo_S wininfo_T;
typedef struct frame_S frame_T;



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/memline_defs.h" 1



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/memfile_defs.h" 1
# 16 "/Users/a/Documents/projects/neovim-src/src/nvim/memfile_defs.h"
typedef int64_t blocknr_T;
# 25 "/Users/a/Documents/projects/neovim-src/src/nvim/memfile_defs.h"
typedef struct mf_hashitem {
  struct mf_hashitem *mhi_next;
  struct mf_hashitem *mhi_prev;
  blocknr_T mhi_key;
} mf_hashitem_T;
# 40 "/Users/a/Documents/projects/neovim-src/src/nvim/memfile_defs.h"
typedef struct mf_hashtab {
  size_t mht_mask;

  size_t mht_count;
  mf_hashitem_T **mht_buckets;


  mf_hashitem_T *mht_small_buckets[64];
} mf_hashtab_T;
# 64 "/Users/a/Documents/projects/neovim-src/src/nvim/memfile_defs.h"
typedef struct bhdr {
  mf_hashitem_T bh_hashitem;


  struct bhdr *bh_next;
  struct bhdr *bh_prev;
  void *bh_data;
  unsigned bh_page_count;



  unsigned bh_flags;
} bhdr_T;







typedef struct mf_blocknr_trans_item {
  mf_hashitem_T nt_hashitem;

  blocknr_T nt_new_bnum;
} mf_blocknr_trans_item_T;


typedef struct memfile {
  char_u *mf_fname;
  char_u *mf_ffname;
  int mf_fd;
  bhdr_T *mf_free_first;
  bhdr_T *mf_used_first;
  bhdr_T *mf_used_last;
  unsigned mf_used_count;
  unsigned mf_used_count_max;
  mf_hashtab_T mf_hash;
  mf_hashtab_T mf_trans;
  blocknr_T mf_blocknr_max;
  blocknr_T mf_blocknr_min;
  blocknr_T mf_neg_count;
  blocknr_T mf_infile_count;
  unsigned mf_page_size;
  _Bool mf_dirty;
} memfile_T;
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/memline_defs.h" 2






typedef struct info_pointer {
  blocknr_T ip_bnum;
  linenr_T ip_low;
  linenr_T ip_high;
  int ip_index;
} infoptr_T;

typedef struct ml_chunksize {
  int mlcs_numlines;
  long mlcs_totalsize;
} chunksize_T;
# 32 "/Users/a/Documents/projects/neovim-src/src/nvim/memline_defs.h"
typedef struct memline {
  linenr_T ml_line_count;

  memfile_T *ml_mfp;





  int ml_flags;

  infoptr_T *ml_stack;
  int ml_stack_top;
  int ml_stack_size;

  linenr_T ml_line_lnum;
  char_u *ml_line_ptr;

  bhdr_T *ml_locked;
  linenr_T ml_locked_low;
  linenr_T ml_locked_high;
  int ml_locked_lineadd;
  chunksize_T *ml_chunksize;
  int ml_numchunks;
  int ml_usedchunks;
} memline_T;
# 97 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2




# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/regexp_defs.h" 1
# 45 "/Users/a/Documents/projects/neovim-src/src/nvim/regexp_defs.h"
typedef struct regengine regengine_T;
typedef struct regprog regprog_T;
typedef struct reg_extmatch reg_extmatch_T;







typedef struct {
  regprog_T *regprog;
  lpos_T startpos[10];
  lpos_T endpos[10];
  int rmm_ic;
  colnr_T rmm_maxcol;
} regmmatch_T;


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 1
# 64 "/Users/a/Documents/projects/neovim-src/src/nvim/regexp_defs.h" 2






struct regprog {
  regengine_T *engine;
  unsigned regflags;
  unsigned re_engine;
  unsigned re_flags;
};






typedef struct {

  regengine_T *engine;
  unsigned regflags;
  unsigned re_engine;
  unsigned re_flags;

  int regstart;
  char_u reganch;
  char_u *regmust;
  int regmlen;
  char_u reghasz;
  char_u program[1];
} bt_regprog_T;





typedef struct nfa_state nfa_state_T;
struct nfa_state {
  int c;
  nfa_state_T *out;
  nfa_state_T *out1;
  int id;
  int lastlist[2];
  int val;
};




typedef struct {

  regengine_T *engine;
  unsigned regflags;
  unsigned re_engine;
  unsigned re_flags;

  nfa_state_T *start;

  int reganch;
  int regstart;
  char_u *match_text;

  int has_zend;
  int has_backref;
  int reghasz;
  char_u *pattern;
  int nsubexp;
  int nstate;
  nfa_state_T state[1];
} nfa_regprog_T;






typedef struct {
  regprog_T *regprog;
  char_u *startp[10];
  char_u *endp[10];
  _Bool rm_ic;
} regmatch_T;






struct reg_extmatch {
  int16_t refcnt;
  char_u *matches[10];
};

struct regengine {
  regprog_T *(*regcomp)(char_u*, int);
  void (*regfree)(regprog_T *);
  int (*regexec_nl)(regmatch_T*, char_u*, colnr_T, _Bool);
  long (*regexec_multi)(regmmatch_T*, win_T*, buf_T*, linenr_T, colnr_T,
      proftime_T*);
  char_u *expr;
};
# 102 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/syntax_defs.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/src/nvim/syntax_defs.h"
typedef struct syn_state synstate_T;


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/src/nvim/syntax_defs.h" 2


typedef unsigned short disptick_T;


struct sp_syn {
  int inc_tag;
  short id;
  short *cont_in_list;
};




typedef struct keyentry keyentry_T;

struct keyentry {
  keyentry_T *ke_next;
  struct sp_syn k_syn;
  short *next_list;
  int flags;
  int k_char;
  char_u keyword[1];
};




typedef struct buf_state {
  int bs_idx;
  int bs_flags;
  int bs_seqnr;
  int bs_cchar;
  reg_extmatch_T *bs_extmatch;
} bufstate_T;





struct syn_state {
  synstate_T *sst_next;
  linenr_T sst_lnum;
  union {
    bufstate_T sst_stack[7];
    garray_T sst_ga;
  } sst_union;
  int sst_next_flags;
  int sst_stacksize;
  short *sst_next_list;

  disptick_T sst_tick;
  linenr_T sst_change_lnum;

};


typedef struct attr_entry {
  int16_t rgb_ae_attr, cterm_ae_attr;
  RgbValue rgb_fg_color, rgb_bg_color, rgb_sp_color;
  int cterm_fg_color, cterm_bg_color;
} attrentry_T;
# 104 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/sign_defs.h" 1







typedef struct signlist signlist_T;

struct signlist
{
    int id;
    linenr_T lnum;
    int typenr;
    signlist_T *next;
};
# 106 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/fs_defs.h" 1



# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h" 1
# 48 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-errno.h" 1
# 25 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-errno.h"
# 1 "/usr/include/errno.h" 1 3 4
# 26 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-errno.h" 2
# 49 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-version.h" 1
# 50 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h" 2
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 51 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h" 2
# 62 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 1
# 27 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 23 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/sys/fcntl.h" 1 3 4
# 116 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_o_sync.h" 1 3 4
# 117 "/usr/include/sys/fcntl.h" 2 3 4
# 157 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_o_dsync.h" 1 3 4
# 158 "/usr/include/sys/fcntl.h" 2 3 4
# 310 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_seek_set.h" 1 3 4
# 311 "/usr/include/sys/fcntl.h" 2 3 4
# 335 "/usr/include/sys/fcntl.h" 3 4
struct flock {
 off_t l_start;
 off_t l_len;
 pid_t l_pid;
 short l_type;
 short l_whence;
};
# 350 "/usr/include/sys/fcntl.h" 3 4
struct flocktimeout {
 struct flock fl;
 struct timespec timeout;
};
# 363 "/usr/include/sys/fcntl.h" 3 4
struct radvisory {
       off_t ra_offset;
       int ra_count;
};



typedef struct fcodeblobs {
 void *f_cd_hash;
 size_t f_hash_size;
 void *f_cd_buffer;
 size_t f_cd_size;
 unsigned int *f_out_size;
 int f_arch;
 int __padding;
} fcodeblobs_t;
# 387 "/usr/include/sys/fcntl.h" 3 4
typedef struct fsignatures {
 off_t fs_file_start;
 void *fs_blob_start;
 size_t fs_blob_size;
} fsignatures_t;
# 403 "/usr/include/sys/fcntl.h" 3 4
typedef struct fchecklv {
 off_t lv_file_start;
 size_t lv_error_message_size;
 void *lv_error_message;
} fchecklv_t;
# 419 "/usr/include/sys/fcntl.h" 3 4
typedef struct fstore {
 unsigned int fst_flags;
 int fst_posmode;
 off_t fst_offset;
 off_t fst_length;
 off_t fst_bytesalloc;
} fstore_t;


typedef struct fpunchhole {
 unsigned int fp_flags;
 unsigned int reserved;
 off_t fp_offset;
 off_t fp_length;
} fpunchhole_t;


typedef struct ftrimactivefile {
 off_t fta_offset;
 off_t fta_length;
} ftrimactivefile_t;



typedef struct fbootstraptransfer {
  off_t fbt_offset;
  size_t fbt_length;
  void *fbt_buffer;
} fbootstraptransfer_t;
# 471 "/usr/include/sys/fcntl.h" 3 4
#pragma pack(4)

struct log2phys {
 unsigned int l2p_flags;
 off_t l2p_contigbytes;


 off_t l2p_devoffset;


};

#pragma pack()
# 496 "/usr/include/sys/fcntl.h" 3 4
typedef enum {
 FILESEC_OWNER = 1,
 FILESEC_GROUP = 2,
 FILESEC_UUID = 3,
 FILESEC_MODE = 4,
 FILESEC_ACL = 5,
 FILESEC_GRPUUID = 6,


 FILESEC_ACL_RAW = 100,
 FILESEC_ACL_ALLOCSIZE = 101
} filesec_property_t;






int open(const char *, int, ...) __asm("_" "open" );

int openat(int, const char *, int, ...) __asm("_" "openat" ) __attribute__((availability(macosx,introduced=10.10)));

int creat(const char *, mode_t) __asm("_" "creat" );
int fcntl(int, int, ...) __asm("_" "fcntl" );


int openx_np(const char *, int, filesec_t);




int open_dprotected_np ( const char *, int, int, int, ...);
int flock(int, int);
filesec_t filesec_init(void);
filesec_t filesec_dup(filesec_t);
void filesec_free(filesec_t);
int filesec_get_property(filesec_t, filesec_property_t, void *);
int filesec_query_property(filesec_t, filesec_property_t, int *);
int filesec_set_property(filesec_t, filesec_property_t, const void *);
int filesec_unset_property(filesec_t, filesec_property_t) __attribute__((availability(macosx,introduced=10.6)));
# 24 "/usr/include/fcntl.h" 2 3 4
# 28 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2
# 1 "/usr/include/dirent.h" 1 3 4
# 65 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/sys/dirent.h" 1 3 4
# 86 "/usr/include/sys/dirent.h" 3 4
#pragma pack(4)
# 98 "/usr/include/sys/dirent.h" 3 4
#pragma pack()
# 112 "/usr/include/sys/dirent.h" 3 4
struct dirent { __uint64_t d_ino; __uint64_t d_seekoff; __uint16_t d_reclen; __uint16_t d_namlen; __uint8_t d_type; char d_name[1024]; };
# 66 "/usr/include/dirent.h" 2 3 4



struct _telldir;


typedef struct {
 int __dd_fd;
 long __dd_loc;
 long __dd_size;
 char *__dd_buf;
 int __dd_len;
 long __dd_seek;
 long __dd_rewind;
 int __dd_flags;
 __darwin_pthread_mutex_t __dd_lock;
 struct _telldir *__dd_td;
} DIR;
# 102 "/usr/include/dirent.h" 3 4
int closedir(DIR *) __asm("_" "closedir" );

DIR *opendir(const char *) __asm("_" "opendir" "$INODE64" );

struct dirent *readdir(DIR *) __asm("_" "readdir" "$INODE64");
int readdir_r(DIR *, struct dirent *, struct dirent **) __asm("_" "readdir_r" "$INODE64");

void rewinddir(DIR *) __asm("_" "rewinddir" "$INODE64" );

void seekdir(DIR *, long) __asm("_" "seekdir" "$INODE64" );

long telldir(DIR *) __asm("_" "telldir" "$INODE64" );
# 125 "/usr/include/dirent.h" 3 4
__attribute__((availability(macosx,introduced=10.10)))
DIR *fdopendir(int) __asm("_" "fdopendir" "$INODE64" );

int alphasort(const struct dirent **, const struct dirent **) __asm("_" "alphasort" "$INODE64");
# 143 "/usr/include/dirent.h" 3 4
int dirfd(DIR *dirp) __attribute__((availability(macosx,introduced=10.8)));


int scandir(const char *, struct dirent ***,
    int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **)) __asm("_" "scandir" "$INODE64");

int scandir_b(const char *, struct dirent ***,
    int (^)(const struct dirent *), int (^)(const struct dirent **, const struct dirent **)) __asm("_" "scandir_b" "$INODE64") __attribute__((availability(macosx,introduced=10.6)));
# 160 "/usr/include/dirent.h" 3 4
int getdirentries(int, char *, int, long *)






      __asm("_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect")



;

DIR *__opendir2(const char *, int) __asm("_" "__opendir2" "$INODE64" );
# 29 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2



# 1 "/usr/include/netinet/tcp.h" 1 3 4
# 71 "/usr/include/netinet/tcp.h" 3 4
typedef __uint32_t tcp_seq;
typedef __uint32_t tcp_cc;
# 81 "/usr/include/netinet/tcp.h" 3 4
struct tcphdr {
 unsigned short th_sport;
 unsigned short th_dport;
 tcp_seq th_seq;
 tcp_seq th_ack;

 unsigned int th_x2:4,
   th_off:4;





 unsigned char th_flags;
# 105 "/usr/include/netinet/tcp.h" 3 4
 unsigned short th_win;
 unsigned short th_sum;
 unsigned short th_urp;
};
# 231 "/usr/include/netinet/tcp.h" 3 4
struct tcp_connection_info {
        u_int8_t tcpi_state;
        u_int8_t tcpi_snd_wscale;
        u_int8_t tcpi_rcv_wscale;
        u_int8_t __pad1;
        u_int32_t tcpi_options;




        u_int32_t tcpi_flags;


        u_int32_t tcpi_rto;
        u_int32_t tcpi_maxseg;
        u_int32_t tcpi_snd_ssthresh;
        u_int32_t tcpi_snd_cwnd;
        u_int32_t tcpi_snd_wnd;
        u_int32_t tcpi_snd_sbbytes;
        u_int32_t tcpi_rcv_wnd;
        u_int32_t tcpi_rttcur;
        u_int32_t tcpi_srtt;
        u_int32_t tcpi_rttvar;
 u_int32_t
   tcpi_tfo_cookie_req:1,
   tcpi_tfo_cookie_rcv:1,
   tcpi_tfo_syn_loss:1,
   tcpi_tfo_syn_data_sent:1,
   tcpi_tfo_syn_data_acked:1,
   tcpi_tfo_syn_data_rcv:1,
   tcpi_tfo_cookie_req_rcv:1,
   tcpi_tfo_cookie_sent:1,
   tcpi_tfo_cookie_invalid:1,
   tcpi_tfo_cookie_wrong:1,
   tcpi_tfo_no_cookie_rcv:1,
   tcpi_tfo_heuristics_disable:1,
   tcpi_tfo_send_blackhole:1,
   tcpi_tfo_recv_blackhole:1,
   __pad2:18;
        u_int64_t tcpi_txpackets __attribute__((aligned(8)));
        u_int64_t tcpi_txbytes __attribute__((aligned(8)));
        u_int64_t tcpi_txretransmitbytes __attribute__((aligned(8)));
        u_int64_t tcpi_rxpackets __attribute__((aligned(8)));
        u_int64_t tcpi_rxbytes __attribute__((aligned(8)));
        u_int64_t tcpi_rxoutoforderbytes __attribute__((aligned(8)));
        u_int64_t tcpi_txretransmitpackets __attribute__((aligned(8)));
};
# 33 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2

# 1 "/usr/include/netdb.h" 1 3 4
# 101 "/usr/include/netdb.h" 3 4
extern int h_errno;
# 112 "/usr/include/netdb.h" 3 4
struct hostent {
 char *h_name;
 char **h_aliases;
 int h_addrtype;
 int h_length;
 char **h_addr_list;



};





struct netent {
 char *n_name;
 char **n_aliases;
 int n_addrtype;
 uint32_t n_net;
};

struct servent {
 char *s_name;
 char **s_aliases;
 int s_port;
 char *s_proto;
};

struct protoent {
 char *p_name;
 char **p_aliases;
 int p_proto;
};

struct addrinfo {
 int ai_flags;
 int ai_family;
 int ai_socktype;
 int ai_protocol;
 socklen_t ai_addrlen;
 char *ai_canonname;
 struct sockaddr *ai_addr;
 struct addrinfo *ai_next;
};


struct rpcent {
        char *r_name;
        char **r_aliases;
        int r_number;
};
# 259 "/usr/include/netdb.h" 3 4
void endhostent(void);
void endnetent(void);
void endprotoent(void);
void endservent(void);

void freeaddrinfo(struct addrinfo *);
const char *gai_strerror(int);
int getaddrinfo(const char * restrict, const char * restrict,
       const struct addrinfo * restrict,
       struct addrinfo ** restrict);
struct hostent *gethostbyaddr(const void *, socklen_t, int);
struct hostent *gethostbyname(const char *);
struct hostent *gethostent(void);
int getnameinfo(const struct sockaddr * restrict, socklen_t,
         char * restrict, socklen_t, char * restrict,
         socklen_t, int);
struct netent *getnetbyaddr(uint32_t, int);
struct netent *getnetbyname(const char *);
struct netent *getnetent(void);
struct protoent *getprotobyname(const char *);
struct protoent *getprotobynumber(int);
struct protoent *getprotoent(void);
struct servent *getservbyname(const char *, const char *);
struct servent *getservbyport(int, const char *);
struct servent *getservent(void);
void sethostent(int);

void setnetent(int);
void setprotoent(int);
void setservent(int);


void freehostent(struct hostent *);
struct hostent *gethostbyname2(const char *, int);
struct hostent *getipnodebyaddr(const void *, size_t, int, int *);
struct hostent *getipnodebyname(const char *, int, int, int *);
struct rpcent *getrpcbyname(const char *name);

struct rpcent *getrpcbynumber(int number);



struct rpcent *getrpcent(void);
void setrpcent(int stayopen);
void endrpcent(void);
void herror(const char *);
const char *hstrerror(int);
int innetgr(const char *, const char *, const char *, const char *);
int getnetgrent(char **, char **, char **);
void endnetgrent(void);
void setnetgrent(const char *);
# 35 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2

# 1 "/usr/include/termios.h" 1 3 4
# 27 "/usr/include/termios.h" 3 4
# 1 "/usr/include/sys/termios.h" 1 3 4
# 263 "/usr/include/sys/termios.h" 3 4
typedef unsigned long tcflag_t;
typedef unsigned char cc_t;
typedef unsigned long speed_t;

struct termios {
 tcflag_t c_iflag;
 tcflag_t c_oflag;
 tcflag_t c_cflag;
 tcflag_t c_lflag;
 cc_t c_cc[20];
 speed_t c_ispeed;
 speed_t c_ospeed;
};
# 331 "/usr/include/sys/termios.h" 3 4
speed_t cfgetispeed(const struct termios *);
speed_t cfgetospeed(const struct termios *);
int cfsetispeed(struct termios *, speed_t);
int cfsetospeed(struct termios *, speed_t);
int tcgetattr(int, struct termios *);
int tcsetattr(int, int, const struct termios *);
int tcdrain(int) __asm("_" "tcdrain" );
int tcflow(int, int);
int tcflush(int, int);
int tcsendbreak(int, int);


void cfmakeraw(struct termios *);
int cfsetspeed(struct termios *, speed_t);
# 356 "/usr/include/sys/termios.h" 3 4
# 1 "/usr/include/sys/ttycom.h" 1 3 4
# 72 "/usr/include/sys/ttycom.h" 3 4
# 1 "/usr/include/sys/ioccom.h" 1 3 4
# 73 "/usr/include/sys/ttycom.h" 2 3 4
# 82 "/usr/include/sys/ttycom.h" 3 4
struct winsize {
 unsigned short ws_row;
 unsigned short ws_col;
 unsigned short ws_xpixel;
 unsigned short ws_ypixel;
};
# 357 "/usr/include/sys/termios.h" 2 3 4








# 1 "/usr/include/sys/ttydefaults.h" 1 3 4
# 366 "/usr/include/sys/termios.h" 2 3 4
# 28 "/usr/include/termios.h" 2 3 4




pid_t tcgetsid(int);
# 37 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2
# 1 "/usr/include/pwd.h" 1 3 4
# 84 "/usr/include/pwd.h" 3 4
struct passwd {
 char *pw_name;
 char *pw_passwd;
 uid_t pw_uid;
 gid_t pw_gid;
 __darwin_time_t pw_change;
 char *pw_class;
 char *pw_gecos;
 char *pw_dir;
 char *pw_shell;
 __darwin_time_t pw_expire;
};




struct passwd *getpwuid(uid_t);
struct passwd *getpwnam(const char *);
int getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
int getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
struct passwd *getpwent(void);
void setpwent(void);
void endpwent(void);




# 1 "/usr/include/uuid/uuid.h" 1 3 4
# 43 "/usr/include/uuid/uuid.h" 3 4
typedef __darwin_uuid_string_t uuid_string_t;





static const uuid_t UUID_NULL __attribute__ ((unused)) = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};





void uuid_clear(uuid_t uu);

int uuid_compare(const uuid_t uu1, const uuid_t uu2);

void uuid_copy(uuid_t dst, const uuid_t src);

void uuid_generate(uuid_t out);
void uuid_generate_random(uuid_t out);
void uuid_generate_time(uuid_t out);

int uuid_is_null(const uuid_t uu);

int uuid_parse(const uuid_string_t in, uuid_t uu);

void uuid_unparse(const uuid_t uu, uuid_string_t out);
void uuid_unparse_lower(const uuid_t uu, uuid_string_t out);
void uuid_unparse_upper(const uuid_t uu, uuid_string_t out);
# 111 "/usr/include/pwd.h" 2 3 4

int setpassent(int);
char *user_from_uid(uid_t, int);
struct passwd *getpwuuid(uuid_t);
int getpwuuid_r(uuid_t, struct passwd *, char *, size_t, struct passwd **);
# 38 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2


# 1 "/usr/include/semaphore.h" 1 3 4
# 29 "/usr/include/semaphore.h" 3 4
# 1 "/usr/include/sys/semaphore.h" 1 3 4
# 43 "/usr/include/sys/semaphore.h" 3 4
typedef int sem_t;
# 52 "/usr/include/sys/semaphore.h" 3 4
int sem_close(sem_t *);
int sem_destroy(sem_t *) __attribute__((deprecated));
int sem_getvalue(sem_t * restrict, int * restrict) __attribute__((deprecated));
int sem_init(sem_t *, int, unsigned int) __attribute__((deprecated));
sem_t * sem_open(const char *, int, ...);
int sem_post(sem_t *);
int sem_trywait(sem_t *);
int sem_unlink(const char *);
int sem_wait(sem_t *) __asm("_" "sem_wait" );
# 30 "/usr/include/semaphore.h" 2 3 4
# 41 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2

# 1 "/usr/include/pthread.h" 1 3 4
# 57 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/pthread/pthread_impl.h" 1 3 4
# 58 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/pthread/sched.h" 1 3 4
# 35 "/usr/include/pthread/sched.h" 3 4
struct sched_param { int sched_priority; char __opaque[4]; };


extern int sched_yield(void);
extern int sched_get_priority_min(int);
extern int sched_get_priority_max(int);
# 60 "/usr/include/pthread.h" 2 3 4
# 73 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/pthread/qos.h" 1 3 4
# 32 "/usr/include/pthread/qos.h" 3 4
# 1 "/usr/include/sys/qos.h" 1 3 4
# 128 "/usr/include/sys/qos.h" 3 4
enum { QOS_CLASS_USER_INTERACTIVE __attribute__((availability(macosx,introduced=10.10))) = 0x21, QOS_CLASS_USER_INITIATED __attribute__((availability(macosx,introduced=10.10))) = 0x19, QOS_CLASS_DEFAULT __attribute__((availability(macosx,introduced=10.10))) = 0x15, QOS_CLASS_UTILITY __attribute__((availability(macosx,introduced=10.10))) = 0x11, QOS_CLASS_BACKGROUND __attribute__((availability(macosx,introduced=10.10))) = 0x09, QOS_CLASS_UNSPECIFIED __attribute__((availability(macosx,introduced=10.10))) = 0x00, }; typedef unsigned int qos_class_t;
# 168 "/usr/include/sys/qos.h" 3 4
__attribute__((availability(macosx,introduced=10.10)))
qos_class_t
qos_class_self(void);
# 190 "/usr/include/sys/qos.h" 3 4
__attribute__((availability(macosx,introduced=10.10)))
qos_class_t
qos_class_main(void);
# 33 "/usr/include/pthread/qos.h" 2 3 4
# 79 "/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macosx,introduced=10.10)))
int
pthread_attr_set_qos_class_np(pthread_attr_t *__attr,
  qos_class_t __qos_class, int __relative_priority);
# 110 "/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macosx,introduced=10.10)))
int
pthread_attr_get_qos_class_np(pthread_attr_t * restrict __attr,
  qos_class_t * _Nullable restrict __qos_class,
  int * _Nullable restrict __relative_priority);
# 151 "/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macosx,introduced=10.10)))
int
pthread_set_qos_class_self_np(qos_class_t __qos_class,
  int __relative_priority);
# 182 "/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macosx,introduced=10.10)))
int
pthread_get_qos_class_np(pthread_t __pthread,
  qos_class_t * _Nullable restrict __qos_class,
  int * _Nullable restrict __relative_priority);
# 209 "/usr/include/pthread/qos.h" 3 4
typedef struct pthread_override_s* pthread_override_t;
# 261 "/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macosx,introduced=10.10)))
pthread_override_t
pthread_override_qos_class_start_np(pthread_t __pthread,
  qos_class_t __qos_class, int __relative_priority);
# 289 "/usr/include/pthread/qos.h" 3 4
__attribute__((availability(macosx,introduced=10.10)))
int
pthread_override_qos_class_end_np(pthread_override_t __override);
# 74 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/sys/_types/_mach_port_t.h" 1 3 4
# 49 "/usr/include/sys/_types/_mach_port_t.h" 3 4
typedef __darwin_mach_port_t mach_port_t;
# 78 "/usr/include/pthread.h" 2 3 4
# 215 "/usr/include/pthread.h" 3 4
__attribute__((availability(macosx,introduced=10.4)))
int pthread_atfork(void (* _Nullable)(void), void (* _Nullable)(void),
  void (* _Nullable)(void));

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_destroy(pthread_attr_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_getdetachstate(const pthread_attr_t *, int *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_getguardsize(const pthread_attr_t * restrict, size_t * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_getinheritsched(const pthread_attr_t * restrict, int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_getschedparam(const pthread_attr_t * restrict,
  struct sched_param * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_getschedpolicy(const pthread_attr_t * restrict, int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_getscope(const pthread_attr_t * restrict, int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_getstack(const pthread_attr_t * restrict,
  void * _Nullable * _Nonnull restrict, size_t * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_getstackaddr(const pthread_attr_t * restrict,
  void * _Nullable * _Nonnull restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_getstacksize(const pthread_attr_t * restrict, size_t * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_init(pthread_attr_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_setdetachstate(pthread_attr_t *, int);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_setguardsize(pthread_attr_t *, size_t);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_setinheritsched(pthread_attr_t *, int);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_setschedparam(pthread_attr_t * restrict,
  const struct sched_param * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_setschedpolicy(pthread_attr_t *, int);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_setscope(pthread_attr_t *, int);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_setstack(pthread_attr_t *, void *, size_t);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_setstackaddr(pthread_attr_t *, void *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_attr_setstacksize(pthread_attr_t *, size_t);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_cancel(pthread_t) __asm("_" "pthread_cancel" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_cond_broadcast(pthread_cond_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_cond_destroy(pthread_cond_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_cond_init(
  pthread_cond_t * restrict,
  const pthread_condattr_t * _Nullable restrict)
  __asm("_" "pthread_cond_init" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_cond_signal(pthread_cond_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_cond_timedwait(
  pthread_cond_t * restrict, pthread_mutex_t * restrict,
  const struct timespec * _Nullable restrict)
  __asm("_" "pthread_cond_timedwait" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_cond_wait(pthread_cond_t * restrict,
  pthread_mutex_t * restrict) __asm("_" "pthread_cond_wait" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_condattr_destroy(pthread_condattr_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_condattr_init(pthread_condattr_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_condattr_getpshared(const pthread_condattr_t * restrict,
  int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_condattr_setpshared(pthread_condattr_t *, int);

__attribute__((availability(macosx,introduced=10.4)))

int pthread_create(pthread_t _Nullable * _Nonnull restrict,
  const pthread_attr_t * _Nullable restrict,
  void * _Nullable (* _Nonnull)(void * _Nullable),
  void * _Nullable restrict);






__attribute__((availability(macosx,introduced=10.4)))
int pthread_detach(pthread_t);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_equal(pthread_t _Nullable, pthread_t _Nullable);

__attribute__((availability(macosx,introduced=10.4)))
void pthread_exit(void * _Nullable) __attribute__((noreturn));

__attribute__((availability(macosx,introduced=10.4)))
int pthread_getconcurrency(void);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_getschedparam(pthread_t , int * _Nullable restrict,
  struct sched_param * _Nullable restrict);

__attribute__((availability(macosx,introduced=10.4)))
void* _Nullable pthread_getspecific(pthread_key_t);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_join(pthread_t , void * _Nullable * _Nullable)
  __asm("_" "pthread_join" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_key_create(pthread_key_t *, void (* _Nullable)(void *));

__attribute__((availability(macosx,introduced=10.4)))
int pthread_key_delete(pthread_key_t);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutex_destroy(pthread_mutex_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutex_getprioceiling(const pthread_mutex_t * restrict,
  int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutex_init(pthread_mutex_t * restrict,
  const pthread_mutexattr_t * _Nullable restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutex_lock(pthread_mutex_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutex_setprioceiling(pthread_mutex_t * restrict, int,
  int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutex_trylock(pthread_mutex_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutex_unlock(pthread_mutex_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutexattr_destroy(pthread_mutexattr_t *) __asm("_" "pthread_mutexattr_destroy" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t * restrict,
  int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutexattr_getprotocol(const pthread_mutexattr_t * restrict,
  int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutexattr_getpshared(const pthread_mutexattr_t * restrict,
  int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutexattr_gettype(const pthread_mutexattr_t * restrict,
  int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutexattr_init(pthread_mutexattr_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_mutexattr_settype(pthread_mutexattr_t *, int);

__attribute__((availability(swift,unavailable,message="Use lazily initialized globals instead")))
__attribute__((availability(macosx,introduced=10.4)))
int pthread_once(pthread_once_t *, void (* _Nonnull)(void));

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlock_destroy(pthread_rwlock_t * ) __asm("_" "pthread_rwlock_destroy" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlock_init(pthread_rwlock_t * restrict,
  const pthread_rwlockattr_t * _Nullable restrict)
  __asm("_" "pthread_rwlock_init" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlock_rdlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_rdlock" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlock_tryrdlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_tryrdlock" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlock_trywrlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_trywrlock" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlock_wrlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_wrlock" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlock_unlock(pthread_rwlock_t *) __asm("_" "pthread_rwlock_unlock" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t * restrict,
  int * restrict);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlockattr_init(pthread_rwlockattr_t *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int);

__attribute__((availability(macosx,introduced=10.4)))
pthread_t pthread_self(void);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_setcancelstate(int , int * _Nullable)
  __asm("_" "pthread_setcancelstate" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_setcanceltype(int , int * _Nullable)
  __asm("_" "pthread_setcanceltype" );

__attribute__((availability(macosx,introduced=10.4)))
int pthread_setconcurrency(int);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_setschedparam(pthread_t, int, const struct sched_param *);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_setspecific(pthread_key_t , const void * _Nullable);

__attribute__((availability(macosx,introduced=10.4)))
void pthread_testcancel(void) __asm("_" "pthread_testcancel" );




__attribute__((availability(macosx,introduced=10.4)))
int pthread_is_threaded_np(void);

__attribute__((availability(macosx,introduced=10.6)))
int pthread_threadid_np(pthread_t _Nullable,__uint64_t* _Nullable);


__attribute__((availability(macosx,introduced=10.6)))
int pthread_getname_np(pthread_t,char*,size_t);

__attribute__((availability(macosx,introduced=10.6)))
int pthread_setname_np(const char*);


__attribute__((availability(macosx,introduced=10.4)))
int pthread_main_np(void);


__attribute__((availability(macosx,introduced=10.4)))
mach_port_t pthread_mach_thread_np(pthread_t);

__attribute__((availability(macosx,introduced=10.4)))
size_t pthread_get_stacksize_np(pthread_t);

__attribute__((availability(macosx,introduced=10.4)))
void* pthread_get_stackaddr_np(pthread_t);


__attribute__((availability(macosx,introduced=10.4)))
int pthread_cond_signal_thread_np(pthread_cond_t *, pthread_t _Nullable);


__attribute__((availability(macosx,introduced=10.4)))
int pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *,
  const struct timespec * _Nullable);


__attribute__((availability(macosx,introduced=10.4)))

int pthread_create_suspended_np(
  pthread_t _Nullable * _Nonnull, const pthread_attr_t * _Nullable,
  void * _Nullable (* _Nonnull)(void * _Nullable), void * _Nullable);





__attribute__((availability(macosx,introduced=10.4)))
int pthread_kill(pthread_t, int);

__attribute__((availability(macosx,introduced=10.5)))
_Nullable pthread_t pthread_from_mach_thread_np(mach_port_t);

__attribute__((availability(macosx,introduced=10.4)))
int pthread_sigmask(int, const sigset_t * _Nullable, sigset_t * _Nullable)
  __asm("_" "pthread_sigmask" );

__attribute__((availability(macosx,introduced=10.4)))
void pthread_yield_np(void);
# 43 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2
# 1 "/usr/include/signal.h" 1 3 4
# 69 "/usr/include/signal.h" 3 4
extern const char *const sys_signame[32];
extern const char *const sys_siglist[32];



int raise(int);




void (* _Nullable bsd_signal(int, void (* _Nullable)(int)))(int);
int kill(pid_t, int) __asm("_" "kill" );
int killpg(pid_t, int) __asm("_" "killpg" );
int pthread_kill(pthread_t, int);
int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm("_" "pthread_sigmask" );
int sigaction(int, const struct sigaction * restrict,
     struct sigaction * restrict);
int sigaddset(sigset_t *, int);
int sigaltstack(const stack_t * restrict, stack_t * restrict) __asm("_" "sigaltstack" ) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(const sigset_t *, int);
int sigpause(int) __asm("_" "sigpause" );
int sigpending(sigset_t *);
int sigprocmask(int, const sigset_t * restrict, sigset_t * restrict);
int sigrelse(int);
void (* _Nullable sigset(int, void (* _Nullable)(int)))(int);
int sigsuspend(const sigset_t *) __asm("_" "sigsuspend" );
int sigwait(const sigset_t * restrict, int * restrict) __asm("_" "sigwait" );

void psignal(unsigned int, const char *);
int sigblock(int);
int sigsetmask(int);
int sigvec(int, struct sigvec *, struct sigvec *);






inline __attribute__ ((__always_inline__)) int
__sigbits(int __signo)
{
    return __signo > 32 ? 0 : (1 << (__signo - 1));
}
# 44 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-threadpool.h" 1
# 30 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-threadpool.h"
struct uv__work {
  void (*work)(struct uv__work *w);
  void (*done)(struct uv__work *w, int status);
  struct uv_loop_s* loop;
  void* wq[2];
};
# 46 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2
# 56 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-darwin.h" 1
# 26 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-darwin.h"
# 1 "/usr/include/mach/mach.h" 1 3 4
# 65 "/usr/include/mach/mach.h" 3 4
# 1 "/usr/include/mach/std_types.h" 1 3 4
# 67 "/usr/include/mach/std_types.h" 3 4
# 1 "/usr/include/mach/boolean.h" 1 3 4
# 73 "/usr/include/mach/boolean.h" 3 4
# 1 "/usr/include/mach/machine/boolean.h" 1 3 4
# 33 "/usr/include/mach/machine/boolean.h" 3 4
# 1 "/usr/include/mach/i386/boolean.h" 1 3 4
# 69 "/usr/include/mach/i386/boolean.h" 3 4
typedef unsigned int boolean_t;
# 34 "/usr/include/mach/machine/boolean.h" 2 3 4
# 74 "/usr/include/mach/boolean.h" 2 3 4
# 68 "/usr/include/mach/std_types.h" 2 3 4
# 1 "/usr/include/mach/kern_return.h" 1 3 4
# 70 "/usr/include/mach/kern_return.h" 3 4
# 1 "/usr/include/mach/machine/kern_return.h" 1 3 4
# 33 "/usr/include/mach/machine/kern_return.h" 3 4
# 1 "/usr/include/mach/i386/kern_return.h" 1 3 4
# 71 "/usr/include/mach/i386/kern_return.h" 3 4
typedef int kern_return_t;
# 34 "/usr/include/mach/machine/kern_return.h" 2 3 4
# 71 "/usr/include/mach/kern_return.h" 2 3 4
# 69 "/usr/include/mach/std_types.h" 2 3 4
# 1 "/usr/include/mach/port.h" 1 3 4
# 92 "/usr/include/mach/port.h" 3 4
# 1 "/usr/include/mach/machine/vm_types.h" 1 3 4
# 33 "/usr/include/mach/machine/vm_types.h" 3 4
# 1 "/usr/include/mach/i386/vm_types.h" 1 3 4
# 73 "/usr/include/mach/i386/vm_types.h" 3 4
# 1 "/usr/include/mach/i386/vm_param.h" 1 3 4
# 74 "/usr/include/mach/i386/vm_types.h" 2 3 4
# 93 "/usr/include/mach/i386/vm_types.h" 3 4
typedef __darwin_natural_t natural_t;
typedef int integer_t;






typedef uintptr_t vm_offset_t;
# 112 "/usr/include/mach/i386/vm_types.h" 3 4
typedef uintptr_t vm_size_t;
# 124 "/usr/include/mach/i386/vm_types.h" 3 4
typedef uint64_t mach_vm_address_t;
typedef uint64_t mach_vm_offset_t;
typedef uint64_t mach_vm_size_t;

typedef uint64_t vm_map_offset_t;
typedef uint64_t vm_map_address_t;
typedef uint64_t vm_map_size_t;

typedef mach_vm_address_t mach_port_context_t;
# 34 "/usr/include/mach/machine/vm_types.h" 2 3 4
# 93 "/usr/include/mach/port.h" 2 3 4
# 106 "/usr/include/mach/port.h" 3 4
typedef natural_t mach_port_name_t;
typedef mach_port_name_t *mach_port_name_array_t;
# 130 "/usr/include/mach/port.h" 3 4
typedef mach_port_t *mach_port_array_t;
# 188 "/usr/include/mach/port.h" 3 4
typedef natural_t mach_port_right_t;
# 198 "/usr/include/mach/port.h" 3 4
typedef natural_t mach_port_type_t;
typedef mach_port_type_t *mach_port_type_array_t;
# 233 "/usr/include/mach/port.h" 3 4
typedef natural_t mach_port_urefs_t;
typedef integer_t mach_port_delta_t;



typedef natural_t mach_port_seqno_t;
typedef natural_t mach_port_mscount_t;
typedef natural_t mach_port_msgcount_t;
typedef natural_t mach_port_rights_t;






typedef unsigned int mach_port_srights_t;

typedef struct mach_port_status {
 mach_port_rights_t mps_pset;
 mach_port_seqno_t mps_seqno;
 mach_port_mscount_t mps_mscount;
 mach_port_msgcount_t mps_qlimit;
 mach_port_msgcount_t mps_msgcount;
 mach_port_rights_t mps_sorights;
 boolean_t mps_srights;
 boolean_t mps_pdrequest;
 boolean_t mps_nsrequest;
 natural_t mps_flags;
} mach_port_status_t;
# 273 "/usr/include/mach/port.h" 3 4
typedef struct mach_port_limits {
 mach_port_msgcount_t mpl_qlimit;
} mach_port_limits_t;
# 285 "/usr/include/mach/port.h" 3 4
typedef struct mach_port_info_ext {
 mach_port_status_t mpie_status;
 mach_port_msgcount_t mpie_boost_cnt;
 uint32_t reserved[6];
} mach_port_info_ext_t;

typedef integer_t *mach_port_info_t;


typedef int mach_port_flavor_t;
# 314 "/usr/include/mach/port.h" 3 4
typedef struct mach_port_qos {
 unsigned int name:1;
 unsigned int prealloc:1;
 boolean_t pad1:30;
 natural_t len;
} mach_port_qos_t;
# 340 "/usr/include/mach/port.h" 3 4
typedef struct mach_port_options {
 uint32_t flags;
 mach_port_limits_t mpl;
 uint64_t reserved[2];
}mach_port_options_t;

typedef mach_port_options_t *mach_port_options_ptr_t;
# 356 "/usr/include/mach/port.h" 3 4
enum mach_port_guard_exception_codes {
 kGUARD_EXC_DESTROY = 1u << 0,
 kGUARD_EXC_MOD_REFS = 1u << 1,
 kGUARD_EXC_SET_CONTEXT = 1u << 2,
 kGUARD_EXC_UNGUARDED = 1u << 3,
 kGUARD_EXC_INCORRECT_GUARD = 1u << 4
};
# 70 "/usr/include/mach/std_types.h" 2 3 4
# 1 "/usr/include/mach/vm_types.h" 1 3 4
# 40 "/usr/include/mach/vm_types.h" 3 4
typedef vm_offset_t pointer_t;
typedef vm_offset_t vm_address_t;







typedef uint64_t addr64_t;
# 61 "/usr/include/mach/vm_types.h" 3 4
typedef uint32_t reg64_t;






typedef uint32_t ppnum_t;




typedef mach_port_t vm_map_t;
# 82 "/usr/include/mach/vm_types.h" 3 4
typedef uint64_t vm_object_offset_t;
typedef uint64_t vm_object_size_t;




typedef mach_port_t upl_t;
typedef mach_port_t vm_named_entry_t;
# 71 "/usr/include/mach/std_types.h" 2 3 4
# 66 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/mach_types.h" 1 3 4
# 80 "/usr/include/mach/mach_types.h" 3 4
# 1 "/usr/include/mach/host_info.h" 1 3 4
# 66 "/usr/include/mach/host_info.h" 3 4
# 1 "/usr/include/mach/message.h" 1 3 4
# 91 "/usr/include/mach/message.h" 3 4
typedef natural_t mach_msg_timeout_t;
# 221 "/usr/include/mach/message.h" 3 4
typedef unsigned int mach_msg_bits_t;
typedef natural_t mach_msg_size_t;
typedef integer_t mach_msg_id_t;



typedef unsigned int mach_msg_priority_t;



typedef unsigned int mach_msg_type_name_t;
# 244 "/usr/include/mach/message.h" 3 4
typedef unsigned int mach_msg_copy_options_t;
# 266 "/usr/include/mach/message.h" 3 4
typedef unsigned int mach_msg_descriptor_type_t;






#pragma pack(4)

typedef struct
{
  natural_t pad1;
  mach_msg_size_t pad2;
  unsigned int pad3 : 24;
  mach_msg_descriptor_type_t type : 8;
} mach_msg_type_descriptor_t;

typedef struct
{
  mach_port_t name;

  mach_msg_size_t pad1;
  unsigned int pad2 : 16;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;
} mach_msg_port_descriptor_t;

typedef struct
{
  uint32_t address;
  mach_msg_size_t size;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  unsigned int pad1: 8;
  mach_msg_descriptor_type_t type: 8;
} mach_msg_ool_descriptor32_t;

typedef struct
{
  uint64_t address;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  unsigned int pad1: 8;
  mach_msg_descriptor_type_t type: 8;
  mach_msg_size_t size;
} mach_msg_ool_descriptor64_t;

typedef struct
{
  void* address;



  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  unsigned int pad1: 8;
  mach_msg_descriptor_type_t type: 8;

  mach_msg_size_t size;

} mach_msg_ool_descriptor_t;

typedef struct
{
  uint32_t address;
  mach_msg_size_t count;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;
} mach_msg_ool_ports_descriptor32_t;

typedef struct
{
  uint64_t address;
  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;
  mach_msg_size_t count;
} mach_msg_ool_ports_descriptor64_t;

typedef struct
{
  void* address;



  boolean_t deallocate: 8;
  mach_msg_copy_options_t copy: 8;
  mach_msg_type_name_t disposition : 8;
  mach_msg_descriptor_type_t type : 8;

  mach_msg_size_t count;

} mach_msg_ool_ports_descriptor_t;






typedef union
{
  mach_msg_port_descriptor_t port;
  mach_msg_ool_descriptor_t out_of_line;
  mach_msg_ool_ports_descriptor_t ool_ports;
  mach_msg_type_descriptor_t type;
} mach_msg_descriptor_t;

typedef struct
{
        mach_msg_size_t msgh_descriptor_count;
} mach_msg_body_t;




typedef struct
{
  mach_msg_bits_t msgh_bits;
  mach_msg_size_t msgh_size;
  mach_port_t msgh_remote_port;
  mach_port_t msgh_local_port;
  mach_port_name_t msgh_voucher_port;
  mach_msg_id_t msgh_id;
} mach_msg_header_t;




typedef struct
{
        mach_msg_header_t header;
        mach_msg_body_t body;
} mach_msg_base_t;

typedef unsigned int mach_msg_trailer_type_t;



typedef unsigned int mach_msg_trailer_size_t;
typedef char *mach_msg_trailer_info_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
} mach_msg_trailer_t;
# 425 "/usr/include/mach/message.h" 3 4
typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
} mach_msg_seqno_trailer_t;

typedef struct
{
  unsigned int val[2];
} security_token_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
} mach_msg_security_trailer_t;
# 454 "/usr/include/mach/message.h" 3 4
typedef struct
{
  unsigned int val[8];
} audit_token_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
  audit_token_t msgh_audit;
} mach_msg_audit_trailer_t;

typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
  audit_token_t msgh_audit;
  mach_port_context_t msgh_context;
} mach_msg_context_trailer_t;



typedef struct
{
  mach_port_name_t sender;
} msg_labels_t;






typedef struct
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
  audit_token_t msgh_audit;
  mach_port_context_t msgh_context;
  int msgh_ad;
  msg_labels_t msgh_labels;
} mach_msg_mac_trailer_t;
# 515 "/usr/include/mach/message.h" 3 4
typedef mach_msg_mac_trailer_t mach_msg_max_trailer_t;
# 525 "/usr/include/mach/message.h" 3 4
typedef mach_msg_security_trailer_t mach_msg_format_0_trailer_t;







extern security_token_t KERNEL_SECURITY_TOKEN;


extern audit_token_t KERNEL_AUDIT_TOKEN;

typedef integer_t mach_msg_options_t;

typedef struct
{
  mach_msg_header_t header;
} mach_msg_empty_send_t;

typedef struct
{
  mach_msg_header_t header;
  mach_msg_trailer_t trailer;
} mach_msg_empty_rcv_t;

typedef union
{
  mach_msg_empty_send_t send;
  mach_msg_empty_rcv_t rcv;
} mach_msg_empty_t;

#pragma pack()
# 588 "/usr/include/mach/message.h" 3 4
typedef natural_t mach_msg_type_size_t;
typedef natural_t mach_msg_type_number_t;
# 632 "/usr/include/mach/message.h" 3 4
typedef integer_t mach_msg_option_t;
# 723 "/usr/include/mach/message.h" 3 4
typedef kern_return_t mach_msg_return_t;
# 827 "/usr/include/mach/message.h" 3 4
__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
extern mach_msg_return_t mach_msg_overwrite(
     mach_msg_header_t *msg,
     mach_msg_option_t option,
     mach_msg_size_t send_size,
     mach_msg_size_t rcv_size,
     mach_port_name_t rcv_name,
     mach_msg_timeout_t timeout,
     mach_port_name_t notify,
     mach_msg_header_t *rcv_msg,
     mach_msg_size_t rcv_limit);
# 848 "/usr/include/mach/message.h" 3 4
__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
extern mach_msg_return_t mach_msg(
     mach_msg_header_t *msg,
     mach_msg_option_t option,
     mach_msg_size_t send_size,
     mach_msg_size_t rcv_size,
     mach_port_name_t rcv_name,
     mach_msg_timeout_t timeout,
     mach_port_name_t notify);







__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
extern kern_return_t mach_voucher_deallocate(
     mach_port_name_t voucher);
# 67 "/usr/include/mach/host_info.h" 2 3 4
# 1 "/usr/include/mach/vm_statistics.h" 1 3 4
# 84 "/usr/include/mach/vm_statistics.h" 3 4
struct vm_statistics {
 natural_t free_count;
 natural_t active_count;
 natural_t inactive_count;
 natural_t wire_count;
 natural_t zero_fill_count;
 natural_t reactivations;
 natural_t pageins;
 natural_t pageouts;
 natural_t faults;
 natural_t cow_faults;
 natural_t lookups;
 natural_t hits;


 natural_t purgeable_count;
 natural_t purges;
# 109 "/usr/include/mach/vm_statistics.h" 3 4
 natural_t speculative_count;
};


typedef struct vm_statistics *vm_statistics_t;
typedef struct vm_statistics vm_statistics_data_t;
# 132 "/usr/include/mach/vm_statistics.h" 3 4
struct vm_statistics64 {
 natural_t free_count;
 natural_t active_count;
 natural_t inactive_count;
 natural_t wire_count;
 uint64_t zero_fill_count;
 uint64_t reactivations;
 uint64_t pageins;
 uint64_t pageouts;
 uint64_t faults;
 uint64_t cow_faults;
 uint64_t lookups;
 uint64_t hits;
 uint64_t purges;
 natural_t purgeable_count;






 natural_t speculative_count;


 uint64_t decompressions;
 uint64_t compressions;
 uint64_t swapins;
 uint64_t swapouts;
 natural_t compressor_page_count;
 natural_t throttled_count;
 natural_t external_page_count;
 natural_t internal_page_count;
 uint64_t total_uncompressed_pages_in_compressor;
} __attribute__((aligned(8)));

typedef struct vm_statistics64 *vm_statistics64_t;
typedef struct vm_statistics64 vm_statistics64_data_t;
# 188 "/usr/include/mach/vm_statistics.h" 3 4
struct vm_extmod_statistics {
 int64_t task_for_pid_count;
 int64_t task_for_pid_caller_count;
 int64_t thread_creation_count;
 int64_t thread_creation_caller_count;
 int64_t thread_set_state_count;
 int64_t thread_set_state_caller_count;
} __attribute__((aligned(8)));

typedef struct vm_extmod_statistics *vm_extmod_statistics_t;
typedef struct vm_extmod_statistics vm_extmod_statistics_data_t;

typedef struct vm_purgeable_stat {
 uint64_t count;
 uint64_t size;
}vm_purgeable_stat_t;

struct vm_purgeable_info {
 vm_purgeable_stat_t fifo_data[8];
 vm_purgeable_stat_t obsolete_data;
 vm_purgeable_stat_t lifo_data[8];
};

typedef struct vm_purgeable_info *vm_purgeable_info_t;
# 68 "/usr/include/mach/host_info.h" 2 3 4
# 1 "/usr/include/mach/machine.h" 1 3 4
# 69 "/usr/include/mach/machine.h" 3 4
typedef integer_t cpu_type_t;
typedef integer_t cpu_subtype_t;
typedef integer_t cpu_threadtype_t;
# 69 "/usr/include/mach/host_info.h" 2 3 4

# 1 "/usr/include/mach/time_value.h" 1 3 4
# 66 "/usr/include/mach/time_value.h" 3 4
struct time_value {
 integer_t seconds;
 integer_t microseconds;
};

typedef struct time_value time_value_t;
# 71 "/usr/include/mach/host_info.h" 2 3 4






typedef integer_t *host_info_t;
typedef integer_t *host_info64_t;


typedef integer_t host_info_data_t[(1024)];


typedef char kernel_version_t[(512)];


typedef char kernel_boot_info_t[(4096)];





typedef integer_t host_flavor_t;
# 105 "/usr/include/mach/host_info.h" 3 4
struct host_can_has_debugger_info {
 boolean_t can_has_debugger;
};
typedef struct host_can_has_debugger_info host_can_has_debugger_info_data_t;
typedef struct host_can_has_debugger_info *host_can_has_debugger_info_t;



#pragma pack(4)

struct host_basic_info {
 integer_t max_cpus;
 integer_t avail_cpus;
 natural_t memory_size;
 cpu_type_t cpu_type;
 cpu_subtype_t cpu_subtype;
 cpu_threadtype_t cpu_threadtype;
 integer_t physical_cpu;
 integer_t physical_cpu_max;
 integer_t logical_cpu;
 integer_t logical_cpu_max;
 uint64_t max_mem;
};

#pragma pack()

typedef struct host_basic_info host_basic_info_data_t;
typedef struct host_basic_info *host_basic_info_t;



struct host_sched_info {
 integer_t min_timeout;
 integer_t min_quantum;
};

typedef struct host_sched_info host_sched_info_data_t;
typedef struct host_sched_info *host_sched_info_t;



struct kernel_resource_sizes {
 natural_t task;
        natural_t thread;
        natural_t port;
        natural_t memory_region;
        natural_t memory_object;
};

typedef struct kernel_resource_sizes kernel_resource_sizes_data_t;
typedef struct kernel_resource_sizes *kernel_resource_sizes_t;



struct host_priority_info {
     integer_t kernel_priority;
     integer_t system_priority;
     integer_t server_priority;
     integer_t user_priority;
     integer_t depress_priority;
     integer_t idle_priority;
     integer_t minimum_priority;
 integer_t maximum_priority;
};

typedef struct host_priority_info host_priority_info_data_t;
typedef struct host_priority_info *host_priority_info_t;
# 186 "/usr/include/mach/host_info.h" 3 4
struct host_load_info {
 integer_t avenrun[3];
 integer_t mach_factor[3];
};

typedef struct host_load_info host_load_info_data_t;
typedef struct host_load_info *host_load_info_t;



typedef struct vm_purgeable_info host_purgable_info_data_t;
typedef struct vm_purgeable_info *host_purgable_info_t;
# 237 "/usr/include/mach/host_info.h" 3 4
struct host_cpu_load_info {
 natural_t cpu_ticks[4];
};

typedef struct host_cpu_load_info host_cpu_load_info_data_t;
typedef struct host_cpu_load_info *host_cpu_load_info_t;
# 81 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/host_notify.h" 1 3 4
# 82 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/host_special_ports.h" 1 3 4
# 83 "/usr/include/mach/mach_types.h" 2 3 4


# 1 "/usr/include/mach/memory_object_types.h" 1 3 4
# 75 "/usr/include/mach/memory_object_types.h" 3 4
# 1 "/usr/include/mach/vm_prot.h" 1 3 4
# 75 "/usr/include/mach/vm_prot.h" 3 4
typedef int vm_prot_t;
# 76 "/usr/include/mach/memory_object_types.h" 2 3 4
# 1 "/usr/include/mach/vm_sync.h" 1 3 4
# 66 "/usr/include/mach/vm_sync.h" 3 4
typedef unsigned vm_sync_t;
# 77 "/usr/include/mach/memory_object_types.h" 2 3 4







typedef unsigned long long memory_object_offset_t;
typedef unsigned long long memory_object_size_t;
typedef natural_t memory_object_cluster_size_t;
typedef natural_t * memory_object_fault_info_t;

typedef unsigned long long vm_object_id_t;







typedef mach_port_t memory_object_t;
typedef mach_port_t memory_object_control_t;


typedef memory_object_t *memory_object_array_t;




typedef mach_port_t memory_object_name_t;



typedef mach_port_t memory_object_default_t;
# 120 "/usr/include/mach/memory_object_types.h" 3 4
typedef int memory_object_copy_strategy_t;
# 156 "/usr/include/mach/memory_object_types.h" 3 4
typedef int memory_object_return_t;
# 185 "/usr/include/mach/memory_object_types.h" 3 4
typedef int *memory_object_info_t;
typedef int memory_object_flavor_t;
typedef int memory_object_info_data_t[(1024)];







struct memory_object_perf_info {
 memory_object_cluster_size_t cluster_size;
 boolean_t may_cache;
};

struct memory_object_attr_info {
 memory_object_copy_strategy_t copy_strategy;
 memory_object_cluster_size_t cluster_size;
 boolean_t may_cache_object;
 boolean_t temporary;
};

struct memory_object_behave_info {
 memory_object_copy_strategy_t copy_strategy;
 boolean_t temporary;
 boolean_t invalidate;
 boolean_t silent_overwrite;
 boolean_t advisory_pageout;
};


typedef struct memory_object_behave_info *memory_object_behave_info_t;
typedef struct memory_object_behave_info memory_object_behave_info_data_t;

typedef struct memory_object_perf_info *memory_object_perf_info_t;
typedef struct memory_object_perf_info memory_object_perf_info_data_t;

typedef struct memory_object_attr_info *memory_object_attr_info_t;
typedef struct memory_object_attr_info memory_object_attr_info_data_t;
# 86 "/usr/include/mach/mach_types.h" 2 3 4

# 1 "/usr/include/mach/exception_types.h" 1 3 4
# 62 "/usr/include/mach/exception_types.h" 3 4
# 1 "/usr/include/mach/machine/exception.h" 1 3 4
# 33 "/usr/include/mach/machine/exception.h" 3 4
# 1 "/usr/include/mach/i386/exception.h" 1 3 4
# 34 "/usr/include/mach/machine/exception.h" 2 3 4
# 63 "/usr/include/mach/exception_types.h" 2 3 4
# 176 "/usr/include/mach/exception_types.h" 3 4
# 1 "/usr/include/mach/thread_status.h" 1 3 4
# 76 "/usr/include/mach/thread_status.h" 3 4
# 1 "/usr/include/mach/machine/thread_status.h" 1 3 4
# 33 "/usr/include/mach/machine/thread_status.h" 3 4
# 1 "/usr/include/mach/i386/thread_status.h" 1 3 4
# 72 "/usr/include/mach/i386/thread_status.h" 3 4
# 1 "/usr/include/mach/i386/fp_reg.h" 1 3 4
# 73 "/usr/include/mach/i386/thread_status.h" 2 3 4
# 1 "/usr/include/mach/i386/thread_state.h" 1 3 4
# 74 "/usr/include/mach/i386/thread_status.h" 2 3 4
# 1 "/usr/include/i386/eflags.h" 1 3 4
# 75 "/usr/include/mach/i386/thread_status.h" 2 3 4
# 149 "/usr/include/mach/i386/thread_status.h" 3 4
struct x86_state_hdr {
 int flavor;
 int count;
};
typedef struct x86_state_hdr x86_state_hdr_t;
# 167 "/usr/include/mach/i386/thread_status.h" 3 4
typedef struct __darwin_i386_thread_state i386_thread_state_t;



typedef struct __darwin_i386_thread_state x86_thread_state32_t;






typedef struct __darwin_i386_float_state i386_float_state_t;



typedef struct __darwin_i386_float_state x86_float_state32_t;



typedef struct __darwin_i386_avx_state x86_avx_state32_t;






typedef struct __darwin_i386_exception_state i386_exception_state_t;



typedef struct __darwin_i386_exception_state x86_exception_state32_t;





typedef struct __darwin_x86_debug_state32 x86_debug_state32_t;





typedef struct __darwin_x86_thread_state64 x86_thread_state64_t;



typedef struct __darwin_x86_float_state64 x86_float_state64_t;



typedef struct __darwin_x86_avx_state64 x86_avx_state64_t;



typedef struct __darwin_x86_exception_state64 x86_exception_state64_t;





typedef struct __darwin_x86_debug_state64 x86_debug_state64_t;
# 236 "/usr/include/mach/i386/thread_status.h" 3 4
struct x86_thread_state {
 x86_state_hdr_t tsh;
 union {
     x86_thread_state32_t ts32;
     x86_thread_state64_t ts64;
 } uts;
};

struct x86_float_state {
 x86_state_hdr_t fsh;
 union {
  x86_float_state32_t fs32;
  x86_float_state64_t fs64;
 } ufs;
};

struct x86_exception_state {
 x86_state_hdr_t esh;
 union {
  x86_exception_state32_t es32;
  x86_exception_state64_t es64;
 } ues;
};

struct x86_debug_state {
 x86_state_hdr_t dsh;
 union {
  x86_debug_state32_t ds32;
  x86_debug_state64_t ds64;
 } uds;
};

struct x86_avx_state {
 x86_state_hdr_t ash;
 union {
  x86_avx_state32_t as32;
  x86_avx_state64_t as64;
 } ufs;
};

typedef struct x86_thread_state x86_thread_state_t;



typedef struct x86_float_state x86_float_state_t;



typedef struct x86_exception_state x86_exception_state_t;



typedef struct x86_debug_state x86_debug_state_t;



typedef struct x86_avx_state x86_avx_state_t;
# 34 "/usr/include/mach/machine/thread_status.h" 2 3 4
# 77 "/usr/include/mach/thread_status.h" 2 3 4
# 1 "/usr/include/mach/machine/thread_state.h" 1 3 4
# 78 "/usr/include/mach/thread_status.h" 2 3 4





typedef natural_t *thread_state_t;


typedef natural_t thread_state_data_t[(224)];





typedef int thread_state_flavor_t;
typedef thread_state_flavor_t *thread_state_flavor_array_t;
# 177 "/usr/include/mach/exception_types.h" 2 3 4





typedef int exception_type_t;
typedef integer_t exception_data_type_t;
typedef int64_t mach_exception_data_type_t;
typedef int exception_behavior_t;
typedef exception_data_type_t *exception_data_t;
typedef mach_exception_data_type_t *mach_exception_data_t;
typedef unsigned int exception_mask_t;
typedef exception_mask_t *exception_mask_array_t;
typedef exception_behavior_t *exception_behavior_array_t;
typedef thread_state_flavor_t *exception_flavor_array_t;
typedef mach_port_t *exception_port_array_t;
typedef mach_exception_data_type_t mach_exception_code_t;
typedef mach_exception_data_type_t mach_exception_subcode_t;
# 88 "/usr/include/mach/mach_types.h" 2 3 4

# 1 "/usr/include/mach/mach_voucher_types.h" 1 3 4
# 53 "/usr/include/mach/mach_voucher_types.h" 3 4
typedef mach_port_t mach_voucher_t;


typedef mach_port_name_t mach_voucher_name_t;


typedef mach_voucher_name_t *mach_voucher_name_array_t;






typedef mach_voucher_t ipc_voucher_t;







typedef uint32_t mach_voucher_selector_t;
# 84 "/usr/include/mach/mach_voucher_types.h" 3 4
typedef uint32_t mach_voucher_attr_key_t;
typedef mach_voucher_attr_key_t *mach_voucher_attr_key_array_t;
# 109 "/usr/include/mach/mach_voucher_types.h" 3 4
typedef uint8_t *mach_voucher_attr_content_t;
typedef uint32_t mach_voucher_attr_content_size_t;





typedef uint32_t mach_voucher_attr_command_t;
# 126 "/usr/include/mach/mach_voucher_types.h" 3 4
typedef uint32_t mach_voucher_attr_recipe_command_t;
typedef mach_voucher_attr_recipe_command_t *mach_voucher_attr_recipe_command_array_t;
# 154 "/usr/include/mach/mach_voucher_types.h" 3 4
#pragma pack(1)

typedef struct mach_voucher_attr_recipe_data {
 mach_voucher_attr_key_t key;
 mach_voucher_attr_recipe_command_t command;
 mach_voucher_name_t previous_voucher;
 mach_voucher_attr_content_size_t content_size;
 uint8_t content[];
} mach_voucher_attr_recipe_data_t;
typedef mach_voucher_attr_recipe_data_t *mach_voucher_attr_recipe_t;
typedef mach_msg_type_number_t mach_voucher_attr_recipe_size_t;


typedef uint8_t *mach_voucher_attr_raw_recipe_t;
typedef mach_voucher_attr_raw_recipe_t mach_voucher_attr_raw_recipe_array_t;
typedef mach_msg_type_number_t mach_voucher_attr_raw_recipe_size_t;
typedef mach_msg_type_number_t mach_voucher_attr_raw_recipe_array_size_t;




#pragma pack()
# 187 "/usr/include/mach/mach_voucher_types.h" 3 4
typedef mach_port_t mach_voucher_attr_manager_t;
# 196 "/usr/include/mach/mach_voucher_types.h" 3 4
typedef mach_port_t mach_voucher_attr_control_t;







typedef mach_port_t ipc_voucher_attr_manager_t;
typedef mach_port_t ipc_voucher_attr_control_t;
# 215 "/usr/include/mach/mach_voucher_types.h" 3 4
typedef uint64_t mach_voucher_attr_value_handle_t;
typedef mach_voucher_attr_value_handle_t *mach_voucher_attr_value_handle_array_t;

typedef mach_msg_type_number_t mach_voucher_attr_value_handle_array_size_t;


typedef uint32_t mach_voucher_attr_value_reference_t;
typedef uint32_t mach_voucher_attr_value_flags_t;




typedef uint32_t mach_voucher_attr_control_flags_t;
# 238 "/usr/include/mach/mach_voucher_types.h" 3 4
typedef uint32_t mach_voucher_attr_importance_refs;
# 90 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/processor_info.h" 1 3 4
# 72 "/usr/include/mach/processor_info.h" 3 4
# 1 "/usr/include/mach/machine/processor_info.h" 1 3 4
# 33 "/usr/include/mach/machine/processor_info.h" 3 4
# 1 "/usr/include/mach/i386/processor_info.h" 1 3 4
# 34 "/usr/include/mach/machine/processor_info.h" 2 3 4
# 73 "/usr/include/mach/processor_info.h" 2 3 4




typedef integer_t *processor_info_t;
typedef integer_t *processor_info_array_t;


typedef integer_t processor_info_data_t[(1024)];


typedef integer_t *processor_set_info_t;


typedef integer_t processor_set_info_data_t[(1024)];




typedef int processor_flavor_t;





struct processor_basic_info {
 cpu_type_t cpu_type;
 cpu_subtype_t cpu_subtype;
 boolean_t running;
 int slot_num;
 boolean_t is_master;
};

typedef struct processor_basic_info processor_basic_info_data_t;
typedef struct processor_basic_info *processor_basic_info_t;



struct processor_cpu_load_info {
        unsigned int cpu_ticks[4];
};

typedef struct processor_cpu_load_info processor_cpu_load_info_data_t;
typedef struct processor_cpu_load_info *processor_cpu_load_info_t;
# 125 "/usr/include/mach/processor_info.h" 3 4
typedef int processor_set_flavor_t;


struct processor_set_basic_info {
 int processor_count;
 int default_policy;
};

typedef struct processor_set_basic_info processor_set_basic_info_data_t;
typedef struct processor_set_basic_info *processor_set_basic_info_t;





struct processor_set_load_info {
        int task_count;
        int thread_count;
        integer_t load_average;
        integer_t mach_factor;
};

typedef struct processor_set_load_info processor_set_load_info_data_t;
typedef struct processor_set_load_info *processor_set_load_info_t;
# 91 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/task_info.h" 1 3 4
# 71 "/usr/include/mach/task_info.h" 3 4
# 1 "/usr/include/mach/policy.h" 1 3 4
# 79 "/usr/include/mach/policy.h" 3 4
typedef int policy_t;
typedef integer_t *policy_info_t;
typedef integer_t *policy_base_t;
typedef integer_t *policy_limit_t;
# 113 "/usr/include/mach/policy.h" 3 4
struct policy_timeshare_base {
 integer_t base_priority;
};
struct policy_timeshare_limit {
 integer_t max_priority;
};
struct policy_timeshare_info {
 integer_t max_priority;
 integer_t base_priority;
 integer_t cur_priority;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_timeshare_base *policy_timeshare_base_t;
typedef struct policy_timeshare_limit *policy_timeshare_limit_t;
typedef struct policy_timeshare_info *policy_timeshare_info_t;

typedef struct policy_timeshare_base policy_timeshare_base_data_t;
typedef struct policy_timeshare_limit policy_timeshare_limit_data_t;
typedef struct policy_timeshare_info policy_timeshare_info_data_t;
# 147 "/usr/include/mach/policy.h" 3 4
struct policy_rr_base {
 integer_t base_priority;
 integer_t quantum;
};
struct policy_rr_limit {
 integer_t max_priority;
};
struct policy_rr_info {
 integer_t max_priority;
 integer_t base_priority;
 integer_t quantum;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_rr_base *policy_rr_base_t;
typedef struct policy_rr_limit *policy_rr_limit_t;
typedef struct policy_rr_info *policy_rr_info_t;

typedef struct policy_rr_base policy_rr_base_data_t;
typedef struct policy_rr_limit policy_rr_limit_data_t;
typedef struct policy_rr_info policy_rr_info_data_t;
# 181 "/usr/include/mach/policy.h" 3 4
struct policy_fifo_base {
 integer_t base_priority;
};
struct policy_fifo_limit {
 integer_t max_priority;
};
struct policy_fifo_info {
 integer_t max_priority;
 integer_t base_priority;
 boolean_t depressed;
 integer_t depress_priority;
};

typedef struct policy_fifo_base *policy_fifo_base_t;
typedef struct policy_fifo_limit *policy_fifo_limit_t;
typedef struct policy_fifo_info *policy_fifo_info_t;

typedef struct policy_fifo_base policy_fifo_base_data_t;
typedef struct policy_fifo_limit policy_fifo_limit_data_t;
typedef struct policy_fifo_info policy_fifo_info_data_t;
# 213 "/usr/include/mach/policy.h" 3 4
struct policy_bases {
 policy_timeshare_base_data_t ts;
 policy_rr_base_data_t rr;
 policy_fifo_base_data_t fifo;
};

struct policy_limits {
 policy_timeshare_limit_data_t ts;
 policy_rr_limit_data_t rr;
 policy_fifo_limit_data_t fifo;
};

struct policy_infos {
 policy_timeshare_info_data_t ts;
 policy_rr_info_data_t rr;
 policy_fifo_info_data_t fifo;
};

typedef struct policy_bases policy_base_data_t;
typedef struct policy_limits policy_limit_data_t;
typedef struct policy_infos policy_info_data_t;
# 72 "/usr/include/mach/task_info.h" 2 3 4








typedef natural_t task_flavor_t;
typedef integer_t *task_info_t;



typedef integer_t task_info_data_t[(1024)];





#pragma pack(4)





struct task_basic_info_32 {
        integer_t suspend_count;
        natural_t virtual_size;
        natural_t resident_size;
        time_value_t user_time;

        time_value_t system_time;

 policy_t policy;
};
typedef struct task_basic_info_32 task_basic_info_32_data_t;
typedef struct task_basic_info_32 *task_basic_info_32_t;




struct task_basic_info_64 {
        integer_t suspend_count;
        mach_vm_size_t virtual_size;
        mach_vm_size_t resident_size;
        time_value_t user_time;

        time_value_t system_time;

 policy_t policy;
};
typedef struct task_basic_info_64 task_basic_info_64_data_t;
typedef struct task_basic_info_64 *task_basic_info_64_t;
# 133 "/usr/include/mach/task_info.h" 3 4
struct task_basic_info {
        integer_t suspend_count;
        vm_size_t virtual_size;
        vm_size_t resident_size;
        time_value_t user_time;

        time_value_t system_time;

 policy_t policy;
};

typedef struct task_basic_info task_basic_info_data_t;
typedef struct task_basic_info *task_basic_info_t;
# 158 "/usr/include/mach/task_info.h" 3 4
struct task_events_info {
 integer_t faults;
 integer_t pageins;
 integer_t cow_faults;
 integer_t messages_sent;
 integer_t messages_received;
        integer_t syscalls_mach;
 integer_t syscalls_unix;
 integer_t csw;
};
typedef struct task_events_info task_events_info_data_t;
typedef struct task_events_info *task_events_info_t;






struct task_thread_times_info {
 time_value_t user_time;

 time_value_t system_time;

};

typedef struct task_thread_times_info task_thread_times_info_data_t;
typedef struct task_thread_times_info *task_thread_times_info_t;





struct task_absolutetime_info {
 uint64_t total_user;
 uint64_t total_system;
 uint64_t threads_user;
 uint64_t threads_system;
};

typedef struct task_absolutetime_info task_absolutetime_info_data_t;
typedef struct task_absolutetime_info *task_absolutetime_info_t;





struct task_kernelmemory_info {
 uint64_t total_palloc;
 uint64_t total_pfree;
 uint64_t total_salloc;
 uint64_t total_sfree;
};

typedef struct task_kernelmemory_info task_kernelmemory_info_data_t;
typedef struct task_kernelmemory_info *task_kernelmemory_info_t;
# 227 "/usr/include/mach/task_info.h" 3 4
struct task_affinity_tag_info {
 integer_t set_count;
 integer_t min;
 integer_t max;
 integer_t task_count;
};
typedef struct task_affinity_tag_info task_affinity_tag_info_data_t;
typedef struct task_affinity_tag_info *task_affinity_tag_info_t;





struct task_dyld_info {
 mach_vm_address_t all_image_info_addr;
 mach_vm_size_t all_image_info_size;
 integer_t all_image_info_format;
};
typedef struct task_dyld_info task_dyld_info_data_t;
typedef struct task_dyld_info *task_dyld_info_t;
# 255 "/usr/include/mach/task_info.h" 3 4
struct task_extmod_info {
 unsigned char task_uuid[16];
 vm_extmod_statistics_data_t extmod_statistics;
};
typedef struct task_extmod_info task_extmod_info_data_t;
typedef struct task_extmod_info *task_extmod_info_t;





struct mach_task_basic_info {
        mach_vm_size_t virtual_size;
        mach_vm_size_t resident_size;
        mach_vm_size_t resident_size_max;
        time_value_t user_time;

        time_value_t system_time;

        policy_t policy;
        integer_t suspend_count;
};
typedef struct mach_task_basic_info mach_task_basic_info_data_t;
typedef struct mach_task_basic_info *mach_task_basic_info_t;






struct task_power_info {
 uint64_t total_user;
 uint64_t total_system;
 uint64_t task_interrupt_wakeups;
 uint64_t task_platform_idle_wakeups;
 uint64_t task_timer_wakeups_bin_1;
 uint64_t task_timer_wakeups_bin_2;
};

typedef struct task_power_info task_power_info_data_t;
typedef struct task_power_info *task_power_info_t;







struct task_vm_info {
        mach_vm_size_t virtual_size;
 integer_t region_count;
 integer_t page_size;
        mach_vm_size_t resident_size;
        mach_vm_size_t resident_size_peak;

 mach_vm_size_t device;
 mach_vm_size_t device_peak;
 mach_vm_size_t internal;
 mach_vm_size_t internal_peak;
 mach_vm_size_t external;
 mach_vm_size_t external_peak;
 mach_vm_size_t reusable;
 mach_vm_size_t reusable_peak;
 mach_vm_size_t purgeable_volatile_pmap;
 mach_vm_size_t purgeable_volatile_resident;
 mach_vm_size_t purgeable_volatile_virtual;
 mach_vm_size_t compressed;
 mach_vm_size_t compressed_peak;
 mach_vm_size_t compressed_lifetime;


 mach_vm_size_t phys_footprint;


 mach_vm_address_t min_address;
 mach_vm_address_t max_address;
};
typedef struct task_vm_info task_vm_info_data_t;
typedef struct task_vm_info *task_vm_info_t;
# 342 "/usr/include/mach/task_info.h" 3 4
typedef struct vm_purgeable_info task_purgable_info_t;



struct task_trace_memory_info {
 uint64_t user_memory_address;
 uint64_t buffer_size;
 uint64_t mailbox_array_size;
};
typedef struct task_trace_memory_info task_trace_memory_info_data_t;
typedef struct task_trace_memory_info * task_trace_memory_info_t;




struct task_wait_state_info {
 uint64_t total_wait_state_time;
 uint64_t total_wait_sfi_state_time;
 uint32_t _reserved[4];
};
typedef struct task_wait_state_info task_wait_state_info_data_t;
typedef struct task_wait_state_info * task_wait_state_info_t;





typedef struct {
 uint64_t task_gpu_utilisation;
 uint64_t task_gpu_stat_reserved0;
 uint64_t task_gpu_stat_reserved1;
 uint64_t task_gpu_stat_reserved2;
} gpu_energy_data;

typedef gpu_energy_data *gpu_energy_data_t;
struct task_power_info_v2 {
 task_power_info_data_t cpu_energy;
 gpu_energy_data gpu_energy;
};

typedef struct task_power_info_v2 task_power_info_v2_data_t;
typedef struct task_power_info_v2 *task_power_info_v2_t;
# 392 "/usr/include/mach/task_info.h" 3 4
struct task_flags_info {
 uint32_t flags;
};
typedef struct task_flags_info task_flags_info_data_t;
typedef struct task_flags_info * task_flags_info_t;
# 415 "/usr/include/mach/task_info.h" 3 4
#pragma pack()
# 92 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/task_policy.h" 1 3 4
# 32 "/usr/include/mach/task_policy.h" 3 4
# 1 "/usr/include/mach/mach_types.h" 1 3 4
# 33 "/usr/include/mach/task_policy.h" 2 3 4
# 51 "/usr/include/mach/task_policy.h" 3 4
typedef natural_t task_policy_flavor_t;
typedef integer_t *task_policy_t;
# 114 "/usr/include/mach/task_policy.h" 3 4
enum task_role {
 TASK_RENICED = -1,
 TASK_UNSPECIFIED = 0,
 TASK_FOREGROUND_APPLICATION,
 TASK_BACKGROUND_APPLICATION,
 TASK_CONTROL_APPLICATION,
 TASK_GRAPHICS_SERVER,
 TASK_THROTTLE_APPLICATION,
 TASK_NONUI_APPLICATION,
 TASK_DEFAULT_APPLICATION
};

typedef integer_t task_role_t;

struct task_category_policy {
 task_role_t role;
};

typedef struct task_category_policy task_category_policy_data_t;
typedef struct task_category_policy *task_category_policy_t;





enum task_latency_qos {
 LATENCY_QOS_TIER_UNSPECIFIED = 0x0,
 LATENCY_QOS_TIER_0 = ((0xFF<<16) | 1),
 LATENCY_QOS_TIER_1 = ((0xFF<<16) | 2),
 LATENCY_QOS_TIER_2 = ((0xFF<<16) | 3),
 LATENCY_QOS_TIER_3 = ((0xFF<<16) | 4),
 LATENCY_QOS_TIER_4 = ((0xFF<<16) | 5),
 LATENCY_QOS_TIER_5 = ((0xFF<<16) | 6)

};
typedef integer_t task_latency_qos_t;
enum task_throughput_qos {
 THROUGHPUT_QOS_TIER_UNSPECIFIED = 0x0,
 THROUGHPUT_QOS_TIER_0 = ((0xFE<<16) | 1),
 THROUGHPUT_QOS_TIER_1 = ((0xFE<<16) | 2),
 THROUGHPUT_QOS_TIER_2 = ((0xFE<<16) | 3),
 THROUGHPUT_QOS_TIER_3 = ((0xFE<<16) | 4),
 THROUGHPUT_QOS_TIER_4 = ((0xFE<<16) | 5),
 THROUGHPUT_QOS_TIER_5 = ((0xFE<<16) | 6),
};




typedef integer_t task_throughput_qos_t;

struct task_qos_policy {
 task_latency_qos_t task_latency_qos_tier;
 task_throughput_qos_t task_throughput_qos_tier;
};

typedef struct task_qos_policy *task_qos_policy_t;
# 93 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/task_special_ports.h" 1 3 4
# 70 "/usr/include/mach/task_special_ports.h" 3 4
typedef int task_special_port_t;
# 94 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/thread_info.h" 1 3 4
# 81 "/usr/include/mach/thread_info.h" 3 4
typedef natural_t thread_flavor_t;
typedef integer_t *thread_info_t;


typedef integer_t thread_info_data_t[(32)];






struct thread_basic_info {
        time_value_t user_time;
        time_value_t system_time;
        integer_t cpu_usage;
        policy_t policy;
        integer_t run_state;
        integer_t flags;
        integer_t suspend_count;
        integer_t sleep_time;

};

typedef struct thread_basic_info thread_basic_info_data_t;
typedef struct thread_basic_info *thread_basic_info_t;





struct thread_identifier_info {
 uint64_t thread_id;
 uint64_t thread_handle;
 uint64_t dispatch_qaddr;
};

typedef struct thread_identifier_info thread_identifier_info_data_t;
typedef struct thread_identifier_info *thread_identifier_info_t;
# 152 "/usr/include/mach/thread_info.h" 3 4
struct thread_extended_info {
 uint64_t pth_user_time;
 uint64_t pth_system_time;
 int32_t pth_cpu_usage;
 int32_t pth_policy;
 int32_t pth_run_state;
 int32_t pth_flags;
 int32_t pth_sleep_time;
 int32_t pth_curpri;
 int32_t pth_priority;
 int32_t pth_maxpriority;
 char pth_name[64];
};
typedef struct thread_extended_info thread_extended_info_data_t;
typedef struct thread_extended_info * thread_extended_info_t;
# 187 "/usr/include/mach/thread_info.h" 3 4
struct io_stat_entry {
 uint64_t count;
 uint64_t size;
};

struct io_stat_info {
 struct io_stat_entry disk_reads;
 struct io_stat_entry io_priority[4];
 struct io_stat_entry paging;
 struct io_stat_entry metadata;
 struct io_stat_entry total_io;
};

typedef struct io_stat_info *io_stat_info_t;
# 95 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/thread_policy.h" 1 3 4
# 32 "/usr/include/mach/thread_policy.h" 3 4
# 1 "/usr/include/mach/mach_types.h" 1 3 4
# 33 "/usr/include/mach/thread_policy.h" 2 3 4
# 51 "/usr/include/mach/thread_policy.h" 3 4
typedef natural_t thread_policy_flavor_t;
typedef integer_t *thread_policy_t;
# 86 "/usr/include/mach/thread_policy.h" 3 4
struct thread_standard_policy {
 natural_t no_data;
};

typedef struct thread_standard_policy thread_standard_policy_data_t;
typedef struct thread_standard_policy *thread_standard_policy_t;
# 109 "/usr/include/mach/thread_policy.h" 3 4
struct thread_extended_policy {
 boolean_t timeshare;
};

typedef struct thread_extended_policy thread_extended_policy_data_t;
typedef struct thread_extended_policy *thread_extended_policy_t;
# 148 "/usr/include/mach/thread_policy.h" 3 4
struct thread_time_constraint_policy {
 uint32_t period;
 uint32_t computation;
 uint32_t constraint;
 boolean_t preemptible;
};

typedef struct thread_time_constraint_policy thread_time_constraint_policy_data_t;

typedef struct thread_time_constraint_policy *thread_time_constraint_policy_t;
# 176 "/usr/include/mach/thread_policy.h" 3 4
struct thread_precedence_policy {
 integer_t importance;
};

typedef struct thread_precedence_policy thread_precedence_policy_data_t;
typedef struct thread_precedence_policy *thread_precedence_policy_t;
# 206 "/usr/include/mach/thread_policy.h" 3 4
struct thread_affinity_policy {
 integer_t affinity_tag;
};



typedef struct thread_affinity_policy thread_affinity_policy_data_t;
typedef struct thread_affinity_policy *thread_affinity_policy_t;
# 224 "/usr/include/mach/thread_policy.h" 3 4
struct thread_background_policy {
 integer_t priority;
};



typedef struct thread_background_policy thread_background_policy_data_t;
typedef struct thread_background_policy *thread_background_policy_t;






typedef integer_t thread_latency_qos_t;

struct thread_latency_qos_policy {
 thread_latency_qos_t thread_latency_qos_tier;
};

typedef struct thread_latency_qos_policy thread_latency_qos_policy_data_t;
typedef struct thread_latency_qos_policy *thread_latency_qos_policy_t;





typedef integer_t thread_throughput_qos_t;

struct thread_throughput_qos_policy {
 thread_throughput_qos_t thread_throughput_qos_tier;
};

typedef struct thread_throughput_qos_policy thread_throughput_qos_policy_data_t;
typedef struct thread_throughput_qos_policy *thread_throughput_qos_policy_t;
# 96 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/thread_special_ports.h" 1 3 4
# 97 "/usr/include/mach/mach_types.h" 2 3 4


# 1 "/usr/include/mach/clock_types.h" 1 3 4
# 51 "/usr/include/mach/clock_types.h" 3 4
typedef int alarm_type_t;
typedef int sleep_type_t;
typedef int clock_id_t;
typedef int clock_flavor_t;
typedef int *clock_attr_t;
typedef int clock_res_t;




struct mach_timespec {
 unsigned int tv_sec;
 clock_res_t tv_nsec;
};
typedef struct mach_timespec mach_timespec_t;
# 100 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_attributes.h" 1 3 4
# 76 "/usr/include/mach/vm_attributes.h" 3 4
typedef unsigned int vm_machine_attribute_t;
# 85 "/usr/include/mach/vm_attributes.h" 3 4
typedef int vm_machine_attribute_val_t;
# 101 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_inherit.h" 1 3 4
# 75 "/usr/include/mach/vm_inherit.h" 3 4
typedef unsigned int vm_inherit_t;
# 102 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_purgable.h" 1 3 4
# 53 "/usr/include/mach/vm_purgable.h" 3 4
typedef int vm_purgable_t;
# 103 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/vm_behavior.h" 1 3 4
# 47 "/usr/include/mach/vm_behavior.h" 3 4
typedef int vm_behavior_t;
# 104 "/usr/include/mach/mach_types.h" 2 3 4




# 1 "/usr/include/mach/vm_region.h" 1 3 4
# 47 "/usr/include/mach/vm_region.h" 3 4
# 1 "/usr/include/mach/machine/vm_param.h" 1 3 4
# 48 "/usr/include/mach/vm_region.h" 2 3 4





#pragma pack(4)




typedef uint32_t vm32_object_id_t;
# 67 "/usr/include/mach/vm_region.h" 3 4
typedef int *vm_region_info_t;
typedef int *vm_region_info_64_t;
typedef int *vm_region_recurse_info_t;
typedef int *vm_region_recurse_info_64_t;
typedef int vm_region_flavor_t;
typedef int vm_region_info_data_t[(1024)];


struct vm_region_basic_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 boolean_t shared;
 boolean_t reserved;
 memory_object_offset_t offset;
 vm_behavior_t behavior;
 unsigned short user_wired_count;
};
typedef struct vm_region_basic_info_64 *vm_region_basic_info_64_t;
typedef struct vm_region_basic_info_64 vm_region_basic_info_data_64_t;
# 103 "/usr/include/mach/vm_region.h" 3 4
struct vm_region_basic_info {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 boolean_t shared;
 boolean_t reserved;
 uint32_t offset;
 vm_behavior_t behavior;
 unsigned short user_wired_count;
};

typedef struct vm_region_basic_info *vm_region_basic_info_t;
typedef struct vm_region_basic_info vm_region_basic_info_data_t;
# 141 "/usr/include/mach/vm_region.h" 3 4
struct vm_region_extended_info {
 vm_prot_t protection;
        unsigned int user_tag;
        unsigned int pages_resident;
        unsigned int pages_shared_now_private;
        unsigned int pages_swapped_out;
        unsigned int pages_dirtied;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
 unsigned int pages_reusable;
};
typedef struct vm_region_extended_info *vm_region_extended_info_t;
typedef struct vm_region_extended_info vm_region_extended_info_data_t;
# 165 "/usr/include/mach/vm_region.h" 3 4
struct vm_region_top_info {
        unsigned int obj_id;
        unsigned int ref_count;
        unsigned int private_pages_resident;
        unsigned int shared_pages_resident;
        unsigned char share_mode;
};

typedef struct vm_region_top_info *vm_region_top_info_t;
typedef struct vm_region_top_info vm_region_top_info_data_t;
# 202 "/usr/include/mach/vm_region.h" 3 4
struct vm_region_submap_info {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 uint32_t offset;
        unsigned int user_tag;
        unsigned int pages_resident;
        unsigned int pages_shared_now_private;
        unsigned int pages_swapped_out;
        unsigned int pages_dirtied;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm32_object_id_t object_id;
 unsigned short user_wired_count;
};

typedef struct vm_region_submap_info *vm_region_submap_info_t;
typedef struct vm_region_submap_info vm_region_submap_info_data_t;





struct vm_region_submap_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 memory_object_offset_t offset;
        unsigned int user_tag;
        unsigned int pages_resident;
        unsigned int pages_shared_now_private;
        unsigned int pages_swapped_out;
        unsigned int pages_dirtied;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm32_object_id_t object_id;
 unsigned short user_wired_count;
 unsigned int pages_reusable;
};

typedef struct vm_region_submap_info_64 *vm_region_submap_info_64_t;
typedef struct vm_region_submap_info_64 vm_region_submap_info_data_64_t;
# 269 "/usr/include/mach/vm_region.h" 3 4
struct vm_region_submap_short_info_64 {
 vm_prot_t protection;
 vm_prot_t max_protection;
 vm_inherit_t inheritance;
 memory_object_offset_t offset;
        unsigned int user_tag;
        unsigned int ref_count;
        unsigned short shadow_depth;
        unsigned char external_pager;
        unsigned char share_mode;
 boolean_t is_submap;
 vm_behavior_t behavior;
 vm32_object_id_t object_id;
 unsigned short user_wired_count;
};

typedef struct vm_region_submap_short_info_64 *vm_region_submap_short_info_64_t;
typedef struct vm_region_submap_short_info_64 vm_region_submap_short_info_data_64_t;







struct mach_vm_read_entry {
 mach_vm_address_t address;
 mach_vm_size_t size;
};

struct vm_read_entry {
 vm_address_t address;
 vm_size_t size;
};
# 314 "/usr/include/mach/vm_region.h" 3 4
typedef struct mach_vm_read_entry mach_vm_read_entry_t[(256)];
typedef struct vm_read_entry vm_read_entry_t[(256)];




#pragma pack()



typedef int *vm_page_info_t;
typedef int vm_page_info_data_t[];
typedef int vm_page_info_flavor_t;


struct vm_page_info_basic {
 int disposition;
 int ref_count;
 vm_object_id_t object_id;
 memory_object_offset_t offset;
 int depth;
 int __pad;
};
typedef struct vm_page_info_basic *vm_page_info_basic_t;
typedef struct vm_page_info_basic vm_page_info_basic_data_t;
# 109 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/kmod.h" 1 3 4
# 39 "/usr/include/mach/kmod.h" 3 4
# 1 "/usr/include/mach/mach_types.h" 1 3 4
# 40 "/usr/include/mach/kmod.h" 2 3 4
# 56 "/usr/include/mach/kmod.h" 3 4
typedef int kmod_t;

struct kmod_info;
typedef kern_return_t kmod_start_func_t(struct kmod_info * ki, void * data);
typedef kern_return_t kmod_stop_func_t(struct kmod_info * ki, void * data);
# 70 "/usr/include/mach/kmod.h" 3 4
#pragma pack(4)


typedef struct kmod_reference {
    struct kmod_reference * next;
    struct kmod_info * info;
} kmod_reference_t;
# 87 "/usr/include/mach/kmod.h" 3 4
typedef struct kmod_info {
    struct kmod_info * next;
    int32_t info_version;
    uint32_t id;
    char name[64];
    char version[64];
    int32_t reference_count;
    kmod_reference_t * reference_list;
    vm_address_t address;
    vm_size_t size;
    vm_size_t hdr_size;
    kmod_start_func_t * start;
    kmod_stop_func_t * stop;
} kmod_info_t;



typedef struct kmod_info_32_v1 {
    uint32_t next_addr;
    int32_t info_version;
    uint32_t id;
    uint8_t name[64];
    uint8_t version[64];
    int32_t reference_count;
    uint32_t reference_list_addr;
    uint32_t address;
    uint32_t size;
    uint32_t hdr_size;
    uint32_t start_addr;
    uint32_t stop_addr;
} kmod_info_32_v1_t;



typedef struct kmod_info_64_v1 {
    uint64_t next_addr;
    int32_t info_version;
    uint32_t id;
    uint8_t name[64];
    uint8_t version[64];
    int32_t reference_count;
    uint64_t reference_list_addr;
    uint64_t address;
    uint64_t size;
    uint64_t hdr_size;
    uint64_t start_addr;
    uint64_t stop_addr;
} kmod_info_64_v1_t;

#pragma pack()
# 174 "/usr/include/mach/kmod.h" 3 4
typedef void * kmod_args_t;
typedef int kmod_control_flavor_t;
typedef kmod_info_t * kmod_info_array_t;
# 110 "/usr/include/mach/mach_types.h" 2 3 4
# 1 "/usr/include/mach/dyld_kernel.h" 1 3 4
# 34 "/usr/include/mach/dyld_kernel.h" 3 4
# 1 "/usr/include/sys/_types/_fsid_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_fsid_t.h" 3 4
typedef struct fsid { int32_t val[2]; } fsid_t;
# 35 "/usr/include/mach/dyld_kernel.h" 2 3 4

# 1 "/usr/include/sys/_types/_fsobj_id_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_fsobj_id_t.h" 3 4
typedef struct fsobj_id {
 u_int32_t fid_objno;
 u_int32_t fid_generation;
} fsobj_id_t;
# 37 "/usr/include/mach/dyld_kernel.h" 2 3 4






struct dyld_kernel_image_info {
 uuid_t uuid;
 fsobj_id_t fsobjid;
 fsid_t fsid;
 uint64_t load_addr;
};

struct dyld_kernel_process_info {
 struct dyld_kernel_image_info cache_image_info;
 uint64_t timestamp;
 uint32_t imageCount;
 uint32_t initialImageCount;
 uint8_t dyldState;
 boolean_t no_cache;
 boolean_t private_cache;
};



typedef struct dyld_kernel_image_info dyld_kernel_image_info_t;
typedef struct dyld_kernel_process_info dyld_kernel_process_info_t;
typedef dyld_kernel_image_info_t *dyld_kernel_image_info_array_t;
# 111 "/usr/include/mach/mach_types.h" 2 3 4






typedef mach_port_t task_t;
typedef mach_port_t task_name_t;
typedef mach_port_t task_inspect_t;
typedef mach_port_t task_suspension_token_t;
typedef mach_port_t thread_t;
typedef mach_port_t thread_act_t;
typedef mach_port_t thread_inspect_t;
typedef mach_port_t ipc_space_t;
typedef mach_port_t ipc_space_inspect_t;
typedef mach_port_t coalition_t;
typedef mach_port_t host_t;
typedef mach_port_t host_priv_t;
typedef mach_port_t host_security_t;
typedef mach_port_t processor_t;
typedef mach_port_t processor_set_t;
typedef mach_port_t processor_set_control_t;
typedef mach_port_t semaphore_t;
typedef mach_port_t lock_set_t;
typedef mach_port_t ledger_t;
typedef mach_port_t alarm_t;
typedef mach_port_t clock_serv_t;
typedef mach_port_t clock_ctrl_t;







typedef processor_set_t processor_set_name_t;




typedef mach_port_t clock_reply_t;
typedef mach_port_t bootstrap_t;
typedef mach_port_t mem_entry_name_port_t;
typedef mach_port_t exception_handler_t;
typedef exception_handler_t *exception_handler_array_t;
typedef mach_port_t vm_task_entry_t;
typedef mach_port_t io_master_t;
typedef mach_port_t UNDServerRef;
# 167 "/usr/include/mach/mach_types.h" 3 4
typedef task_t *task_array_t;
typedef thread_t *thread_array_t;
typedef processor_set_t *processor_set_array_t;
typedef processor_set_t *processor_set_name_array_t;
typedef processor_t *processor_array_t;
typedef thread_act_t *thread_act_array_t;
typedef ledger_t *ledger_array_t;







typedef task_t task_port_t;
typedef task_array_t task_port_array_t;
typedef thread_t thread_port_t;
typedef thread_array_t thread_port_array_t;
typedef ipc_space_t ipc_space_port_t;
typedef host_t host_name_t;
typedef host_t host_name_port_t;
typedef processor_set_t processor_set_port_t;
typedef processor_set_t processor_set_name_port_t;
typedef processor_set_array_t processor_set_name_port_array_t;
typedef processor_set_t processor_set_control_port_t;
typedef processor_t processor_port_t;
typedef processor_array_t processor_port_array_t;
typedef thread_act_t thread_act_port_t;
typedef thread_act_array_t thread_act_port_array_t;
typedef semaphore_t semaphore_port_t;
typedef lock_set_t lock_set_port_t;
typedef ledger_t ledger_port_t;
typedef ledger_array_t ledger_port_array_t;
typedef alarm_t alarm_port_t;
typedef clock_serv_t clock_serv_port_t;
typedef clock_ctrl_t clock_ctrl_port_t;
typedef exception_handler_t exception_port_t;
typedef exception_handler_array_t exception_port_arrary_t;
# 230 "/usr/include/mach/mach_types.h" 3 4
typedef natural_t ledger_item_t;


typedef int64_t ledger_amount_t;


typedef mach_vm_offset_t *emulation_vector_t;
typedef char *user_subsystem_t;

typedef char *labelstr_t;
# 67 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/mach_interface.h" 1 3 4
# 42 "/usr/include/mach/mach_interface.h" 3 4
# 1 "/usr/include/mach/clock_priv.h" 1 3 4






# 1 "/usr/include/mach/ndr.h" 1 3 4
# 37 "/usr/include/mach/ndr.h" 3 4
# 1 "/usr/include/libkern/OSByteOrder.h" 1 3 4
# 43 "/usr/include/libkern/OSByteOrder.h" 3 4
# 1 "/usr/include/libkern/i386/OSByteOrder.h" 1 3 4
# 34 "/usr/include/libkern/i386/OSByteOrder.h" 3 4
# 1 "/usr/include/sys/_types/_os_inline.h" 1 3 4
# 35 "/usr/include/libkern/i386/OSByteOrder.h" 2 3 4



static inline
uint16_t
OSReadSwapInt16(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    uint16_t result;

    result = *(volatile uint16_t *)((uintptr_t)base + byteOffset);
    return _OSSwapInt16(result);
}

static inline
uint32_t
OSReadSwapInt32(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    uint32_t result;

    result = *(volatile uint32_t *)((uintptr_t)base + byteOffset);
    return _OSSwapInt32(result);
}

static inline
uint64_t
OSReadSwapInt64(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    uint64_t result;

    result = *(volatile uint64_t *)((uintptr_t)base + byteOffset);
    return _OSSwapInt64(result);
}



static inline
void
OSWriteSwapInt16(
    volatile void * base,
    uintptr_t byteOffset,
    uint16_t data
)
{
    *(volatile uint16_t *)((uintptr_t)base + byteOffset) = _OSSwapInt16(data);
}

static inline
void
OSWriteSwapInt32(
    volatile void * base,
    uintptr_t byteOffset,
    uint32_t data
)
{
    *(volatile uint32_t *)((uintptr_t)base + byteOffset) = _OSSwapInt32(data);
}

static inline
void
OSWriteSwapInt64(
    volatile void * base,
    uintptr_t byteOffset,
    uint64_t data
)
{
    *(volatile uint64_t *)((uintptr_t)base + byteOffset) = _OSSwapInt64(data);
}
# 44 "/usr/include/libkern/OSByteOrder.h" 2 3 4
# 58 "/usr/include/libkern/OSByteOrder.h" 3 4
enum {
    OSUnknownByteOrder,
    OSLittleEndian,
    OSBigEndian
};

static inline
int32_t
OSHostByteOrder(void) {

    return OSLittleEndian;





}
# 87 "/usr/include/libkern/OSByteOrder.h" 3 4
static inline
uint16_t
_OSReadInt16(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint16_t *)((uintptr_t)base + byteOffset);
}

static inline
uint32_t
_OSReadInt32(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint32_t *)((uintptr_t)base + byteOffset);
}

static inline
uint64_t
_OSReadInt64(
    const volatile void * base,
    uintptr_t byteOffset
)
{
    return *(volatile uint64_t *)((uintptr_t)base + byteOffset);
}



static inline
void
_OSWriteInt16(
    volatile void * base,
    uintptr_t byteOffset,
    uint16_t data
)
{
    *(volatile uint16_t *)((uintptr_t)base + byteOffset) = data;
}

static inline
void
_OSWriteInt32(
    volatile void * base,
    uintptr_t byteOffset,
    uint32_t data
)
{
    *(volatile uint32_t *)((uintptr_t)base + byteOffset) = data;
}

static inline
void
_OSWriteInt64(
    volatile void * base,
    uintptr_t byteOffset,
    uint64_t data
)
{
    *(volatile uint64_t *)((uintptr_t)base + byteOffset) = data;
}
# 38 "/usr/include/mach/ndr.h" 2 3 4


typedef struct {
    unsigned char mig_vers;
    unsigned char if_vers;
    unsigned char reserved1;
    unsigned char mig_encoding;
    unsigned char int_rep;
    unsigned char char_rep;
    unsigned char float_rep;
    unsigned char reserved2;
} NDR_record_t;
# 68 "/usr/include/mach/ndr.h" 3 4
extern NDR_record_t NDR_record;
# 8 "/usr/include/mach/clock_priv.h" 2 3 4


# 1 "/usr/include/mach/notify.h" 1 3 4
# 91 "/usr/include/mach/notify.h" 3 4
typedef mach_port_t notify_port_t;
# 101 "/usr/include/mach/notify.h" 3 4
typedef struct {
    mach_msg_header_t not_header;
    NDR_record_t NDR;
    mach_port_name_t not_port;
    mach_msg_format_0_trailer_t trailer;
} mach_port_deleted_notification_t;

typedef struct {
    mach_msg_header_t not_header;
    NDR_record_t NDR;
    mach_port_name_t not_port;
    mach_msg_format_0_trailer_t trailer;
} mach_send_possible_notification_t;

typedef struct {
    mach_msg_header_t not_header;
    mach_msg_body_t not_body;
    mach_msg_port_descriptor_t not_port;
    mach_msg_format_0_trailer_t trailer;
} mach_port_destroyed_notification_t;

typedef struct {
    mach_msg_header_t not_header;
    NDR_record_t NDR;
    mach_msg_type_number_t not_count;
    mach_msg_format_0_trailer_t trailer;
} mach_no_senders_notification_t;

typedef struct {
    mach_msg_header_t not_header;
    mach_msg_format_0_trailer_t trailer;
} mach_send_once_notification_t;

typedef struct {
    mach_msg_header_t not_header;
    NDR_record_t NDR;
    mach_port_name_t not_port;
    mach_msg_format_0_trailer_t trailer;
} mach_dead_name_notification_t;
# 11 "/usr/include/mach/clock_priv.h" 2 3 4


# 1 "/usr/include/mach/mig_errors.h" 1 3 4
# 66 "/usr/include/mach/mig_errors.h" 3 4
# 1 "/usr/include/mach/mig.h" 1 3 4
# 80 "/usr/include/mach/mig.h" 3 4
typedef void (*mig_stub_routine_t) (mach_msg_header_t *InHeadP,
           mach_msg_header_t *OutHeadP);

typedef mig_stub_routine_t mig_routine_t;






typedef mig_routine_t (*mig_server_routine_t) (mach_msg_header_t *InHeadP);






typedef kern_return_t (*mig_impl_routine_t)(void);

typedef mach_msg_type_descriptor_t routine_arg_descriptor;
typedef mach_msg_type_descriptor_t *routine_arg_descriptor_t;
typedef mach_msg_type_descriptor_t *mig_routine_arg_descriptor_t;



struct routine_descriptor {
 mig_impl_routine_t impl_routine;
 mig_stub_routine_t stub_routine;
 unsigned int argc;
 unsigned int descr_count;
 routine_arg_descriptor_t
      arg_descr;
 unsigned int max_reply_msg;
};
typedef struct routine_descriptor *routine_descriptor_t;

typedef struct routine_descriptor mig_routine_descriptor;
typedef mig_routine_descriptor *mig_routine_descriptor_t;



typedef struct mig_subsystem {
 mig_server_routine_t server;
 mach_msg_id_t start;
 mach_msg_id_t end;
 mach_msg_size_t maxsize;
 vm_address_t reserved;
 mig_routine_descriptor
       routine[1];
} *mig_subsystem_t;



typedef struct mig_symtab {
 char *ms_routine_name;
 int ms_routine_number;
 void (*ms_routine)(void);




} mig_symtab_t;





extern mach_port_t mig_get_reply_port(void);


extern void mig_dealloc_reply_port(mach_port_t reply_port);


extern void mig_put_reply_port(mach_port_t reply_port);


extern int mig_strncpy(char *dest, const char *src, int len);
extern int mig_strncpy_zerofill(char *dest, const char *src, int len);



extern void mig_allocate(vm_address_t *, vm_size_t);


extern void mig_deallocate(vm_address_t, vm_size_t);
# 67 "/usr/include/mach/mig_errors.h" 2 3 4
# 98 "/usr/include/mach/mig_errors.h" 3 4
#pragma pack(4)
typedef struct {
 mach_msg_header_t Head;
 NDR_record_t NDR;
 kern_return_t RetCode;
} mig_reply_error_t;
#pragma pack()







static __inline__ void
__NDR_convert__mig_reply_error_t(__attribute__((unused)) mig_reply_error_t *x)
{




}
# 14 "/usr/include/mach/clock_priv.h" 2 3 4
# 28 "/usr/include/mach/clock_priv.h" 3 4
 extern int mig_strncpy_zerofill(char *dest, const char *src, int len) __attribute__((weak_import));
# 73 "/usr/include/mach/clock_priv.h" 3 4
extern

kern_return_t clock_set_time
(
 clock_ctrl_t clock_ctrl,
 mach_timespec_t new_time
);





extern

kern_return_t clock_set_attributes
(
 clock_ctrl_t clock_ctrl,
 clock_flavor_t flavor,
 clock_attr_t clock_attr,
 mach_msg_type_number_t clock_attrCnt
);
# 114 "/usr/include/mach/clock_priv.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_timespec_t new_time;
 } __Request__clock_set_time_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_flavor_t flavor;
  mach_msg_type_number_t clock_attrCnt;
  int clock_attr[1];
 } __Request__clock_set_attributes_t __attribute__((unused));

#pragma pack()







union __RequestUnion__clock_priv_subsystem {
 __Request__clock_set_time_t Request_clock_set_time;
 __Request__clock_set_attributes_t Request_clock_set_attributes;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__clock_set_time_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__clock_set_attributes_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__clock_priv_subsystem {
 __Reply__clock_set_time_t Reply_clock_set_time;
 __Reply__clock_set_attributes_t Reply_clock_set_attributes;
};
# 43 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/host_priv.h" 1 3 4
# 60 "/usr/include/mach/host_priv.h" 3 4
# 1 "/usr/include/mach_debug/mach_debug_types.h" 1 3 4
# 65 "/usr/include/mach_debug/mach_debug_types.h" 3 4
# 1 "/usr/include/mach_debug/ipc_info.h" 1 3 4
# 78 "/usr/include/mach_debug/ipc_info.h" 3 4
typedef struct ipc_info_space {
 natural_t iis_genno_mask;
 natural_t iis_table_size;
 natural_t iis_table_next;
 natural_t iis_tree_size;
 natural_t iis_tree_small;
 natural_t iis_tree_hash;
} ipc_info_space_t;

typedef struct ipc_info_space_basic {
 natural_t iisb_genno_mask;
 natural_t iisb_table_size;
 natural_t iisb_table_next;
 natural_t iisb_table_inuse;
 natural_t iisb_reserved[2];
} ipc_info_space_basic_t;

typedef struct ipc_info_name {
 mach_port_name_t iin_name;
             integer_t iin_collision;
 mach_port_type_t iin_type;
 mach_port_urefs_t iin_urefs;
 natural_t iin_object;
 natural_t iin_next;
 natural_t iin_hash;
} ipc_info_name_t;

typedef ipc_info_name_t *ipc_info_name_array_t;


typedef struct ipc_info_tree_name {
 ipc_info_name_t iitn_name;
 mach_port_name_t iitn_lchild;
 mach_port_name_t iitn_rchild;
} ipc_info_tree_name_t;

typedef ipc_info_tree_name_t *ipc_info_tree_name_array_t;
# 66 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4
# 1 "/usr/include/mach_debug/vm_info.h" 1 3 4
# 73 "/usr/include/mach_debug/vm_info.h" 3 4
#pragma pack(4)





typedef struct mach_vm_info_region {
 mach_vm_offset_t vir_start;
 mach_vm_offset_t vir_end;
 mach_vm_offset_t vir_object;
 memory_object_offset_t vir_offset;
 boolean_t vir_needs_copy;
 vm_prot_t vir_protection;
 vm_prot_t vir_max_protection;
 vm_inherit_t vir_inheritance;
 natural_t vir_wired_count;
 natural_t vir_user_wired_count;
} mach_vm_info_region_t;

typedef struct vm_info_region_64 {
 natural_t vir_start;
 natural_t vir_end;
 natural_t vir_object;
 memory_object_offset_t vir_offset;
 boolean_t vir_needs_copy;
 vm_prot_t vir_protection;
 vm_prot_t vir_max_protection;
 vm_inherit_t vir_inheritance;
 natural_t vir_wired_count;
 natural_t vir_user_wired_count;
} vm_info_region_64_t;

typedef struct vm_info_region {
 natural_t vir_start;
 natural_t vir_end;
 natural_t vir_object;
 natural_t vir_offset;
 boolean_t vir_needs_copy;
 vm_prot_t vir_protection;
 vm_prot_t vir_max_protection;
 vm_inherit_t vir_inheritance;
 natural_t vir_wired_count;
 natural_t vir_user_wired_count;
} vm_info_region_t;


typedef struct vm_info_object {
 natural_t vio_object;
 natural_t vio_size;
 unsigned int vio_ref_count;
 unsigned int vio_resident_page_count;
 unsigned int vio_absent_count;
 natural_t vio_copy;
 natural_t vio_shadow;
 natural_t vio_shadow_offset;
 natural_t vio_paging_offset;
 memory_object_copy_strategy_t vio_copy_strategy;

 vm_offset_t vio_last_alloc;

 unsigned int vio_paging_in_progress;
 boolean_t vio_pager_created;
 boolean_t vio_pager_initialized;
 boolean_t vio_pager_ready;
 boolean_t vio_can_persist;
 boolean_t vio_internal;
 boolean_t vio_temporary;
 boolean_t vio_alive;
 boolean_t vio_purgable;
 boolean_t vio_purgable_volatile;
} vm_info_object_t;

typedef vm_info_object_t *vm_info_object_array_t;

#pragma pack()
# 67 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4
# 1 "/usr/include/mach_debug/zone_info.h" 1 3 4
# 73 "/usr/include/mach_debug/zone_info.h" 3 4
typedef struct zone_name {
 char zn_name[80];
} zone_name_t;

typedef zone_name_t *zone_name_array_t;


typedef struct zone_info {
 integer_t zi_count;
 vm_size_t zi_cur_size;
 vm_size_t zi_max_size;
 vm_size_t zi_elem_size;
 vm_size_t zi_alloc_size;
 integer_t zi_pageable;
 integer_t zi_sleepable;
 integer_t zi_exhaustible;
 integer_t zi_collectable;
} zone_info_t;

typedef zone_info_t *zone_info_array_t;
# 102 "/usr/include/mach_debug/zone_info.h" 3 4
typedef struct mach_zone_name {
 char mzn_name[80];
} mach_zone_name_t;

typedef mach_zone_name_t *mach_zone_name_array_t;

typedef struct mach_zone_info_data {
 uint64_t mzi_count;
 uint64_t mzi_cur_size;
 uint64_t mzi_max_size;
        uint64_t mzi_elem_size;
 uint64_t mzi_alloc_size;
 uint64_t mzi_sum_size;
 uint64_t mzi_exhaustible;
 uint64_t mzi_collectable;
} mach_zone_info_t;

typedef mach_zone_info_t *mach_zone_info_array_t;

typedef struct task_zone_info_data {
 uint64_t tzi_count;
 uint64_t tzi_cur_size;
 uint64_t tzi_max_size;
        uint64_t tzi_elem_size;
 uint64_t tzi_alloc_size;
 uint64_t tzi_sum_size;
 uint64_t tzi_exhaustible;
 uint64_t tzi_collectable;
 uint64_t tzi_caller_acct;
 uint64_t tzi_task_alloc;
 uint64_t tzi_task_free;
} task_zone_info_t;

typedef task_zone_info_t *task_zone_info_array_t;

typedef struct mach_memory_info {
    uint64_t flags;
    uint64_t site;
    uint64_t size;
    uint64_t free;
    uint64_t largest;
 uint64_t collectable_bytes;
    uint64_t _resv[2];
} mach_memory_info_t;

typedef mach_memory_info_t *mach_memory_info_array_t;
# 68 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4
# 1 "/usr/include/mach_debug/page_info.h" 1 3 4
# 63 "/usr/include/mach_debug/page_info.h" 3 4
typedef vm_offset_t *page_address_array_t;
# 69 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4
# 1 "/usr/include/mach_debug/hash_info.h" 1 3 4
# 67 "/usr/include/mach_debug/hash_info.h" 3 4
typedef struct hash_info_bucket {
 natural_t hib_count;
} hash_info_bucket_t;

typedef hash_info_bucket_t *hash_info_bucket_array_t;
# 70 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4
# 1 "/usr/include/mach_debug/lockgroup_info.h" 1 3 4
# 43 "/usr/include/mach_debug/lockgroup_info.h" 3 4
typedef struct lockgroup_info {
 char lockgroup_name[64];
 uint64_t lockgroup_attr;
 uint64_t lock_spin_cnt;
 uint64_t lock_spin_util_cnt;
 uint64_t lock_spin_held_cnt;
 uint64_t lock_spin_miss_cnt;
 uint64_t lock_spin_held_max;
 uint64_t lock_spin_held_cum;
 uint64_t lock_mtx_cnt;
 uint64_t lock_mtx_util_cnt;
 uint64_t lock_mtx_held_cnt;
 uint64_t lock_mtx_miss_cnt;
 uint64_t lock_mtx_wait_cnt;
 uint64_t lock_mtx_held_max;
 uint64_t lock_mtx_held_cum;
 uint64_t lock_mtx_wait_max;
 uint64_t lock_mtx_wait_cum;
 uint64_t lock_rw_cnt;
 uint64_t lock_rw_util_cnt;
 uint64_t lock_rw_held_cnt;
 uint64_t lock_rw_miss_cnt;
 uint64_t lock_rw_wait_cnt;
 uint64_t lock_rw_held_max;
 uint64_t lock_rw_held_cum;
 uint64_t lock_rw_wait_max;
 uint64_t lock_rw_wait_cum;
} lockgroup_info_t;

typedef lockgroup_info_t *lockgroup_info_array_t;
# 71 "/usr/include/mach_debug/mach_debug_types.h" 2 3 4

typedef char symtab_name_t[32];

struct mach_core_fileheader
{
     uint64_t signature;
     uint64_t log_offset;
     uint64_t log_length;
     uint64_t gzip_offset;
     uint64_t gzip_length;
};
# 61 "/usr/include/mach/host_priv.h" 2 3 4
# 74 "/usr/include/mach/host_priv.h" 3 4
extern

kern_return_t host_get_boot_info
(
 host_priv_t host_priv,
 kernel_boot_info_t boot_info
);





extern

kern_return_t host_reboot
(
 host_priv_t host_priv,
 int options
);





extern

kern_return_t host_priv_statistics
(
 host_priv_t host_priv,
 host_flavor_t flavor,
 host_info_t host_info_out,
 mach_msg_type_number_t *host_info_outCnt
);





extern

kern_return_t host_default_memory_manager
(
 host_priv_t host_priv,
 memory_object_default_t *default_manager,
 memory_object_cluster_size_t cluster_size
);





extern

kern_return_t vm_wire
(
 host_priv_t host_priv,
 vm_map_t task,
 vm_address_t address,
 vm_size_t size,
 vm_prot_t desired_access
);





extern

kern_return_t thread_wire
(
 host_priv_t host_priv,
 thread_act_t thread,
 boolean_t wired
);





extern

kern_return_t vm_allocate_cpm
(
 host_priv_t host_priv,
 vm_map_t task,
 vm_address_t *address,
 vm_size_t size,
 int flags
);





extern

kern_return_t host_processors
(
 host_priv_t host_priv,
 processor_array_t *out_processor_list,
 mach_msg_type_number_t *out_processor_listCnt
);





extern

kern_return_t host_get_clock_control
(
 host_priv_t host_priv,
 clock_id_t clock_id,
 clock_ctrl_t *clock_ctrl
);





extern

kern_return_t kmod_create
(
 host_priv_t host_priv,
 vm_address_t info,
 kmod_t *module
);





extern

kern_return_t kmod_destroy
(
 host_priv_t host_priv,
 kmod_t module
);





extern

kern_return_t kmod_control
(
 host_priv_t host_priv,
 kmod_t module,
 kmod_control_flavor_t flavor,
 kmod_args_t *data,
 mach_msg_type_number_t *dataCnt
);





extern

kern_return_t host_get_special_port
(
 host_priv_t host_priv,
 int node,
 int which,
 mach_port_t *port
);





extern

kern_return_t host_set_special_port
(
 host_priv_t host_priv,
 int which,
 mach_port_t port
);





extern

kern_return_t host_set_exception_ports
(
 host_priv_t host_priv,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor
);





extern

kern_return_t host_get_exception_ports
(
 host_priv_t host_priv,
 exception_mask_t exception_mask,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlers,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

kern_return_t host_swap_exception_ports
(
 host_priv_t host_priv,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlerss,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

kern_return_t mach_vm_wire
(
 host_priv_t host_priv,
 vm_map_t task,
 mach_vm_address_t address,
 mach_vm_size_t size,
 vm_prot_t desired_access
);





extern

kern_return_t host_processor_sets
(
 host_priv_t host_priv,
 processor_set_name_array_t *processor_sets,
 mach_msg_type_number_t *processor_setsCnt
);





extern

kern_return_t host_processor_set_priv
(
 host_priv_t host_priv,
 processor_set_name_t set_name,
 processor_set_t *set
);





extern

kern_return_t set_dp_control_port
(
 host_priv_t host,
 mach_port_t control_port
);





extern

kern_return_t get_dp_control_port
(
 host_priv_t host,
 mach_port_t *contorl_port
);





extern

kern_return_t host_set_UNDServer
(
 host_priv_t host,
 UNDServerRef server
);





extern

kern_return_t host_get_UNDServer
(
 host_priv_t host,
 UNDServerRef *server
);





extern

kern_return_t kext_request
(
 host_priv_t host_priv,
 uint32_t user_log_flags,
 vm_offset_t request_data,
 mach_msg_type_number_t request_dataCnt,
 vm_offset_t *response_data,
 mach_msg_type_number_t *response_dataCnt,
 vm_offset_t *log_data,
 mach_msg_type_number_t *log_dataCnt,
 kern_return_t *op_result
);
# 436 "/usr/include/mach/host_priv.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_get_boot_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int options;
 } __Request__host_reboot_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
 } __Request__host_priv_statistics_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t default_manager;

  NDR_record_t NDR;
  memory_object_cluster_size_t cluster_size;
 } __Request__host_default_memory_manager_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t task;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_prot_t desired_access;
 } __Request__vm_wire_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;

  NDR_record_t NDR;
  boolean_t wired;
 } __Request__thread_wire_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t task;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  int flags;
 } __Request__vm_allocate_cpm_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_processors_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_id_t clock_id;
 } __Request__host_get_clock_control_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t info;
 } __Request__kmod_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kmod_t module;
 } __Request__kmod_destroy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;

  NDR_record_t NDR;
  kmod_t module;
  kmod_control_flavor_t flavor;
  mach_msg_type_number_t dataCnt;
 } __Request__kmod_control_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int node;
  int which;
 } __Request__host_get_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t port;

  NDR_record_t NDR;
  int which;
 } __Request__host_set_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__host_set_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
 } __Request__host_get_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__host_swap_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t task;

  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_prot_t desired_access;
 } __Request__mach_vm_wire_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_processor_sets_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t set_name;

 } __Request__host_processor_set_priv_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t control_port;

 } __Request__set_dp_control_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__get_dp_control_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t server;

 } __Request__host_set_UNDServer_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_get_UNDServer_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t request_data;

  NDR_record_t NDR;
  uint32_t user_log_flags;
  mach_msg_type_number_t request_dataCnt;
 } __Request__kext_request_t __attribute__((unused));

#pragma pack()







union __RequestUnion__host_priv_subsystem {
 __Request__host_get_boot_info_t Request_host_get_boot_info;
 __Request__host_reboot_t Request_host_reboot;
 __Request__host_priv_statistics_t Request_host_priv_statistics;
 __Request__host_default_memory_manager_t Request_host_default_memory_manager;
 __Request__vm_wire_t Request_vm_wire;
 __Request__thread_wire_t Request_thread_wire;
 __Request__vm_allocate_cpm_t Request_vm_allocate_cpm;
 __Request__host_processors_t Request_host_processors;
 __Request__host_get_clock_control_t Request_host_get_clock_control;
 __Request__kmod_create_t Request_kmod_create;
 __Request__kmod_destroy_t Request_kmod_destroy;
 __Request__kmod_control_t Request_kmod_control;
 __Request__host_get_special_port_t Request_host_get_special_port;
 __Request__host_set_special_port_t Request_host_set_special_port;
 __Request__host_set_exception_ports_t Request_host_set_exception_ports;
 __Request__host_get_exception_ports_t Request_host_get_exception_ports;
 __Request__host_swap_exception_ports_t Request_host_swap_exception_ports;
 __Request__mach_vm_wire_t Request_mach_vm_wire;
 __Request__host_processor_sets_t Request_host_processor_sets;
 __Request__host_processor_set_priv_t Request_host_processor_set_priv;
 __Request__set_dp_control_port_t Request_set_dp_control_port;
 __Request__get_dp_control_port_t Request_get_dp_control_port;
 __Request__host_set_UNDServer_t Request_host_set_UNDServer;
 __Request__host_get_UNDServer_t Request_host_get_UNDServer;
 __Request__kext_request_t Request_kext_request;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t boot_infoOffset;
  mach_msg_type_number_t boot_infoCnt;
  char boot_info[4096];
 } __Reply__host_get_boot_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_reboot_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[68];
 } __Reply__host_priv_statistics_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t default_manager;

 } __Reply__host_default_memory_manager_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_wire_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_wire_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
 } __Reply__vm_allocate_cpm_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t out_processor_list;

  NDR_record_t NDR;
  mach_msg_type_number_t out_processor_listCnt;
 } __Reply__host_processors_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t clock_ctrl;

 } __Reply__host_get_clock_control_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  kmod_t module;
 } __Reply__kmod_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__kmod_destroy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;

  NDR_record_t NDR;
  mach_msg_type_number_t dataCnt;
 } __Reply__kmod_control_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t port;

 } __Reply__host_get_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_set_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_set_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlers[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__host_get_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlerss[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__host_swap_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_vm_wire_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t processor_sets;

  NDR_record_t NDR;
  mach_msg_type_number_t processor_setsCnt;
 } __Reply__host_processor_sets_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t set;

 } __Reply__host_processor_set_priv_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__set_dp_control_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t contorl_port;

 } __Reply__get_dp_control_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_set_UNDServer_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t server;

 } __Reply__host_get_UNDServer_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t response_data;
  mach_msg_ool_descriptor_t log_data;

  NDR_record_t NDR;
  mach_msg_type_number_t response_dataCnt;
  mach_msg_type_number_t log_dataCnt;
  kern_return_t op_result;
 } __Reply__kext_request_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__host_priv_subsystem {
 __Reply__host_get_boot_info_t Reply_host_get_boot_info;
 __Reply__host_reboot_t Reply_host_reboot;
 __Reply__host_priv_statistics_t Reply_host_priv_statistics;
 __Reply__host_default_memory_manager_t Reply_host_default_memory_manager;
 __Reply__vm_wire_t Reply_vm_wire;
 __Reply__thread_wire_t Reply_thread_wire;
 __Reply__vm_allocate_cpm_t Reply_vm_allocate_cpm;
 __Reply__host_processors_t Reply_host_processors;
 __Reply__host_get_clock_control_t Reply_host_get_clock_control;
 __Reply__kmod_create_t Reply_kmod_create;
 __Reply__kmod_destroy_t Reply_kmod_destroy;
 __Reply__kmod_control_t Reply_kmod_control;
 __Reply__host_get_special_port_t Reply_host_get_special_port;
 __Reply__host_set_special_port_t Reply_host_set_special_port;
 __Reply__host_set_exception_ports_t Reply_host_set_exception_ports;
 __Reply__host_get_exception_ports_t Reply_host_get_exception_ports;
 __Reply__host_swap_exception_ports_t Reply_host_swap_exception_ports;
 __Reply__mach_vm_wire_t Reply_mach_vm_wire;
 __Reply__host_processor_sets_t Reply_host_processor_sets;
 __Reply__host_processor_set_priv_t Reply_host_processor_set_priv;
 __Reply__set_dp_control_port_t Reply_set_dp_control_port;
 __Reply__get_dp_control_port_t Reply_get_dp_control_port;
 __Reply__host_set_UNDServer_t Reply_host_set_UNDServer;
 __Reply__host_get_UNDServer_t Reply_host_get_UNDServer;
 __Reply__kext_request_t Reply_kext_request;
};
# 44 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/host_security.h" 1 3 4
# 72 "/usr/include/mach/host_security.h" 3 4
extern

kern_return_t host_security_create_task_token
(
 host_security_t host_security,
 task_t parent_task,
 security_token_t sec_token,
 audit_token_t audit_token,
 host_t host,
 ledger_array_t ledgers,
 mach_msg_type_number_t ledgersCnt,
 boolean_t inherit_memory,
 task_t *child_task
);





extern

kern_return_t host_security_set_task_token
(
 host_security_t host_security,
 task_t target_task,
 security_token_t sec_token,
 audit_token_t audit_token,
 host_t host
);
# 121 "/usr/include/mach/host_security.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t parent_task;
  mach_msg_port_descriptor_t host;
  mach_msg_ool_ports_descriptor_t ledgers;

  NDR_record_t NDR;
  security_token_t sec_token;
  audit_token_t audit_token;
  mach_msg_type_number_t ledgersCnt;
  boolean_t inherit_memory;
 } __Request__host_security_create_task_token_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t target_task;
  mach_msg_port_descriptor_t host;

  NDR_record_t NDR;
  security_token_t sec_token;
  audit_token_t audit_token;
 } __Request__host_security_set_task_token_t __attribute__((unused));

#pragma pack()







union __RequestUnion__host_security_subsystem {
 __Request__host_security_create_task_token_t Request_host_security_create_task_token;
 __Request__host_security_set_task_token_t Request_host_security_set_task_token;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_task;

 } __Reply__host_security_create_task_token_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_security_set_task_token_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__host_security_subsystem {
 __Reply__host_security_create_task_token_t Reply_host_security_create_task_token;
 __Reply__host_security_set_task_token_t Reply_host_security_set_task_token;
};
# 45 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/lock_set.h" 1 3 4
# 72 "/usr/include/mach/lock_set.h" 3 4
extern

kern_return_t lock_acquire
(
 lock_set_t lock_set,
 int lock_id
);





extern

kern_return_t lock_release
(
 lock_set_t lock_set,
 int lock_id
);





extern

kern_return_t lock_try
(
 lock_set_t lock_set,
 int lock_id
);





extern

kern_return_t lock_make_stable
(
 lock_set_t lock_set,
 int lock_id
);





extern

kern_return_t lock_handoff
(
 lock_set_t lock_set,
 int lock_id
);





extern

kern_return_t lock_handoff_accept
(
 lock_set_t lock_set,
 int lock_id
);
# 159 "/usr/include/mach/lock_set.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_acquire_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_release_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_try_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_make_stable_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_handoff_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
 } __Request__lock_handoff_accept_t __attribute__((unused));

#pragma pack()







union __RequestUnion__lock_set_subsystem {
 __Request__lock_acquire_t Request_lock_acquire;
 __Request__lock_release_t Request_lock_release;
 __Request__lock_try_t Request_lock_try;
 __Request__lock_make_stable_t Request_lock_make_stable;
 __Request__lock_handoff_t Request_lock_handoff;
 __Request__lock_handoff_accept_t Request_lock_handoff_accept;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_acquire_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_release_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_try_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_make_stable_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_handoff_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_handoff_accept_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__lock_set_subsystem {
 __Reply__lock_acquire_t Reply_lock_acquire;
 __Reply__lock_release_t Reply_lock_release;
 __Reply__lock_try_t Reply_lock_try;
 __Reply__lock_make_stable_t Reply_lock_make_stable;
 __Reply__lock_handoff_t Reply_lock_handoff;
 __Reply__lock_handoff_accept_t Reply_lock_handoff_accept;
};
# 46 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/processor.h" 1 3 4
# 72 "/usr/include/mach/processor.h" 3 4
extern

kern_return_t processor_start
(
 processor_t processor
);





extern

kern_return_t processor_exit
(
 processor_t processor
);





extern

kern_return_t processor_info
(
 processor_t processor,
 processor_flavor_t flavor,
 host_t *host,
 processor_info_t processor_info_out,
 mach_msg_type_number_t *processor_info_outCnt
);





extern

kern_return_t processor_control
(
 processor_t processor,
 processor_info_t processor_cmd,
 mach_msg_type_number_t processor_cmdCnt
);





extern

kern_return_t processor_assign
(
 processor_t processor,
 processor_set_t new_set,
 boolean_t wait
);





extern

kern_return_t processor_get_assignment
(
 processor_t processor,
 processor_set_name_t *assigned_set
);
# 162 "/usr/include/mach/processor.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_start_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_exit_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_flavor_t flavor;
  mach_msg_type_number_t processor_info_outCnt;
 } __Request__processor_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t processor_cmdCnt;
  integer_t processor_cmd[12];
 } __Request__processor_control_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;

  NDR_record_t NDR;
  boolean_t wait;
 } __Request__processor_assign_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_get_assignment_t __attribute__((unused));

#pragma pack()







union __RequestUnion__processor_subsystem {
 __Request__processor_start_t Request_processor_start;
 __Request__processor_exit_t Request_processor_exit;
 __Request__processor_info_t Request_processor_info;
 __Request__processor_control_t Request_processor_control;
 __Request__processor_assign_t Request_processor_assign;
 __Request__processor_get_assignment_t Request_processor_get_assignment;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_start_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_exit_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t host;

  NDR_record_t NDR;
  mach_msg_type_number_t processor_info_outCnt;
  integer_t processor_info_out[12];
 } __Reply__processor_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_control_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_assign_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t assigned_set;

 } __Reply__processor_get_assignment_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__processor_subsystem {
 __Reply__processor_start_t Reply_processor_start;
 __Reply__processor_exit_t Reply_processor_exit;
 __Reply__processor_info_t Reply_processor_info;
 __Reply__processor_control_t Reply_processor_control;
 __Reply__processor_assign_t Reply_processor_assign;
 __Reply__processor_get_assignment_t Reply_processor_get_assignment;
};
# 47 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/processor_set.h" 1 3 4
# 72 "/usr/include/mach/processor_set.h" 3 4
extern

kern_return_t processor_set_statistics
(
 processor_set_name_t pset,
 processor_set_flavor_t flavor,
 processor_set_info_t info_out,
 mach_msg_type_number_t *info_outCnt
);





extern

kern_return_t processor_set_destroy
(
 processor_set_t set
);





extern

kern_return_t processor_set_max_priority
(
 processor_set_t processor_set,
 int max_priority,
 boolean_t change_threads
);





extern

kern_return_t processor_set_policy_enable
(
 processor_set_t processor_set,
 int policy
);





extern

kern_return_t processor_set_policy_disable
(
 processor_set_t processor_set,
 int policy,
 boolean_t change_threads
);





extern

kern_return_t processor_set_tasks
(
 processor_set_t processor_set,
 task_array_t *task_list,
 mach_msg_type_number_t *task_listCnt
);





extern

kern_return_t processor_set_threads
(
 processor_set_t processor_set,
 thread_act_array_t *thread_list,
 mach_msg_type_number_t *thread_listCnt
);





extern

kern_return_t processor_set_policy_control
(
 processor_set_t pset,
 processor_set_flavor_t flavor,
 processor_set_info_t policy_info,
 mach_msg_type_number_t policy_infoCnt,
 boolean_t change
);





extern

kern_return_t processor_set_stack_usage
(
 processor_set_t pset,
 unsigned *ltotal,
 vm_size_t *space,
 vm_size_t *resident,
 vm_size_t *maxusage,
 vm_offset_t *maxstack
);





extern

kern_return_t processor_set_info
(
 processor_set_name_t set_name,
 int flavor,
 host_t *host,
 processor_set_info_t info_out,
 mach_msg_type_number_t *info_outCnt
);
# 222 "/usr/include/mach/processor_set.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_set_flavor_t flavor;
  mach_msg_type_number_t info_outCnt;
 } __Request__processor_set_statistics_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_destroy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int max_priority;
  boolean_t change_threads;
 } __Request__processor_set_max_priority_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
 } __Request__processor_set_policy_enable_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
  boolean_t change_threads;
 } __Request__processor_set_policy_disable_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_tasks_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_threads_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_set_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[5];
  boolean_t change;
 } __Request__processor_set_policy_control_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_stack_usage_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t info_outCnt;
 } __Request__processor_set_info_t __attribute__((unused));

#pragma pack()







union __RequestUnion__processor_set_subsystem {
 __Request__processor_set_statistics_t Request_processor_set_statistics;
 __Request__processor_set_destroy_t Request_processor_set_destroy;
 __Request__processor_set_max_priority_t Request_processor_set_max_priority;
 __Request__processor_set_policy_enable_t Request_processor_set_policy_enable;
 __Request__processor_set_policy_disable_t Request_processor_set_policy_disable;
 __Request__processor_set_tasks_t Request_processor_set_tasks;
 __Request__processor_set_threads_t Request_processor_set_threads;
 __Request__processor_set_policy_control_t Request_processor_set_policy_control;
 __Request__processor_set_stack_usage_t Request_processor_set_stack_usage;
 __Request__processor_set_info_t Request_processor_set_info;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t info_outCnt;
  integer_t info_out[5];
 } __Reply__processor_set_statistics_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_set_destroy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_set_max_priority_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_set_policy_enable_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_set_policy_disable_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t task_list;

  NDR_record_t NDR;
  mach_msg_type_number_t task_listCnt;
 } __Reply__processor_set_tasks_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t thread_list;

  NDR_record_t NDR;
  mach_msg_type_number_t thread_listCnt;
 } __Reply__processor_set_threads_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__processor_set_policy_control_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned ltotal;
  vm_size_t space;
  vm_size_t resident;
  vm_size_t maxusage;
  vm_offset_t maxstack;
 } __Reply__processor_set_stack_usage_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t host;

  NDR_record_t NDR;
  mach_msg_type_number_t info_outCnt;
  integer_t info_out[5];
 } __Reply__processor_set_info_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__processor_set_subsystem {
 __Reply__processor_set_statistics_t Reply_processor_set_statistics;
 __Reply__processor_set_destroy_t Reply_processor_set_destroy;
 __Reply__processor_set_max_priority_t Reply_processor_set_max_priority;
 __Reply__processor_set_policy_enable_t Reply_processor_set_policy_enable;
 __Reply__processor_set_policy_disable_t Reply_processor_set_policy_disable;
 __Reply__processor_set_tasks_t Reply_processor_set_tasks;
 __Reply__processor_set_threads_t Reply_processor_set_threads;
 __Reply__processor_set_policy_control_t Reply_processor_set_policy_control;
 __Reply__processor_set_stack_usage_t Reply_processor_set_stack_usage;
 __Reply__processor_set_info_t Reply_processor_set_info;
};
# 48 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/semaphore.h" 1 3 4
# 35 "/usr/include/mach/semaphore.h" 3 4
# 1 "/usr/include/mach/sync_policy.h" 1 3 4
# 35 "/usr/include/mach/sync_policy.h" 3 4
typedef int sync_policy_t;
# 36 "/usr/include/mach/semaphore.h" 2 3 4
# 55 "/usr/include/mach/semaphore.h" 3 4
extern kern_return_t semaphore_signal (semaphore_t semaphore);
extern kern_return_t semaphore_signal_all (semaphore_t semaphore);

extern kern_return_t semaphore_wait (semaphore_t semaphore);


extern kern_return_t semaphore_timedwait (semaphore_t semaphore,
             mach_timespec_t wait_time);

extern kern_return_t semaphore_timedwait_signal(semaphore_t wait_semaphore,
               semaphore_t signal_semaphore,
               mach_timespec_t wait_time);

extern kern_return_t semaphore_wait_signal (semaphore_t wait_semaphore,
                                                 semaphore_t signal_semaphore);

extern kern_return_t semaphore_signal_thread (semaphore_t semaphore,
                                                 thread_t thread);
# 49 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/task.h" 1 3 4
# 73 "/usr/include/mach/task.h" 3 4
extern

kern_return_t task_create
(
 task_t target_task,
 ledger_array_t ledgers,
 mach_msg_type_number_t ledgersCnt,
 boolean_t inherit_memory,
 task_t *child_task
);





extern

kern_return_t task_terminate
(
 task_t target_task
);





extern

kern_return_t task_threads
(
 task_inspect_t target_task,
 thread_act_array_t *act_list,
 mach_msg_type_number_t *act_listCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t mach_ports_register
(
 task_t target_task,
 mach_port_array_t init_port_set,
 mach_msg_type_number_t init_port_setCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t mach_ports_lookup
(
 task_t target_task,
 mach_port_array_t *init_port_set,
 mach_msg_type_number_t *init_port_setCnt
);





extern

kern_return_t task_info
(
 task_name_t target_task,
 task_flavor_t flavor,
 task_info_t task_info_out,
 mach_msg_type_number_t *task_info_outCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_set_info
(
 task_t target_task,
 task_flavor_t flavor,
 task_info_t task_info_in,
 mach_msg_type_number_t task_info_inCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_suspend
(
 task_t target_task
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_resume
(
 task_t target_task
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_get_special_port
(
 task_inspect_t task,
 int which_port,
 mach_port_t *special_port
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_set_special_port
(
 task_t task,
 int which_port,
 mach_port_t special_port
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_create
(
 task_t parent_task,
 thread_act_t *child_act
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_create_running
(
 task_t parent_task,
 thread_state_flavor_t flavor,
 thread_state_t new_state,
 mach_msg_type_number_t new_stateCnt,
 thread_act_t *child_act
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_set_exception_ports
(
 task_t task,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_get_exception_ports
(
 task_inspect_t task,
 exception_mask_t exception_mask,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlers,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_swap_exception_ports
(
 task_t task,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlerss,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

kern_return_t lock_set_create
(
 task_t task,
 lock_set_t *new_lock_set,
 int n_ulocks,
 int policy
);





extern

kern_return_t lock_set_destroy
(
 task_t task,
 lock_set_t lock_set
);





extern

kern_return_t semaphore_create
(
 task_t task,
 semaphore_t *semaphore,
 int policy,
 int value
);





extern

kern_return_t semaphore_destroy
(
 task_t task,
 semaphore_t semaphore
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_policy_set
(
 task_t task,
 task_policy_flavor_t flavor,
 task_policy_t policy_info,
 mach_msg_type_number_t policy_infoCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_policy_get
(
 task_t task,
 task_policy_flavor_t flavor,
 task_policy_t policy_info,
 mach_msg_type_number_t *policy_infoCnt,
 boolean_t *get_default
);





extern

kern_return_t task_sample
(
 task_t task,
 mach_port_t reply
);





extern

kern_return_t task_policy
(
 task_t task,
 policy_t policy,
 policy_base_t base,
 mach_msg_type_number_t baseCnt,
 boolean_t set_limit,
 boolean_t change
);





extern

kern_return_t task_set_emulation
(
 task_t target_port,
 vm_address_t routine_entry_pt,
 int routine_number
);





extern

kern_return_t task_get_emulation_vector
(
 task_t task,
 int *vector_start,
 emulation_vector_t *emulation_vector,
 mach_msg_type_number_t *emulation_vectorCnt
);





extern

kern_return_t task_set_emulation_vector
(
 task_t task,
 int vector_start,
 emulation_vector_t emulation_vector,
 mach_msg_type_number_t emulation_vectorCnt
);





extern

kern_return_t task_set_ras_pc
(
 task_t target_task,
 vm_address_t basepc,
 vm_address_t boundspc
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_zone_info
(
 task_t target_task,
 mach_zone_name_array_t *names,
 mach_msg_type_number_t *namesCnt,
 task_zone_info_array_t *info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t task_assign
(
 task_t task,
 processor_set_t new_set,
 boolean_t assign_threads
);





extern

kern_return_t task_assign_default
(
 task_t task,
 boolean_t assign_threads
);





extern

kern_return_t task_get_assignment
(
 task_t task,
 processor_set_name_t *assigned_set
);





extern

kern_return_t task_set_policy
(
 task_t task,
 processor_set_t pset,
 policy_t policy,
 policy_base_t base,
 mach_msg_type_number_t baseCnt,
 policy_limit_t limit,
 mach_msg_type_number_t limitCnt,
 boolean_t change
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_get_state
(
 task_t task,
 thread_state_flavor_t flavor,
 thread_state_t old_state,
 mach_msg_type_number_t *old_stateCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_set_state
(
 task_t task,
 thread_state_flavor_t flavor,
 thread_state_t new_state,
 mach_msg_type_number_t new_stateCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_set_phys_footprint_limit
(
 task_t task,
 int new_limit,
 int *old_limit
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_suspend2
(
 task_t target_task,
 task_suspension_token_t *suspend_token
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_resume2
(
 task_suspension_token_t suspend_token
);





extern

kern_return_t task_purgable_info
(
 task_t task,
 task_purgable_info_t *stats
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_get_mach_voucher
(
 task_t task,
 mach_voucher_selector_t which,
 ipc_voucher_t *voucher
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_set_mach_voucher
(
 task_t task,
 ipc_voucher_t voucher
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_swap_mach_voucher
(
 task_t task,
 ipc_voucher_t new_voucher,
 ipc_voucher_t *old_voucher
);





extern

kern_return_t task_generate_corpse
(
 task_t task,
 mach_port_t *corpse_task_port
);





extern

kern_return_t task_map_corpse_info
(
 task_t task,
 task_t corspe_task,
 vm_address_t *kcd_addr_begin,
 uint32_t *kcd_size
);





extern

kern_return_t task_register_dyld_image_infos
(
 task_t task,
 dyld_kernel_image_info_array_t dyld_images,
 mach_msg_type_number_t dyld_imagesCnt
);





extern

kern_return_t task_unregister_dyld_image_infos
(
 task_t task,
 dyld_kernel_image_info_array_t dyld_images,
 mach_msg_type_number_t dyld_imagesCnt
);





extern

kern_return_t task_get_dyld_image_infos
(
 task_inspect_t task,
 dyld_kernel_image_info_array_t *dyld_images,
 mach_msg_type_number_t *dyld_imagesCnt
);





extern

kern_return_t task_register_dyld_shared_cache_image_info
(
 task_t task,
 dyld_kernel_image_info_t dyld_cache_image,
 boolean_t no_cache,
 boolean_t private_cache
);





extern

kern_return_t task_register_dyld_set_dyld_state
(
 task_t task,
 uint8_t dyld_state
);





extern

kern_return_t task_register_dyld_get_process_state
(
 task_t task,
 dyld_kernel_process_info_t *dyld_process_state
);





extern

kern_return_t task_map_corpse_info_64
(
 task_t task,
 task_t corspe_task,
 mach_vm_address_t *kcd_addr_begin,
 mach_vm_size_t *kcd_size
);
# 818 "/usr/include/mach/task.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t ledgers;

  NDR_record_t NDR;
  mach_msg_type_number_t ledgersCnt;
  boolean_t inherit_memory;
 } __Request__task_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_terminate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_threads_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t init_port_set;

  NDR_record_t NDR;
  mach_msg_type_number_t init_port_setCnt;
 } __Request__mach_ports_register_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__mach_ports_lookup_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_flavor_t flavor;
  mach_msg_type_number_t task_info_outCnt;
 } __Request__task_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_flavor_t flavor;
  mach_msg_type_number_t task_info_inCnt;
  integer_t task_info_in[52];
 } __Request__task_set_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_suspend_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_resume_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int which_port;
 } __Request__task_get_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t special_port;

  NDR_record_t NDR;
  int which_port;
 } __Request__task_set_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[224];
 } __Request__thread_create_running_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__task_set_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
 } __Request__task_get_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__task_swap_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int n_ulocks;
  int policy;
 } __Request__lock_set_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t lock_set;

 } __Request__lock_set_destroy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
  int value;
 } __Request__semaphore_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t semaphore;

 } __Request__semaphore_destroy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
 } __Request__task_policy_set_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  boolean_t get_default;
 } __Request__task_policy_get_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t reply;

 } __Request__task_sample_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  boolean_t set_limit;
  boolean_t change;
 } __Request__task_policy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t routine_entry_pt;
  int routine_number;
 } __Request__task_set_emulation_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_get_emulation_vector_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t emulation_vector;

  NDR_record_t NDR;
  int vector_start;
  mach_msg_type_number_t emulation_vectorCnt;
 } __Request__task_set_emulation_vector_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t basepc;
  vm_address_t boundspc;
 } __Request__task_set_ras_pc_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_zone_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;

  NDR_record_t NDR;
  boolean_t assign_threads;
 } __Request__task_assign_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t assign_threads;
 } __Request__task_assign_default_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_get_assignment_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pset;

  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  mach_msg_type_number_t limitCnt;
  integer_t limit[1];
  boolean_t change;
 } __Request__task_set_policy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t old_stateCnt;
 } __Request__task_get_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[224];
 } __Request__task_set_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int new_limit;
 } __Request__task_set_phys_footprint_limit_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_suspend2_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_resume2_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_purgable_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_selector_t which;
 } __Request__task_get_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;

 } __Request__task_set_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_voucher;
  mach_msg_port_descriptor_t old_voucher;

 } __Request__task_swap_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_generate_corpse_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t corspe_task;

 } __Request__task_map_corpse_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t dyld_images;

  NDR_record_t NDR;
  mach_msg_type_number_t dyld_imagesCnt;
 } __Request__task_register_dyld_image_infos_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t dyld_images;

  NDR_record_t NDR;
  mach_msg_type_number_t dyld_imagesCnt;
 } __Request__task_unregister_dyld_image_infos_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_get_dyld_image_infos_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  dyld_kernel_image_info_t dyld_cache_image;
  boolean_t no_cache;
  boolean_t private_cache;
 } __Request__task_register_dyld_shared_cache_image_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint8_t dyld_state;
  char dyld_statePad[3];
 } __Request__task_register_dyld_set_dyld_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__task_register_dyld_get_process_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t corspe_task;

 } __Request__task_map_corpse_info_64_t __attribute__((unused));

#pragma pack()







union __RequestUnion__task_subsystem {
 __Request__task_create_t Request_task_create;
 __Request__task_terminate_t Request_task_terminate;
 __Request__task_threads_t Request_task_threads;
 __Request__mach_ports_register_t Request_mach_ports_register;
 __Request__mach_ports_lookup_t Request_mach_ports_lookup;
 __Request__task_info_t Request_task_info;
 __Request__task_set_info_t Request_task_set_info;
 __Request__task_suspend_t Request_task_suspend;
 __Request__task_resume_t Request_task_resume;
 __Request__task_get_special_port_t Request_task_get_special_port;
 __Request__task_set_special_port_t Request_task_set_special_port;
 __Request__thread_create_t Request_thread_create;
 __Request__thread_create_running_t Request_thread_create_running;
 __Request__task_set_exception_ports_t Request_task_set_exception_ports;
 __Request__task_get_exception_ports_t Request_task_get_exception_ports;
 __Request__task_swap_exception_ports_t Request_task_swap_exception_ports;
 __Request__lock_set_create_t Request_lock_set_create;
 __Request__lock_set_destroy_t Request_lock_set_destroy;
 __Request__semaphore_create_t Request_semaphore_create;
 __Request__semaphore_destroy_t Request_semaphore_destroy;
 __Request__task_policy_set_t Request_task_policy_set;
 __Request__task_policy_get_t Request_task_policy_get;
 __Request__task_sample_t Request_task_sample;
 __Request__task_policy_t Request_task_policy;
 __Request__task_set_emulation_t Request_task_set_emulation;
 __Request__task_get_emulation_vector_t Request_task_get_emulation_vector;
 __Request__task_set_emulation_vector_t Request_task_set_emulation_vector;
 __Request__task_set_ras_pc_t Request_task_set_ras_pc;
 __Request__task_zone_info_t Request_task_zone_info;
 __Request__task_assign_t Request_task_assign;
 __Request__task_assign_default_t Request_task_assign_default;
 __Request__task_get_assignment_t Request_task_get_assignment;
 __Request__task_set_policy_t Request_task_set_policy;
 __Request__task_get_state_t Request_task_get_state;
 __Request__task_set_state_t Request_task_set_state;
 __Request__task_set_phys_footprint_limit_t Request_task_set_phys_footprint_limit;
 __Request__task_suspend2_t Request_task_suspend2;
 __Request__task_resume2_t Request_task_resume2;
 __Request__task_purgable_info_t Request_task_purgable_info;
 __Request__task_get_mach_voucher_t Request_task_get_mach_voucher;
 __Request__task_set_mach_voucher_t Request_task_set_mach_voucher;
 __Request__task_swap_mach_voucher_t Request_task_swap_mach_voucher;
 __Request__task_generate_corpse_t Request_task_generate_corpse;
 __Request__task_map_corpse_info_t Request_task_map_corpse_info;
 __Request__task_register_dyld_image_infos_t Request_task_register_dyld_image_infos;
 __Request__task_unregister_dyld_image_infos_t Request_task_unregister_dyld_image_infos;
 __Request__task_get_dyld_image_infos_t Request_task_get_dyld_image_infos;
 __Request__task_register_dyld_shared_cache_image_info_t Request_task_register_dyld_shared_cache_image_info;
 __Request__task_register_dyld_set_dyld_state_t Request_task_register_dyld_set_dyld_state;
 __Request__task_register_dyld_get_process_state_t Request_task_register_dyld_get_process_state;
 __Request__task_map_corpse_info_64_t Request_task_map_corpse_info_64;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_task;

 } __Reply__task_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_terminate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t act_list;

  NDR_record_t NDR;
  mach_msg_type_number_t act_listCnt;
 } __Reply__task_threads_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_ports_register_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t init_port_set;

  NDR_record_t NDR;
  mach_msg_type_number_t init_port_setCnt;
 } __Reply__mach_ports_lookup_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[52];
 } __Reply__task_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_suspend_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_resume_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t special_port;

 } __Reply__task_get_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_act;

 } __Reply__thread_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_act;

 } __Reply__thread_create_running_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlers[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__task_get_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlerss[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__task_swap_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_lock_set;

 } __Reply__lock_set_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__lock_set_destroy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t semaphore;

 } __Reply__semaphore_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__semaphore_destroy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_policy_set_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
  boolean_t get_default;
 } __Reply__task_policy_get_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_sample_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_policy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_emulation_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t emulation_vector;

  NDR_record_t NDR;
  int vector_start;
  mach_msg_type_number_t emulation_vectorCnt;
 } __Reply__task_get_emulation_vector_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_emulation_vector_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_ras_pc_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t names;
  mach_msg_ool_descriptor_t info;

  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t infoCnt;
 } __Reply__task_zone_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_assign_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_assign_default_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t assigned_set;

 } __Reply__task_get_assignment_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_policy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[224];
 } __Reply__task_get_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int old_limit;
 } __Reply__task_set_phys_footprint_limit_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t suspend_token;

 } __Reply__task_suspend2_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_resume2_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  task_purgable_info_t stats;
 } __Reply__task_purgable_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;

 } __Reply__task_get_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_voucher;

 } __Reply__task_swap_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t corpse_task_port;

 } __Reply__task_generate_corpse_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t kcd_addr_begin;
  uint32_t kcd_size;
 } __Reply__task_map_corpse_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_register_dyld_image_infos_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_unregister_dyld_image_infos_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t dyld_images;

  NDR_record_t NDR;
  mach_msg_type_number_t dyld_imagesCnt;
 } __Reply__task_get_dyld_image_infos_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_register_dyld_shared_cache_image_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_register_dyld_set_dyld_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  dyld_kernel_process_info_t dyld_process_state;
 } __Reply__task_register_dyld_get_process_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t kcd_addr_begin;
  mach_vm_size_t kcd_size;
 } __Reply__task_map_corpse_info_64_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__task_subsystem {
 __Reply__task_create_t Reply_task_create;
 __Reply__task_terminate_t Reply_task_terminate;
 __Reply__task_threads_t Reply_task_threads;
 __Reply__mach_ports_register_t Reply_mach_ports_register;
 __Reply__mach_ports_lookup_t Reply_mach_ports_lookup;
 __Reply__task_info_t Reply_task_info;
 __Reply__task_set_info_t Reply_task_set_info;
 __Reply__task_suspend_t Reply_task_suspend;
 __Reply__task_resume_t Reply_task_resume;
 __Reply__task_get_special_port_t Reply_task_get_special_port;
 __Reply__task_set_special_port_t Reply_task_set_special_port;
 __Reply__thread_create_t Reply_thread_create;
 __Reply__thread_create_running_t Reply_thread_create_running;
 __Reply__task_set_exception_ports_t Reply_task_set_exception_ports;
 __Reply__task_get_exception_ports_t Reply_task_get_exception_ports;
 __Reply__task_swap_exception_ports_t Reply_task_swap_exception_ports;
 __Reply__lock_set_create_t Reply_lock_set_create;
 __Reply__lock_set_destroy_t Reply_lock_set_destroy;
 __Reply__semaphore_create_t Reply_semaphore_create;
 __Reply__semaphore_destroy_t Reply_semaphore_destroy;
 __Reply__task_policy_set_t Reply_task_policy_set;
 __Reply__task_policy_get_t Reply_task_policy_get;
 __Reply__task_sample_t Reply_task_sample;
 __Reply__task_policy_t Reply_task_policy;
 __Reply__task_set_emulation_t Reply_task_set_emulation;
 __Reply__task_get_emulation_vector_t Reply_task_get_emulation_vector;
 __Reply__task_set_emulation_vector_t Reply_task_set_emulation_vector;
 __Reply__task_set_ras_pc_t Reply_task_set_ras_pc;
 __Reply__task_zone_info_t Reply_task_zone_info;
 __Reply__task_assign_t Reply_task_assign;
 __Reply__task_assign_default_t Reply_task_assign_default;
 __Reply__task_get_assignment_t Reply_task_get_assignment;
 __Reply__task_set_policy_t Reply_task_set_policy;
 __Reply__task_get_state_t Reply_task_get_state;
 __Reply__task_set_state_t Reply_task_set_state;
 __Reply__task_set_phys_footprint_limit_t Reply_task_set_phys_footprint_limit;
 __Reply__task_suspend2_t Reply_task_suspend2;
 __Reply__task_resume2_t Reply_task_resume2;
 __Reply__task_purgable_info_t Reply_task_purgable_info;
 __Reply__task_get_mach_voucher_t Reply_task_get_mach_voucher;
 __Reply__task_set_mach_voucher_t Reply_task_set_mach_voucher;
 __Reply__task_swap_mach_voucher_t Reply_task_swap_mach_voucher;
 __Reply__task_generate_corpse_t Reply_task_generate_corpse;
 __Reply__task_map_corpse_info_t Reply_task_map_corpse_info;
 __Reply__task_register_dyld_image_infos_t Reply_task_register_dyld_image_infos;
 __Reply__task_unregister_dyld_image_infos_t Reply_task_unregister_dyld_image_infos;
 __Reply__task_get_dyld_image_infos_t Reply_task_get_dyld_image_infos;
 __Reply__task_register_dyld_shared_cache_image_info_t Reply_task_register_dyld_shared_cache_image_info;
 __Reply__task_register_dyld_set_dyld_state_t Reply_task_register_dyld_set_dyld_state;
 __Reply__task_register_dyld_get_process_state_t Reply_task_register_dyld_get_process_state;
 __Reply__task_map_corpse_info_64_t Reply_task_map_corpse_info_64;
};
# 50 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/thread_act.h" 1 3 4
# 72 "/usr/include/mach/thread_act.h" 3 4
extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_terminate
(
 thread_act_t target_act
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t act_get_state
(
 thread_act_t target_act,
 int flavor,
 thread_state_t old_state,
 mach_msg_type_number_t *old_stateCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t act_set_state
(
 thread_act_t target_act,
 int flavor,
 thread_state_t new_state,
 mach_msg_type_number_t new_stateCnt
);





extern

__attribute__((availability(watchos,unavailable)))
kern_return_t thread_get_state
(
 thread_act_t target_act,
 thread_state_flavor_t flavor,
 thread_state_t old_state,
 mach_msg_type_number_t *old_stateCnt
);





extern

__attribute__((availability(watchos,unavailable)))
kern_return_t thread_set_state
(
 thread_act_t target_act,
 thread_state_flavor_t flavor,
 thread_state_t new_state,
 mach_msg_type_number_t new_stateCnt
);





extern

__attribute__((availability(watchos,unavailable)))
kern_return_t thread_suspend
(
 thread_act_t target_act
);





extern

__attribute__((availability(watchos,unavailable)))
kern_return_t thread_resume
(
 thread_act_t target_act
);





extern

__attribute__((availability(watchos,unavailable)))
kern_return_t thread_abort
(
 thread_act_t target_act
);





extern

__attribute__((availability(watchos,unavailable)))
kern_return_t thread_abort_safely
(
 thread_act_t target_act
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_depress_abort
(
 thread_act_t thread
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_get_special_port
(
 thread_act_t thr_act,
 int which_port,
 mach_port_t *special_port
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_set_special_port
(
 thread_act_t thr_act,
 int which_port,
 mach_port_t special_port
);





extern

kern_return_t thread_info
(
 thread_inspect_t target_act,
 thread_flavor_t flavor,
 thread_info_t thread_info_out,
 mach_msg_type_number_t *thread_info_outCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_set_exception_ports
(
 thread_act_t thread,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_get_exception_ports
(
 thread_inspect_t thread,
 exception_mask_t exception_mask,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlers,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_swap_exception_ports
(
 thread_act_t thread,
 exception_mask_t exception_mask,
 mach_port_t new_port,
 exception_behavior_t behavior,
 thread_state_flavor_t new_flavor,
 exception_mask_array_t masks,
 mach_msg_type_number_t *masksCnt,
 exception_handler_array_t old_handlers,
 exception_behavior_array_t old_behaviors,
 exception_flavor_array_t old_flavors
);





extern

kern_return_t thread_policy
(
 thread_act_t thr_act,
 policy_t policy,
 policy_base_t base,
 mach_msg_type_number_t baseCnt,
 boolean_t set_limit
);





extern

kern_return_t thread_policy_set
(
 thread_act_t thread,
 thread_policy_flavor_t flavor,
 thread_policy_t policy_info,
 mach_msg_type_number_t policy_infoCnt
);





extern

kern_return_t thread_policy_get
(
 thread_inspect_t thread,
 thread_policy_flavor_t flavor,
 thread_policy_t policy_info,
 mach_msg_type_number_t *policy_infoCnt,
 boolean_t *get_default
);





extern

kern_return_t thread_sample
(
 thread_act_t thread,
 mach_port_t reply
);





extern

kern_return_t etap_trace_thread
(
 thread_act_t target_act,
 boolean_t trace_status
);





extern

kern_return_t thread_assign
(
 thread_act_t thread,
 processor_set_t new_set
);





extern

kern_return_t thread_assign_default
(
 thread_act_t thread
);





extern

kern_return_t thread_get_assignment
(
 thread_act_t thread,
 processor_set_name_t *assigned_set
);





extern

kern_return_t thread_set_policy
(
 thread_act_t thr_act,
 processor_set_t pset,
 policy_t policy,
 policy_base_t base,
 mach_msg_type_number_t baseCnt,
 policy_limit_t limit,
 mach_msg_type_number_t limitCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_get_mach_voucher
(
 thread_act_t thr_act,
 mach_voucher_selector_t which,
 ipc_voucher_t *voucher
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_set_mach_voucher
(
 thread_act_t thr_act,
 ipc_voucher_t voucher
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t thread_swap_mach_voucher
(
 thread_act_t thr_act,
 ipc_voucher_t new_voucher,
 ipc_voucher_t *old_voucher
);
# 489 "/usr/include/mach/thread_act.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_terminate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t old_stateCnt;
 } __Request__act_get_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[224];
 } __Request__act_set_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t old_stateCnt;
 } __Request__thread_get_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[224];
 } __Request__thread_set_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_suspend_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_resume_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_abort_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_abort_safely_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_depress_abort_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int which_port;
 } __Request__thread_get_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t special_port;

  NDR_record_t NDR;
  int which_port;
 } __Request__thread_set_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_flavor_t flavor;
  mach_msg_type_number_t thread_info_outCnt;
 } __Request__thread_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__thread_set_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
 } __Request__thread_get_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_port;

  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
 } __Request__thread_swap_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  boolean_t set_limit;
 } __Request__thread_policy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
 } __Request__thread_policy_set_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  boolean_t get_default;
 } __Request__thread_policy_get_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t reply;

 } __Request__thread_sample_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t trace_status;
 } __Request__etap_trace_thread_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;

 } __Request__thread_assign_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_assign_default_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__thread_get_assignment_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pset;

  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  mach_msg_type_number_t limitCnt;
  integer_t limit[1];
 } __Request__thread_set_policy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_selector_t which;
 } __Request__thread_get_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;

 } __Request__thread_set_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_voucher;
  mach_msg_port_descriptor_t old_voucher;

 } __Request__thread_swap_mach_voucher_t __attribute__((unused));

#pragma pack()







union __RequestUnion__thread_act_subsystem {
 __Request__thread_terminate_t Request_thread_terminate;
 __Request__act_get_state_t Request_act_get_state;
 __Request__act_set_state_t Request_act_set_state;
 __Request__thread_get_state_t Request_thread_get_state;
 __Request__thread_set_state_t Request_thread_set_state;
 __Request__thread_suspend_t Request_thread_suspend;
 __Request__thread_resume_t Request_thread_resume;
 __Request__thread_abort_t Request_thread_abort;
 __Request__thread_abort_safely_t Request_thread_abort_safely;
 __Request__thread_depress_abort_t Request_thread_depress_abort;
 __Request__thread_get_special_port_t Request_thread_get_special_port;
 __Request__thread_set_special_port_t Request_thread_set_special_port;
 __Request__thread_info_t Request_thread_info;
 __Request__thread_set_exception_ports_t Request_thread_set_exception_ports;
 __Request__thread_get_exception_ports_t Request_thread_get_exception_ports;
 __Request__thread_swap_exception_ports_t Request_thread_swap_exception_ports;
 __Request__thread_policy_t Request_thread_policy;
 __Request__thread_policy_set_t Request_thread_policy_set;
 __Request__thread_policy_get_t Request_thread_policy_get;
 __Request__thread_sample_t Request_thread_sample;
 __Request__etap_trace_thread_t Request_etap_trace_thread;
 __Request__thread_assign_t Request_thread_assign;
 __Request__thread_assign_default_t Request_thread_assign_default;
 __Request__thread_get_assignment_t Request_thread_get_assignment;
 __Request__thread_set_policy_t Request_thread_set_policy;
 __Request__thread_get_mach_voucher_t Request_thread_get_mach_voucher;
 __Request__thread_set_mach_voucher_t Request_thread_set_mach_voucher;
 __Request__thread_swap_mach_voucher_t Request_thread_swap_mach_voucher;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_terminate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[224];
 } __Reply__act_get_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__act_set_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[224];
 } __Reply__thread_get_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_set_state_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_suspend_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_resume_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_abort_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_abort_safely_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_depress_abort_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t special_port;

 } __Reply__thread_get_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_set_special_port_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[32];
 } __Reply__thread_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_set_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlers[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__thread_get_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_handlers[32];

  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
 } __Reply__thread_swap_exception_ports_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_policy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_policy_set_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
  boolean_t get_default;
 } __Reply__thread_policy_get_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_sample_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__etap_trace_thread_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_assign_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_assign_default_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t assigned_set;

 } __Reply__thread_get_assignment_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_set_policy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;

 } __Reply__thread_get_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__thread_set_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_voucher;

 } __Reply__thread_swap_mach_voucher_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__thread_act_subsystem {
 __Reply__thread_terminate_t Reply_thread_terminate;
 __Reply__act_get_state_t Reply_act_get_state;
 __Reply__act_set_state_t Reply_act_set_state;
 __Reply__thread_get_state_t Reply_thread_get_state;
 __Reply__thread_set_state_t Reply_thread_set_state;
 __Reply__thread_suspend_t Reply_thread_suspend;
 __Reply__thread_resume_t Reply_thread_resume;
 __Reply__thread_abort_t Reply_thread_abort;
 __Reply__thread_abort_safely_t Reply_thread_abort_safely;
 __Reply__thread_depress_abort_t Reply_thread_depress_abort;
 __Reply__thread_get_special_port_t Reply_thread_get_special_port;
 __Reply__thread_set_special_port_t Reply_thread_set_special_port;
 __Reply__thread_info_t Reply_thread_info;
 __Reply__thread_set_exception_ports_t Reply_thread_set_exception_ports;
 __Reply__thread_get_exception_ports_t Reply_thread_get_exception_ports;
 __Reply__thread_swap_exception_ports_t Reply_thread_swap_exception_ports;
 __Reply__thread_policy_t Reply_thread_policy;
 __Reply__thread_policy_set_t Reply_thread_policy_set;
 __Reply__thread_policy_get_t Reply_thread_policy_get;
 __Reply__thread_sample_t Reply_thread_sample;
 __Reply__etap_trace_thread_t Reply_etap_trace_thread;
 __Reply__thread_assign_t Reply_thread_assign;
 __Reply__thread_assign_default_t Reply_thread_assign_default;
 __Reply__thread_get_assignment_t Reply_thread_get_assignment;
 __Reply__thread_set_policy_t Reply_thread_set_policy;
 __Reply__thread_get_mach_voucher_t Reply_thread_get_mach_voucher;
 __Reply__thread_set_mach_voucher_t Reply_thread_set_mach_voucher;
 __Reply__thread_swap_mach_voucher_t Reply_thread_swap_mach_voucher;
};
# 51 "/usr/include/mach/mach_interface.h" 2 3 4
# 1 "/usr/include/mach/vm_map.h" 1 3 4
# 73 "/usr/include/mach/vm_map.h" 3 4
extern

kern_return_t vm_region
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t *size,
 vm_region_flavor_t flavor,
 vm_region_info_t info,
 mach_msg_type_number_t *infoCnt,
 mach_port_t *object_name
);





extern

kern_return_t vm_allocate
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t size,
 int flags
);





extern

kern_return_t vm_deallocate
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size
);





extern

kern_return_t vm_protect
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 boolean_t set_maximum,
 vm_prot_t new_protection
);





extern

kern_return_t vm_inherit
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_inherit_t new_inheritance
);





extern

kern_return_t vm_read
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_offset_t *data,
 mach_msg_type_number_t *dataCnt
);





extern

kern_return_t vm_read_list
(
 vm_map_t target_task,
 vm_read_entry_t data_list,
 natural_t count
);





extern

kern_return_t vm_write
(
 vm_map_t target_task,
 vm_address_t address,
 vm_offset_t data,
 mach_msg_type_number_t dataCnt
);





extern

kern_return_t vm_copy
(
 vm_map_t target_task,
 vm_address_t source_address,
 vm_size_t size,
 vm_address_t dest_address
);





extern

kern_return_t vm_read_overwrite
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_address_t data,
 vm_size_t *outsize
);





extern

kern_return_t vm_msync
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_sync_t sync_flags
);





extern

kern_return_t vm_behavior_set
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_behavior_t new_behavior
);





extern

kern_return_t vm_map
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t size,
 vm_address_t mask,
 int flags,
 mem_entry_name_port_t object,
 vm_offset_t offset,
 boolean_t copy,
 vm_prot_t cur_protection,
 vm_prot_t max_protection,
 vm_inherit_t inheritance
);





extern

kern_return_t vm_machine_attribute
(
 vm_map_t target_task,
 vm_address_t address,
 vm_size_t size,
 vm_machine_attribute_t attribute,
 vm_machine_attribute_val_t *value
);





extern

kern_return_t vm_remap
(
 vm_map_t target_task,
 vm_address_t *target_address,
 vm_size_t size,
 vm_address_t mask,
 int flags,
 vm_map_t src_task,
 vm_address_t src_address,
 boolean_t copy,
 vm_prot_t *cur_protection,
 vm_prot_t *max_protection,
 vm_inherit_t inheritance
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_wire
(
 vm_map_t target_task,
 boolean_t must_wire
);





extern

kern_return_t mach_make_memory_entry
(
 vm_map_t target_task,
 vm_size_t *size,
 vm_offset_t offset,
 vm_prot_t permission,
 mem_entry_name_port_t *object_handle,
 mem_entry_name_port_t parent_entry
);





extern

kern_return_t vm_map_page_query
(
 vm_map_t target_map,
 vm_offset_t offset,
 integer_t *disposition,
 integer_t *ref_count
);





extern

kern_return_t mach_vm_region_info
(
 vm_map_t task,
 vm_address_t address,
 vm_info_region_t *region,
 vm_info_object_array_t *objects,
 mach_msg_type_number_t *objectsCnt
);





extern

kern_return_t vm_mapped_pages_info
(
 vm_map_t task,
 page_address_array_t *pages,
 mach_msg_type_number_t *pagesCnt
);





extern

kern_return_t vm_region_recurse
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t *size,
 natural_t *nesting_depth,
 vm_region_recurse_info_t info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t vm_region_recurse_64
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t *size,
 natural_t *nesting_depth,
 vm_region_recurse_info_t info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t mach_vm_region_info_64
(
 vm_map_t task,
 vm_address_t address,
 vm_info_region_64_t *region,
 vm_info_object_array_t *objects,
 mach_msg_type_number_t *objectsCnt
);





extern

kern_return_t vm_region_64
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t *size,
 vm_region_flavor_t flavor,
 vm_region_info_t info,
 mach_msg_type_number_t *infoCnt,
 mach_port_t *object_name
);





extern

kern_return_t mach_make_memory_entry_64
(
 vm_map_t target_task,
 memory_object_size_t *size,
 memory_object_offset_t offset,
 vm_prot_t permission,
 mach_port_t *object_handle,
 mem_entry_name_port_t parent_entry
);





extern

kern_return_t vm_map_64
(
 vm_map_t target_task,
 vm_address_t *address,
 vm_size_t size,
 vm_address_t mask,
 int flags,
 mem_entry_name_port_t object,
 memory_object_offset_t offset,
 boolean_t copy,
 vm_prot_t cur_protection,
 vm_prot_t max_protection,
 vm_inherit_t inheritance
);





extern

kern_return_t vm_purgable_control
(
 vm_map_t target_task,
 vm_address_t address,
 vm_purgable_t control,
 int *state
);
# 504 "/usr/include/mach/vm_map.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
 } __Request__vm_region_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  int flags;
 } __Request__vm_allocate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
 } __Request__vm_deallocate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  boolean_t set_maximum;
  vm_prot_t new_protection;
 } __Request__vm_protect_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_inherit_t new_inheritance;
 } __Request__vm_inherit_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
 } __Request__vm_read_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_read_entry_t data_list;
  natural_t count;
 } __Request__vm_read_list_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;

  NDR_record_t NDR;
  vm_address_t address;
  mach_msg_type_number_t dataCnt;
 } __Request__vm_write_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t source_address;
  vm_size_t size;
  vm_address_t dest_address;
 } __Request__vm_copy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_address_t data;
 } __Request__vm_read_overwrite_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_sync_t sync_flags;
 } __Request__vm_msync_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_behavior_t new_behavior;
 } __Request__vm_behavior_set_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_address_t mask;
  int flags;
  vm_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
 } __Request__vm_map_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_machine_attribute_t attribute;
  vm_machine_attribute_val_t value;
 } __Request__vm_machine_attribute_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t src_task;

  NDR_record_t NDR;
  vm_address_t target_address;
  vm_size_t size;
  vm_address_t mask;
  int flags;
  vm_address_t src_address;
  boolean_t copy;
  vm_inherit_t inheritance;
 } __Request__vm_remap_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t must_wire;
 } __Request__task_wire_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t parent_entry;

  NDR_record_t NDR;
  vm_size_t size;
  vm_offset_t offset;
  vm_prot_t permission;
 } __Request__mach_make_memory_entry_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_offset_t offset;
 } __Request__vm_map_page_query_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
 } __Request__mach_vm_region_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__vm_mapped_pages_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
 } __Request__vm_region_recurse_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
 } __Request__vm_region_recurse_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
 } __Request__mach_vm_region_info_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
 } __Request__vm_region_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t parent_entry;

  NDR_record_t NDR;
  memory_object_size_t size;
  memory_object_offset_t offset;
  vm_prot_t permission;
 } __Request__mach_make_memory_entry_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  vm_address_t mask;
  int flags;
  memory_object_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
 } __Request__vm_map_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t address;
  vm_purgable_t control;
  int state;
 } __Request__vm_purgable_control_t __attribute__((unused));

#pragma pack()







union __RequestUnion__vm_map_subsystem {
 __Request__vm_region_t Request_vm_region;
 __Request__vm_allocate_t Request_vm_allocate;
 __Request__vm_deallocate_t Request_vm_deallocate;
 __Request__vm_protect_t Request_vm_protect;
 __Request__vm_inherit_t Request_vm_inherit;
 __Request__vm_read_t Request_vm_read;
 __Request__vm_read_list_t Request_vm_read_list;
 __Request__vm_write_t Request_vm_write;
 __Request__vm_copy_t Request_vm_copy;
 __Request__vm_read_overwrite_t Request_vm_read_overwrite;
 __Request__vm_msync_t Request_vm_msync;
 __Request__vm_behavior_set_t Request_vm_behavior_set;
 __Request__vm_map_t Request_vm_map;
 __Request__vm_machine_attribute_t Request_vm_machine_attribute;
 __Request__vm_remap_t Request_vm_remap;
 __Request__task_wire_t Request_task_wire;
 __Request__mach_make_memory_entry_t Request_mach_make_memory_entry;
 __Request__vm_map_page_query_t Request_vm_map_page_query;
 __Request__mach_vm_region_info_t Request_mach_vm_region_info;
 __Request__vm_mapped_pages_info_t Request_vm_mapped_pages_info;
 __Request__vm_region_recurse_t Request_vm_region_recurse;
 __Request__vm_region_recurse_64_t Request_vm_region_recurse_64;
 __Request__mach_vm_region_info_64_t Request_mach_vm_region_info_64;
 __Request__vm_region_64_t Request_vm_region_64;
 __Request__mach_make_memory_entry_64_t Request_mach_make_memory_entry_64;
 __Request__vm_map_64_t Request_vm_map_64;
 __Request__vm_purgable_control_t Request_vm_purgable_control;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_name;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[10];
 } __Reply__vm_region_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
 } __Reply__vm_allocate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_deallocate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_protect_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_inherit_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;

  NDR_record_t NDR;
  mach_msg_type_number_t dataCnt;
 } __Reply__vm_read_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_read_entry_t data_list;
 } __Reply__vm_read_list_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_write_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_copy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_size_t outsize;
 } __Reply__vm_read_overwrite_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_msync_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__vm_behavior_set_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
 } __Reply__vm_map_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_machine_attribute_val_t value;
 } __Reply__vm_machine_attribute_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t target_address;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
 } __Reply__vm_remap_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_wire_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_handle;

  NDR_record_t NDR;
  vm_size_t size;
 } __Reply__mach_make_memory_entry_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  integer_t disposition;
  integer_t ref_count;
 } __Reply__vm_map_page_query_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t objects;

  NDR_record_t NDR;
  vm_info_region_t region;
  mach_msg_type_number_t objectsCnt;
 } __Reply__mach_vm_region_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t pages;

  NDR_record_t NDR;
  mach_msg_type_number_t pagesCnt;
 } __Reply__vm_mapped_pages_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
  vm_size_t size;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  int info[19];
 } __Reply__vm_region_recurse_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
  vm_size_t size;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  int info[19];
 } __Reply__vm_region_recurse_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t objects;

  NDR_record_t NDR;
  vm_info_region_64_t region;
  mach_msg_type_number_t objectsCnt;
 } __Reply__mach_vm_region_info_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_name;

  NDR_record_t NDR;
  vm_address_t address;
  vm_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[10];
 } __Reply__vm_region_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_handle;

  NDR_record_t NDR;
  memory_object_size_t size;
 } __Reply__mach_make_memory_entry_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
 } __Reply__vm_map_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int state;
 } __Reply__vm_purgable_control_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__vm_map_subsystem {
 __Reply__vm_region_t Reply_vm_region;
 __Reply__vm_allocate_t Reply_vm_allocate;
 __Reply__vm_deallocate_t Reply_vm_deallocate;
 __Reply__vm_protect_t Reply_vm_protect;
 __Reply__vm_inherit_t Reply_vm_inherit;
 __Reply__vm_read_t Reply_vm_read;
 __Reply__vm_read_list_t Reply_vm_read_list;
 __Reply__vm_write_t Reply_vm_write;
 __Reply__vm_copy_t Reply_vm_copy;
 __Reply__vm_read_overwrite_t Reply_vm_read_overwrite;
 __Reply__vm_msync_t Reply_vm_msync;
 __Reply__vm_behavior_set_t Reply_vm_behavior_set;
 __Reply__vm_map_t Reply_vm_map;
 __Reply__vm_machine_attribute_t Reply_vm_machine_attribute;
 __Reply__vm_remap_t Reply_vm_remap;
 __Reply__task_wire_t Reply_task_wire;
 __Reply__mach_make_memory_entry_t Reply_mach_make_memory_entry;
 __Reply__vm_map_page_query_t Reply_vm_map_page_query;
 __Reply__mach_vm_region_info_t Reply_mach_vm_region_info;
 __Reply__vm_mapped_pages_info_t Reply_vm_mapped_pages_info;
 __Reply__vm_region_recurse_t Reply_vm_region_recurse;
 __Reply__vm_region_recurse_64_t Reply_vm_region_recurse_64;
 __Reply__mach_vm_region_info_64_t Reply_mach_vm_region_info_64;
 __Reply__vm_region_64_t Reply_vm_region_64;
 __Reply__mach_make_memory_entry_64_t Reply_mach_make_memory_entry_64;
 __Reply__vm_map_64_t Reply_vm_map_64;
 __Reply__vm_purgable_control_t Reply_vm_purgable_control;
};
# 52 "/usr/include/mach/mach_interface.h" 2 3 4
# 68 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/mach_port.h" 1 3 4
# 73 "/usr/include/mach/mach_port.h" 3 4
extern

kern_return_t mach_port_names
(
 ipc_space_t task,
 mach_port_name_array_t *names,
 mach_msg_type_number_t *namesCnt,
 mach_port_type_array_t *types,
 mach_msg_type_number_t *typesCnt
);





extern

kern_return_t mach_port_type
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_type_t *ptype
);





extern

kern_return_t mach_port_rename
(
 ipc_space_t task,
 mach_port_name_t old_name,
 mach_port_name_t new_name
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t mach_port_allocate_name
(
 ipc_space_t task,
 mach_port_right_t right,
 mach_port_name_t name
);





extern

kern_return_t mach_port_allocate
(
 ipc_space_t task,
 mach_port_right_t right,
 mach_port_name_t *name
);





extern

kern_return_t mach_port_destroy
(
 ipc_space_t task,
 mach_port_name_t name
);





extern

kern_return_t mach_port_deallocate
(
 ipc_space_t task,
 mach_port_name_t name
);





extern

kern_return_t mach_port_get_refs
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_right_t right,
 mach_port_urefs_t *refs
);





extern

kern_return_t mach_port_mod_refs
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_right_t right,
 mach_port_delta_t delta
);





extern

kern_return_t mach_port_peek
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_msg_trailer_type_t trailer_type,
 mach_port_seqno_t *request_seqnop,
 mach_msg_size_t *msg_sizep,
 mach_msg_id_t *msg_idp,
 mach_msg_trailer_info_t trailer_infop,
 mach_msg_type_number_t *trailer_infopCnt
);





extern

kern_return_t mach_port_set_mscount
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_mscount_t mscount
);





extern

kern_return_t mach_port_get_set_status
(
 ipc_space_inspect_t task,
 mach_port_name_t name,
 mach_port_name_array_t *members,
 mach_msg_type_number_t *membersCnt
);





extern

kern_return_t mach_port_move_member
(
 ipc_space_t task,
 mach_port_name_t member,
 mach_port_name_t after
);





extern

kern_return_t mach_port_request_notification
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_msg_id_t msgid,
 mach_port_mscount_t sync,
 mach_port_t notify,
 mach_msg_type_name_t notifyPoly,
 mach_port_t *previous
);





extern

kern_return_t mach_port_insert_right
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_t poly,
 mach_msg_type_name_t polyPoly
);





extern

kern_return_t mach_port_extract_right
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_msg_type_name_t msgt_name,
 mach_port_t *poly,
 mach_msg_type_name_t *polyPoly
);





extern

kern_return_t mach_port_set_seqno
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_seqno_t seqno
);





extern

kern_return_t mach_port_get_attributes
(
 ipc_space_inspect_t task,
 mach_port_name_t name,
 mach_port_flavor_t flavor,
 mach_port_info_t port_info_out,
 mach_msg_type_number_t *port_info_outCnt
);





extern

kern_return_t mach_port_set_attributes
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_flavor_t flavor,
 mach_port_info_t port_info,
 mach_msg_type_number_t port_infoCnt
);





extern

kern_return_t mach_port_allocate_qos
(
 ipc_space_t task,
 mach_port_right_t right,
 mach_port_qos_t *qos,
 mach_port_name_t *name
);





extern

kern_return_t mach_port_allocate_full
(
 ipc_space_t task,
 mach_port_right_t right,
 mach_port_t proto,
 mach_port_qos_t *qos,
 mach_port_name_t *name
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t task_set_port_space
(
 ipc_space_t task,
 int table_entries
);





extern

kern_return_t mach_port_get_srights
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_rights_t *srights
);





extern

kern_return_t mach_port_space_info
(
 ipc_space_inspect_t task,
 ipc_info_space_t *space_info,
 ipc_info_name_array_t *table_info,
 mach_msg_type_number_t *table_infoCnt,
 ipc_info_tree_name_array_t *tree_info,
 mach_msg_type_number_t *tree_infoCnt
);





extern

kern_return_t mach_port_dnrequest_info
(
 ipc_space_t task,
 mach_port_name_t name,
 unsigned *dnr_total,
 unsigned *dnr_used
);





extern

kern_return_t mach_port_kernel_object
(
 ipc_space_inspect_t task,
 mach_port_name_t name,
 unsigned *object_type,
 unsigned *object_addr
);





extern

kern_return_t mach_port_insert_member
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_name_t pset
);





extern

kern_return_t mach_port_extract_member
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_name_t pset
);





extern

kern_return_t mach_port_get_context
(
 ipc_space_inspect_t task,
 mach_port_name_t name,
 mach_port_context_t *context
);





extern

kern_return_t mach_port_set_context
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_context_t context
);





extern

kern_return_t mach_port_kobject
(
 ipc_space_inspect_t task,
 mach_port_name_t name,
 natural_t *object_type,
 mach_vm_address_t *object_addr
);





extern

kern_return_t mach_port_construct
(
 ipc_space_t task,
 mach_port_options_ptr_t options,
 mach_port_context_t context,
 mach_port_name_t *name
);





extern

kern_return_t mach_port_destruct
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_delta_t srdelta,
 mach_port_context_t guard
);





extern

kern_return_t mach_port_guard
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_context_t guard,
 boolean_t strict
);





extern

kern_return_t mach_port_unguard
(
 ipc_space_t task,
 mach_port_name_t name,
 mach_port_context_t guard
);





extern

kern_return_t mach_port_space_basic_info
(
 ipc_space_inspect_t task,
 ipc_info_space_basic_t *basic_info
);
# 589 "/usr/include/mach/mach_port.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__mach_port_names_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_type_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t old_name;
  mach_port_name_t new_name;
 } __Request__mach_port_rename_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_name_t name;
 } __Request__mach_port_allocate_name_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
 } __Request__mach_port_allocate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_destroy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_deallocate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_right_t right;
 } __Request__mach_port_get_refs_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_right_t right;
  mach_port_delta_t delta;
 } __Request__mach_port_mod_refs_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_type_t trailer_type;
  mach_port_seqno_t request_seqnop;
  mach_msg_type_number_t trailer_infopCnt;
 } __Request__mach_port_peek_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_mscount_t mscount;
 } __Request__mach_port_set_mscount_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_get_set_status_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t member;
  mach_port_name_t after;
 } __Request__mach_port_move_member_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t notify;

  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_id_t msgid;
  mach_port_mscount_t sync;
 } __Request__mach_port_request_notification_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t poly;

  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_insert_right_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_type_name_t msgt_name;
 } __Request__mach_port_extract_right_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_seqno_t seqno;
 } __Request__mach_port_set_seqno_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_flavor_t flavor;
  mach_msg_type_number_t port_info_outCnt;
 } __Request__mach_port_get_attributes_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_flavor_t flavor;
  mach_msg_type_number_t port_infoCnt;
  integer_t port_info[17];
 } __Request__mach_port_set_attributes_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_qos_t qos;
 } __Request__mach_port_allocate_qos_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t proto;

  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_qos_t qos;
  mach_port_name_t name;
 } __Request__mach_port_allocate_full_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int table_entries;
 } __Request__task_set_port_space_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_get_srights_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__mach_port_space_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_dnrequest_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_kernel_object_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_name_t pset;
 } __Request__mach_port_insert_member_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_name_t pset;
 } __Request__mach_port_extract_member_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_get_context_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_context_t context;
 } __Request__mach_port_set_context_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
 } __Request__mach_port_kobject_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t options;

  NDR_record_t NDR;
  mach_port_context_t context;
 } __Request__mach_port_construct_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_delta_t srdelta;
  mach_port_context_t guard;
 } __Request__mach_port_destruct_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_context_t guard;
  boolean_t strict;
 } __Request__mach_port_guard_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_context_t guard;
 } __Request__mach_port_unguard_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__mach_port_space_basic_info_t __attribute__((unused));

#pragma pack()







union __RequestUnion__mach_port_subsystem {
 __Request__mach_port_names_t Request_mach_port_names;
 __Request__mach_port_type_t Request_mach_port_type;
 __Request__mach_port_rename_t Request_mach_port_rename;
 __Request__mach_port_allocate_name_t Request_mach_port_allocate_name;
 __Request__mach_port_allocate_t Request_mach_port_allocate;
 __Request__mach_port_destroy_t Request_mach_port_destroy;
 __Request__mach_port_deallocate_t Request_mach_port_deallocate;
 __Request__mach_port_get_refs_t Request_mach_port_get_refs;
 __Request__mach_port_mod_refs_t Request_mach_port_mod_refs;
 __Request__mach_port_peek_t Request_mach_port_peek;
 __Request__mach_port_set_mscount_t Request_mach_port_set_mscount;
 __Request__mach_port_get_set_status_t Request_mach_port_get_set_status;
 __Request__mach_port_move_member_t Request_mach_port_move_member;
 __Request__mach_port_request_notification_t Request_mach_port_request_notification;
 __Request__mach_port_insert_right_t Request_mach_port_insert_right;
 __Request__mach_port_extract_right_t Request_mach_port_extract_right;
 __Request__mach_port_set_seqno_t Request_mach_port_set_seqno;
 __Request__mach_port_get_attributes_t Request_mach_port_get_attributes;
 __Request__mach_port_set_attributes_t Request_mach_port_set_attributes;
 __Request__mach_port_allocate_qos_t Request_mach_port_allocate_qos;
 __Request__mach_port_allocate_full_t Request_mach_port_allocate_full;
 __Request__task_set_port_space_t Request_task_set_port_space;
 __Request__mach_port_get_srights_t Request_mach_port_get_srights;
 __Request__mach_port_space_info_t Request_mach_port_space_info;
 __Request__mach_port_dnrequest_info_t Request_mach_port_dnrequest_info;
 __Request__mach_port_kernel_object_t Request_mach_port_kernel_object;
 __Request__mach_port_insert_member_t Request_mach_port_insert_member;
 __Request__mach_port_extract_member_t Request_mach_port_extract_member;
 __Request__mach_port_get_context_t Request_mach_port_get_context;
 __Request__mach_port_set_context_t Request_mach_port_set_context;
 __Request__mach_port_kobject_t Request_mach_port_kobject;
 __Request__mach_port_construct_t Request_mach_port_construct;
 __Request__mach_port_destruct_t Request_mach_port_destruct;
 __Request__mach_port_guard_t Request_mach_port_guard;
 __Request__mach_port_unguard_t Request_mach_port_unguard;
 __Request__mach_port_space_basic_info_t Request_mach_port_space_basic_info;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t names;
  mach_msg_ool_descriptor_t types;

  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t typesCnt;
 } __Reply__mach_port_names_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_type_t ptype;
 } __Reply__mach_port_type_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_rename_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_allocate_name_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_name_t name;
 } __Reply__mach_port_allocate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_destroy_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_deallocate_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_urefs_t refs;
 } __Reply__mach_port_get_refs_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_mod_refs_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_seqno_t request_seqnop;
  mach_msg_size_t msg_sizep;
  mach_msg_id_t msg_idp;
  mach_msg_type_number_t trailer_infopCnt;
  char trailer_infop[68];
 } __Reply__mach_port_peek_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_set_mscount_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t members;

  NDR_record_t NDR;
  mach_msg_type_number_t membersCnt;
 } __Reply__mach_port_get_set_status_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_move_member_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t previous;

 } __Reply__mach_port_request_notification_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_insert_right_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t poly;

 } __Reply__mach_port_extract_right_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_set_seqno_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t port_info_outCnt;
  integer_t port_info_out[17];
 } __Reply__mach_port_get_attributes_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_set_attributes_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_qos_t qos;
  mach_port_name_t name;
 } __Reply__mach_port_allocate_qos_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_qos_t qos;
  mach_port_name_t name;
 } __Reply__mach_port_allocate_full_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__task_set_port_space_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_rights_t srights;
 } __Reply__mach_port_get_srights_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t table_info;
  mach_msg_ool_descriptor_t tree_info;

  NDR_record_t NDR;
  ipc_info_space_t space_info;
  mach_msg_type_number_t table_infoCnt;
  mach_msg_type_number_t tree_infoCnt;
 } __Reply__mach_port_space_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned dnr_total;
  unsigned dnr_used;
 } __Reply__mach_port_dnrequest_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned object_type;
  unsigned object_addr;
 } __Reply__mach_port_kernel_object_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_insert_member_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_extract_member_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_context_t context;
 } __Reply__mach_port_get_context_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_set_context_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  natural_t object_type;
  mach_vm_address_t object_addr;
 } __Reply__mach_port_kobject_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_name_t name;
 } __Reply__mach_port_construct_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_destruct_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_guard_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__mach_port_unguard_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  ipc_info_space_basic_t basic_info;
 } __Reply__mach_port_space_basic_info_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__mach_port_subsystem {
 __Reply__mach_port_names_t Reply_mach_port_names;
 __Reply__mach_port_type_t Reply_mach_port_type;
 __Reply__mach_port_rename_t Reply_mach_port_rename;
 __Reply__mach_port_allocate_name_t Reply_mach_port_allocate_name;
 __Reply__mach_port_allocate_t Reply_mach_port_allocate;
 __Reply__mach_port_destroy_t Reply_mach_port_destroy;
 __Reply__mach_port_deallocate_t Reply_mach_port_deallocate;
 __Reply__mach_port_get_refs_t Reply_mach_port_get_refs;
 __Reply__mach_port_mod_refs_t Reply_mach_port_mod_refs;
 __Reply__mach_port_peek_t Reply_mach_port_peek;
 __Reply__mach_port_set_mscount_t Reply_mach_port_set_mscount;
 __Reply__mach_port_get_set_status_t Reply_mach_port_get_set_status;
 __Reply__mach_port_move_member_t Reply_mach_port_move_member;
 __Reply__mach_port_request_notification_t Reply_mach_port_request_notification;
 __Reply__mach_port_insert_right_t Reply_mach_port_insert_right;
 __Reply__mach_port_extract_right_t Reply_mach_port_extract_right;
 __Reply__mach_port_set_seqno_t Reply_mach_port_set_seqno;
 __Reply__mach_port_get_attributes_t Reply_mach_port_get_attributes;
 __Reply__mach_port_set_attributes_t Reply_mach_port_set_attributes;
 __Reply__mach_port_allocate_qos_t Reply_mach_port_allocate_qos;
 __Reply__mach_port_allocate_full_t Reply_mach_port_allocate_full;
 __Reply__task_set_port_space_t Reply_task_set_port_space;
 __Reply__mach_port_get_srights_t Reply_mach_port_get_srights;
 __Reply__mach_port_space_info_t Reply_mach_port_space_info;
 __Reply__mach_port_dnrequest_info_t Reply_mach_port_dnrequest_info;
 __Reply__mach_port_kernel_object_t Reply_mach_port_kernel_object;
 __Reply__mach_port_insert_member_t Reply_mach_port_insert_member;
 __Reply__mach_port_extract_member_t Reply_mach_port_extract_member;
 __Reply__mach_port_get_context_t Reply_mach_port_get_context;
 __Reply__mach_port_set_context_t Reply_mach_port_set_context;
 __Reply__mach_port_kobject_t Reply_mach_port_kobject;
 __Reply__mach_port_construct_t Reply_mach_port_construct;
 __Reply__mach_port_destruct_t Reply_mach_port_destruct;
 __Reply__mach_port_guard_t Reply_mach_port_guard;
 __Reply__mach_port_unguard_t Reply_mach_port_unguard;
 __Reply__mach_port_space_basic_info_t Reply_mach_port_space_basic_info;
};
# 69 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/mach_init.h" 1 3 4
# 62 "/usr/include/mach/mach_init.h" 3 4
# 1 "/usr/include/mach/vm_page_size.h" 1 3 4
# 42 "/usr/include/mach/vm_page_size.h" 3 4
extern vm_size_t vm_page_size;
extern vm_size_t vm_page_mask;
extern int vm_page_shift;
# 59 "/usr/include/mach/vm_page_size.h" 3 4
extern vm_size_t vm_kernel_page_size __attribute__((availability(macosx,introduced=10.9)));
extern vm_size_t vm_kernel_page_mask __attribute__((availability(macosx,introduced=10.9)));
extern int vm_kernel_page_shift __attribute__((availability(macosx,introduced=10.9)));
# 63 "/usr/include/mach/mach_init.h" 2 3 4
# 72 "/usr/include/mach/mach_init.h" 3 4
extern mach_port_t mach_host_self(void);
extern mach_port_t mach_thread_self(void);
extern kern_return_t host_page_size(host_t, vm_size_t *);

extern mach_port_t mach_task_self_;





# 1 "/usr/include/mach/mach_traps.h" 1 3 4
# 86 "/usr/include/mach/mach_traps.h" 3 4
extern kern_return_t clock_sleep_trap(
    mach_port_name_t clock_name,
    sleep_type_t sleep_type,
    int sleep_sec,
    int sleep_nsec,
    mach_timespec_t *wakeup_time);

extern kern_return_t _kernelrpc_mach_vm_allocate_trap(
    mach_port_name_t target,
    mach_vm_offset_t *addr,
    mach_vm_size_t size,
    int flags);

extern kern_return_t _kernelrpc_mach_vm_deallocate_trap(
    mach_port_name_t target,
    mach_vm_address_t address,
    mach_vm_size_t size
);

extern kern_return_t _kernelrpc_mach_vm_protect_trap(
    mach_port_name_t target,
    mach_vm_address_t address,
    mach_vm_size_t size,
    boolean_t set_maximum,
    vm_prot_t new_protection
);

extern kern_return_t _kernelrpc_mach_vm_map_trap(
    mach_port_name_t target,
    mach_vm_offset_t *address,
    mach_vm_size_t size,
    mach_vm_offset_t mask,
    int flags,
    vm_prot_t cur_protection
);

extern kern_return_t _kernelrpc_mach_vm_purgable_control_trap(
    mach_port_name_t target,
    mach_vm_offset_t address,
    vm_purgable_t control,
    int *state);

extern kern_return_t _kernelrpc_mach_port_allocate_trap(
    mach_port_name_t target,
    mach_port_right_t right,
    mach_port_name_t *name
);


extern kern_return_t _kernelrpc_mach_port_destroy_trap(
    mach_port_name_t target,
    mach_port_name_t name
);

extern kern_return_t _kernelrpc_mach_port_deallocate_trap(
    mach_port_name_t target,
    mach_port_name_t name
);

extern kern_return_t _kernelrpc_mach_port_mod_refs_trap(
    mach_port_name_t target,
    mach_port_name_t name,
    mach_port_right_t right,
    mach_port_delta_t delta
);

extern kern_return_t _kernelrpc_mach_port_move_member_trap(
    mach_port_name_t target,
    mach_port_name_t member,
    mach_port_name_t after
);

extern kern_return_t _kernelrpc_mach_port_insert_right_trap(
    mach_port_name_t target,
    mach_port_name_t name,
    mach_port_name_t poly,
    mach_msg_type_name_t polyPoly
);

extern kern_return_t _kernelrpc_mach_port_insert_member_trap(
    mach_port_name_t target,
    mach_port_name_t name,
    mach_port_name_t pset
);

extern kern_return_t _kernelrpc_mach_port_extract_member_trap(
    mach_port_name_t target,
    mach_port_name_t name,
    mach_port_name_t pset
);

extern kern_return_t _kernelrpc_mach_port_construct_trap(
    mach_port_name_t target,
    mach_port_options_t *options,
    uint64_t context,
    mach_port_name_t *name
);

extern kern_return_t _kernelrpc_mach_port_destruct_trap(
    mach_port_name_t target,
    mach_port_name_t name,
    mach_port_delta_t srdelta,
    uint64_t guard
);

extern kern_return_t _kernelrpc_mach_port_guard_trap(
    mach_port_name_t target,
    mach_port_name_t name,
    uint64_t guard,
    boolean_t strict
);

extern kern_return_t _kernelrpc_mach_port_unguard_trap(
    mach_port_name_t target,
    mach_port_name_t name,
    uint64_t guard
);

extern kern_return_t mach_generate_activity_id(
    mach_port_name_t target,
    int count,
    uint64_t *activity_id
);

extern kern_return_t macx_swapon(
    uint64_t filename,
    int flags,
    int size,
    int priority);

extern kern_return_t macx_swapoff(
    uint64_t filename,
    int flags);

extern kern_return_t macx_triggers(
    int hi_water,
    int low_water,
    int flags,
    mach_port_t alert_port);

extern kern_return_t macx_backing_store_suspend(
    boolean_t suspend);

extern kern_return_t macx_backing_store_recovery(
    int pid);

extern boolean_t swtch_pri(int pri);

extern boolean_t swtch(void);

extern kern_return_t thread_switch(
    mach_port_name_t thread_name,
    int option,
    mach_msg_timeout_t option_time);

extern mach_port_name_t task_self_trap(void);

extern kern_return_t host_create_mach_voucher_trap(
    mach_port_name_t host,
    mach_voucher_attr_raw_recipe_array_t recipes,
    int recipes_size,
    mach_port_name_t *voucher);

extern kern_return_t mach_voucher_extract_attr_recipe_trap(
    mach_port_name_t voucher_name,
    mach_voucher_attr_key_t key,
    mach_voucher_attr_raw_recipe_t recipe,
    mach_msg_type_number_t *recipe_size);





extern kern_return_t task_for_pid(
    mach_port_name_t target_tport,
    int pid,
    mach_port_name_t *t);

extern kern_return_t task_name_for_pid(
    mach_port_name_t target_tport,
    int pid,
    mach_port_name_t *tn);

extern kern_return_t pid_for_task(
    mach_port_name_t t,
    int *x);
# 82 "/usr/include/mach/mach_init.h" 2 3 4






extern mach_port_t bootstrap_port;
# 106 "/usr/include/mach/mach_init.h" 3 4
extern int (*vprintf_stderr_func)(const char *format, va_list ap);
# 70 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/mach_host.h" 1 3 4
# 75 "/usr/include/mach/mach_host.h" 3 4
extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t host_info
(
 host_t host,
 host_flavor_t flavor,
 host_info_t host_info_out,
 mach_msg_type_number_t *host_info_outCnt
);





extern

kern_return_t host_kernel_version
(
 host_t host,
 kernel_version_t kernel_version
);





extern

kern_return_t _host_page_size
(
 host_t host,
 vm_size_t *out_page_size
);





extern

kern_return_t mach_memory_object_memory_entry
(
 host_t host,
 boolean_t internal,
 vm_size_t size,
 vm_prot_t permission,
 memory_object_t pager,
 mach_port_t *entry_handle
);





extern

kern_return_t host_processor_info
(
 host_t host,
 processor_flavor_t flavor,
 natural_t *out_processor_count,
 processor_info_array_t *out_processor_info,
 mach_msg_type_number_t *out_processor_infoCnt
);





extern

kern_return_t host_get_io_master
(
 host_t host,
 io_master_t *io_master
);





extern

kern_return_t host_get_clock_service
(
 host_t host,
 clock_id_t clock_id,
 clock_serv_t *clock_serv
);





extern

kern_return_t kmod_get_info
(
 host_t host,
 kmod_args_t *modules,
 mach_msg_type_number_t *modulesCnt
);





extern

kern_return_t host_zone_info
(
 host_priv_t host,
 zone_name_array_t *names,
 mach_msg_type_number_t *namesCnt,
 zone_info_array_t *info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t host_virtual_physical_table_info
(
 host_t host,
 hash_info_bucket_array_t *info,
 mach_msg_type_number_t *infoCnt
);





extern

kern_return_t processor_set_default
(
 host_t host,
 processor_set_name_t *default_set
);





extern

kern_return_t processor_set_create
(
 host_t host,
 processor_set_t *new_set,
 processor_set_name_t *new_name
);





extern

kern_return_t mach_memory_object_memory_entry_64
(
 host_t host,
 boolean_t internal,
 memory_object_size_t size,
 vm_prot_t permission,
 memory_object_t pager,
 mach_port_t *entry_handle
);





extern

kern_return_t host_statistics
(
 host_t host_priv,
 host_flavor_t flavor,
 host_info_t host_info_out,
 mach_msg_type_number_t *host_info_outCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t host_request_notification
(
 host_t host,
 host_flavor_t notify_type,
 mach_port_t notify_port
);





extern

kern_return_t host_lockgroup_info
(
 host_t host,
 lockgroup_info_array_t *lockgroup_info,
 mach_msg_type_number_t *lockgroup_infoCnt
);





extern

kern_return_t host_statistics64
(
 host_t host_priv,
 host_flavor_t flavor,
 host_info64_t host_info64_out,
 mach_msg_type_number_t *host_info64_outCnt
);





extern

kern_return_t mach_zone_info
(
 host_priv_t host,
 mach_zone_name_array_t *names,
 mach_msg_type_number_t *namesCnt,
 mach_zone_info_array_t *info,
 mach_msg_type_number_t *infoCnt
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t host_create_mach_voucher
(
 host_t host,
 mach_voucher_attr_raw_recipe_array_t recipes,
 mach_msg_type_number_t recipesCnt,
 ipc_voucher_t *voucher
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t host_register_mach_voucher_attr_manager
(
 host_t host,
 mach_voucher_attr_manager_t attr_manager,
 mach_voucher_attr_value_handle_t default_value,
 mach_voucher_attr_key_t *new_key,
 ipc_voucher_attr_control_t *new_attr_control
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t host_register_well_known_mach_voucher_attr_manager
(
 host_t host,
 mach_voucher_attr_manager_t attr_manager,
 mach_voucher_attr_value_handle_t default_value,
 mach_voucher_attr_key_t key,
 ipc_voucher_attr_control_t *new_attr_control
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t host_set_atm_diagnostic_flag
(
 host_priv_t host_priv,
 uint32_t diagnostic_flag
);





extern

__attribute__((availability(watchos,unavailable)))
__attribute__((availability(tvos,unavailable)))
kern_return_t host_get_atm_diagnostic_flag
(
 host_t host,
 uint32_t *diagnostic_flag
);





extern

kern_return_t mach_memory_info
(
 host_priv_t host,
 mach_zone_name_array_t *names,
 mach_msg_type_number_t *namesCnt,
 mach_zone_info_array_t *info,
 mach_msg_type_number_t *infoCnt,
 mach_memory_info_array_t *memory_info,
 mach_msg_type_number_t *memory_infoCnt
);





extern

kern_return_t host_set_multiuser_config_flags
(
 host_priv_t host_priv,
 uint32_t multiuser_flags
);





extern

kern_return_t host_get_multiuser_config_flags
(
 host_t host,
 uint32_t *multiuser_flags
);





extern

kern_return_t host_check_multiuser_mode
(
 host_t host,
 uint32_t *multiuser_mode
);
# 470 "/usr/include/mach/mach_host.h" 3 4
#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
 } __Request__host_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_kernel_version_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request___host_page_size_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pager;

  NDR_record_t NDR;
  boolean_t internal;
  vm_size_t size;
  vm_prot_t permission;
 } __Request__mach_memory_object_memory_entry_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_flavor_t flavor;
 } __Request__host_processor_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_get_io_master_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_id_t clock_id;
 } __Request__host_get_clock_service_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__kmod_get_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_zone_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_virtual_physical_table_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_default_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__processor_set_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pager;

  NDR_record_t NDR;
  boolean_t internal;
  memory_object_size_t size;
  vm_prot_t permission;
 } __Request__mach_memory_object_memory_entry_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
 } __Request__host_statistics_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t notify_port;

  NDR_record_t NDR;
  host_flavor_t notify_type;
 } __Request__host_request_notification_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_lockgroup_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info64_outCnt;
 } __Request__host_statistics64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__mach_zone_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t recipesCnt;
  uint8_t recipes[5120];
 } __Request__host_create_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t attr_manager;

  NDR_record_t NDR;
  mach_voucher_attr_value_handle_t default_value;
 } __Request__host_register_mach_voucher_attr_manager_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t attr_manager;

  NDR_record_t NDR;
  mach_voucher_attr_value_handle_t default_value;
  mach_voucher_attr_key_t key;
 } __Request__host_register_well_known_mach_voucher_attr_manager_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t diagnostic_flag;
 } __Request__host_set_atm_diagnostic_flag_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_get_atm_diagnostic_flag_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__mach_memory_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t multiuser_flags;
 } __Request__host_set_multiuser_config_flags_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_get_multiuser_config_flags_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
 } __Request__host_check_multiuser_mode_t __attribute__((unused));

#pragma pack()







union __RequestUnion__mach_host_subsystem {
 __Request__host_info_t Request_host_info;
 __Request__host_kernel_version_t Request_host_kernel_version;
 __Request___host_page_size_t Request__host_page_size;
 __Request__mach_memory_object_memory_entry_t Request_mach_memory_object_memory_entry;
 __Request__host_processor_info_t Request_host_processor_info;
 __Request__host_get_io_master_t Request_host_get_io_master;
 __Request__host_get_clock_service_t Request_host_get_clock_service;
 __Request__kmod_get_info_t Request_kmod_get_info;
 __Request__host_zone_info_t Request_host_zone_info;
 __Request__host_virtual_physical_table_info_t Request_host_virtual_physical_table_info;
 __Request__processor_set_default_t Request_processor_set_default;
 __Request__processor_set_create_t Request_processor_set_create;
 __Request__mach_memory_object_memory_entry_64_t Request_mach_memory_object_memory_entry_64;
 __Request__host_statistics_t Request_host_statistics;
 __Request__host_request_notification_t Request_host_request_notification;
 __Request__host_lockgroup_info_t Request_host_lockgroup_info;
 __Request__host_statistics64_t Request_host_statistics64;
 __Request__mach_zone_info_t Request_mach_zone_info;
 __Request__host_create_mach_voucher_t Request_host_create_mach_voucher;
 __Request__host_register_mach_voucher_attr_manager_t Request_host_register_mach_voucher_attr_manager;
 __Request__host_register_well_known_mach_voucher_attr_manager_t Request_host_register_well_known_mach_voucher_attr_manager;
 __Request__host_set_atm_diagnostic_flag_t Request_host_set_atm_diagnostic_flag;
 __Request__host_get_atm_diagnostic_flag_t Request_host_get_atm_diagnostic_flag;
 __Request__mach_memory_info_t Request_mach_memory_info;
 __Request__host_set_multiuser_config_flags_t Request_host_set_multiuser_config_flags;
 __Request__host_get_multiuser_config_flags_t Request_host_get_multiuser_config_flags;
 __Request__host_check_multiuser_mode_t Request_host_check_multiuser_mode;
};







#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[68];
 } __Reply__host_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t kernel_versionOffset;
  mach_msg_type_number_t kernel_versionCnt;
  char kernel_version[512];
 } __Reply__host_kernel_version_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_size_t out_page_size;
 } __Reply___host_page_size_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t entry_handle;

 } __Reply__mach_memory_object_memory_entry_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t out_processor_info;

  NDR_record_t NDR;
  natural_t out_processor_count;
  mach_msg_type_number_t out_processor_infoCnt;
 } __Reply__host_processor_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t io_master;

 } __Reply__host_get_io_master_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t clock_serv;

 } __Reply__host_get_clock_service_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t modules;

  NDR_record_t NDR;
  mach_msg_type_number_t modulesCnt;
 } __Reply__kmod_get_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t names;
  mach_msg_ool_descriptor_t info;

  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t infoCnt;
 } __Reply__host_zone_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t info;

  NDR_record_t NDR;
  mach_msg_type_number_t infoCnt;
 } __Reply__host_virtual_physical_table_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t default_set;

 } __Reply__processor_set_default_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;
  mach_msg_port_descriptor_t new_name;

 } __Reply__processor_set_create_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t entry_handle;

 } __Reply__mach_memory_object_memory_entry_64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[68];
 } __Reply__host_statistics_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_request_notification_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t lockgroup_info;

  NDR_record_t NDR;
  mach_msg_type_number_t lockgroup_infoCnt;
 } __Reply__host_lockgroup_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info64_outCnt;
  integer_t host_info64_out[256];
 } __Reply__host_statistics64_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t names;
  mach_msg_ool_descriptor_t info;

  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t infoCnt;
 } __Reply__mach_zone_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;

 } __Reply__host_create_mach_voucher_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_attr_control;

  NDR_record_t NDR;
  mach_voucher_attr_key_t new_key;
 } __Reply__host_register_mach_voucher_attr_manager_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_attr_control;

 } __Reply__host_register_well_known_mach_voucher_attr_manager_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_set_atm_diagnostic_flag_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t diagnostic_flag;
 } __Reply__host_get_atm_diagnostic_flag_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;

  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t names;
  mach_msg_ool_descriptor_t info;
  mach_msg_ool_descriptor_t memory_info;

  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t infoCnt;
  mach_msg_type_number_t memory_infoCnt;
 } __Reply__mach_memory_info_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
 } __Reply__host_set_multiuser_config_flags_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t multiuser_flags;
 } __Reply__host_get_multiuser_config_flags_t __attribute__((unused));

#pragma pack()



#pragma pack(4)

 typedef struct {
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t multiuser_mode;
 } __Reply__host_check_multiuser_mode_t __attribute__((unused));

#pragma pack()







union __ReplyUnion__mach_host_subsystem {
 __Reply__host_info_t Reply_host_info;
 __Reply__host_kernel_version_t Reply_host_kernel_version;
 __Reply___host_page_size_t Reply__host_page_size;
 __Reply__mach_memory_object_memory_entry_t Reply_mach_memory_object_memory_entry;
 __Reply__host_processor_info_t Reply_host_processor_info;
 __Reply__host_get_io_master_t Reply_host_get_io_master;
 __Reply__host_get_clock_service_t Reply_host_get_clock_service;
 __Reply__kmod_get_info_t Reply_kmod_get_info;
 __Reply__host_zone_info_t Reply_host_zone_info;
 __Reply__host_virtual_physical_table_info_t Reply_host_virtual_physical_table_info;
 __Reply__processor_set_default_t Reply_processor_set_default;
 __Reply__processor_set_create_t Reply_processor_set_create;
 __Reply__mach_memory_object_memory_entry_64_t Reply_mach_memory_object_memory_entry_64;
 __Reply__host_statistics_t Reply_host_statistics;
 __Reply__host_request_notification_t Reply_host_request_notification;
 __Reply__host_lockgroup_info_t Reply_host_lockgroup_info;
 __Reply__host_statistics64_t Reply_host_statistics64;
 __Reply__mach_zone_info_t Reply_mach_zone_info;
 __Reply__host_create_mach_voucher_t Reply_host_create_mach_voucher;
 __Reply__host_register_mach_voucher_attr_manager_t Reply_host_register_mach_voucher_attr_manager;
 __Reply__host_register_well_known_mach_voucher_attr_manager_t Reply_host_register_well_known_mach_voucher_attr_manager;
 __Reply__host_set_atm_diagnostic_flag_t Reply_host_set_atm_diagnostic_flag;
 __Reply__host_get_atm_diagnostic_flag_t Reply_host_get_atm_diagnostic_flag;
 __Reply__mach_memory_info_t Reply_mach_memory_info;
 __Reply__host_set_multiuser_config_flags_t Reply_host_set_multiuser_config_flags;
 __Reply__host_get_multiuser_config_flags_t Reply_host_get_multiuser_config_flags;
 __Reply__host_check_multiuser_mode_t Reply_host_check_multiuser_mode;
};
# 71 "/usr/include/mach/mach.h" 2 3 4
# 1 "/usr/include/mach/thread_switch.h" 1 3 4
# 72 "/usr/include/mach/mach.h" 2 3 4

# 1 "/usr/include/mach/rpc.h" 1 3 4
# 46 "/usr/include/mach/rpc.h" 3 4
# 1 "/usr/include/mach/machine/rpc.h" 1 3 4
# 33 "/usr/include/mach/machine/rpc.h" 3 4
# 1 "/usr/include/mach/i386/rpc.h" 1 3 4
# 34 "/usr/include/mach/machine/rpc.h" 2 3 4
# 47 "/usr/include/mach/rpc.h" 2 3 4
# 59 "/usr/include/mach/rpc.h" 3 4
typedef unsigned int routine_arg_type;
typedef unsigned int routine_arg_offset;
typedef unsigned int routine_arg_size;




struct rpc_routine_arg_descriptor {
 routine_arg_type type;
        routine_arg_size size;
        routine_arg_size count;
 routine_arg_offset offset;
};
typedef struct rpc_routine_arg_descriptor *rpc_routine_arg_descriptor_t;

struct rpc_routine_descriptor {
 mig_impl_routine_t impl_routine;
 mig_stub_routine_t stub_routine;
 unsigned int argc;
 unsigned int descr_count;

 rpc_routine_arg_descriptor_t
    arg_descr;

 unsigned int max_reply_msg;
};
typedef struct rpc_routine_descriptor *rpc_routine_descriptor_t;




struct rpc_signature {
    struct rpc_routine_descriptor rd;
    struct rpc_routine_arg_descriptor rad[1];
};
# 115 "/usr/include/mach/rpc.h" 3 4
struct rpc_subsystem {
 void *reserved;

 mach_msg_id_t start;
 mach_msg_id_t end;
 unsigned int maxsize;
 vm_address_t base_addr;

 struct rpc_routine_descriptor
   routine[1
     ];

 struct rpc_routine_arg_descriptor
   arg_descriptor[1
     ];
};
typedef struct rpc_subsystem *rpc_subsystem_t;
# 74 "/usr/include/mach/mach.h" 2 3 4



# 1 "/usr/include/mach/mach_error.h" 1 3 4
# 65 "/usr/include/mach/mach_error.h" 3 4
# 1 "/usr/include/mach/error.h" 1 3 4
# 111 "/usr/include/mach/error.h" 3 4
typedef kern_return_t mach_error_t;
typedef mach_error_t (* mach_error_fn_t)( void );
# 66 "/usr/include/mach/mach_error.h" 2 3 4




char *mach_error_string(



 mach_error_t error_value
    );

void mach_error(



 const char *str,
 mach_error_t error_value
    );

char *mach_error_type(



 mach_error_t error_value
    );
# 78 "/usr/include/mach/mach.h" 2 3 4







extern void panic_init(mach_port_t);
extern void panic(const char *, ...);

extern void safe_gets(char *,
       char *,
       int);

extern void slot_name(cpu_type_t,
       cpu_subtype_t,
       char **,
       char **);

extern void mig_reply_setup(mach_msg_header_t *,
      mach_msg_header_t *);

__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
extern void mach_msg_destroy(mach_msg_header_t *);

__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
extern mach_msg_return_t mach_msg_receive(mach_msg_header_t *);

__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
extern mach_msg_return_t mach_msg_send(mach_msg_header_t *);

__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
extern mach_msg_return_t mach_msg_server_once(boolean_t (*)
           (mach_msg_header_t *,
            mach_msg_header_t *),
           mach_msg_size_t,
           mach_port_t,
           mach_msg_options_t);

__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
extern mach_msg_return_t mach_msg_server(boolean_t (*)
      (mach_msg_header_t *,
       mach_msg_header_t *),
      mach_msg_size_t,
      mach_port_t,
      mach_msg_options_t);

__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
extern mach_msg_return_t mach_msg_server_importance(boolean_t (*)
      (mach_msg_header_t *,
       mach_msg_header_t *),
      mach_msg_size_t,
      mach_port_t,
      mach_msg_options_t);



extern kern_return_t clock_get_res(mach_port_t,
          clock_res_t *);
extern kern_return_t clock_set_res(mach_port_t,
          clock_res_t);

extern kern_return_t clock_sleep(mach_port_t,
        int,
        mach_timespec_t,
        mach_timespec_t *);
# 157 "/usr/include/mach/mach.h" 3 4
typedef struct voucher_mach_msg_state_s *voucher_mach_msg_state_t;
# 185 "/usr/include/mach/mach.h" 3 4
extern boolean_t voucher_mach_msg_set(mach_msg_header_t *msg);
# 204 "/usr/include/mach/mach.h" 3 4
extern void voucher_mach_msg_clear(mach_msg_header_t *msg);
# 224 "/usr/include/mach/mach.h" 3 4
extern voucher_mach_msg_state_t voucher_mach_msg_adopt(mach_msg_header_t *msg);
# 240 "/usr/include/mach/mach.h" 3 4
extern void voucher_mach_msg_revert(voucher_mach_msg_state_t state);
# 27 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-darwin.h" 2
# 57 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2
# 68 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h"
# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/pthread-barrier.h" 1
# 19 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/pthread-barrier.h"
# 1 "/usr/include/errno.h" 1 3 4
# 20 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/pthread-barrier.h" 2
# 48 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/pthread-barrier.h"
typedef struct {
  pthread_mutex_t mutex;
  pthread_cond_t cond;
  unsigned threshold;
  unsigned in;
  unsigned out;
} _uv_barrier;

typedef struct {
  _uv_barrier* b;
  char _pad[sizeof(pthread_mutex_t) + 2 * sizeof(sem_t) + 2 * sizeof(unsigned int) - sizeof(void *)];
} pthread_barrier_t;

int pthread_barrier_init(pthread_barrier_t* barrier,
                         const void* barrier_attr,
                         unsigned count);

int pthread_barrier_wait(pthread_barrier_t* barrier);
int pthread_barrier_destroy(pthread_barrier_t *barrier);
# 69 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h" 2
# 83 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h"
struct uv__io_s;
struct uv_loop_s;

typedef void (*uv__io_cb)(struct uv_loop_s* loop,
                          struct uv__io_s* w,
                          unsigned int events);
typedef struct uv__io_s uv__io_t;

struct uv__io_s {
  uv__io_cb cb;
  void* pending_queue[2];
  void* watcher_queue[2];
  unsigned int pevents;
  unsigned int events;
  int fd;
  int rcount; int wcount;
};
# 118 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h"
typedef struct uv_buf_t {
  char* base;
  size_t len;
} uv_buf_t;

typedef int uv_file;
typedef int uv_os_sock_t;
typedef int uv_os_fd_t;



typedef pthread_once_t uv_once_t;
typedef pthread_t uv_thread_t;
typedef pthread_mutex_t uv_mutex_t;
typedef pthread_rwlock_t uv_rwlock_t;
typedef semaphore_t uv_sem_t;
typedef pthread_cond_t uv_cond_t;
typedef pthread_key_t uv_key_t;
typedef pthread_barrier_t uv_barrier_t;



typedef gid_t uv_gid_t;
typedef uid_t uv_uid_t;

typedef struct dirent uv__dirent_t;
# 187 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv-unix.h"
typedef struct {
  void* handle;
  char* errmsg;
} uv_lib_t;
# 63 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h" 2
# 173 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
typedef enum {

  UV_E2BIG = (-7), UV_EACCES = (-13), UV_EADDRINUSE = (-48), UV_EADDRNOTAVAIL = (-49), UV_EAFNOSUPPORT = (-47), UV_EAGAIN = (-35), UV_EAI_ADDRFAMILY = (-3000), UV_EAI_AGAIN = (-3001), UV_EAI_BADFLAGS = (-3002), UV_EAI_BADHINTS = (-3013), UV_EAI_CANCELED = (-3003), UV_EAI_FAIL = (-3004), UV_EAI_FAMILY = (-3005), UV_EAI_MEMORY = (-3006), UV_EAI_NODATA = (-3007), UV_EAI_NONAME = (-3008), UV_EAI_OVERFLOW = (-3009), UV_EAI_PROTOCOL = (-3014), UV_EAI_SERVICE = (-3010), UV_EAI_SOCKTYPE = (-3011), UV_EALREADY = (-37), UV_EBADF = (-9), UV_EBUSY = (-16), UV_ECANCELED = (-89), UV_ECHARSET = (-4080), UV_ECONNABORTED = (-53), UV_ECONNREFUSED = (-61), UV_ECONNRESET = (-54), UV_EDESTADDRREQ = (-39), UV_EEXIST = (-17), UV_EFAULT = (-14), UV_EFBIG = (-27), UV_EHOSTUNREACH = (-65), UV_EINTR = (-4), UV_EINVAL = (-22), UV_EIO = (-5), UV_EISCONN = (-56), UV_EISDIR = (-21), UV_ELOOP = (-62), UV_EMFILE = (-24), UV_EMSGSIZE = (-40), UV_ENAMETOOLONG = (-63), UV_ENETDOWN = (-50), UV_ENETUNREACH = (-51), UV_ENFILE = (-23), UV_ENOBUFS = (-55), UV_ENODEV = (-19), UV_ENOENT = (-2), UV_ENOMEM = (-12), UV_ENONET = (-4056), UV_ENOPROTOOPT = (-42), UV_ENOSPC = (-28), UV_ENOSYS = (-78), UV_ENOTCONN = (-57), UV_ENOTDIR = (-20), UV_ENOTEMPTY = (-66), UV_ENOTSOCK = (-38), UV_ENOTSUP = (-45), UV_EPERM = (-1), UV_EPIPE = (-32), UV_EPROTO = (-100), UV_EPROTONOSUPPORT = (-43), UV_EPROTOTYPE = (-41), UV_ERANGE = (-34), UV_EROFS = (-30), UV_ESHUTDOWN = (-58), UV_ESPIPE = (-29), UV_ESRCH = (-3), UV_ETIMEDOUT = (-60), UV_ETXTBSY = (-26), UV_EXDEV = (-18), UV_UNKNOWN = (-4094), UV_EOF = (-4095), UV_ENXIO = (-6), UV_EMLINK = (-31), UV_EHOSTDOWN = (-64),

  UV_ERRNO_MAX = (-4095) - 1
} uv_errno_t;

typedef enum {
  UV_UNKNOWN_HANDLE = 0,

  UV_ASYNC, UV_CHECK, UV_FS_EVENT, UV_FS_POLL, UV_HANDLE, UV_IDLE, UV_NAMED_PIPE, UV_POLL, UV_PREPARE, UV_PROCESS, UV_STREAM, UV_TCP, UV_TIMER, UV_TTY, UV_UDP, UV_SIGNAL,

  UV_FILE,
  UV_HANDLE_TYPE_MAX
} uv_handle_type;

typedef enum {
  UV_UNKNOWN_REQ = 0,

  UV_REQ, UV_CONNECT, UV_WRITE, UV_SHUTDOWN, UV_UDP_SEND, UV_FS, UV_WORK, UV_GETADDRINFO, UV_GETNAMEINFO,


  UV_REQ_TYPE_MAX
} uv_req_type;



typedef struct uv_loop_s uv_loop_t;
typedef struct uv_handle_s uv_handle_t;
typedef struct uv_stream_s uv_stream_t;
typedef struct uv_tcp_s uv_tcp_t;
typedef struct uv_udp_s uv_udp_t;
typedef struct uv_pipe_s uv_pipe_t;
typedef struct uv_tty_s uv_tty_t;
typedef struct uv_poll_s uv_poll_t;
typedef struct uv_timer_s uv_timer_t;
typedef struct uv_prepare_s uv_prepare_t;
typedef struct uv_check_s uv_check_t;
typedef struct uv_idle_s uv_idle_t;
typedef struct uv_async_s uv_async_t;
typedef struct uv_process_s uv_process_t;
typedef struct uv_fs_event_s uv_fs_event_t;
typedef struct uv_fs_poll_s uv_fs_poll_t;
typedef struct uv_signal_s uv_signal_t;


typedef struct uv_req_s uv_req_t;
typedef struct uv_getaddrinfo_s uv_getaddrinfo_t;
typedef struct uv_getnameinfo_s uv_getnameinfo_t;
typedef struct uv_shutdown_s uv_shutdown_t;
typedef struct uv_write_s uv_write_t;
typedef struct uv_connect_s uv_connect_t;
typedef struct uv_udp_send_s uv_udp_send_t;
typedef struct uv_fs_s uv_fs_t;
typedef struct uv_work_s uv_work_t;


typedef struct uv_cpu_info_s uv_cpu_info_t;
typedef struct uv_interface_address_s uv_interface_address_t;
typedef struct uv_dirent_s uv_dirent_t;
typedef struct uv_passwd_s uv_passwd_t;

typedef enum {
  UV_LOOP_BLOCK_SIGNAL
} uv_loop_option;

typedef enum {
  UV_RUN_DEFAULT = 0,
  UV_RUN_ONCE,
  UV_RUN_NOWAIT
} uv_run_mode;


__attribute__((visibility("default"))) unsigned int uv_version(void);
__attribute__((visibility("default"))) const char* uv_version_string(void);

typedef void* (*uv_malloc_func)(size_t size);
typedef void* (*uv_realloc_func)(void* ptr, size_t size);
typedef void* (*uv_calloc_func)(size_t count, size_t size);
typedef void (*uv_free_func)(void* ptr);

__attribute__((visibility("default"))) int uv_replace_allocator(uv_malloc_func malloc_func,
                                   uv_realloc_func realloc_func,
                                   uv_calloc_func calloc_func,
                                   uv_free_func free_func);

__attribute__((visibility("default"))) uv_loop_t* uv_default_loop(void);
__attribute__((visibility("default"))) int uv_loop_init(uv_loop_t* loop);
__attribute__((visibility("default"))) int uv_loop_close(uv_loop_t* loop);





__attribute__((visibility("default"))) uv_loop_t* uv_loop_new(void);





__attribute__((visibility("default"))) void uv_loop_delete(uv_loop_t*);
__attribute__((visibility("default"))) size_t uv_loop_size(void);
__attribute__((visibility("default"))) int uv_loop_alive(const uv_loop_t* loop);
__attribute__((visibility("default"))) int uv_loop_configure(uv_loop_t* loop, uv_loop_option option, ...);
__attribute__((visibility("default"))) int uv_loop_fork(uv_loop_t* loop);

__attribute__((visibility("default"))) int uv_run(uv_loop_t*, uv_run_mode mode);
__attribute__((visibility("default"))) void uv_stop(uv_loop_t*);

__attribute__((visibility("default"))) void uv_ref(uv_handle_t*);
__attribute__((visibility("default"))) void uv_unref(uv_handle_t*);
__attribute__((visibility("default"))) int uv_has_ref(const uv_handle_t*);

__attribute__((visibility("default"))) void uv_update_time(uv_loop_t*);
__attribute__((visibility("default"))) uint64_t uv_now(const uv_loop_t*);

__attribute__((visibility("default"))) int uv_backend_fd(const uv_loop_t*);
__attribute__((visibility("default"))) int uv_backend_timeout(const uv_loop_t*);

typedef void (*uv_alloc_cb)(uv_handle_t* handle,
                            size_t suggested_size,
                            uv_buf_t* buf);
typedef void (*uv_read_cb)(uv_stream_t* stream,
                           ssize_t nread,
                           const uv_buf_t* buf);
typedef void (*uv_write_cb)(uv_write_t* req, int status);
typedef void (*uv_connect_cb)(uv_connect_t* req, int status);
typedef void (*uv_shutdown_cb)(uv_shutdown_t* req, int status);
typedef void (*uv_connection_cb)(uv_stream_t* server, int status);
typedef void (*uv_close_cb)(uv_handle_t* handle);
typedef void (*uv_poll_cb)(uv_poll_t* handle, int status, int events);
typedef void (*uv_timer_cb)(uv_timer_t* handle);
typedef void (*uv_async_cb)(uv_async_t* handle);
typedef void (*uv_prepare_cb)(uv_prepare_t* handle);
typedef void (*uv_check_cb)(uv_check_t* handle);
typedef void (*uv_idle_cb)(uv_idle_t* handle);
typedef void (*uv_exit_cb)(uv_process_t*, int64_t exit_status, int term_signal);
typedef void (*uv_walk_cb)(uv_handle_t* handle, void* arg);
typedef void (*uv_fs_cb)(uv_fs_t* req);
typedef void (*uv_work_cb)(uv_work_t* req);
typedef void (*uv_after_work_cb)(uv_work_t* req, int status);
typedef void (*uv_getaddrinfo_cb)(uv_getaddrinfo_t* req,
                                  int status,
                                  struct addrinfo* res);
typedef void (*uv_getnameinfo_cb)(uv_getnameinfo_t* req,
                                  int status,
                                  const char* hostname,
                                  const char* service);

typedef struct {
  long tv_sec;
  long tv_nsec;
} uv_timespec_t;


typedef struct {
  uint64_t st_dev;
  uint64_t st_mode;
  uint64_t st_nlink;
  uint64_t st_uid;
  uint64_t st_gid;
  uint64_t st_rdev;
  uint64_t st_ino;
  uint64_t st_size;
  uint64_t st_blksize;
  uint64_t st_blocks;
  uint64_t st_flags;
  uint64_t st_gen;
  uv_timespec_t st_atim;
  uv_timespec_t st_mtim;
  uv_timespec_t st_ctim;
  uv_timespec_t st_birthtim;
} uv_stat_t;


typedef void (*uv_fs_event_cb)(uv_fs_event_t* handle,
                               const char* filename,
                               int events,
                               int status);

typedef void (*uv_fs_poll_cb)(uv_fs_poll_t* handle,
                              int status,
                              const uv_stat_t* prev,
                              const uv_stat_t* curr);

typedef void (*uv_signal_cb)(uv_signal_t* handle, int signum);


typedef enum {
  UV_LEAVE_GROUP = 0,
  UV_JOIN_GROUP
} uv_membership;


__attribute__((visibility("default"))) int uv_translate_sys_error(int sys_errno);

__attribute__((visibility("default"))) const char* uv_strerror(int err);
__attribute__((visibility("default"))) const char* uv_err_name(int err);
# 384 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
struct uv_req_s {
  void* data; uv_req_type type; void* active_queue[2]; void* reserved[4];
};






__attribute__((visibility("default"))) int uv_shutdown(uv_shutdown_t* req,
                          uv_stream_t* handle,
                          uv_shutdown_cb cb);

struct uv_shutdown_s {
  void* data; uv_req_type type; void* active_queue[2]; void* reserved[4];
  uv_stream_t* handle;
  uv_shutdown_cb cb;

};
# 421 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
struct uv_handle_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
};

__attribute__((visibility("default"))) size_t uv_handle_size(uv_handle_type type);
__attribute__((visibility("default"))) size_t uv_req_size(uv_req_type type);

__attribute__((visibility("default"))) int uv_is_active(const uv_handle_t* handle);

__attribute__((visibility("default"))) void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg);


__attribute__((visibility("default"))) void uv_print_all_handles(uv_loop_t* loop, FILE* stream);
__attribute__((visibility("default"))) void uv_print_active_handles(uv_loop_t* loop, FILE* stream);

__attribute__((visibility("default"))) void uv_close(uv_handle_t* handle, uv_close_cb close_cb);

__attribute__((visibility("default"))) int uv_send_buffer_size(uv_handle_t* handle, int* value);
__attribute__((visibility("default"))) int uv_recv_buffer_size(uv_handle_t* handle, int* value);

__attribute__((visibility("default"))) int uv_fileno(const uv_handle_t* handle, uv_os_fd_t* fd);

__attribute__((visibility("default"))) uv_buf_t uv_buf_init(char* base, unsigned int len);
# 461 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
struct uv_stream_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  size_t write_queue_size; uv_alloc_cb alloc_cb; uv_read_cb read_cb; uv_connect_t *connect_req; uv_shutdown_t *shutdown_req; uv__io_t io_watcher; void* write_queue[2]; void* write_completed_queue[2]; uv_connection_cb connection_cb; int delayed_error; int accepted_fd; void* queued_fds; void* select;
};

__attribute__((visibility("default"))) int uv_listen(uv_stream_t* stream, int backlog, uv_connection_cb cb);
__attribute__((visibility("default"))) int uv_accept(uv_stream_t* server, uv_stream_t* client);

__attribute__((visibility("default"))) int uv_read_start(uv_stream_t*,
                            uv_alloc_cb alloc_cb,
                            uv_read_cb read_cb);
__attribute__((visibility("default"))) int uv_read_stop(uv_stream_t*);

__attribute__((visibility("default"))) int uv_write(uv_write_t* req,
                       uv_stream_t* handle,
                       const uv_buf_t bufs[],
                       unsigned int nbufs,
                       uv_write_cb cb);
__attribute__((visibility("default"))) int uv_write2(uv_write_t* req,
                        uv_stream_t* handle,
                        const uv_buf_t bufs[],
                        unsigned int nbufs,
                        uv_stream_t* send_handle,
                        uv_write_cb cb);
__attribute__((visibility("default"))) int uv_try_write(uv_stream_t* handle,
                           const uv_buf_t bufs[],
                           unsigned int nbufs);


struct uv_write_s {
  void* data; uv_req_type type; void* active_queue[2]; void* reserved[4];
  uv_write_cb cb;
  uv_stream_t* send_handle;
  uv_stream_t* handle;
  void* queue[2]; unsigned int write_index; uv_buf_t* bufs; unsigned int nbufs; int error; uv_buf_t bufsml[4];
};


__attribute__((visibility("default"))) int uv_is_readable(const uv_stream_t* handle);
__attribute__((visibility("default"))) int uv_is_writable(const uv_stream_t* handle);

__attribute__((visibility("default"))) int uv_stream_set_blocking(uv_stream_t* handle, int blocking);

__attribute__((visibility("default"))) int uv_is_closing(const uv_handle_t* handle);







struct uv_tcp_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  size_t write_queue_size; uv_alloc_cb alloc_cb; uv_read_cb read_cb; uv_connect_t *connect_req; uv_shutdown_t *shutdown_req; uv__io_t io_watcher; void* write_queue[2]; void* write_completed_queue[2]; uv_connection_cb connection_cb; int delayed_error; int accepted_fd; void* queued_fds; void* select;

};

__attribute__((visibility("default"))) int uv_tcp_init(uv_loop_t*, uv_tcp_t* handle);
__attribute__((visibility("default"))) int uv_tcp_init_ex(uv_loop_t*, uv_tcp_t* handle, unsigned int flags);
__attribute__((visibility("default"))) int uv_tcp_open(uv_tcp_t* handle, uv_os_sock_t sock);
__attribute__((visibility("default"))) int uv_tcp_nodelay(uv_tcp_t* handle, int enable);
__attribute__((visibility("default"))) int uv_tcp_keepalive(uv_tcp_t* handle,
                               int enable,
                               unsigned int delay);
__attribute__((visibility("default"))) int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable);

enum uv_tcp_flags {

  UV_TCP_IPV6ONLY = 1
};

__attribute__((visibility("default"))) int uv_tcp_bind(uv_tcp_t* handle,
                          const struct sockaddr* addr,
                          unsigned int flags);
__attribute__((visibility("default"))) int uv_tcp_getsockname(const uv_tcp_t* handle,
                                 struct sockaddr* name,
                                 int* namelen);
__attribute__((visibility("default"))) int uv_tcp_getpeername(const uv_tcp_t* handle,
                                 struct sockaddr* name,
                                 int* namelen);
__attribute__((visibility("default"))) int uv_tcp_connect(uv_connect_t* req,
                             uv_tcp_t* handle,
                             const struct sockaddr* addr,
                             uv_connect_cb cb);


struct uv_connect_s {
  void* data; uv_req_type type; void* active_queue[2]; void* reserved[4];
  uv_connect_cb cb;
  uv_stream_t* handle;
  void* queue[2];
};






enum uv_udp_flags {

  UV_UDP_IPV6ONLY = 1,




  UV_UDP_PARTIAL = 2,
# 575 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
  UV_UDP_REUSEADDR = 4
};

typedef void (*uv_udp_send_cb)(uv_udp_send_t* req, int status);
typedef void (*uv_udp_recv_cb)(uv_udp_t* handle,
                               ssize_t nread,
                               const uv_buf_t* buf,
                               const struct sockaddr* addr,
                               unsigned flags);


struct uv_udp_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;





  size_t send_queue_size;



  size_t send_queue_count;
  uv_alloc_cb alloc_cb; uv_udp_recv_cb recv_cb; uv__io_t io_watcher; void* write_queue[2]; void* write_completed_queue[2];
};


struct uv_udp_send_s {
  void* data; uv_req_type type; void* active_queue[2]; void* reserved[4];
  uv_udp_t* handle;
  uv_udp_send_cb cb;
  void* queue[2]; struct sockaddr_storage addr; unsigned int nbufs; uv_buf_t* bufs; ssize_t status; uv_udp_send_cb send_cb; uv_buf_t bufsml[4];
};

__attribute__((visibility("default"))) int uv_udp_init(uv_loop_t*, uv_udp_t* handle);
__attribute__((visibility("default"))) int uv_udp_init_ex(uv_loop_t*, uv_udp_t* handle, unsigned int flags);
__attribute__((visibility("default"))) int uv_udp_open(uv_udp_t* handle, uv_os_sock_t sock);
__attribute__((visibility("default"))) int uv_udp_bind(uv_udp_t* handle,
                          const struct sockaddr* addr,
                          unsigned int flags);

__attribute__((visibility("default"))) int uv_udp_getsockname(const uv_udp_t* handle,
                                 struct sockaddr* name,
                                 int* namelen);
__attribute__((visibility("default"))) int uv_udp_set_membership(uv_udp_t* handle,
                                    const char* multicast_addr,
                                    const char* interface_addr,
                                    uv_membership membership);
__attribute__((visibility("default"))) int uv_udp_set_multicast_loop(uv_udp_t* handle, int on);
__attribute__((visibility("default"))) int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl);
__attribute__((visibility("default"))) int uv_udp_set_multicast_interface(uv_udp_t* handle,
                                             const char* interface_addr);
__attribute__((visibility("default"))) int uv_udp_set_broadcast(uv_udp_t* handle, int on);
__attribute__((visibility("default"))) int uv_udp_set_ttl(uv_udp_t* handle, int ttl);
__attribute__((visibility("default"))) int uv_udp_send(uv_udp_send_t* req,
                          uv_udp_t* handle,
                          const uv_buf_t bufs[],
                          unsigned int nbufs,
                          const struct sockaddr* addr,
                          uv_udp_send_cb send_cb);
__attribute__((visibility("default"))) int uv_udp_try_send(uv_udp_t* handle,
                              const uv_buf_t bufs[],
                              unsigned int nbufs,
                              const struct sockaddr* addr);
__attribute__((visibility("default"))) int uv_udp_recv_start(uv_udp_t* handle,
                                uv_alloc_cb alloc_cb,
                                uv_udp_recv_cb recv_cb);
__attribute__((visibility("default"))) int uv_udp_recv_stop(uv_udp_t* handle);







struct uv_tty_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  size_t write_queue_size; uv_alloc_cb alloc_cb; uv_read_cb read_cb; uv_connect_t *connect_req; uv_shutdown_t *shutdown_req; uv__io_t io_watcher; void* write_queue[2]; void* write_completed_queue[2]; uv_connection_cb connection_cb; int delayed_error; int accepted_fd; void* queued_fds; void* select;
  struct termios orig_termios; int mode;
};

typedef enum {

  UV_TTY_MODE_NORMAL,

  UV_TTY_MODE_RAW,

  UV_TTY_MODE_IO
} uv_tty_mode_t;

__attribute__((visibility("default"))) int uv_tty_init(uv_loop_t*, uv_tty_t*, uv_file fd, int readable);
__attribute__((visibility("default"))) int uv_tty_set_mode(uv_tty_t*, uv_tty_mode_t mode);
__attribute__((visibility("default"))) int uv_tty_reset_mode(void);
__attribute__((visibility("default"))) int uv_tty_get_winsize(uv_tty_t*, int* width, int* height);
# 680 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
__attribute__((visibility("default"))) uv_handle_type uv_guess_handle(uv_file file);







struct uv_pipe_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  size_t write_queue_size; uv_alloc_cb alloc_cb; uv_read_cb read_cb; uv_connect_t *connect_req; uv_shutdown_t *shutdown_req; uv__io_t io_watcher; void* write_queue[2]; void* write_completed_queue[2]; uv_connection_cb connection_cb; int delayed_error; int accepted_fd; void* queued_fds; void* select;
  int ipc;
  const char* pipe_fname;
};

__attribute__((visibility("default"))) int uv_pipe_init(uv_loop_t*, uv_pipe_t* handle, int ipc);
__attribute__((visibility("default"))) int uv_pipe_open(uv_pipe_t*, uv_file file);
__attribute__((visibility("default"))) int uv_pipe_bind(uv_pipe_t* handle, const char* name);
__attribute__((visibility("default"))) void uv_pipe_connect(uv_connect_t* req,
                               uv_pipe_t* handle,
                               const char* name,
                               uv_connect_cb cb);
__attribute__((visibility("default"))) int uv_pipe_getsockname(const uv_pipe_t* handle,
                                  char* buffer,
                                  size_t* size);
__attribute__((visibility("default"))) int uv_pipe_getpeername(const uv_pipe_t* handle,
                                  char* buffer,
                                  size_t* size);
__attribute__((visibility("default"))) void uv_pipe_pending_instances(uv_pipe_t* handle, int count);
__attribute__((visibility("default"))) int uv_pipe_pending_count(uv_pipe_t* handle);
__attribute__((visibility("default"))) uv_handle_type uv_pipe_pending_type(uv_pipe_t* handle);


struct uv_poll_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_poll_cb poll_cb;
  uv__io_t io_watcher;
};

enum uv_poll_event {
  UV_READABLE = 1,
  UV_WRITABLE = 2,
  UV_DISCONNECT = 4
};

__attribute__((visibility("default"))) int uv_poll_init(uv_loop_t* loop, uv_poll_t* handle, int fd);
__attribute__((visibility("default"))) int uv_poll_init_socket(uv_loop_t* loop,
                                  uv_poll_t* handle,
                                  uv_os_sock_t socket);
__attribute__((visibility("default"))) int uv_poll_start(uv_poll_t* handle, int events, uv_poll_cb cb);
__attribute__((visibility("default"))) int uv_poll_stop(uv_poll_t* handle);


struct uv_prepare_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_prepare_cb prepare_cb; void* queue[2];
};

__attribute__((visibility("default"))) int uv_prepare_init(uv_loop_t*, uv_prepare_t* prepare);
__attribute__((visibility("default"))) int uv_prepare_start(uv_prepare_t* prepare, uv_prepare_cb cb);
__attribute__((visibility("default"))) int uv_prepare_stop(uv_prepare_t* prepare);


struct uv_check_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_check_cb check_cb; void* queue[2];
};

__attribute__((visibility("default"))) int uv_check_init(uv_loop_t*, uv_check_t* check);
__attribute__((visibility("default"))) int uv_check_start(uv_check_t* check, uv_check_cb cb);
__attribute__((visibility("default"))) int uv_check_stop(uv_check_t* check);


struct uv_idle_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_idle_cb idle_cb; void* queue[2];
};

__attribute__((visibility("default"))) int uv_idle_init(uv_loop_t*, uv_idle_t* idle);
__attribute__((visibility("default"))) int uv_idle_start(uv_idle_t* idle, uv_idle_cb cb);
__attribute__((visibility("default"))) int uv_idle_stop(uv_idle_t* idle);


struct uv_async_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_async_cb async_cb; void* queue[2]; int pending;
};

__attribute__((visibility("default"))) int uv_async_init(uv_loop_t*,
                            uv_async_t* async,
                            uv_async_cb async_cb);
__attribute__((visibility("default"))) int uv_async_send(uv_async_t* async);







struct uv_timer_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_timer_cb timer_cb; void* heap_node[3]; uint64_t timeout; uint64_t repeat; uint64_t start_id;
};

__attribute__((visibility("default"))) int uv_timer_init(uv_loop_t*, uv_timer_t* handle);
__attribute__((visibility("default"))) int uv_timer_start(uv_timer_t* handle,
                             uv_timer_cb cb,
                             uint64_t timeout,
                             uint64_t repeat);
__attribute__((visibility("default"))) int uv_timer_stop(uv_timer_t* handle);
__attribute__((visibility("default"))) int uv_timer_again(uv_timer_t* handle);
__attribute__((visibility("default"))) void uv_timer_set_repeat(uv_timer_t* handle, uint64_t repeat);
__attribute__((visibility("default"))) uint64_t uv_timer_get_repeat(const uv_timer_t* handle);







struct uv_getaddrinfo_s {
  void* data; uv_req_type type; void* active_queue[2]; void* reserved[4];

  uv_loop_t* loop;

  struct uv__work work_req; uv_getaddrinfo_cb cb; struct addrinfo* hints; char* hostname; char* service; struct addrinfo* addrinfo; int retcode;
};


__attribute__((visibility("default"))) int uv_getaddrinfo(uv_loop_t* loop,
                             uv_getaddrinfo_t* req,
                             uv_getaddrinfo_cb getaddrinfo_cb,
                             const char* node,
                             const char* service,
                             const struct addrinfo* hints);
__attribute__((visibility("default"))) void uv_freeaddrinfo(struct addrinfo* ai);







struct uv_getnameinfo_s {
  void* data; uv_req_type type; void* active_queue[2]; void* reserved[4];

  uv_loop_t* loop;

  struct uv__work work_req; uv_getnameinfo_cb getnameinfo_cb; struct sockaddr_storage storage; int flags; char host[1025]; char service[32]; int retcode;
};

__attribute__((visibility("default"))) int uv_getnameinfo(uv_loop_t* loop,
                             uv_getnameinfo_t* req,
                             uv_getnameinfo_cb getnameinfo_cb,
                             const struct sockaddr* addr,
                             int flags);



typedef enum {
  UV_IGNORE = 0x00,
  UV_CREATE_PIPE = 0x01,
  UV_INHERIT_FD = 0x02,
  UV_INHERIT_STREAM = 0x04,






  UV_READABLE_PIPE = 0x10,
  UV_WRITABLE_PIPE = 0x20
} uv_stdio_flags;

typedef struct uv_stdio_container_s {
  uv_stdio_flags flags;

  union {
    uv_stream_t* stream;
    int fd;
  } data;
} uv_stdio_container_t;

typedef struct uv_process_options_s {
  uv_exit_cb exit_cb;
  const char* file;






  char** args;




  char** env;




  const char* cwd;




  unsigned int flags;
# 897 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
  int stdio_count;
  uv_stdio_container_t* stdio;





  uv_uid_t uid;
  uv_gid_t gid;
} uv_process_options_t;




enum uv_process_flags {





  UV_PROCESS_SETUID = (1 << 0),





  UV_PROCESS_SETGID = (1 << 1),





  UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS = (1 << 2),







  UV_PROCESS_DETACHED = (1 << 3),





  UV_PROCESS_WINDOWS_HIDE = (1 << 4)
};




struct uv_process_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_exit_cb exit_cb;
  int pid;
  void* queue[2]; int status;
};

__attribute__((visibility("default"))) int uv_spawn(uv_loop_t* loop,
                       uv_process_t* handle,
                       const uv_process_options_t* options);
__attribute__((visibility("default"))) int uv_process_kill(uv_process_t*, int signum);
__attribute__((visibility("default"))) int uv_kill(int pid, int signum);





struct uv_work_s {
  void* data; uv_req_type type; void* active_queue[2]; void* reserved[4];
  uv_loop_t* loop;
  uv_work_cb work_cb;
  uv_after_work_cb after_work_cb;
  struct uv__work work_req;
};

__attribute__((visibility("default"))) int uv_queue_work(uv_loop_t* loop,
                            uv_work_t* req,
                            uv_work_cb work_cb,
                            uv_after_work_cb after_work_cb);

__attribute__((visibility("default"))) int uv_cancel(uv_req_t* req);


struct uv_cpu_info_s {
  char* model;
  int speed;
  struct uv_cpu_times_s {
    uint64_t user;
    uint64_t nice;
    uint64_t sys;
    uint64_t idle;
    uint64_t irq;
  } cpu_times;
};

struct uv_interface_address_s {
  char* name;
  char phys_addr[6];
  int is_internal;
  union {
    struct sockaddr_in address4;
    struct sockaddr_in6 address6;
  } address;
  union {
    struct sockaddr_in netmask4;
    struct sockaddr_in6 netmask6;
  } netmask;
};

struct uv_passwd_s {
  char* username;
  long uid;
  long gid;
  char* shell;
  char* homedir;
};

typedef enum {
  UV_DIRENT_UNKNOWN,
  UV_DIRENT_FILE,
  UV_DIRENT_DIR,
  UV_DIRENT_LINK,
  UV_DIRENT_FIFO,
  UV_DIRENT_SOCKET,
  UV_DIRENT_CHAR,
  UV_DIRENT_BLOCK
} uv_dirent_type_t;

struct uv_dirent_s {
  const char* name;
  uv_dirent_type_t type;
};

__attribute__((visibility("default"))) char** uv_setup_args(int argc, char** argv);
__attribute__((visibility("default"))) int uv_get_process_title(char* buffer, size_t size);
__attribute__((visibility("default"))) int uv_set_process_title(const char* title);
__attribute__((visibility("default"))) int uv_resident_set_memory(size_t* rss);
__attribute__((visibility("default"))) int uv_uptime(double* uptime);
__attribute__((visibility("default"))) uv_os_fd_t uv_get_osfhandle(int fd);

typedef struct {
  long tv_sec;
  long tv_usec;
} uv_timeval_t;

typedef struct {
   uv_timeval_t ru_utime;
   uv_timeval_t ru_stime;
   uint64_t ru_maxrss;
   uint64_t ru_ixrss;
   uint64_t ru_idrss;
   uint64_t ru_isrss;
   uint64_t ru_minflt;
   uint64_t ru_majflt;
   uint64_t ru_nswap;
   uint64_t ru_inblock;
   uint64_t ru_oublock;
   uint64_t ru_msgsnd;
   uint64_t ru_msgrcv;
   uint64_t ru_nsignals;
   uint64_t ru_nvcsw;
   uint64_t ru_nivcsw;
} uv_rusage_t;

__attribute__((visibility("default"))) int uv_getrusage(uv_rusage_t* rusage);

__attribute__((visibility("default"))) int uv_os_homedir(char* buffer, size_t* size);
__attribute__((visibility("default"))) int uv_os_tmpdir(char* buffer, size_t* size);
__attribute__((visibility("default"))) int uv_os_get_passwd(uv_passwd_t* pwd);
__attribute__((visibility("default"))) void uv_os_free_passwd(uv_passwd_t* pwd);

__attribute__((visibility("default"))) int uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count);
__attribute__((visibility("default"))) void uv_free_cpu_info(uv_cpu_info_t* cpu_infos, int count);

__attribute__((visibility("default"))) int uv_interface_addresses(uv_interface_address_t** addresses,
                                     int* count);
__attribute__((visibility("default"))) void uv_free_interface_addresses(uv_interface_address_t* addresses,
                                           int count);

__attribute__((visibility("default"))) int uv_os_getenv(const char* name, char* buffer, size_t* size);
__attribute__((visibility("default"))) int uv_os_setenv(const char* name, const char* value);
__attribute__((visibility("default"))) int uv_os_unsetenv(const char* name);

__attribute__((visibility("default"))) int uv_os_gethostname(char* buffer, size_t* size);


typedef enum {
  UV_FS_UNKNOWN = -1,
  UV_FS_CUSTOM,
  UV_FS_OPEN,
  UV_FS_CLOSE,
  UV_FS_READ,
  UV_FS_WRITE,
  UV_FS_SENDFILE,
  UV_FS_STAT,
  UV_FS_LSTAT,
  UV_FS_FSTAT,
  UV_FS_FTRUNCATE,
  UV_FS_UTIME,
  UV_FS_FUTIME,
  UV_FS_ACCESS,
  UV_FS_CHMOD,
  UV_FS_FCHMOD,
  UV_FS_FSYNC,
  UV_FS_FDATASYNC,
  UV_FS_UNLINK,
  UV_FS_RMDIR,
  UV_FS_MKDIR,
  UV_FS_MKDTEMP,
  UV_FS_RENAME,
  UV_FS_SCANDIR,
  UV_FS_LINK,
  UV_FS_SYMLINK,
  UV_FS_READLINK,
  UV_FS_CHOWN,
  UV_FS_FCHOWN,
  UV_FS_REALPATH
} uv_fs_type;


struct uv_fs_s {
  void* data; uv_req_type type; void* active_queue[2]; void* reserved[4];
  uv_fs_type fs_type;
  uv_loop_t* loop;
  uv_fs_cb cb;
  ssize_t result;
  void* ptr;
  const char* path;
  uv_stat_t statbuf;
  const char *new_path; uv_file file; int flags; mode_t mode; unsigned int nbufs; uv_buf_t* bufs; off_t off; uv_uid_t uid; uv_gid_t gid; double atime; double mtime; struct uv__work work_req; uv_buf_t bufsml[4];
};

__attribute__((visibility("default"))) void uv_fs_req_cleanup(uv_fs_t* req);
__attribute__((visibility("default"))) int uv_fs_close(uv_loop_t* loop,
                          uv_fs_t* req,
                          uv_file file,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_open(uv_loop_t* loop,
                         uv_fs_t* req,
                         const char* path,
                         int flags,
                         int mode,
                         uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_read(uv_loop_t* loop,
                         uv_fs_t* req,
                         uv_file file,
                         const uv_buf_t bufs[],
                         unsigned int nbufs,
                         int64_t offset,
                         uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_unlink(uv_loop_t* loop,
                           uv_fs_t* req,
                           const char* path,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_write(uv_loop_t* loop,
                          uv_fs_t* req,
                          uv_file file,
                          const uv_buf_t bufs[],
                          unsigned int nbufs,
                          int64_t offset,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_mkdir(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          int mode,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_mkdtemp(uv_loop_t* loop,
                            uv_fs_t* req,
                            const char* tpl,
                            uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_rmdir(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_scandir(uv_loop_t* loop,
                            uv_fs_t* req,
                            const char* path,
                            int flags,
                            uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_scandir_next(uv_fs_t* req,
                                 uv_dirent_t* ent);
__attribute__((visibility("default"))) int uv_fs_stat(uv_loop_t* loop,
                         uv_fs_t* req,
                         const char* path,
                         uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_fstat(uv_loop_t* loop,
                          uv_fs_t* req,
                          uv_file file,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_rename(uv_loop_t* loop,
                           uv_fs_t* req,
                           const char* path,
                           const char* new_path,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_fsync(uv_loop_t* loop,
                          uv_fs_t* req,
                          uv_file file,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_fdatasync(uv_loop_t* loop,
                              uv_fs_t* req,
                              uv_file file,
                              uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_ftruncate(uv_loop_t* loop,
                              uv_fs_t* req,
                              uv_file file,
                              int64_t offset,
                              uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_sendfile(uv_loop_t* loop,
                             uv_fs_t* req,
                             uv_file out_fd,
                             uv_file in_fd,
                             int64_t in_offset,
                             size_t length,
                             uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_access(uv_loop_t* loop,
                           uv_fs_t* req,
                           const char* path,
                           int mode,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_chmod(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          int mode,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_utime(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          double atime,
                          double mtime,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_futime(uv_loop_t* loop,
                           uv_fs_t* req,
                           uv_file file,
                           double atime,
                           double mtime,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_lstat(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_link(uv_loop_t* loop,
                         uv_fs_t* req,
                         const char* path,
                         const char* new_path,
                         uv_fs_cb cb);
# 1257 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
__attribute__((visibility("default"))) int uv_fs_symlink(uv_loop_t* loop,
                            uv_fs_t* req,
                            const char* path,
                            const char* new_path,
                            int flags,
                            uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_readlink(uv_loop_t* loop,
                             uv_fs_t* req,
                             const char* path,
                             uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_realpath(uv_loop_t* loop,
                             uv_fs_t* req,
                             const char* path,
                             uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_fchmod(uv_loop_t* loop,
                           uv_fs_t* req,
                           uv_file file,
                           int mode,
                           uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_chown(uv_loop_t* loop,
                          uv_fs_t* req,
                          const char* path,
                          uv_uid_t uid,
                          uv_gid_t gid,
                          uv_fs_cb cb);
__attribute__((visibility("default"))) int uv_fs_fchown(uv_loop_t* loop,
                           uv_fs_t* req,
                           uv_file file,
                           uv_uid_t uid,
                           uv_gid_t gid,
                           uv_fs_cb cb);


enum uv_fs_event {
  UV_RENAME = 1,
  UV_CHANGE = 2
};


struct uv_fs_event_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;

  char* path;
  uv_fs_event_cb cb; uv__io_t event_watcher; char* realpath; int realpath_len; int cf_flags; uv_async_t* cf_cb; void* cf_events[2]; void* cf_member[2]; int cf_error; uv_mutex_t cf_mutex;
};





struct uv_fs_poll_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;

  void* poll_ctx;
};

__attribute__((visibility("default"))) int uv_fs_poll_init(uv_loop_t* loop, uv_fs_poll_t* handle);
__attribute__((visibility("default"))) int uv_fs_poll_start(uv_fs_poll_t* handle,
                               uv_fs_poll_cb poll_cb,
                               const char* path,
                               unsigned int interval);
__attribute__((visibility("default"))) int uv_fs_poll_stop(uv_fs_poll_t* handle);
__attribute__((visibility("default"))) int uv_fs_poll_getpath(uv_fs_poll_t* handle,
                                 char* buffer,
                                 size_t* size);


struct uv_signal_s {
  void* data; uv_loop_t* loop; uv_handle_type type; uv_close_cb close_cb; void* handle_queue[2]; union { int fd; void* reserved[4]; } u; uv_handle_t* next_closing; unsigned int flags;
  uv_signal_cb signal_cb;
  int signum;
  struct { struct uv_signal_s* rbe_left; struct uv_signal_s* rbe_right; struct uv_signal_s* rbe_parent; int rbe_color; } tree_entry; unsigned int caught_signals; unsigned int dispatched_signals;
};

__attribute__((visibility("default"))) int uv_signal_init(uv_loop_t* loop, uv_signal_t* handle);
__attribute__((visibility("default"))) int uv_signal_start(uv_signal_t* handle,
                              uv_signal_cb signal_cb,
                              int signum);
__attribute__((visibility("default"))) int uv_signal_start_oneshot(uv_signal_t* handle,
                                      uv_signal_cb signal_cb,
                                      int signum);
__attribute__((visibility("default"))) int uv_signal_stop(uv_signal_t* handle);

__attribute__((visibility("default"))) void uv_loadavg(double avg[3]);





enum uv_fs_event_flags {







  UV_FS_EVENT_WATCH_ENTRY = 1,
# 1363 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/uv.h"
  UV_FS_EVENT_STAT = 2,






  UV_FS_EVENT_RECURSIVE = 4
};


__attribute__((visibility("default"))) int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle);
__attribute__((visibility("default"))) int uv_fs_event_start(uv_fs_event_t* handle,
                                uv_fs_event_cb cb,
                                const char* path,
                                unsigned int flags);
__attribute__((visibility("default"))) int uv_fs_event_stop(uv_fs_event_t* handle);
__attribute__((visibility("default"))) int uv_fs_event_getpath(uv_fs_event_t* handle,
                                  char* buffer,
                                  size_t* size);

__attribute__((visibility("default"))) int uv_ip4_addr(const char* ip, int port, struct sockaddr_in* addr);
__attribute__((visibility("default"))) int uv_ip6_addr(const char* ip, int port, struct sockaddr_in6* addr);

__attribute__((visibility("default"))) int uv_ip4_name(const struct sockaddr_in* src, char* dst, size_t size);
__attribute__((visibility("default"))) int uv_ip6_name(const struct sockaddr_in6* src, char* dst, size_t size);

__attribute__((visibility("default"))) int uv_inet_ntop(int af, const void* src, char* dst, size_t size);
__attribute__((visibility("default"))) int uv_inet_pton(int af, const char* src, void* dst);

__attribute__((visibility("default"))) int uv_exepath(char* buffer, size_t* size);

__attribute__((visibility("default"))) int uv_cwd(char* buffer, size_t* size);

__attribute__((visibility("default"))) int uv_chdir(const char* dir);

__attribute__((visibility("default"))) uint64_t uv_get_free_memory(void);
__attribute__((visibility("default"))) uint64_t uv_get_total_memory(void);

__attribute__((visibility("default"))) uint64_t uv_hrtime(void);

__attribute__((visibility("default"))) void uv_disable_stdio_inheritance(void);

__attribute__((visibility("default"))) int uv_dlopen(const char* filename, uv_lib_t* lib);
__attribute__((visibility("default"))) void uv_dlclose(uv_lib_t* lib);
__attribute__((visibility("default"))) int uv_dlsym(uv_lib_t* lib, const char* name, void** ptr);
__attribute__((visibility("default"))) const char* uv_dlerror(const uv_lib_t* lib);

__attribute__((visibility("default"))) int uv_mutex_init(uv_mutex_t* handle);
__attribute__((visibility("default"))) void uv_mutex_destroy(uv_mutex_t* handle);
__attribute__((visibility("default"))) void uv_mutex_lock(uv_mutex_t* handle);
__attribute__((visibility("default"))) int uv_mutex_trylock(uv_mutex_t* handle);
__attribute__((visibility("default"))) void uv_mutex_unlock(uv_mutex_t* handle);

__attribute__((visibility("default"))) int uv_rwlock_init(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) void uv_rwlock_destroy(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) void uv_rwlock_rdlock(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) int uv_rwlock_tryrdlock(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) void uv_rwlock_rdunlock(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) void uv_rwlock_wrlock(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) int uv_rwlock_trywrlock(uv_rwlock_t* rwlock);
__attribute__((visibility("default"))) void uv_rwlock_wrunlock(uv_rwlock_t* rwlock);

__attribute__((visibility("default"))) int uv_sem_init(uv_sem_t* sem, unsigned int value);
__attribute__((visibility("default"))) void uv_sem_destroy(uv_sem_t* sem);
__attribute__((visibility("default"))) void uv_sem_post(uv_sem_t* sem);
__attribute__((visibility("default"))) void uv_sem_wait(uv_sem_t* sem);
__attribute__((visibility("default"))) int uv_sem_trywait(uv_sem_t* sem);

__attribute__((visibility("default"))) int uv_cond_init(uv_cond_t* cond);
__attribute__((visibility("default"))) void uv_cond_destroy(uv_cond_t* cond);
__attribute__((visibility("default"))) void uv_cond_signal(uv_cond_t* cond);
__attribute__((visibility("default"))) void uv_cond_broadcast(uv_cond_t* cond);

__attribute__((visibility("default"))) int uv_barrier_init(uv_barrier_t* barrier, unsigned int count);
__attribute__((visibility("default"))) void uv_barrier_destroy(uv_barrier_t* barrier);
__attribute__((visibility("default"))) int uv_barrier_wait(uv_barrier_t* barrier);

__attribute__((visibility("default"))) void uv_cond_wait(uv_cond_t* cond, uv_mutex_t* mutex);
__attribute__((visibility("default"))) int uv_cond_timedwait(uv_cond_t* cond,
                                uv_mutex_t* mutex,
                                uint64_t timeout);

__attribute__((visibility("default"))) void uv_once(uv_once_t* guard, void (*callback)(void));

__attribute__((visibility("default"))) int uv_key_create(uv_key_t* key);
__attribute__((visibility("default"))) void uv_key_delete(uv_key_t* key);
__attribute__((visibility("default"))) void* uv_key_get(uv_key_t* key);
__attribute__((visibility("default"))) void uv_key_set(uv_key_t* key, void* value);

typedef void (*uv_thread_cb)(void* arg);

__attribute__((visibility("default"))) int uv_thread_create(uv_thread_t* tid, uv_thread_cb entry, void* arg);
__attribute__((visibility("default"))) uv_thread_t uv_thread_self(void);
__attribute__((visibility("default"))) int uv_thread_join(uv_thread_t *tid);
__attribute__((visibility("default"))) int uv_thread_equal(const uv_thread_t* t1, const uv_thread_t* t2);



union uv_any_handle {
  uv_async_t async; uv_check_t check; uv_fs_event_t fs_event; uv_fs_poll_t fs_poll; uv_handle_t handle; uv_idle_t idle; uv_pipe_t pipe; uv_poll_t poll; uv_prepare_t prepare; uv_process_t process; uv_stream_t stream; uv_tcp_t tcp; uv_timer_t timer; uv_tty_t tty; uv_udp_t udp; uv_signal_t signal;
};

union uv_any_req {
  uv_req_t req; uv_connect_t connect; uv_write_t write; uv_shutdown_t shutdown; uv_udp_send_t udp_send; uv_fs_t fs; uv_work_t work; uv_getaddrinfo_t getaddrinfo; uv_getnameinfo_t getnameinfo;
};



struct uv_loop_s {

  void* data;

  unsigned int active_handles;
  void* handle_queue[2];
  void* active_reqs[2];

  unsigned int stop_flag;
  unsigned long flags; int backend_fd; void* pending_queue[2]; void* watcher_queue[2]; uv__io_t** watchers; unsigned int nwatchers; unsigned int nfds; void* wq[2]; uv_mutex_t wq_mutex; uv_async_t wq_async; uv_rwlock_t cloexec_lock; uv_handle_t* closing_handles; void* process_handles[2]; void* prepare_handles[2]; void* check_handles[2]; void* idle_handles[2]; void* async_handles[2]; void (*async_unused)(void); uv__io_t async_io_watcher; int async_wfd; struct { void* min; unsigned int nelts; } timer_heap; uint64_t timer_counter; uint64_t time; int signal_pipefd[2]; uv__io_t signal_io_watcher; uv_signal_t child_watcher; int emfile_fd; uv_thread_t cf_thread; void* _cf_reserved; void* cf_state; uv_mutex_t cf_mutex; uv_sem_t cf_sem; void* cf_signals[2];
};
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/os/fs_defs.h" 2


typedef struct {
  uv_stat_t stat;
} FileInfo;


typedef struct {
  uint64_t inode;
  uint64_t device_id;
} FileID;



typedef struct {
  uv_fs_t request;
  uv_dirent_t ent;
} Directory;
# 110 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/terminal.h" 1



# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/terminal.h" 2



typedef struct terminal Terminal;
typedef void (*terminal_write_cb)(char *buffer, size_t size, void *data);
typedef void (*terminal_resize_cb)(uint16_t width, uint16_t height, void *data);
typedef void (*terminal_close_cb)(void *data);


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/src/nvim/terminal.h" 2

typedef struct {
  void *data;
  uint16_t width, height;
  terminal_write_cb write_cb;
  terminal_resize_cb resize_cb;
  terminal_close_cb close_cb;
} TerminalOptions;
# 111 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h" 2




typedef struct taggy {
  char_u *tagname;
  fmark_T fmark;
  int cur_match;
  int cur_fnum;
} taggy_T;

typedef struct buffblock buffblock_T;
typedef struct buffheader buffheader_T;




struct buffblock {
  buffblock_T *b_next;
  char_u b_str[1];
};




struct buffheader {
  buffblock_T bh_first;
  buffblock_T *bh_curr;
  size_t bh_index;
  size_t bh_space;
};






typedef struct {
  int wo_arab;

  int wo_bri;

  char_u *wo_briopt;

  int wo_diff;

  long wo_fdc;

  int wo_fdc_save;

  int wo_fen;

  int wo_fen_save;

  char_u *wo_fdi;

  long wo_fdl;

  int wo_fdl_save;

  char_u *wo_fdm;

  char_u *wo_fdm_save;

  long wo_fml;

  long wo_fdn;

  char_u *wo_fde;

  char_u *wo_fdt;

  char_u *wo_fmr;

  int wo_lbr;

  int wo_list;

  int wo_nu;

  int wo_rnu;

  long wo_nuw;

  int wo_wfh;

  int wo_wfw;

  int wo_pvw;

  int wo_rl;

  char_u *wo_rlc;

  long wo_scr;

  int wo_spell;

  int wo_cuc;

  int wo_cul;

  char_u *wo_cc;

  char_u *wo_stl;

  int wo_scb;

  int wo_diff_saved;

  int wo_scb_save;

  int wo_wrap;

  int wo_wrap_save;

  char_u *wo_cocu;

  long wo_cole;

  int wo_crb;

  int wo_crb_save;

  char_u *wo_scl;

  char_u *wo_winhl;


  int wo_scriptID[WV_COUNT];

} winopt_T;
# 254 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
struct wininfo_S {
  wininfo_T *wi_next;
  wininfo_T *wi_prev;
  win_T *wi_win;
  pos_T wi_fpos;
  _Bool wi_optset;
  winopt_T wi_opt;
  _Bool wi_fold_manual;
  garray_T wi_folds;
};







typedef struct arglist {
  garray_T al_ga;
  int al_refcount;
  int id;
} alist_T;
# 284 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
typedef struct argentry {
  char_u *ae_fname;
  int ae_fnum;
} aentry_T;
# 301 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
typedef struct {
  char_u *tb_buf;
  char_u *tb_noremap;
  int tb_buflen;
  int tb_off;
  int tb_len;
  int tb_maplen;
  int tb_silent;
  int tb_no_abbr_cnt;
  int tb_change_cnt;
} typebuf_T;


typedef struct {
  typebuf_T save_typebuf;
  int typebuf_valid;
  int old_char;
  int old_mod_mask;
  buffheader_T save_readbuf1;
  buffheader_T save_readbuf2;
  String save_inputbuf;
} tasave_T;




typedef struct mapblock mapblock_T;
struct mapblock {
  mapblock_T *m_next;
  char_u *m_keys;
  char_u *m_str;
  char_u *m_orig_str;
  int m_keylen;
  int m_mode;
  int m_noremap;
  char m_silent;
  char m_nowait;
  char m_expr;
  scid_T m_script_ID;
};




struct stl_hlrec {
  char_u *start;
  int userhl;
};
# 358 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
typedef struct qf_info_S qf_info_T;




typedef struct {
  proftime_T total;
  proftime_T slowest;
  long count;
  long match;
} syn_time_T;





typedef struct {
  hashtab_T b_keywtab;
  hashtab_T b_keywtab_ic;
  int b_syn_error;
  int b_syn_ic;
  int b_syn_spell;
  garray_T b_syn_patterns;
  garray_T b_syn_clusters;
  int b_spell_cluster_id;
  int b_nospell_cluster_id;
  int b_syn_containedin;

  int b_syn_sync_flags;
  short b_syn_sync_id;
  long b_syn_sync_minlines;
  long b_syn_sync_maxlines;
  long b_syn_sync_linebreaks;
  char_u *b_syn_linecont_pat;
  regprog_T *b_syn_linecont_prog;
  syn_time_T b_syn_linecont_time;
  int b_syn_linecont_ic;
  int b_syn_topgrp;
  int b_syn_conceal;
  int b_syn_folditems;
# 413 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
  synstate_T *b_sst_array;
  int b_sst_len;
  synstate_T *b_sst_first;
  synstate_T *b_sst_firstfree;
  int b_sst_freecount;
  linenr_T b_sst_check_lnum;
  uint16_t b_sst_lasttick;


  garray_T b_langp;
  _Bool b_spell_ismw[256];
  char_u *b_spell_ismw_mb;
  char_u *b_p_spc;
  regprog_T *b_cap_prog;
  char_u *b_p_spf;
  char_u *b_p_spl;
  int b_cjk;
  char_u b_syn_chartab[32];
  char_u *b_syn_isk;
} synblock_T;




typedef struct { typval_T di_tv; uint8_t di_flags; char_u di_key[sizeof("changedtick")]; } ChangedtickDictItem;
# 453 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
struct file_buffer {
  handle_T handle;


  memline_T b_ml;

  buf_T *b_next;
  buf_T *b_prev;

  int b_nwindows;

  int b_flags;
  int b_locked;
# 474 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
  char_u *b_ffname;
  char_u *b_sfname;
  char_u *b_fname;

  _Bool file_id_valid;
  FileID file_id;

  int b_changed;



  ChangedtickDictItem changedtick_di;

  _Bool b_saving;






  _Bool b_mod_set;

  linenr_T b_mod_top;
  linenr_T b_mod_bot;

  long b_mod_xlines;


  wininfo_T *b_wininfo;

  long b_mtime;
  long b_mtime_read;
  uint64_t b_orig_size;
  int b_orig_mode;

  fmark_T b_namedm[('z' - 'a' + 1)];


  visualinfo_T b_visual;
  int b_visual_mode_eval;

  fmark_T b_last_cursor;

  fmark_T b_last_insert;
  fmark_T b_last_change;




  fmark_T b_changelist[100];
  int b_changelistlen;
  _Bool b_new_change;





  uint64_t b_chartab[4];


  mapblock_T *(b_maphash[256]);


  mapblock_T *b_first_abbr;

  garray_T b_ucmds;



  pos_T b_op_start;
  pos_T b_op_start_orig;
  pos_T b_op_end;

  _Bool b_marks_read;




  u_header_T *b_u_oldhead;
  u_header_T *b_u_newhead;

  u_header_T *b_u_curhead;
  int b_u_numhead;
  _Bool b_u_synced;
  long b_u_seq_last;
  long b_u_save_nr_last;
  long b_u_seq_cur;
  time_t b_u_time_cur;
  long b_u_save_nr_cur;




  char_u *b_u_line_ptr;
  linenr_T b_u_line_lnum;
  colnr_T b_u_line_colnr;

  _Bool b_scanned;


  long b_p_iminsert;
  long b_p_imsearch;





  short b_kmap_state;


  garray_T b_kmap_ga;






  _Bool b_p_initialized;

  int b_p_scriptID[BV_COUNT];

  int b_p_ai;
  int b_p_ai_nopaste;
  char_u *b_p_bkc;
  unsigned int b_bkc_flags;
  int b_p_ci;
  int b_p_bin;
  int b_p_bomb;
  char_u *b_p_bh;
  char_u *b_p_bt;
  int b_has_qf_entry;
  int b_p_bl;
  long b_p_channel;
  int b_p_cin;
  char_u *b_p_cino;
  char_u *b_p_cink;
  char_u *b_p_cinw;
  char_u *b_p_com;
  char_u *b_p_cms;
  char_u *b_p_cpt;
  char_u *b_p_cfu;
  char_u *b_p_ofu;
  int b_p_eol;
  int b_p_fixeol;
  int b_p_et;
  int b_p_et_nobin;
  int b_p_et_nopaste;
  char_u *b_p_fenc;
  char_u *b_p_ff;
  char_u *b_p_ft;
  char_u *b_p_fo;
  char_u *b_p_flp;
  int b_p_inf;
  char_u *b_p_isk;
  char_u *b_p_def;
  char_u *b_p_inc;
  char_u *b_p_inex;
  uint32_t b_p_inex_flags;
  char_u *b_p_inde;
  uint32_t b_p_inde_flags;
  char_u *b_p_indk;
  char_u *b_p_fp;
  char_u *b_p_fex;
  uint32_t b_p_fex_flags;
  char_u *b_p_kp;
  int b_p_lisp;
  char_u *b_p_menc;
  char_u *b_p_mps;
  int b_p_ml;
  int b_p_ml_nobin;
  int b_p_ma;
  char_u *b_p_nf;
  int b_p_pi;
  char_u *b_p_qe;
  int b_p_ro;
  long b_p_sw;
  long b_p_scbk;
  int b_p_si;
  long b_p_sts;
  long b_p_sts_nopaste;
  char_u *b_p_sua;
  int b_p_swf;
  long b_p_smc;
  char_u *b_p_syn;
  long b_p_ts;
  long b_p_tw;
  long b_p_tw_nobin;
  long b_p_tw_nopaste;
  long b_p_wm;
  long b_p_wm_nobin;
  long b_p_wm_nopaste;
  char_u *b_p_keymap;


  char_u *b_p_gp;
  char_u *b_p_mp;
  char_u *b_p_efm;
  char_u *b_p_ep;
  char_u *b_p_path;
  int b_p_ar;
  char_u *b_p_tags;
  char_u *b_p_tc;
  unsigned b_tc_flags;
  char_u *b_p_dict;
  char_u *b_p_tsr;
  long b_p_ul;
  int b_p_udf;
  char_u *b_p_lw;




  int b_ind_level;
  int b_ind_open_imag;
  int b_ind_no_brace;
  int b_ind_first_open;
  int b_ind_open_extra;
  int b_ind_close_extra;
  int b_ind_open_left_imag;
  int b_ind_jump_label;
  int b_ind_case;
  int b_ind_case_code;
  int b_ind_case_break;
  int b_ind_param;
  int b_ind_func_type;
  int b_ind_comment;
  int b_ind_in_comment;
  int b_ind_in_comment2;
  int b_ind_cpp_baseclass;
  int b_ind_continuation;
  int b_ind_unclosed;
  int b_ind_unclosed2;
  int b_ind_unclosed_noignore;
  int b_ind_unclosed_wrapped;
  int b_ind_unclosed_whiteok;
  int b_ind_matching_paren;
  int b_ind_paren_prev;
  int b_ind_maxparen;
  int b_ind_maxcomment;
  int b_ind_scopedecl;
  int b_ind_scopedecl_code;
  int b_ind_java;
  int b_ind_js;
  int b_ind_keep_case_label;
  int b_ind_hash_comment;
  int b_ind_cpp_namespace;
  int b_ind_if_for_while;

  linenr_T b_no_eol_lnum;


  int b_start_eol;
  int b_start_ffc;
  char_u *b_start_fenc;
  int b_bad_char;
  int b_start_bomb;

  ScopeDictDictItem b_bufvar;
  dict_T *b_vars;





  _Bool b_may_swap;
  _Bool b_did_warn;







  _Bool b_help;

  _Bool b_spell;



  synblock_T b_s;



  signlist_T *b_signlist;

  Terminal *terminal;

  dict_T *additional_data;

  int b_mapped_ctrl_c;

  BufhlInfo b_bufhl_info;

  struct { size_t size; size_t capacity; BufhlLine * *items; } b_bufhl_move_space;
};
# 789 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
typedef struct diffblock_S diff_T;
struct diffblock_S {
  diff_T *df_next;
  linenr_T df_lnum[8];
  linenr_T df_count[8];
};
# 804 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
typedef struct tabpage_S tabpage_T;
struct tabpage_S {
  handle_T handle;
  tabpage_T *tp_next;
  frame_T *tp_topframe;
  win_T *tp_curwin;
  win_T *tp_prevwin;
  win_T *tp_firstwin;
  win_T *tp_lastwin;
  long tp_old_Rows;
  long tp_old_Columns;
  long tp_ch_used;


  diff_T *tp_first_diff;
  buf_T *(tp_diffbuf[8]);
  int tp_diff_invalid;
  frame_T *(tp_snapshot[2]);
  ScopeDictDictItem tp_winvar;
  dict_T *tp_vars;
  char_u *tp_localdir;
};
# 839 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
typedef struct w_line {
  linenr_T wl_lnum;
  uint16_t wl_size;
  char wl_valid;
  char wl_folded;
  linenr_T wl_lastlnum;
} wline_T;





struct frame_S {
  char fr_layout;
  int fr_width;
  int fr_newwidth;
  int fr_height;
  int fr_newheight;
  frame_T *fr_parent;
  frame_T *fr_next;

  frame_T *fr_prev;


  frame_T *fr_child;
  win_T *fr_win;
};
# 877 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
typedef struct {
  regmmatch_T rm;

  buf_T *buf;
  linenr_T lnum;
  int attr;
  int attr_cur;
  linenr_T first_lnum;
  colnr_T startcol;
  colnr_T endcol;
  _Bool is_addpos;
  proftime_T tm;
} match_T;





typedef struct
{
    linenr_T lnum;
    colnr_T col;
    int len;
} llpos_T;



typedef struct posmatch posmatch_T;
struct posmatch
{
    llpos_T pos[8];
    int cur;
    linenr_T toplnum;
    linenr_T botlnum;
};





typedef struct matchitem matchitem_T;
struct matchitem {
  matchitem_T *next;
  int id;
  int priority;
  char_u *pattern;
  int hlg_id;
  regmmatch_T match;
  posmatch_T pos;
  match_T hl;
  int conceal_char;
};

typedef enum {
    kFloatAnchorEast = 1,
    kFloatAnchorSouth = 2,

    kFloatAnchorNW = 0,
    kFloatAnchorNE = 1,
    kFloatAnchorSW = 2,
    kFloatAnchorSE = 3,
} FloatAnchor;

typedef enum {
    kFloatRelativeNone = 0,
    kFloatRelativeEditor = 1,
    kFloatRelativeCursor = 2,
    kFloatRelativeDisplay = 3,
} FloatRelative;

typedef struct {
  double x, y;
  FloatAnchor anchor;
  FloatRelative relative;
  _Bool standalone;
  _Bool unfocusable;
} FloatConfig;






struct window_S {
  handle_T handle;

  buf_T *w_buffer;


  synblock_T *w_s;

  int w_hl_id_normal;
  int w_hl_attr_normal;

  int w_hl_ids[HLF_COUNT];
  int w_hl_attrs[HLF_COUNT];

  int w_hl_needs_update;

  win_T *w_prev;
  win_T *w_next;
  _Bool w_closing;


  frame_T *w_frame;

  pos_T w_cursor;

  colnr_T w_curswant;



  int w_set_curswant;




  char w_old_visual_mode;
  linenr_T w_old_cursor_lnum;
  colnr_T w_old_cursor_fcol;
  colnr_T w_old_cursor_lcol;
  linenr_T w_old_visual_lnum;
  colnr_T w_old_visual_col;
  colnr_T w_old_curswant;





  linenr_T w_topline;

  char w_topline_was_set;

  int w_topfill;
  int w_old_topfill;
  _Bool w_botfill;

  _Bool w_old_botfill;
  colnr_T w_leftcol;


  colnr_T w_skipcol;






  int w_winrow;
  int w_height;

  int w_status_height;
  int w_wincol;
  int w_width;
  int w_vsep_width;
# 1042 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
  int w_valid;
  pos_T w_valid_cursor;

  colnr_T w_valid_leftcol;





  int w_cline_height;
  _Bool w_cline_folded;

  int w_cline_row;

  colnr_T w_virtcol;
# 1068 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
  int w_wrow, w_wcol;

  linenr_T w_botline;

  int w_empty_rows;
  int w_filler_rows;
# 1086 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
  int w_lines_valid;
  wline_T *w_lines;

  garray_T w_folds;
  _Bool w_fold_manual;

  _Bool w_foldinvalid;

  int w_nrwidth;






  int w_redr_type;
  int w_upd_rows;

  linenr_T w_redraw_top;
  linenr_T w_redraw_bot;
  int w_redr_status;


  pos_T w_ru_cursor;
  colnr_T w_ru_virtcol;
  linenr_T w_ru_topline;
  linenr_T w_ru_line_count;
  int w_ru_topfill;
  char w_ru_empty;

  int w_alt_fnum;

  alist_T *w_alist;
  int w_arg_idx;

  int w_arg_idx_invalid;

  char_u *w_localdir;
# 1132 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer_defs.h"
  winopt_T w_onebuf_opt;
  winopt_T w_allbuf_opt;


  uint32_t w_p_stl_flags;
  uint32_t w_p_fde_flags;
  uint32_t w_p_fdt_flags;
  int *w_p_cc_cols;
  int w_p_brimin;
  int w_p_brishift;
  _Bool w_p_brisbr;




  long w_scbind_pos;

  ScopeDictDictItem w_winvar;
  dict_T *w_vars;

  int w_farsi;






  pos_T w_pcmark;
  pos_T w_prev_pcmark;




  xfmark_T w_jumplist[100];
  int w_jumplistlen;
  int w_jumplistidx;

  int w_changelistidx;

  matchitem_T *w_match_head;
  int w_next_match_id;







  taggy_T w_tagstack[20];
  int w_tagstackidx;
  int w_tagstacklen;

  _Bool w_floating;
  FloatConfig w_float_config;
  ScreenGrid grid;
  int w_grid_handle;







  int w_fraction;
  int w_prev_fraction_row;

  linenr_T w_nrwidth_line_count;

  int w_nrwidth_width;

  qf_info_T *w_llist;




  qf_info_T *w_llist_ref;


};

static inline int win_hl_attr(win_T *wp, int hlf)
{
  return wp->w_hl_attrs[hlf];
}
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/normal.h" 2
# 17 "/Users/a/Documents/projects/neovim-src/src/nvim/normal.h"
typedef enum {
  kMTCharWise = 0,
  kMTLineWise = 1,
  kMTBlockWise = 2,
  kMTUnknown = -1
} MotionType;




typedef struct oparg_S {
  int op_type;
  int regname;
  MotionType motion_type;
  int motion_force;
  _Bool use_reg_one;

  _Bool inclusive;

  _Bool end_adjusted;

  pos_T start;
  pos_T end;
  pos_T cursor_start;

  long line_count;

  _Bool empty;

  _Bool is_VIsual;
  colnr_T start_vcol;
  colnr_T end_vcol;
  long prev_opcount;
  long prev_count0;
} oparg_T;




typedef struct cmdarg_S {
  oparg_T *oap;
  int prechar;
  int cmdchar;
  int nchar;
  int ncharC1;
  int ncharC2;
  int extra_char;
  long opcount;
  long count0;
  long count1;
  int arg;
  int retval;
  char_u *searchbuf;
} cmdarg_T;
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_cmds_defs.h" 2
# 80 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_cmds_defs.h"
typedef struct exarg exarg_T;






typedef void (*ex_func_T)(exarg_T *eap);

typedef char_u *(*LineGetter)(int, void *, int);


typedef struct cmdname {
  char_u *cmd_name;
  ex_func_T cmd_func;
  uint32_t cmd_argt;
  int cmd_addr_type;
} CommandDefinition;


struct exarg {
  char_u *arg;
  char_u *nextcmd;
  char_u *cmd;
  char_u **cmdlinep;
  cmdidx_T cmdidx;
  uint32_t argt;
  int skip;
  int forceit;
  int addr_count;
  linenr_T line1;
  linenr_T line2;
  int addr_type;
  int flags;
  char_u *do_ecmd_cmd;
  linenr_T do_ecmd_lnum;
  int append;
  int usefilter;
  int amount;
  int regname;
  int force_bin;
  int read_edit;
  int force_ff;
  int force_enc;
  int bad_char;
  int useridx;
  char_u *errmsg;
  LineGetter getline;
  void *cookie;
  struct condstack *cstack;
};
# 141 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_cmds_defs.h"
struct expand {
  int xp_context;
  char_u *xp_pattern;
  int xp_pattern_len;
  char_u *xp_arg;
  int xp_scriptID;
  int xp_backslash;

  int xp_shell;


  int xp_numfiles;
  char_u **xp_files;
  char_u *xp_line;
  int xp_col;
};
# 166 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_cmds_defs.h"
typedef struct {
  int split;
  int tab;
  _Bool browse;
  _Bool confirm;
  _Bool hide;
  _Bool keepalt;
  _Bool keepjumps;
  _Bool keepmarks;
  _Bool keeppatterns;
  _Bool lockmarks;
  _Bool noswapfile;
  char_u *save_ei;
  regmatch_T filter_regmatch;
  _Bool filter_force;
} cmdmod_T;
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_eval.h" 2







typedef struct eslist_elem eslist_T;
struct eslist_elem {
  int saved_emsg_silent;
  eslist_T *next;
};







struct condstack {
  int cs_flags[50];
  char cs_pending[50];
  union {
    void *csp_rv[50];
    void *csp_ex[50];
  } cs_pend;
  void *cs_forinfo[50];
  int cs_line[50];
  int cs_idx;
  int cs_looplevel;
  int cs_trylevel;
  eslist_T *cs_emsg_silent_list;
  int cs_lflags;
};
# 86 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_eval.h"
struct msglist {
  char_u *msg;
  char_u *throw_msg;
  struct msglist *next;
};


typedef enum
{
  ET_USER,
  ET_ERROR,
  ET_INTERRUPT
} except_type_T;





typedef struct vim_exception except_T;
struct vim_exception {
  except_type_T type;
  char_u *value;
  struct msglist *messages;
  char_u *throw_name;
  linenr_T throw_lnum;
  except_T *caught;
};






typedef struct cleanup_stuff cleanup_T;
struct cleanup_stuff {
  int pending;
  except_T *exception;
};
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/menu.h" 1
# 40 "/Users/a/Documents/projects/neovim-src/src/nvim/menu.h"
typedef struct VimMenu vimmenu_T;

struct VimMenu {
  int modes;
  int enabled;
  char_u *name;
  char_u *dname;
  char_u *en_name;

  char_u *en_dname;
  int mnemonic;
  char_u *actext;
  long priority;
  char_u *strings[7];
  int noremap[7];
  _Bool silent[7];
  vimmenu_T *children;
  vimmenu_T *parent;
  vimmenu_T *next;
};
# 12 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/event/loop.h" 1







# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/klist.h" 1
# 30 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/klist.h"
# 1 "/usr/include/assert.h" 1 3 4
# 31 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/klist.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 34 "/Users/a/Documents/projects/neovim-src/src/nvim/lib/klist.h" 2
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/event/loop.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/event/multiqueue.h" 1





# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/event/defs.h" 1



# 1 "/usr/include/assert.h" 1 3 4
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/event/defs.h" 2




typedef void (*argv_callback)(void **argv);
typedef struct message {
  argv_callback handler;
  void *argv[6];
} Event;
typedef void(*event_scheduler)(Event event, void *data);
# 30 "/Users/a/Documents/projects/neovim-src/src/nvim/event/defs.h"
static inline Event event_create(argv_callback cb, int argc, ...)
{
  ((void)0);
  Event event;
  do { ((void)0); (&event)->handler = cb; if (argc) { va_list args; __builtin_va_start(args, argc); for (int i = 0; i < argc; i++) { (&event)->argv[i] = __builtin_va_arg(args, void *); } __builtin_va_end(args); } } while (0);
  return event;
}
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/event/multiqueue.h" 2


typedef struct multiqueue MultiQueue;
typedef void (*put_callback)(MultiQueue *multiq, void *data);
# 11 "/Users/a/Documents/projects/neovim-src/src/nvim/event/loop.h" 2

typedef void * WatcherPtr;


struct __kl1_WatcherPtr { WatcherPtr data; struct __kl1_WatcherPtr *next; }; typedef struct __kl1_WatcherPtr kl1_WatcherPtr; typedef struct { size_t cnt, n, max; kl1_WatcherPtr **buf; } kmp_WatcherPtr_t; static inline kmp_WatcherPtr_t *kmp_init_WatcherPtr(void) { return xcalloc(1, sizeof(kmp_WatcherPtr_t)); } static inline void kmp_destroy_WatcherPtr(kmp_WatcherPtr_t *mp) __attribute__((unused)); static inline void kmp_destroy_WatcherPtr(kmp_WatcherPtr_t *mp) { size_t k; for (k = 0; k < mp->n; k++) { ; xfree(mp->buf[k]); } xfree(mp->buf); xfree(mp); } static inline kl1_WatcherPtr *kmp_alloc_WatcherPtr(kmp_WatcherPtr_t *mp) { mp->cnt++; if (mp->n == 0) { return xcalloc(1, sizeof(kl1_WatcherPtr)); } return mp->buf[--mp->n]; } static inline void kmp_free_WatcherPtr(kmp_WatcherPtr_t *mp, kl1_WatcherPtr *p) { mp->cnt--; if (mp->n == mp->max) { mp->max = mp->max ? (mp->max << 1) : 16; mp->buf = xrealloc(mp->buf, sizeof(kl1_WatcherPtr *) * mp->max); } mp->buf[mp->n++] = p; } typedef struct { kl1_WatcherPtr *head, *tail; kmp_WatcherPtr_t *mp; size_t size; } kl_WatcherPtr_t; static inline kl_WatcherPtr_t *kl_init_WatcherPtr(void) { kl_WatcherPtr_t *kl = xcalloc(1, sizeof(kl_WatcherPtr_t)); kl->mp = kmp_init_WatcherPtr(); kl->head = kl->tail = kmp_alloc_WatcherPtr(kl->mp); kl->head->next = 0; return kl; } static inline void kl_destroy_WatcherPtr(kl_WatcherPtr_t *kl) __attribute__((unused)); static inline void kl_destroy_WatcherPtr(kl_WatcherPtr_t *kl) { kl1_WatcherPtr *p; for (p = kl->head; p != kl->tail; p = p->next) { kmp_free_WatcherPtr(kl->mp, p); } kmp_free_WatcherPtr(kl->mp, p); kmp_destroy_WatcherPtr(kl->mp); xfree(kl); } static inline void kl_push_WatcherPtr(kl_WatcherPtr_t *kl, WatcherPtr d) { kl1_WatcherPtr *q, *p = kmp_alloc_WatcherPtr(kl->mp); q = kl->tail; p->next = 0; kl->tail->next = p; kl->tail = p; kl->size++; q->data = d; } static inline WatcherPtr kl_shift_at_WatcherPtr(kl_WatcherPtr_t *kl, kl1_WatcherPtr **n) { ((void)0); kl1_WatcherPtr *p; kl->size--; p = *n; *n = (*n)->next; if (p == kl->head) { kl->head = *n; } WatcherPtr d = p->data; kmp_free_WatcherPtr(kl->mp, p); return d; }

typedef struct loop {
  uv_loop_t uv;
  MultiQueue *events;
  MultiQueue *thread_events;
# 30 "/Users/a/Documents/projects/neovim-src/src/nvim/event/loop.h"
  MultiQueue *fast_events;


  kl_WatcherPtr_t *children;
  uv_signal_t children_watcher;
  uv_timer_t children_kill_timer;


  uv_timer_t poll_timer;

  size_t children_stop_requests;
  uv_async_t async;
  uv_mutex_t mutex;
  int recursive;
} Loop;
# 15 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h" 2
# 76 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
typedef enum {
  kNone = -1,
  kFalse = 0,
  kTrue = 1,
} TriState;
# 96 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern long Rows ;
extern long Columns ;
# 115 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
typedef off_t off_T;
# 138 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern schar_T *ScreenLines ;
extern sattr_T *ScreenAttrs ;
extern unsigned *LineOffset ;
extern char_u *LineWraps ;
# 151 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern u8char_T *ScreenLinesUC ;
extern u8char_T *ScreenLinesC[6];
extern int Screen_mco ;



extern schar_T *ScreenLines2 ;

extern int screen_Rows ;
extern int screen_Columns ;

extern int next_grid_handle ;
extern ScreenGrid default_grid ;
extern ScreenGrid *current_grid ;





extern int mod_mask ;
# 181 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern int cmdline_row;

extern int redraw_cmdline ;
extern int clear_cmdline ;
extern int mode_displayed ;
extern int cmdline_star ;

extern int exec_from_reg ;

extern int screen_cleared ;







extern colnr_T dollar_vcol ;







extern int compl_length ;



extern int compl_interrupted ;



extern int compl_busy ;


extern int compl_cont_status ;
# 233 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern int cmdmsg_rl ;
extern int msg_col;
extern int msg_row;
extern int msg_scrolled;

extern int msg_scrolled_ign ;




extern char_u *keep_msg ;
extern int keep_msg_attr ;
extern int keep_msg_more ;
extern int need_fileinfo ;
extern int msg_scroll ;
extern int msg_didout ;
extern int msg_didany ;
extern int msg_nowait ;
extern int emsg_off ;

extern int info_message ;
extern int msg_hist_off ;
extern int need_clr_eos ;

extern int emsg_skip ;

extern int emsg_severe ;

extern int did_endif ;
extern dict_T vimvardict;
extern dict_T globvardict;
extern int did_emsg;

extern int did_emsg_syntax;

extern int called_emsg;
extern int ex_exitval ;
extern int emsg_on_display ;
extern int rc_did_emsg ;

extern int no_wait_return ;
extern int need_wait_return ;
extern int did_wait_return ;

extern int need_maketitle ;

extern int quit_more ;

extern int newline_on_exit ;
extern int intr_char ;

extern int ex_keep_indent ;
extern int vgetc_busy ;

extern int didset_vim ;
extern int didset_vimruntime ;





extern int lines_left ;
extern int msg_no_more ;


extern char_u *sourcing_name ;
extern linenr_T sourcing_lnum ;

extern int ex_nesting_level ;
extern int debug_break_level ;
extern int debug_did_msg ;
extern int debug_tick ;
extern int debug_backtrace_level ;





extern int do_profiling ;






extern except_T *current_exception;





extern int did_throw ;





extern int need_rethrow ;






extern int check_cstack ;





extern int trylevel ;
# 353 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern int force_abort ;
# 365 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern struct msglist **msg_list ;







extern int suppress_errthrow ;







extern except_T *caught_stack ;
# 392 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern int may_garbage_collect ;
extern int want_garbage_collect ;
extern int garbage_collect_at_exit ;
# 405 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern scid_T current_SID ;

extern _Bool did_source_packages ;



extern struct caller_scope {
  scid_T SID;
  uint8_t *sourcing_name, *autocmd_fname, *autocmd_match;
  linenr_T sourcing_lnum;
  int autocmd_fname_full, autocmd_bufnr;
  void *funccalp;
} provider_caller_scope;
extern int provider_call_nesting ;


extern int t_colors ;







extern int highlight_match ;
extern linenr_T search_match_lines;
extern colnr_T search_match_endcol;

extern int no_smartcase ;

extern int need_check_timestamps ;

extern int did_check_timestamps ;

extern int no_check_timestamps ;

extern int autocmd_busy ;
extern int autocmd_no_enter ;
extern int autocmd_no_leave ;
extern int modified_was_set;
extern int did_filetype ;
extern int keep_filetype ;





extern bufref_T au_new_curbuf ;





extern buf_T *au_pending_free_buf ;
extern win_T *au_pending_free_win ;




extern int mouse_grid;
extern int mouse_row;
extern int mouse_col;
extern _Bool mouse_past_bottom ;
extern _Bool mouse_past_eol ;
extern int mouse_dragging ;



extern int diff_context ;
extern int diff_foldcolumn ;
extern int diff_need_scrollbind ;


extern vimmenu_T *root_menu ;




extern int sys_menu ;



extern int updating_screen ;






extern win_T *firstwin;
extern win_T *lastwin;
extern win_T *prevwin ;
# 511 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern win_T *curwin;

extern win_T *aucmd_win;
extern int aucmd_win_used ;





extern frame_T *topframe;





extern tabpage_T *first_tabpage;
extern tabpage_T *curtab;
extern int redraw_tabline ;
# 537 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern buf_T *firstbuf ;
extern buf_T *lastbuf ;
extern buf_T *curbuf ;
# 549 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern int mf_dont_release ;





extern alist_T global_alist;
extern int max_alist_id ;
extern int arg_had_last ;


extern int ru_col;
extern int ru_wid;
extern int sc_col;







extern int starting ;

extern int exiting ;

extern int stdin_isatty ;

extern int stdout_isatty ;


extern volatile int full_screen ;

extern int restricted ;

extern int secure ;




extern int textlock ;



extern int curbuf_lock ;


extern int allbuf_lock ;




extern int sandbox ;




extern int silent_mode ;





extern _Bool did_source_startup_scripts ;

extern pos_T VIsual;
extern int VIsual_active ;

extern int VIsual_select ;

extern int VIsual_reselect;



extern int VIsual_mode ;


extern int redo_VIsual_busy ;






extern pos_T where_paste_started;







extern int did_ai ;





extern colnr_T ai_col ;







extern int end_comment_pending ;







extern int did_syncbind ;





extern int did_si ;





extern int can_si ;





extern int can_si_back ;


extern pos_T saved_cursor ;




extern pos_T Insstart;





extern pos_T Insstart_orig;




extern int orig_line_count ;
extern int vr_lines_changed ;
# 727 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern char_u *fenc_default ;
# 746 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern int State ;


extern _Bool finish_op ;
extern long opcount ;




extern int exmode_active ;
extern int ex_no_reprint ;

extern int Recording ;
extern int Exec_reg ;

extern int no_mapping ;
extern int no_zero_mapping ;
extern int no_u_sync ;
extern int u_sync_once ;


extern _Bool force_restart_edit ;

extern int restart_edit ;
extern int arrow_used;



extern int ins_at_eol ;

extern char_u *edit_submode ;
extern char_u *edit_submode_pre ;
extern char_u *edit_submode_extra ;
extern hlf_T edit_submode_highl;
extern int ctrl_x_mode ;

extern int no_abbr ;

extern int mapped_ctrl_c ;

extern cmdmod_T cmdmod;

extern int msg_silent ;
extern int emsg_silent ;
extern _Bool emsg_noredir ;
extern int cmd_silent ;







extern int swap_exists_action ;


extern int swap_exists_did_quit ;


extern char_u IObuff[(1024+1)];
extern char_u NameBuff[1024];
extern char_u msg_buf[480];
extern char os_buf[



(1024+1)

];


extern int RedrawingDisabled ;

extern int readonlymode ;
extern int recoverymode ;


extern typebuf_T typebuf ;

extern int ex_normal_busy ;
extern int ex_normal_lock ;
extern int ignore_script ;
extern int stop_insert_mode;
extern int KeyTyped;
extern int KeyStuffed;
extern int maptick ;

extern int must_redraw ;
extern int skip_redraw ;
extern int do_redraw ;

extern int need_highlight_changed ;
extern char *used_shada_file ;


extern FILE *scriptin[15];
extern int curscript ;
extern FILE *scriptout ;


extern volatile int got_int ;

extern int bangredo ;
extern int searchcmdlen;
extern int reg_do_extmatch ;


extern reg_extmatch_T *re_extmatch_in ;

extern reg_extmatch_T *re_extmatch_out ;


extern int did_outofmem_msg ;

extern int did_swapwrite_msg ;

extern int undo_off ;
extern int global_busy ;
extern int listcmd_busy ;

extern int need_start_insertmode ;

extern char_u *last_cmdline ;
extern char_u *repeat_cmdline ;
extern char_u *new_last_cmdline ;
extern char_u *autocmd_fname ;
extern int autocmd_fname_full;
extern int autocmd_bufnr ;
extern char_u *autocmd_match ;
extern int did_cursorhold ;

extern pos_T last_cursormoved ;

extern varnumber_T last_changedtick ;
extern buf_T *last_changedtick_buf ;

extern int postponed_split ;
extern int postponed_split_flags ;
extern int postponed_split_tab ;
extern int g_do_tagpreview ;

extern int replace_offset ;

extern char_u *escape_chars ;


extern int keep_help_flag ;






extern char_u *empty_option ;

extern int redir_off ;
extern FILE *redir_fd ;
extern int redir_reg ;
extern int redir_vname ;
extern garray_T *capture_ga ;

extern char_u langmap_mapchar[256];

extern int save_p_ls ;
extern int save_p_wmh ;
extern int wild_menu_showing ;
enum {
  WM_SHOWN = 1,
  WM_SCROLLED = 2,
  WM_LIST = 3,
};


extern char breakat_flags[256];






extern char *default_vim_dir;
extern char *default_vimruntime_dir;
extern char_u *compiled_user;
extern char_u *compiled_sys;





extern char_u *globaldir ;


extern int lcs_eol ;
extern int lcs_ext ;
extern int lcs_prec ;
extern int lcs_nbsp ;
extern int lcs_space ;
extern int lcs_tab1 ;
extern int lcs_tab2 ;
extern int lcs_trail ;
extern int lcs_conceal ;


extern int fill_stl ;
extern int fill_stlnc ;
extern int fill_vert ;
extern int fill_fold ;
extern int fill_diff ;


extern int km_stopsel ;
extern int km_startsel ;

extern int cedit_key ;
extern int cmdwin_type ;
extern int cmdwin_result ;
extern int cmdwin_level ;

extern char_u no_lines_msg[] ;






extern long sub_nsubs;
extern linenr_T sub_nlines;


extern char_u wim_flags[4];




extern int stl_syntax ;


extern int no_hlsearch ;


extern linenr_T printer_page_num;


extern int typebuf_was_filled ;
# 1001 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern int virtual_op ;


extern disptick_T display_tick ;



extern linenr_T spell_redraw_lnum ;


extern int need_cursor_line_redraw ;
# 1024 "/Users/a/Documents/projects/neovim-src/src/nvim/globals.h"
extern char_u e_abort[] ;
extern char_u e_afterinit[] ;

extern char_u e_api_spawn_failed[] ;
extern char_u e_argreq[] ;
extern char_u e_backslash[] ;
extern char_u e_cmdwin[] ;

extern char_u e_curdir[] ;

extern char_u e_endif[] ;
extern char_u e_endtry[] ;
extern char_u e_endwhile[] ;
extern char_u e_endfor[] ;
extern char_u e_while[] ;
extern char_u e_for[] ;
extern char_u e_exists[] ;
extern char_u e_failed[] ;
extern char_u e_internal[] ;
extern char_u e_intern2[] ;
extern char_u e_interr[] ;
extern char_u e_invaddr[] ;
extern char_u e_invarg[] ;
extern char_u e_invarg2[] ;
extern char_u e_invexpr2[] ;
extern char_u e_invrange[] ;
extern char_u e_invcmd[] ;
extern char_u e_isadir2[] ;
extern char_u e_invchan[] ;
extern char_u e_invchanjob[] ;
extern char_u e_jobtblfull[] ;
extern char_u e_jobspawn[] ;

extern char_u e_channotpty[] ;
extern char_u e_stdiochan2[] ;

extern char_u e_invstream[] ;
extern char_u e_invstreamrpc[] ;

extern char_u e_streamkey[] ;


extern char_u e_libcall[] ;
extern char_u e_mkdir[] ;
extern char_u e_markinval[] ;
extern char_u e_marknotset[] ;
extern char_u e_modifiable[] ;

extern char_u e_nesting[] ;
extern char_u e_noalt[] ;
extern char_u e_noabbr[] ;
extern char_u e_nobang[] ;
extern char_u e_nogvim[] ;
extern char_u e_nogroup[] ;
extern char_u e_noinstext[] ;
extern char_u e_nolastcmd[] ;
extern char_u e_nomap[] ;
extern char_u e_nomatch[] ;
extern char_u e_nomatch2[] ;
extern char_u e_noname[] ;
extern char_u e_nopresub[] ;

extern char_u e_noprev[] ;
extern char_u e_noprevre[] ;
extern char_u e_norange[] ;
extern char_u e_noroom[] ;
extern char_u e_notmp[] ;
extern char_u e_notopen[] ;
extern char_u e_notread[] ;
extern char_u e_nowrtmsg[] ;

extern char_u e_nowrtmsg_nobang[] ;
extern char_u e_null[] ;
extern char_u e_number_exp[] ;
extern char_u e_openerrf[] ;
extern char_u e_outofmem[] ;
extern char_u e_patnotf[] ;
extern char_u e_patnotf2[] ;
extern char_u e_positive[] ;
extern char_u e_prev_dir[] ;


extern char_u e_quickfix[] ;
extern char_u e_loclist[] ;
extern char_u e_re_damg[] ;
extern char_u e_re_corr[] ;
extern char_u e_readonly[] ;

extern char_u e_readerrf[] ;
extern char_u e_sandbox[] ;
extern char_u e_secure[] ;
extern char_u e_screenmode[] ;

extern char_u e_scroll[] ;
extern char_u e_shellempty[] ;
extern char_u e_signdata[] ;
extern char_u e_swapclose[] ;
extern char_u e_tagstack[] ;
extern char_u e_toocompl[] ;
extern char_u e_longname[] ;
extern char_u e_toomsbra[] ;
extern char_u e_toomany[] ;
extern char_u e_trailing[] ;
extern char_u e_trailing2[] ;
extern char_u e_umark[] ;
extern char_u e_wildexpand[] ;
extern char_u e_winheight[] ;

extern char_u e_winwidth[] ;

extern char_u e_write[] ;
extern char_u e_zerocount[] ;
extern char_u e_usingsid[] ;

extern char_u e_maxmempat[] ;

extern char_u e_emptybuf[] ;
extern char_u e_nobufnr[] ;

extern char_u e_invalpat[] ;

extern char_u e_bufloaded[] ;
extern char_u e_notset[] ;
extern char_u e_invalidreg[] ;
extern char_u e_dirnotf[] ;

extern char_u e_unsupportedoption[] ;
extern char_u e_fnametoolong[] ;
extern char_u e_float_as_string[] ;
extern char_u e_autocmd_err[] ;



extern char top_bot_msg[] ;
extern char bot_top_msg[] ;


extern time_t starttime;

extern FILE *time_fd ;






extern int ignored;
extern char *ignoredp;


extern _Bool embedded_mode ;


extern _Bool headless_mode ;



typedef enum {
  kUnknown,
  kWorking,
  kBroken
} WorkingStatus;







typedef enum {
  kCdScopeInvalid = -1,
  kCdScopeWindow,
  kCdScopeTab,
  kCdScopeGlobal,
} CdScope;
# 291 "/Users/a/Documents/projects/neovim-src/src/nvim/vim.h" 2
# 21 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/ascii.h" 1






# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 8 "/Users/a/Documents/projects/neovim-src/src/nvim/ascii.h" 2
# 90 "/Users/a/Documents/projects/neovim-src/src/nvim/ascii.h"
static inline _Bool ascii_iswhite(int)
  __attribute__((const))
  __attribute__((always_inline));

static inline _Bool ascii_isdigit(int)
  __attribute__((const))
  __attribute__((always_inline));

static inline _Bool ascii_isxdigit(int)
  __attribute__((const))
  __attribute__((always_inline));

static inline _Bool ascii_isident(int)
  __attribute__((const))
  __attribute__((always_inline));

static inline _Bool ascii_isbdigit(int)
  __attribute__((const))
  __attribute__((always_inline));

static inline _Bool ascii_isspace(int)
  __attribute__((const))
  __attribute__((always_inline));




static inline _Bool ascii_iswhite(int c)
{
  return c == ' ' || c == '\t';
}
# 131 "/Users/a/Documents/projects/neovim-src/src/nvim/ascii.h"
static inline _Bool ascii_isdigit(int c)
{
  return c >= '0' && c <= '9';
}




static inline _Bool ascii_isxdigit(int c)
{
  return (c >= '0' && c <= '9')
         || (c >= 'a' && c <= 'f')
         || (c >= 'A' && c <= 'F');
}




static inline _Bool ascii_isident(const int c)
{
  return ((((unsigned)(c) >= 'A' && (unsigned)(c) <= 'Z') || ((unsigned)(c) >= 'a' && (unsigned)(c) <= 'z')) || ascii_isdigit(c)) || c == '_';
}




static inline _Bool ascii_isbdigit(int c)
{
  return (c == '0' || c == '1');
}





static inline _Bool ascii_isspace(int c)
{
  return (c >= 9 && c <= 13) || c == ' ';
}
# 22 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.h" 1
# 10 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.h"
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/event/rstream.h" 1




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/event/rstream.h" 2




# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/event/stream.h" 1




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/event/stream.h" 2




# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/rbuffer.h" 1
# 17 "/Users/a/Documents/projects/neovim-src/src/nvim/rbuffer.h"
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 18 "/Users/a/Documents/projects/neovim-src/src/nvim/rbuffer.h" 2
# 71 "/Users/a/Documents/projects/neovim-src/src/nvim/rbuffer.h"
typedef struct rbuffer RBuffer;



typedef void(*rbuffer_callback)(RBuffer *buf, void *data);

struct rbuffer {
  rbuffer_callback full_cb, nonfull_cb;
  void *data;
  size_t size;

  char *temp;
  char *end_ptr, *read_ptr, *write_ptr;
  char start_ptr[];
};
# 11 "/Users/a/Documents/projects/neovim-src/src/nvim/event/stream.h" 2

typedef struct stream Stream;







typedef void (*stream_read_cb)(Stream *stream, RBuffer *buf, size_t count,
    void *data, _Bool eof);







typedef void (*stream_write_cb)(Stream *stream, void *data, int status);
typedef void (*stream_close_cb)(Stream *stream, void *data);

struct stream {
  _Bool closed;
  _Bool did_eof;
  union {
    uv_pipe_t pipe;
    uv_tcp_t tcp;
    uv_idle_t idle;
  } uv;
  uv_stream_t *uvstream;
  uv_buf_t uvbuf;
  RBuffer *buffer;
  uv_file fd;
  stream_read_cb read_cb;
  stream_write_cb write_cb;
  void *cb_data;
  stream_close_cb close_cb, internal_close_cb;
  void *close_cb_data, *internal_data;
  size_t fpos;
  size_t curmem;
  size_t maxmem;
  size_t pending_reqs;
  size_t num_bytes;
  MultiQueue *events;
};
# 11 "/Users/a/Documents/projects/neovim-src/src/nvim/event/rstream.h" 2
# 11 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/event/wstream.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/src/nvim/event/wstream.h"
typedef struct wbuffer WBuffer;
typedef void (*wbuffer_data_finalizer)(void *data);

struct wbuffer {
  size_t size, refcount;
  char *data;
  wbuffer_data_finalizer cb;
};
# 12 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/channel.h" 1



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/main.h" 1






extern Loop main_loop;
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/channel.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/event/socket.h" 1
# 12 "/Users/a/Documents/projects/neovim-src/src/nvim/event/socket.h"
typedef struct socket_watcher SocketWatcher;
typedef void (*socket_cb)(SocketWatcher *watcher, int result, void *data);
typedef void (*socket_close_cb)(SocketWatcher *watcher, void *data);

struct socket_watcher {

  char addr[256];

  union {
    struct {
      uv_tcp_t handle;
      struct addrinfo *addrinfo;
    } tcp;
    struct {
      uv_pipe_t handle;
    } pipe;
  } uv;
  uv_stream_t *stream;
  void *data;
  socket_cb cb;
  socket_close_cb close_cb;
  MultiQueue *events;
};
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/channel.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/event/process.h" 1







typedef enum {
  kProcessTypeUv,
  kProcessTypePty
} ProcessType;

typedef struct process Process;
typedef void (*process_exit_cb)(Process *proc, int status, void *data);
typedef void (*internal_process_cb)(Process *proc);

struct process {
  ProcessType type;
  Loop *loop;
  void *data;
  int pid, status, refcount;

  uint64_t stopped_time;
  const char *cwd;
  char **argv;
  Stream in, out, err;
  process_exit_cb cb;
  internal_process_cb internal_exit_cb, internal_close_cb;
  _Bool closed, detach;
  MultiQueue *events;
};


static inline Process process_init(Loop *loop, ProcessType type, void *data)
{
  return (Process) {
    .type = type,
    .data = data,
    .loop = loop,
    .events = ((void*)0),
    .pid = 0,
    .status = -1,
    .refcount = 0,
    .stopped_time = 0,
    .cwd = ((void*)0),
    .argv = ((void*)0),
    .in = { .closed = 0 },
    .out = { .closed = 0 },
    .err = { .closed = 0 },
    .cb = ((void*)0),
    .closed = 0,
    .internal_close_cb = ((void*)0),
    .internal_exit_cb = ((void*)0),
    .detach = 0
  };
}

static inline _Bool process_is_stopped(Process *proc)
{
  return proc->stopped_time != 0;
}
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/channel.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/pty_process.h" 1






# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/pty_process_unix.h" 1



# 1 "/usr/include/sys/ioctl.h" 1 3 4
# 79 "/usr/include/sys/ioctl.h" 3 4
struct ttysize {
 unsigned short ts_lines;
 unsigned short ts_cols;
 unsigned short ts_xxx;
 unsigned short ts_yyy;
};






# 1 "/usr/include/sys/filio.h" 1 3 4
# 91 "/usr/include/sys/ioctl.h" 2 3 4
# 1 "/usr/include/sys/sockio.h" 1 3 4
# 92 "/usr/include/sys/ioctl.h" 2 3 4





int ioctl(int, unsigned long, ...);
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/os/pty_process_unix.h" 2



typedef struct pty_process {
  Process process;
  char *term_name;
  uint16_t width, height;
  struct winsize winsize;
  int tty_fd;
} PtyProcess;

static inline PtyProcess pty_process_init(Loop *loop, void *data)
{
  PtyProcess rv;
  rv.process = process_init(loop, kProcessTypePty, data);
  rv.term_name = ((void*)0);
  rv.width = 80;
  rv.height = 24;
  rv.tty_fd = -1;
  return rv;
}
# 8 "/Users/a/Documents/projects/neovim-src/src/nvim/os/pty_process.h" 2
# 8 "/Users/a/Documents/projects/neovim-src/src/nvim/channel.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/event/libuv_process.h" 1







typedef struct libuv_process {
  Process process;
  uv_process_t uv;
  uv_process_options_t uvopts;
  uv_stdio_container_t uvstdio[3];
} LibuvProcess;

static inline LibuvProcess libuv_process_init(Loop *loop, void *data)
{
  LibuvProcess rv = {
    .process = process_init(loop, kProcessTypeUv, data)
  };
  return rv;
}
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/channel.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/msgpack_rpc/channel_defs.h" 1





# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 1
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/msgpack_rpc/channel_defs.h" 2






typedef struct Channel Channel;

typedef struct {
  uint64_t request_id;
  _Bool returned, errored;
  Object result;
} ChannelCallFrame;

typedef struct {
  Channel *channel;
  MsgpackRpcRequestHandler handler;
  Array args;
  uint64_t request_id;
} RequestEvent;

typedef struct {
  Map_cstr_t_ptr_t *subscribed_events;
  _Bool closed;
  msgpack_unpacker *unpacker;
  uint64_t next_request_id;
  struct { size_t size; size_t capacity; ChannelCallFrame * *items; } call_stack;
} RpcState;
# 11 "/Users/a/Documents/projects/neovim-src/src/nvim/channel.h" 2




typedef enum {
  kChannelStreamProc,
  kChannelStreamSocket,
  kChannelStreamStdio,
  kChannelStreamStderr,
  kChannelStreamInternal
} ChannelStreamType;

typedef enum {
  kChannelPartStdin,
  kChannelPartStdout,
  kChannelPartStderr,
  kChannelPartRpc,
  kChannelPartAll
} ChannelPart;


typedef struct {
  Stream in;
  Stream out;
} StdioPair;

typedef struct {
  _Bool closed;
} StderrState;

typedef struct {
  Callback cb;
  dict_T *self;
  garray_T buffer;
  _Bool buffered;
} CallbackReader;





static inline _Bool callback_reader_set(CallbackReader reader)
{
  return reader.cb.type != kCallbackNone || reader.self;
}

struct Channel {
  uint64_t id;
  size_t refcount;
  MultiQueue *events;

  ChannelStreamType streamtype;
  union {
    Process proc;
    LibuvProcess uv;
    PtyProcess pty;
    Stream socket;
    StdioPair stdio;
    StderrState err;
  } stream;

  _Bool is_rpc;
  RpcState rpc;
  Terminal *term;

  CallbackReader on_stdout;
  CallbackReader on_stderr;
  Callback on_exit;
};

extern Map_uint64_t_ptr_t *channels;






static inline Channel *find_channel(uint64_t id)
{
  return map_uint64_t_ptr_t_get(channels, id);
}

static inline Stream *channel_instream(Channel *chan)
  FUNC_ATTR_NONNULL_ALL
{
  switch (chan->streamtype) {
    case kChannelStreamProc:
      return &chan->stream.proc.in;

    case kChannelStreamSocket:
      return &chan->stream.socket;

    case kChannelStreamStdio:
      return &chan->stream.stdio.out;

    case kChannelStreamInternal:
    case kChannelStreamStderr:
      abort();
  }
  abort();
}

static inline Stream *channel_outstream(Channel *chan)
  FUNC_ATTR_NONNULL_ALL
{
  switch (chan->streamtype) {
    case kChannelStreamProc:
      return &chan->stream.proc.out;

    case kChannelStreamSocket:
      return &chan->stream.socket;

    case kChannelStreamStdio:
      return &chan->stream.stdio.in;

    case kChannelStreamInternal:
    case kChannelStreamStderr:
      abort();
  }
  abort();
}
# 13 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.h" 2





extern hashtab_T func_hashtab;


extern ufunc_T dumuf;





typedef enum {
    VV_COUNT,
    VV_COUNT1,
    VV_PREVCOUNT,
    VV_ERRMSG,
    VV_WARNINGMSG,
    VV_STATUSMSG,
    VV_SHELL_ERROR,
    VV_THIS_SESSION,
    VV_VERSION,
    VV_LNUM,
    VV_TERMRESPONSE,
    VV_FNAME,
    VV_LANG,
    VV_LC_TIME,
    VV_CTYPE,
    VV_CC_FROM,
    VV_CC_TO,
    VV_FNAME_IN,
    VV_FNAME_OUT,
    VV_FNAME_NEW,
    VV_FNAME_DIFF,
    VV_CMDARG,
    VV_FOLDSTART,
    VV_FOLDEND,
    VV_FOLDDASHES,
    VV_FOLDLEVEL,
    VV_PROGNAME,
    VV_SEND_SERVER,
    VV_DYING,
    VV_EXCEPTION,
    VV_THROWPOINT,
    VV_STDERR,
    VV_REG,
    VV_CMDBANG,
    VV_INSERTMODE,
    VV_VAL,
    VV_KEY,
    VV_PROFILING,
    VV_FCS_REASON,
    VV_FCS_CHOICE,
    VV_BEVAL_BUFNR,
    VV_BEVAL_WINNR,
    VV_BEVAL_WINID,
    VV_BEVAL_LNUM,
    VV_BEVAL_COL,
    VV_BEVAL_TEXT,
    VV_SCROLLSTART,
    VV_SWAPNAME,
    VV_SWAPCHOICE,
    VV_SWAPCOMMAND,
    VV_CHAR,
    VV_MOUSE_WIN,
    VV_MOUSE_WINID,
    VV_MOUSE_LNUM,
    VV_MOUSE_COL,
    VV_OP,
    VV_SEARCHFORWARD,
    VV_HLSEARCH,
    VV_OLDFILES,
    VV_WINDOWID,
    VV_PROGPATH,
    VV_COMMAND_OUTPUT,
    VV_COMPLETED_ITEM,
    VV_OPTION_NEW,
    VV_OPTION_OLD,
    VV_OPTION_TYPE,
    VV_ERRORS,
    VV_MSGPACK_TYPES,
    VV_EVENT,
    VV_FALSE,
    VV_TRUE,
    VV_NULL,
    VV__NULL_LIST,
    VV__NULL_DICT,
    VV_VIM_DID_ENTER,
    VV_TESTING,
    VV_TYPE_NUMBER,
    VV_TYPE_STRING,
    VV_TYPE_FUNC,
    VV_TYPE_LIST,
    VV_TYPE_DICT,
    VV_TYPE_FLOAT,
    VV_TYPE_BOOL,
    VV_EXITING,
} VimVarIndex;


typedef enum {
  kMPNil,
  kMPBoolean,
  kMPInteger,
  kMPFloat,
  kMPString,
  kMPBinary,
  kMPArray,
  kMPMap,
  kMPExt,

} MessagePackType;


extern const list_T *eval_msgpack_type_lists[kMPExt + 1];



typedef int (*ArgvFunc)(int current_argcount, typval_T *argv,
                        int called_func_argcount);
# 26 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer.h" 1




# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/window.h" 1
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/screen.h" 1
# 24 "/Users/a/Documents/projects/neovim-src/src/nvim/screen.h"
typedef struct {
  enum {
    kStlClickDisabled = 0,
    kStlClickTabSwitch,
    kStlClickTabClose,
    kStlClickFuncRun,
  } type;
  int tabnr;
  char *func;
} StlClickDefinition;


typedef struct {
  StlClickDefinition def;
  const char *start;
} StlClickRecord;


extern StlClickDefinition *tab_page_click_defs;


extern long tab_page_click_defs_size;
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer.h" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 10 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer.h" 2




enum getf_values {
  GETF_SETMARK = 0x01,
  GETF_ALT = 0x02,
  GETF_SWITCH = 0x04,
};


enum bln_values {
  BLN_CURBUF = 1,
  BLN_LISTED = 2,
  BLN_DUMMY = 4,

  BLN_NOOPT = 16,
};


enum dobuf_action_values {
  DOBUF_GOTO = 0,
  DOBUF_SPLIT = 1,
  DOBUF_UNLOAD = 2,
  DOBUF_DEL = 3,
  DOBUF_WIPE = 4,
};


enum dobuf_start_values {
  DOBUF_CURRENT = 0,
  DOBUF_FIRST = 1,
  DOBUF_LAST = 2,
  DOBUF_MOD = 3,
};


enum bfa_values {
  BFA_DEL = 1,
  BFA_WIPE = 2,
  BFA_KEEP_UNDO = 4,
};
# 61 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer.h"
static inline void switch_to_win_for_buf(buf_T *buf,
                                         win_T **save_curwinp,
                                         tabpage_T **save_curtabp,
                                         bufref_T *save_curbuf)
{
  win_T *wp;
  tabpage_T *tp;

  if (!find_win_for_buf(buf, &wp, &tp)
      || switch_win(save_curwinp, save_curtabp, wp, tp, 1) == 0) {
    switch_buffer(save_curbuf, buf);
  }
}

static inline void restore_win_for_buf(win_T *save_curwin,
                                       tabpage_T *save_curtab,
                                       bufref_T *save_curbuf)
{
  if (save_curbuf->br_buf == ((void*)0)) {
    restore_win(save_curwin, save_curtab, 1);
  } else {
    restore_buffer(save_curbuf);
  }
}

static inline void buf_set_changedtick(buf_T *const buf,
                                       const varnumber_T changedtick)
  __attribute__((nonnull)) __attribute__((always_inline));





static inline void buf_set_changedtick(buf_T *const buf,
                                       const varnumber_T changedtick)
{
# 111 "/Users/a/Documents/projects/neovim-src/src/nvim/buffer.h"
  buf->changedtick_di.di_tv.vval.v_number = changedtick;
}
# 27 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/charset.h" 1
# 20 "/Users/a/Documents/projects/neovim-src/src/nvim/charset.h"
typedef enum {
  STR2NR_DEC = 0,
  STR2NR_BIN = (1 << 0),
  STR2NR_OCT = (1 << 1),
  STR2NR_HEX = (1 << 2),




  STR2NR_FORCE = (1 << 3),

  STR2NR_ALL = STR2NR_BIN | STR2NR_OCT | STR2NR_HEX,
} ChStr2NrFlags;
# 29 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/cursor.h" 1
# 30 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/diff.h" 1
# 31 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/edit.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/src/nvim/edit.h"
typedef int (*IndentGetter)(void);
# 32 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_cmds.h" 1
# 27 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_cmds.h"
typedef struct {
  char *sub;
  Timestamp timestamp;
  list_T *additional_elements;
} SubReplacementString;
# 33 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_cmds2.h" 1





# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_docmd.h" 1
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_cmds2.h" 2

typedef void (*DoInRuntimepathCB)(char_u *, void *);
# 34 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_getln.h" 1
# 32 "/Users/a/Documents/projects/neovim-src/src/nvim/ex_getln.h"
typedef enum {
  HIST_DEFAULT = -2,
  HIST_INVALID = -1,
  HIST_CMD = 0,
  HIST_SEARCH,
  HIST_EXPR,
  HIST_INPUT,
  HIST_DEBUG,
} HistoryType;




typedef char_u *(*CompleteListItemGetter)(expand_T *, int);


typedef struct hist_entry {
  int hisnum;
  char_u *hisstr;
  Timestamp timestamp;
  list_T *additional_elements;
} histentry_T;
# 37 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/fileio.h" 1




# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/os.h" 1







# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/stdpaths_defs.h" 1




typedef enum {
  kXDGConfigHome,
  kXDGDataHome,
  kXDGCacheHome,
  kXDGRuntimeDir,
  kXDGConfigDirs,
  kXDGDataDirs,
} XDGVarType;
# 9 "/Users/a/Documents/projects/neovim-src/src/nvim/os/os.h" 2
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/fileio.h" 2
# 22 "/Users/a/Documents/projects/neovim-src/src/nvim/fileio.h"
typedef struct {
  buf_T *save_curbuf;
  int use_aucmd_win;
  win_T *save_curwin;
  win_T *new_curwin;
  bufref_T new_curbuf;
  char_u *globaldir;
} aco_save_T;
# 38 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/fileio.h" 1




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/os/fileio.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 8 "/Users/a/Documents/projects/neovim-src/src/nvim/os/fileio.h" 2



typedef struct {
  int fd;
  int _error;
  RBuffer *rv;
  _Bool wr;
  _Bool eof;
} FileDescriptor;


typedef enum {
  kFileReadOnly = 1,
  kFileCreate = 2,

  kFileWriteOnly = 4,

  kFileNoSymlink = 8,
  kFileCreateOnly = 16,


  kFileTruncate = 32,


  kFileAppend = 64,

} FileOpenFlags;

static inline _Bool file_eof(const FileDescriptor *const fp)
  __attribute__ ((pure)) __attribute__((warn_unused_result)) __attribute__((nonnull));







static inline _Bool file_eof(const FileDescriptor *const fp)
{
  return fp->eof && rbuffer_size(fp->rv) == 0;
}

static inline int file_fd(const FileDescriptor *const fp)
  __attribute__ ((pure)) __attribute__((warn_unused_result)) __attribute__((nonnull));






static inline int file_fd(const FileDescriptor *const fp)
{
  return fp->fd;
}

enum {



  kRWBufferSize = 1024
};
# 39 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 40 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/fold.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/src/nvim/fold.h"
typedef struct foldinfo {
  linenr_T fi_lnum;
  int fi_level;

  int fi_low_level;

} foldinfo_T;
# 41 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/getchar.h" 1
# 42 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/if_cscope.h" 1
# 45 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/indent_c.h" 1
# 46 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/indent.h" 1
# 47 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/mark.h" 1






# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 8 "/Users/a/Documents/projects/neovim-src/src/nvim/mark.h" 2
# 54 "/Users/a/Documents/projects/neovim-src/src/nvim/mark.h"
static inline int mark_global_index(const char name)
  FUNC_ATTR_CONST
{
  return (((unsigned)(name) >= 'A' && (unsigned)(name) <= 'Z')
          ? (name - 'A')
          : (ascii_isdigit(name)
             ? (('z' - 'a' + 1) + (name - '0'))
             : -1));
}


static inline int mark_local_index(const char name)
  FUNC_ATTR_CONST
{
  return (((unsigned)(name) >= 'a' && (unsigned)(name) <= 'z')
          ? (name - 'a')
          : (name == '"'
             ? ('z' - 'a' + 1)
             : (name == '^'
                ? ('z' - 'a' + 1) + 1
                : (name == '.'
                   ? ('z' - 'a' + 1) + 2
                   : -1))));
}

static inline _Bool lt(pos_T, pos_T) __attribute__((const)) __attribute__((always_inline));
static inline _Bool equalpos(pos_T, pos_T)
  __attribute__((const)) __attribute__((always_inline));
static inline _Bool ltoreq(pos_T, pos_T)
  __attribute__((const)) __attribute__((always_inline));
static inline void clearpos(pos_T *)
  __attribute__((always_inline));


static inline _Bool lt(pos_T a, pos_T b)
{
  if (a.lnum != b.lnum) {
    return a.lnum < b.lnum;
  } else if (a.col != b.col) {
    return a.col < b.col;
  } else {
    return a.coladd < b.coladd;
  }
}


static inline _Bool equalpos(pos_T a, pos_T b)
{
  return (a.lnum == b.lnum) && (a.col == b.col) && (a.coladd == b.coladd);
}


static inline _Bool ltoreq(pos_T a, pos_T b)
{
  return lt(a, b) || equalpos(a, b);
}


static inline void clearpos(pos_T *a)
{
  a->lnum = 0;
  a->col = 0;
  a->coladd = 0;
}
# 48 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/memline.h" 1
# 50 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/misc1.h" 1




# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/shell.h" 1








typedef enum {
  kShellOptFilter = 1,
  kShellOptExpand = 2,
  kShellOptDoOut = 4,
  kShellOptSilent = 8,
  kShellOptRead = 16,
  kShellOptWrite = 32,
  kShellOptHideMess = 64,
} ShellOpts;
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/misc1.h" 2
# 54 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/file_search.h" 1
# 57 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/move.h" 1
# 59 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/ops.h" 1
# 14 "/Users/a/Documents/projects/neovim-src/src/nvim/ops.h"
typedef int (*Indenter)(void);
# 75 "/Users/a/Documents/projects/neovim-src/src/nvim/ops.h"
enum GRegFlags {
  kGRegNoExpr = 1,
  kGRegExprSrc = 2,
  kGRegList = 4
};


typedef struct yankreg {
  char_u **y_array;
  size_t y_size;
  MotionType y_type;
  colnr_T y_width;
  Timestamp timestamp;
  dict_T *additional_data;
} yankreg_T;






static inline int op_reg_index(const int regname)
  FUNC_ATTR_CONST
{
  if (ascii_isdigit(regname)) {
    return regname - '0';
  } else if (((unsigned)(regname) >= 'a' && (unsigned)(regname) <= 'z')) {
    return ((uint8_t)(regname) - 'a') + 10;
  } else if (((unsigned)(regname) >= 'A' && (unsigned)(regname) <= 'Z')) {
    return ((uint8_t)(regname) - 'A') + 10;
  } else if (regname == '-') {
    return 36;
  } else if (regname == '*') {
    return 37;
  } else if (regname == '+') {
    return 38;
  } else {
    return -1;
  }
}
# 61 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/option.h" 1
# 15 "/Users/a/Documents/projects/neovim-src/src/nvim/option.h"
typedef enum {
  OPT_FREE = 1,
  OPT_GLOBAL = 2,
  OPT_LOCAL = 4,
  OPT_MODELINE = 8,
  OPT_WINONLY = 16,
  OPT_NOWIN = 32,
} OptionFlags;
# 62 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os_unix.h" 1
# 63 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/path.h" 1



# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/path.h" 2
# 30 "/Users/a/Documents/projects/neovim-src/src/nvim/path.h"
typedef enum file_comparison {
  kEqualFiles = 1,
  kDifferentFiles = 2,
  kBothFilesMissing = 4,
  kOneFileMissing = 6,
  kEqualFileNames = 7
} FileComparison;
# 64 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/popupmnu.h" 1






typedef struct {
  char_u *pum_text;
  char_u *pum_kind;
  char_u *pum_extra;
  char_u *pum_info;
} pumitem_T;
# 65 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/quickfix.h" 1
# 67 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/regexp.h" 1
# 68 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/search.h" 1
# 56 "/Users/a/Documents/projects/neovim-src/src/nvim/search.h"
typedef struct soffset {
  char dir;
  _Bool line;
  _Bool end;
  int64_t off;
} SearchOffset;


typedef struct spat {
  char_u *pat;
  _Bool magic;
  _Bool no_scs;
  Timestamp timestamp;
  SearchOffset off;
  dict_T *additional_data;
} SearchPattern;
# 70 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/sha256.h" 1




# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 6 "/Users/a/Documents/projects/neovim-src/src/nvim/sha256.h" 2






typedef struct {
  uint32_t total[2];
  uint32_t state[8];
  char_u buffer[64];
} context_sha256_T;
# 71 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/spell.h" 1





# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/spell_defs.h" 1
# 18 "/Users/a/Documents/projects/neovim-src/src/nvim/spell_defs.h"
typedef int idx_T;
# 70 "/Users/a/Documents/projects/neovim-src/src/nvim/spell_defs.h"
typedef struct fromto_S {
  char_u *ft_from;
  char_u *ft_to;
} fromto_T;




typedef struct salitem_S {
  char_u *sm_lead;
  int sm_leadlen;
  char_u *sm_oneof;
  char_u *sm_rules;
  char_u *sm_to;
  int *sm_lead_w;
  int *sm_oneof_w;
  int *sm_to_w;
} salitem_T;

typedef int salfirst_T;
# 110 "/Users/a/Documents/projects/neovim-src/src/nvim/spell_defs.h"
typedef struct slang_S slang_T;

struct slang_S {
  slang_T *sl_next;
  char_u *sl_name;
  char_u *sl_fname;
  _Bool sl_add;

  char_u *sl_fbyts;
  idx_T *sl_fidxs;
  char_u *sl_kbyts;
  idx_T *sl_kidxs;
  char_u *sl_pbyts;
  idx_T *sl_pidxs;

  char_u *sl_info;

  char_u sl_regions[17];

  char_u *sl_midword;

  hashtab_T sl_wordcount;

  int sl_compmax;
  int sl_compminlen;
  int sl_compsylmax;
  int sl_compoptions;
  garray_T sl_comppat;
  regprog_T *sl_compprog;

  char_u *sl_comprules;
  char_u *sl_compstartflags;
  char_u *sl_compallflags;
  _Bool sl_nobreak;
  char_u *sl_syllable;
  garray_T sl_syl_items;

  int sl_prefixcnt;
  regprog_T **sl_prefprog;

  garray_T sl_rep;
  int16_t sl_rep_first[256];

  garray_T sl_sal;
  salfirst_T sl_sal_first[256];

  _Bool sl_followup;
  _Bool sl_collapse;
  _Bool sl_rem_accents;
  _Bool sl_sofo;


  garray_T sl_repsal;
  int16_t sl_repsal_first[256];
  _Bool sl_nosplitsugs;
  _Bool sl_nocompoundsugs;


  time_t sl_sugtime;
  char_u *sl_sbyts;
  idx_T *sl_sidxs;
  buf_T *sl_sugbuf;
  _Bool sl_sugloaded;


  _Bool sl_has_map;
  hashtab_T sl_map_hash;
  int sl_map_array[256];
  hashtab_T sl_sounddone;

};


typedef struct langp_S {
  slang_T *lp_slang;
  slang_T *lp_sallang;
  slang_T *lp_replang;
  int lp_region;
} langp_T;
# 200 "/Users/a/Documents/projects/neovim-src/src/nvim/spell_defs.h"
typedef struct {
  _Bool st_isw[256];
  _Bool st_isu[256];
  char_u st_fold[256];
  char_u st_upper[256];
} spelltab_T;


typedef enum {
  STATE_START = 0,


  STATE_NOPREFIX,
  STATE_SPLITUNDO,
  STATE_ENDNUL,
  STATE_PLAIN,
  STATE_DEL,
  STATE_INS_PREP,
  STATE_INS,
  STATE_SWAP,
  STATE_UNSWAP,
  STATE_SWAP3,
  STATE_UNSWAP3,
  STATE_UNROT3L,
  STATE_UNROT3R,
  STATE_REP_INI,
  STATE_REP,
  STATE_REP_UNDO,
  STATE_FINAL
} state_T;


typedef struct trystate_S {
  state_T ts_state;
  int ts_score;
  idx_T ts_arridx;
  short ts_curi;
  char_u ts_fidx;
  char_u ts_fidxtry;
  char_u ts_twordlen;
  char_u ts_prefixdepth;

  char_u ts_flags;
  char_u ts_tcharlen;
  char_u ts_tcharidx;
  char_u ts_isdiff;
  char_u ts_fcharstart;
  char_u ts_prewordlen;
  char_u ts_splitoff;
  char_u ts_splitfidx;
  char_u ts_complen;
  char_u ts_compsplit;
  char_u ts_save_badflags;
  char_u ts_delidx;

} trystate_T;





# 1 "/usr/include/wchar.h" 1 3 4
# 76 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/sys/_types/_mbstate_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_mbstate_t.h" 3 4
typedef __darwin_mbstate_t mbstate_t;
# 77 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 80 "/usr/include/wchar.h" 2 3 4
# 92 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/_wctype.h" 1 3 4
# 47 "/usr/include/_wctype.h" 3 4
# 1 "/usr/include/_types/_wctype_t.h" 1 3 4
# 31 "/usr/include/_types/_wctype_t.h" 3 4
typedef __darwin_wctype_t wctype_t;
# 48 "/usr/include/_wctype.h" 2 3 4
# 65 "/usr/include/_wctype.h" 3 4
inline int
iswalnum(wint_t _wc)
{
 return (__istype(_wc, 0x00000100L|0x00000400L));
}

inline int
iswalpha(wint_t _wc)
{
 return (__istype(_wc, 0x00000100L));
}

inline int
iswcntrl(wint_t _wc)
{
 return (__istype(_wc, 0x00000200L));
}

inline int
iswctype(wint_t _wc, wctype_t _charclass)
{
 return (__istype(_wc, _charclass));
}

inline int
iswdigit(wint_t _wc)
{
 return (__isctype(_wc, 0x00000400L));
}

inline int
iswgraph(wint_t _wc)
{
 return (__istype(_wc, 0x00000800L));
}

inline int
iswlower(wint_t _wc)
{
 return (__istype(_wc, 0x00001000L));
}

inline int
iswprint(wint_t _wc)
{
 return (__istype(_wc, 0x00040000L));
}

inline int
iswpunct(wint_t _wc)
{
 return (__istype(_wc, 0x00002000L));
}

inline int
iswspace(wint_t _wc)
{
 return (__istype(_wc, 0x00004000L));
}

inline int
iswupper(wint_t _wc)
{
 return (__istype(_wc, 0x00008000L));
}

inline int
iswxdigit(wint_t _wc)
{
 return (__isctype(_wc, 0x00010000L));
}

inline wint_t
towlower(wint_t _wc)
{
        return (__tolower(_wc));
}

inline wint_t
towupper(wint_t _wc)
{
        return (__toupper(_wc));
}
# 171 "/usr/include/_wctype.h" 3 4
wctype_t
 wctype(const char *);




# 1 "/usr/include/xlocale/__wctype.h" 1 3 4
# 30 "/usr/include/xlocale/__wctype.h" 3 4
inline int
iswalnum_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000100L|0x00000400L, _l));
}

inline int
iswalpha_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000100L, _l));
}

inline int
iswcntrl_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000200L, _l));
}

inline int
iswctype_l(wint_t _wc, wctype_t _charclass, locale_t _l)
{
 return (__istype_l(_wc, _charclass, _l));
}

inline int
iswdigit_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000400L, _l));
}

inline int
iswgraph_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00000800L, _l));
}

inline int
iswlower_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00001000L, _l));
}

inline int
iswprint_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00040000L, _l));
}

inline int
iswpunct_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00002000L, _l));
}

inline int
iswspace_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00004000L, _l));
}

inline int
iswupper_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00008000L, _l));
}

inline int
iswxdigit_l(wint_t _wc, locale_t _l)
{
 return (__istype_l(_wc, 0x00010000L, _l));
}

inline wint_t
towlower_l(wint_t _wc, locale_t _l)
{
        return (__tolower_l(_wc, _l));
}

inline wint_t
towupper_l(wint_t _wc, locale_t _l)
{
        return (__toupper_l(_wc, _l));
}
# 136 "/usr/include/xlocale/__wctype.h" 3 4
wctype_t
 wctype_l(const char *, locale_t);
# 177 "/usr/include/_wctype.h" 2 3 4
# 93 "/usr/include/wchar.h" 2 3 4




wint_t btowc(int);
wint_t fgetwc(FILE *);
wchar_t *fgetws(wchar_t * restrict, int, FILE * restrict);
wint_t fputwc(wchar_t, FILE *);
int fputws(const wchar_t * restrict, FILE * restrict);
int fwide(FILE *, int);
int fwprintf(FILE * restrict, const wchar_t * restrict, ...);
int fwscanf(FILE * restrict, const wchar_t * restrict, ...);
wint_t getwc(FILE *);
wint_t getwchar(void);
size_t mbrlen(const char * restrict, size_t, mbstate_t * restrict);
size_t mbrtowc(wchar_t * restrict, const char * restrict, size_t,
     mbstate_t * restrict);
int mbsinit(const mbstate_t *);
size_t mbsrtowcs(wchar_t * restrict, const char ** restrict, size_t,
     mbstate_t * restrict);
wint_t putwc(wchar_t, FILE *);
wint_t putwchar(wchar_t);
int swprintf(wchar_t * restrict, size_t, const wchar_t * restrict, ...);
int swscanf(const wchar_t * restrict, const wchar_t * restrict, ...);
wint_t ungetwc(wint_t, FILE *);
int vfwprintf(FILE * restrict, const wchar_t * restrict,
     __darwin_va_list);
int vswprintf(wchar_t * restrict, size_t, const wchar_t * restrict,
     __darwin_va_list);
int vwprintf(const wchar_t * restrict, __darwin_va_list);
size_t wcrtomb(char * restrict, wchar_t, mbstate_t * restrict);
wchar_t *wcscat(wchar_t * restrict, const wchar_t * restrict);
wchar_t *wcschr(const wchar_t *, wchar_t);
int wcscmp(const wchar_t *, const wchar_t *);
int wcscoll(const wchar_t *, const wchar_t *);
wchar_t *wcscpy(wchar_t * restrict, const wchar_t * restrict);
size_t wcscspn(const wchar_t *, const wchar_t *);
size_t wcsftime(wchar_t * restrict, size_t, const wchar_t * restrict,
     const struct tm * restrict) __asm("_" "wcsftime" );
size_t wcslen(const wchar_t *);
wchar_t *wcsncat(wchar_t * restrict, const wchar_t * restrict, size_t);
int wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wcsncpy(wchar_t * restrict , const wchar_t * restrict, size_t);
wchar_t *wcspbrk(const wchar_t *, const wchar_t *);
wchar_t *wcsrchr(const wchar_t *, wchar_t);
size_t wcsrtombs(char * restrict, const wchar_t ** restrict, size_t,
     mbstate_t * restrict);
size_t wcsspn(const wchar_t *, const wchar_t *);
wchar_t *wcsstr(const wchar_t * restrict, const wchar_t * restrict);
size_t wcsxfrm(wchar_t * restrict, const wchar_t * restrict, size_t);
int wctob(wint_t);
double wcstod(const wchar_t * restrict, wchar_t ** restrict);
wchar_t *wcstok(wchar_t * restrict, const wchar_t * restrict,
     wchar_t ** restrict);
long wcstol(const wchar_t * restrict, wchar_t ** restrict, int);
unsigned long
  wcstoul(const wchar_t * restrict, wchar_t ** restrict, int);
wchar_t *wmemchr(const wchar_t *, wchar_t, size_t);
int wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wmemcpy(wchar_t * restrict, const wchar_t * restrict, size_t);
wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t *wmemset(wchar_t *, wchar_t, size_t);
int wprintf(const wchar_t * restrict, ...);
int wscanf(const wchar_t * restrict, ...);
int wcswidth(const wchar_t *, size_t);
int wcwidth(wchar_t);
# 170 "/usr/include/wchar.h" 3 4
int vfwscanf(FILE * restrict, const wchar_t * restrict,
     __darwin_va_list);
int vswscanf(const wchar_t * restrict, const wchar_t * restrict,
     __darwin_va_list);
int vwscanf(const wchar_t * restrict, __darwin_va_list);
float wcstof(const wchar_t * restrict, wchar_t ** restrict);
long double
 wcstold(const wchar_t * restrict, wchar_t ** restrict);

long long
 wcstoll(const wchar_t * restrict, wchar_t ** restrict, int);
unsigned long long
 wcstoull(const wchar_t * restrict, wchar_t ** restrict, int);
# 195 "/usr/include/wchar.h" 3 4
size_t mbsnrtowcs(wchar_t * restrict, const char ** restrict, size_t,
            size_t, mbstate_t * restrict);
wchar_t *wcpcpy(wchar_t * restrict, const wchar_t * restrict) __attribute__((availability(macosx,introduced=10.7)));
wchar_t *wcpncpy(wchar_t * restrict, const wchar_t * restrict, size_t) __attribute__((availability(macosx,introduced=10.7)));
wchar_t *wcsdup(const wchar_t *) __attribute__((availability(macosx,introduced=10.7)));
int wcscasecmp(const wchar_t *, const wchar_t *) __attribute__((availability(macosx,introduced=10.7)));
int wcsncasecmp(const wchar_t *, const wchar_t *, size_t n) __attribute__((availability(macosx,introduced=10.7)));
size_t wcsnlen(const wchar_t *, size_t) __attribute__((availability(macosx,introduced=10.7)));
size_t wcsnrtombs(char * restrict, const wchar_t ** restrict, size_t,
            size_t, mbstate_t * restrict);
# 214 "/usr/include/wchar.h" 3 4
wchar_t *fgetwln(FILE * restrict, size_t *) __attribute__((availability(macosx,introduced=10.7)));
size_t wcslcat(wchar_t *, const wchar_t *, size_t);
size_t wcslcpy(wchar_t *, const wchar_t *, size_t);
# 227 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/xlocale/_wchar.h" 1 3 4
# 29 "/usr/include/xlocale/_wchar.h" 3 4
wint_t btowc_l(int, locale_t);
wint_t fgetwc_l(FILE *, locale_t);
wchar_t *fgetws_l(wchar_t * restrict, int, FILE * restrict, locale_t);
wint_t fputwc_l(wchar_t, FILE *, locale_t);
int fputws_l(const wchar_t * restrict, FILE * restrict, locale_t);
int fwprintf_l(FILE * restrict, locale_t, const wchar_t * restrict, ...);
int fwscanf_l(FILE * restrict, locale_t, const wchar_t * restrict, ...);
wint_t getwc_l(FILE *, locale_t);
wint_t getwchar_l(locale_t);
size_t mbrlen_l(const char * restrict, size_t, mbstate_t * restrict,
     locale_t);
size_t mbrtowc_l(wchar_t * restrict, const char * restrict, size_t,
     mbstate_t * restrict, locale_t);
int mbsinit_l(const mbstate_t *, locale_t);
size_t mbsrtowcs_l(wchar_t * restrict, const char ** restrict, size_t,
     mbstate_t * restrict, locale_t);
wint_t putwc_l(wchar_t, FILE *, locale_t);
wint_t putwchar_l(wchar_t, locale_t);
int swprintf_l(wchar_t * restrict, size_t n, locale_t,
  const wchar_t * restrict, ...);
int swscanf_l(const wchar_t * restrict, locale_t,
  const wchar_t * restrict, ...);
wint_t ungetwc_l(wint_t, FILE *, locale_t);
int vfwprintf_l(FILE * restrict, locale_t, const wchar_t * restrict,
  __darwin_va_list);
int vswprintf_l(wchar_t * restrict, size_t n, locale_t,
  const wchar_t * restrict, __darwin_va_list);
int vwprintf_l(locale_t, const wchar_t * restrict, __darwin_va_list);
size_t wcrtomb_l(char * restrict, wchar_t, mbstate_t * restrict,
     locale_t);
int wcscoll_l(const wchar_t *, const wchar_t *, locale_t);
size_t wcsftime_l(wchar_t * restrict, size_t, const wchar_t * restrict,
  const struct tm * restrict, locale_t)
  __asm("_" "wcsftime_l" );
size_t wcsrtombs_l(char * restrict, const wchar_t ** restrict, size_t,
     mbstate_t * restrict, locale_t);
double wcstod_l(const wchar_t * restrict, wchar_t ** restrict, locale_t);
long wcstol_l(const wchar_t * restrict, wchar_t ** restrict, int,
     locale_t);
unsigned long
 wcstoul_l(const wchar_t * restrict, wchar_t ** restrict, int,
     locale_t);
int wcswidth_l(const wchar_t *, size_t, locale_t);
size_t wcsxfrm_l(wchar_t * restrict, const wchar_t * restrict, size_t,
     locale_t);
int wctob_l(wint_t, locale_t);
int wcwidth_l(wchar_t, locale_t);
int wprintf_l(locale_t, const wchar_t * restrict, ...);
int wscanf_l(locale_t, const wchar_t * restrict, ...);
# 88 "/usr/include/xlocale/_wchar.h" 3 4
int vfwscanf_l(FILE * restrict, locale_t, const wchar_t * restrict,
  __darwin_va_list);
int vswscanf_l(const wchar_t * restrict, locale_t,
  const wchar_t * restrict, __darwin_va_list);
int vwscanf_l(locale_t, const wchar_t * restrict, __darwin_va_list);
float wcstof_l(const wchar_t * restrict, wchar_t ** restrict, locale_t);
long double
 wcstold_l(const wchar_t * restrict, wchar_t ** restrict, locale_t);

long long
 wcstoll_l(const wchar_t * restrict, wchar_t ** restrict, int,
     locale_t);
unsigned long long
 wcstoull_l(const wchar_t * restrict, wchar_t ** restrict, int,
     locale_t);
# 115 "/usr/include/xlocale/_wchar.h" 3 4
size_t mbsnrtowcs_l(wchar_t * restrict, const char ** restrict, size_t,
     size_t, mbstate_t * restrict, locale_t);
int wcscasecmp_l(const wchar_t *, const wchar_t *, locale_t) __attribute__((availability(macosx,introduced=10.7)));
int wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t n, locale_t) __attribute__((availability(macosx,introduced=10.7)));
size_t wcsnrtombs_l(char * restrict, const wchar_t ** restrict, size_t,
     size_t, mbstate_t * restrict, locale_t);
# 130 "/usr/include/xlocale/_wchar.h" 3 4
wchar_t *fgetwln_l(FILE * restrict, size_t *, locale_t) __attribute__((availability(macosx,introduced=10.7)));
# 228 "/usr/include/wchar.h" 2 3 4
# 261 "/Users/a/Documents/projects/neovim-src/src/nvim/spell_defs.h" 2
# 277 "/Users/a/Documents/projects/neovim-src/src/nvim/spell_defs.h"
extern slang_T *first_lang;


extern char_u *int_wordlist;

extern spelltab_T spelltab;
extern int did_set_spelltab;

extern char *e_format;
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/spell.h" 2
# 72 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/state.h" 1



# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/state.h" 2

typedef struct vim_state VimState;

typedef int(*state_check_callback)(VimState *state);
typedef int(*state_execute_callback)(VimState *state, int key);

struct vim_state {
  state_check_callback check;
  state_execute_callback execute;
};
# 73 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/syntax.h" 1
# 42 "/Users/a/Documents/projects/neovim-src/src/nvim/syntax.h"
typedef struct {
  char *name;
  RgbValue color;
} color_name_table_T;
extern color_name_table_T color_name_table[];


extern const char *const highlight_init_cmdline[];
# 75 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/tag.h" 1
# 41 "/Users/a/Documents/projects/neovim-src/src/nvim/tag.h"
typedef struct {
  char_u *tn_tags;
  char_u *tn_np;
  int tn_did_filefind_init;
  int tn_hf_idx;
  void *tn_search_ctx;
} tagname_T;
# 76 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/ui.h" 1



# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/ui.h" 2






typedef enum {
  kUICmdline = 0,
  kUIPopupmenu,
  kUITabline,
  kUIWildmenu,
  kUIMultigrid,
  kUIMessages,
} UIWidget;


typedef struct {
  _Bool bold, underline, undercurl, italic, reverse;
  int foreground, background, special;
} HlAttrs;




typedef struct ui_t UI;

struct ui_t {
  _Bool rgb;
  _Bool ui_ext[(kUIMessages + 1)];
  int width, height;
  void *data;



  void (*event)(UI *ui, char *name, Array args, _Bool *args_consumed);
  void (*stop)(UI *ui);
};
# 77 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/mouse.h" 1
# 79 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/undo.h" 1
# 81 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/version.h" 1






extern char* Version;
extern char* longVersion;
# 82 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/encode.h" 1



# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/encode.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 1
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/encode.h" 2
# 19 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/encode.h"
int encode_vim_to_msgpack(msgpack_packer *const packer,
                          typval_T *const tv,
                          const char *const objname);
# 30 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/encode.h"
int encode_vim_to_echo(garray_T *const packer,
                       typval_T *const tv,
                       const char *const objname);


typedef struct {
  const list_T *const list;
  const listitem_T *li;
  size_t offset;
  size_t li_length;
} ListReaderState;


static inline ListReaderState encode_init_lrstate(const list_T *const list)
  FUNC_ATTR_NONNULL_ALL
{
  return (ListReaderState) {
    .list = list,
    .li = tv_list_first(list),
    .offset = 0,
    .li_length = ((&(tv_list_first(list))->li_tv)->vval.v_string == ((void*)0)
                  ? 0
                  : strlen((char *)((&(tv_list_first(list))->li_tv)->vval.v_string))),

  };
}


extern const char *const encode_special_var_names[];
# 84 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/decode.h" 1



# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/decode.h" 2

# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 1
# 7 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/decode.h" 2
# 85 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2





# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/event/time.h" 1







typedef struct time_watcher TimeWatcher;
typedef void (*time_cb)(TimeWatcher *watcher, void *data);

struct time_watcher {
  uv_timer_t uv;
  void *data;
  time_cb cb, close_cb;
  MultiQueue *events;
  _Bool blockable;
};
# 91 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/msgpack_rpc/channel.h" 1
# 18 "/Users/a/Documents/projects/neovim-src/src/nvim/msgpack_rpc/channel.h"
MultiQueue *ch_before_blocking_events;
# 93 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/msgpack_rpc/server.h" 1
# 94 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/msgpack_rpc/helpers.h" 1






# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/msgpack.h" 1
# 8 "/Users/a/Documents/projects/neovim-src/src/nvim/msgpack_rpc/helpers.h" 2
# 95 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/api/private/helpers.h" 1
# 90 "/Users/a/Documents/projects/neovim-src/src/nvim/api/private/helpers.h"
typedef struct {
  except_T *current_exception;
  struct msglist *private_msg_list;
  const struct msglist *const *msg_list;
  int trylevel;
  int got_int;
  int did_throw;
  int need_rethrow;
  int did_emsg;
} TryState;
# 96 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/api/vim.h" 1
# 97 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/dl.h" 1
# 98 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/os/input.h" 1
# 99 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2




# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/lua/executor.h" 1



# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/lua.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/lua.h"
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/lua.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/luaconf.h" 1
# 13 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/luaconf.h"
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 14 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/luaconf.h" 2
# 17 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/lua.h" 2
# 50 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/lua.h"
typedef struct lua_State lua_State;

typedef int (*lua_CFunction) (lua_State *L);





typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);

typedef int (*lua_Writer) (lua_State *L, const void* p, size_t sz, void* ud);





typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);
# 99 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/lua.h"
typedef double lua_Number;



typedef ptrdiff_t lua_Integer;






extern lua_State *(lua_newstate) (lua_Alloc f, void *ud);
extern void (lua_close) (lua_State *L);
extern lua_State *(lua_newthread) (lua_State *L);

extern lua_CFunction (lua_atpanic) (lua_State *L, lua_CFunction panicf);





extern int (lua_gettop) (lua_State *L);
extern void (lua_settop) (lua_State *L, int idx);
extern void (lua_pushvalue) (lua_State *L, int idx);
extern void (lua_remove) (lua_State *L, int idx);
extern void (lua_insert) (lua_State *L, int idx);
extern void (lua_replace) (lua_State *L, int idx);
extern int (lua_checkstack) (lua_State *L, int sz);

extern void (lua_xmove) (lua_State *from, lua_State *to, int n);






extern int (lua_isnumber) (lua_State *L, int idx);
extern int (lua_isstring) (lua_State *L, int idx);
extern int (lua_iscfunction) (lua_State *L, int idx);
extern int (lua_isuserdata) (lua_State *L, int idx);
extern int (lua_type) (lua_State *L, int idx);
extern const char *(lua_typename) (lua_State *L, int tp);

extern int (lua_equal) (lua_State *L, int idx1, int idx2);
extern int (lua_rawequal) (lua_State *L, int idx1, int idx2);
extern int (lua_lessthan) (lua_State *L, int idx1, int idx2);

extern lua_Number (lua_tonumber) (lua_State *L, int idx);
extern lua_Integer (lua_tointeger) (lua_State *L, int idx);
extern int (lua_toboolean) (lua_State *L, int idx);
extern const char *(lua_tolstring) (lua_State *L, int idx, size_t *len);
extern size_t (lua_objlen) (lua_State *L, int idx);
extern lua_CFunction (lua_tocfunction) (lua_State *L, int idx);
extern void *(lua_touserdata) (lua_State *L, int idx);
extern lua_State *(lua_tothread) (lua_State *L, int idx);
extern const void *(lua_topointer) (lua_State *L, int idx);





extern void (lua_pushnil) (lua_State *L);
extern void (lua_pushnumber) (lua_State *L, lua_Number n);
extern void (lua_pushinteger) (lua_State *L, lua_Integer n);
extern void (lua_pushlstring) (lua_State *L, const char *s, size_t l);
extern void (lua_pushstring) (lua_State *L, const char *s);
extern const char *(lua_pushvfstring) (lua_State *L, const char *fmt,
                                                      va_list argp);
extern const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);
extern void (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);
extern void (lua_pushboolean) (lua_State *L, int b);
extern void (lua_pushlightuserdata) (lua_State *L, void *p);
extern int (lua_pushthread) (lua_State *L);





extern void (lua_gettable) (lua_State *L, int idx);
extern void (lua_getfield) (lua_State *L, int idx, const char *k);
extern void (lua_rawget) (lua_State *L, int idx);
extern void (lua_rawgeti) (lua_State *L, int idx, int n);
extern void (lua_createtable) (lua_State *L, int narr, int nrec);
extern void *(lua_newuserdata) (lua_State *L, size_t sz);
extern int (lua_getmetatable) (lua_State *L, int objindex);
extern void (lua_getfenv) (lua_State *L, int idx);





extern void (lua_settable) (lua_State *L, int idx);
extern void (lua_setfield) (lua_State *L, int idx, const char *k);
extern void (lua_rawset) (lua_State *L, int idx);
extern void (lua_rawseti) (lua_State *L, int idx, int n);
extern int (lua_setmetatable) (lua_State *L, int objindex);
extern int (lua_setfenv) (lua_State *L, int idx);





extern void (lua_call) (lua_State *L, int nargs, int nresults);
extern int (lua_pcall) (lua_State *L, int nargs, int nresults, int errfunc);
extern int (lua_cpcall) (lua_State *L, lua_CFunction func, void *ud);
extern int (lua_load) (lua_State *L, lua_Reader reader, void *dt,
                                        const char *chunkname);

extern int (lua_dump) (lua_State *L, lua_Writer writer, void *data);





extern int (lua_yield) (lua_State *L, int nresults);
extern int (lua_resume) (lua_State *L, int narg);
extern int (lua_status) (lua_State *L);
# 230 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/lua.h"
extern int (lua_gc) (lua_State *L, int what, int data);






extern int (lua_error) (lua_State *L);

extern int (lua_next) (lua_State *L, int idx);

extern void (lua_concat) (lua_State *L, int n);

extern lua_Alloc (lua_getallocf) (lua_State *L, void **ud);
extern void lua_setallocf (lua_State *L, lua_Alloc f, void *ud);
# 298 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/lua.h"
extern void lua_setlevel (lua_State *from, lua_State *to);
# 326 "/Users/a/Documents/projects/neovim-src/.deps/usr/include/luajit-2.0/lua.h"
typedef struct lua_Debug lua_Debug;



typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);


extern int lua_getstack (lua_State *L, int level, lua_Debug *ar);
extern int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar);
extern const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n);
extern const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n);
extern const char *lua_getupvalue (lua_State *L, int funcindex, int n);
extern const char *lua_setupvalue (lua_State *L, int funcindex, int n);
extern int lua_sethook (lua_State *L, lua_Hook func, int mask, int count);
extern lua_Hook lua_gethook (lua_State *L);
extern int lua_gethookmask (lua_State *L);
extern int lua_gethookcount (lua_State *L);


extern void *lua_upvalueid (lua_State *L, int idx, int n);
extern void lua_upvaluejoin (lua_State *L, int idx1, int n1, int idx2, int n2);
extern int lua_loadx (lua_State *L, lua_Reader reader, void *dt,
         const char *chunkname, const char *mode);


struct lua_Debug {
  int event;
  const char *name;
  const char *namewhat;
  const char *what;
  const char *source;
  int currentline;
  int nups;
  int linedefined;
  int lastlinedefined;
  char short_src[60];

  int i_ci;
};
# 5 "/Users/a/Documents/projects/neovim-src/src/nvim/lua/executor.h" 2


# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/func_attr.h" 1
# 8 "/Users/a/Documents/projects/neovim-src/src/nvim/lua/executor.h" 2




void nlua_add_api_functions(lua_State *lstate) __attribute__((nonnull));
# 104 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2

# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/executor.h" 1





extern char *e_listidx;
# 106 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 1 "/Users/a/Documents/projects/neovim-src/src/nvim/eval/gc.h" 1





extern dict_T *gc_first_dict;
extern list_T *gc_first_list;
# 107 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c" 2
# 143 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
typedef struct lval_S {
  const char *ll_name;
  size_t ll_name_len;
  char *ll_exp_name;
  typval_T *ll_tv;

  listitem_T *ll_li;
  list_T *ll_list;
  int ll_range;
  long ll_n1;
  long ll_n2;
  int ll_empty2;
  dict_T *ll_dict;
  dictitem_T *ll_di;
  char_u *ll_newkey;
} lval_T;


static char *e_letunexp = "E18: Unexpected characters in :let";
static char *e_missbrac = "E111: Missing ']'";
static char *e_listarg = "E686: Argument of %s must be a List";
static char *e_listdictarg = "E712: Argument of %s must be a List or Dictionary";

static char *e_listreq = "E714: List required";
static char *e_dictreq = "E715: Dictionary required";
static char *e_stringreq = "E928: String required";
static char *e_toomanyarg = "E118: Too many arguments for function: %s";
static char *e_dictkey = "E716: Key not present in Dictionary: %s";
static char *e_funcexts = "E122: Function %s already exists, add ! to replace it";

static char *e_funcdict = "E717: Dictionary entry already exists";
static char *e_funcref = "E718: Funcref required";
static char *e_dictrange = "E719: Cannot use [:] with a Dictionary";
static char *e_nofunc = "E130: Unknown function: %s";
static char *e_illvar = "E461: Illegal variable name: %s";
static const char *e_readonlyvar = "E46: Cannot change read-only variable \"%.*s\"";



static char *e_letwrong = "E734: Wrong variable type for %s=";

static char_u * const namespace_char = (char_u *)"abglstvw";


static ScopeDictDictItem globvars_var;
# 196 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static hashtab_T compat_hashtab;

hashtab_T func_hashtab;


static int *eval_lavars_used = ((void*)0);





typedef struct {
  ScopeDictDictItem sv_var;
  dict_T sv_dict;
} scriptvar_T;

static garray_T ga_scripts = {0, 0, sizeof(scriptvar_T *), 4, ((void*)0)};



static int echo_attr = 0;


typedef enum {
  kSomeMatch,
  kSomeMatchEnd,
  kSomeMatchList,
  kSomeMatchStr,
  kSomeMatchStrPos,
} SomeMatchType;


typedef enum {
  TFN_INT = 1,
  TFN_QUIET = 2,
  TFN_NO_AUTOLOAD = 4,
  TFN_NO_DEREF = 8,
  TFN_READ_ONLY = 16,
} TransFunctionNameFlags;


typedef enum {
  GLV_QUIET = TFN_QUIET,
  GLV_NO_AUTOLOAD = TFN_NO_AUTOLOAD,
  GLV_READ_ONLY = TFN_READ_ONLY,

} GetLvalFlags;
# 253 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static garray_T ga_loaded = { 0, 0, sizeof(char_u *), 4, ((void*)0) };
# 263 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
struct funccall_S {
  ufunc_T *func;
  int linenr;
  int returned;

  struct { typval_T di_tv; uint8_t di_flags; char_u di_key[20 + 1]; } fixvar[12];
  dict_T l_vars;
  ScopeDictDictItem l_vars_var;
  dict_T l_avars;
  ScopeDictDictItem l_avars_var;
  list_T l_varlist;
  listitem_T l_listitems[20];
  typval_T *rettv;
  linenr_T breakpoint;
  int dbg_tick;
  int level;
  proftime_T prof_child;
  funccall_T *caller;
  int fc_refcount;
  int fc_copyID;
  garray_T fc_funcs;
};


typedef struct {
  dict_T *fd_dict;
  char_u *fd_newkey;
  dictitem_T *fd_di;
} funcdict_T;




typedef struct {
  int fi_semicolon;
  int fi_varcount;
  listwatch_T fi_lw;
  list_T *fi_list;
} forinfo_T;




typedef enum {
  VAR_FLAVOUR_DEFAULT,
  VAR_FLAVOUR_SESSION,
  VAR_FLAVOUR_SHADA
} var_flavour_T;
# 332 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static struct vimvar {
  char *vv_name;
  struct { typval_T di_tv; uint8_t di_flags; char_u di_key[17]; } vv_di;
  char vv_flags;
} vimvars[] =
{






  [VV_COUNT] = { .vv_name = "count", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_COUNT1] = { .vv_name = "count1", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_PREVCOUNT] = { .vv_name = "prevcount", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_ERRMSG] = { .vv_name = "errmsg", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 1, },
  [VV_WARNINGMSG] = { .vv_name = "warningmsg", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_STATUSMSG] = { .vv_name = "statusmsg", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_SHELL_ERROR] = { .vv_name = "shell_error", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 1 +2, },
  [VV_THIS_SESSION] = { .vv_name = "this_session", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 1, },
  [VV_VERSION] = { .vv_name = "version", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 1 +2, },
  [VV_LNUM] = { .vv_name = "lnum", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_TERMRESPONSE] = { .vv_name = "termresponse", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FNAME] = { .vv_name = "fname", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_LANG] = { .vv_name = "lang", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_LC_TIME] = { .vv_name = "lc_time", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CTYPE] = { .vv_name = "ctype", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CC_FROM] = { .vv_name = "charconvert_from", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CC_TO] = { .vv_name = "charconvert_to", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FNAME_IN] = { .vv_name = "fname_in", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FNAME_OUT] = { .vv_name = "fname_out", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FNAME_NEW] = { .vv_name = "fname_new", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FNAME_DIFF] = { .vv_name = "fname_diff", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CMDARG] = { .vv_name = "cmdarg", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FOLDSTART] = { .vv_name = "foldstart", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_FOLDEND] = { .vv_name = "foldend", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_FOLDDASHES] = { .vv_name = "folddashes", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_FOLDLEVEL] = { .vv_name = "foldlevel", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_PROGNAME] = { .vv_name = "progname", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_SEND_SERVER] = { .vv_name = "servername", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_DYING] = { .vv_name = "dying", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_EXCEPTION] = { .vv_name = "exception", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_THROWPOINT] = { .vv_name = "throwpoint", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_STDERR] = { .vv_name = "stderr", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_REG] = { .vv_name = "register", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CMDBANG] = { .vv_name = "cmdbang", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_INSERTMODE] = { .vv_name = "insertmode", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_VAL] = { .vv_name = "val", .vv_di = { .di_tv = { .v_type = VAR_UNKNOWN }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_KEY] = { .vv_name = "key", .vv_di = { .di_tv = { .v_type = VAR_UNKNOWN }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_PROFILING] = { .vv_name = "profiling", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FCS_REASON] = { .vv_name = "fcs_reason", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FCS_CHOICE] = { .vv_name = "fcs_choice", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_BEVAL_BUFNR] = { .vv_name = "beval_bufnr", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_BEVAL_WINNR] = { .vv_name = "beval_winnr", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_BEVAL_WINID] = { .vv_name = "beval_winid", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_BEVAL_LNUM] = { .vv_name = "beval_lnum", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_BEVAL_COL] = { .vv_name = "beval_col", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_BEVAL_TEXT] = { .vv_name = "beval_text", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_SCROLLSTART] = { .vv_name = "scrollstart", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_SWAPNAME] = { .vv_name = "swapname", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_SWAPCHOICE] = { .vv_name = "swapchoice", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_SWAPCOMMAND] = { .vv_name = "swapcommand", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_CHAR] = { .vv_name = "char", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_MOUSE_WIN] = { .vv_name = "mouse_win", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_MOUSE_WINID] = { .vv_name = "mouse_winid", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_MOUSE_LNUM] = { .vv_name = "mouse_lnum", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_MOUSE_COL] = { .vv_name = "mouse_col", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_OP] = { .vv_name = "operator", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_SEARCHFORWARD] = { .vv_name = "searchforward", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_HLSEARCH] = { .vv_name = "hlsearch", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_OLDFILES] = { .vv_name = "oldfiles", .vv_di = { .di_tv = { .v_type = VAR_LIST }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_WINDOWID] = { .vv_name = "windowid", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 4, },
  [VV_PROGPATH] = { .vv_name = "progpath", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_COMMAND_OUTPUT] = { .vv_name = "command_output", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_COMPLETED_ITEM] = { .vv_name = "completed_item", .vv_di = { .di_tv = { .v_type = VAR_DICT }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_OPTION_NEW] = { .vv_name = "option_new", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_OPTION_OLD] = { .vv_name = "option_old", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_OPTION_TYPE] = { .vv_name = "option_type", .vv_di = { .di_tv = { .v_type = VAR_STRING }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_ERRORS] = { .vv_name = "errors", .vv_di = { .di_tv = { .v_type = VAR_LIST }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_MSGPACK_TYPES] = { .vv_name = "msgpack_types", .vv_di = { .di_tv = { .v_type = VAR_DICT }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_EVENT] = { .vv_name = "event", .vv_di = { .di_tv = { .v_type = VAR_DICT }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_FALSE] = { .vv_name = "false", .vv_di = { .di_tv = { .v_type = VAR_SPECIAL }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TRUE] = { .vv_name = "true", .vv_di = { .di_tv = { .v_type = VAR_SPECIAL }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_NULL] = { .vv_name = "null", .vv_di = { .di_tv = { .v_type = VAR_SPECIAL }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV__NULL_LIST] = { .vv_name = "_null_list", .vv_di = { .di_tv = { .v_type = VAR_LIST }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV__NULL_DICT] = { .vv_name = "_null_dict", .vv_di = { .di_tv = { .v_type = VAR_DICT }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_VIM_DID_ENTER] = { .vv_name = "vim_did_enter", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TESTING] = { .vv_name = "testing", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 0, },
  [VV_TYPE_NUMBER] = { .vv_name = "t_number", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_STRING] = { .vv_name = "t_string", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_FUNC] = { .vv_name = "t_func", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_LIST] = { .vv_name = "t_list", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_DICT] = { .vv_name = "t_dict", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_FLOAT] = { .vv_name = "t_float", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_TYPE_BOOL] = { .vv_name = "t_bool", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
  [VV_EXITING] = { .vv_name = "exiting", .vv_di = { .di_tv = { .v_type = VAR_NUMBER }, .di_flags = 0, .di_key = { 0 }, }, .vv_flags = 2, },
};
# 442 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static ScopeDictDictItem vimvars_var;




typedef struct {
  TimeWatcher tw;
  int timer_id;
  int repeat_count;
  int refcount;
  long timeout;
  _Bool stopped;
  _Bool paused;
  Callback callback;
} timer_T;

typedef void (*FunPtr)(void);


typedef void (*VimLFunc)(typval_T *args, typval_T *rvar, FunPtr data);


typedef struct fst {
  char *name;
  uint8_t min_argc;
  uint8_t max_argc;
  VimLFunc func;
  FunPtr data;
} VimLFuncDef;

typedef struct { khint_t n_buckets, size, n_occupied, upper_bound; khint32_t *flags; kh_cstr_t *keys; VimLFuncDef *vals; } kh_functions_t; static inline kh_functions_t *kh_init_functions(void) __attribute__((unused)); static inline kh_functions_t *kh_init_functions(void) { return (kh_functions_t*)xcalloc(1,sizeof(kh_functions_t)); } static inline void kh_dealloc_functions(kh_functions_t *h) __attribute__((unused)); static inline void kh_dealloc_functions(kh_functions_t *h) { xfree(h->keys); xfree(h->flags); xfree(h->vals); } static inline void kh_destroy_functions(kh_functions_t *h) __attribute__((unused)); static inline void kh_destroy_functions(kh_functions_t *h) { if (h) { kh_dealloc_functions(h); xfree(h); } } static inline void kh_clear_functions(kh_functions_t *h) __attribute__((unused)); static inline void kh_clear_functions(kh_functions_t *h) { if (h && h->flags) { __builtin___memset_chk (h->flags, 0xaa, ((h->n_buckets) < 16? 1 : (h->n_buckets)>>4) * sizeof(khint32_t), __builtin_object_size (h->flags, 0)); h->size = h->n_occupied = 0; } } static inline khint_t kh_get_functions(const kh_functions_t *h, kh_cstr_t key) __attribute__((unused)); static inline khint_t kh_get_functions(const kh_functions_t *h, kh_cstr_t key) { if (h->n_buckets) { khint_t k, i, last, mask, step = 0; mask = h->n_buckets - 1; k = __ac_X31_hash_string(key); i = k & mask; last = i; while (!((h->flags[i>>4]>>((i&0xfU)<<1))&2) && (((h->flags[i>>4]>>((i&0xfU)<<1))&1) || !(strcmp(h->keys[i], key) == 0))) { i = (i + (++step)) & mask; if (i == last) { return h->n_buckets; } } return ((h->flags[i>>4]>>((i&0xfU)<<1))&3) ? h->n_buckets : i; } else { return 0; } } static inline void kh_resize_functions(kh_functions_t *h, khint_t new_n_buckets) __attribute__((unused)); static inline void kh_resize_functions(kh_functions_t *h, khint_t new_n_buckets) { khint32_t *new_flags = 0; khint_t j = 1; { (--(new_n_buckets), (new_n_buckets)|=(new_n_buckets)>>1, (new_n_buckets)|=(new_n_buckets)>>2, (new_n_buckets)|=(new_n_buckets)>>4, (new_n_buckets)|=(new_n_buckets)>>8, (new_n_buckets)|=(new_n_buckets)>>16, ++(new_n_buckets)); if (new_n_buckets < 4) { new_n_buckets = 4; } if (h->size >= (khint_t)(new_n_buckets * 0.77 + 0.5)) { j = 0; } else { new_flags = (khint32_t*)xmalloc(((new_n_buckets) < 16? 1 : (new_n_buckets)>>4) * sizeof(khint32_t)); __builtin___memset_chk (new_flags, 0xaa, ((new_n_buckets) < 16? 1 : (new_n_buckets)>>4) * sizeof(khint32_t), __builtin_object_size (new_flags, 0)); if (h->n_buckets < new_n_buckets) { kh_cstr_t *new_keys = (kh_cstr_t*)xrealloc((void *)h->keys,new_n_buckets * sizeof(kh_cstr_t)); h->keys = new_keys; if (1) { VimLFuncDef *new_vals = (VimLFuncDef*)xrealloc((void *)h->vals,new_n_buckets * sizeof(VimLFuncDef)); h->vals = new_vals; } } } } if (j) { for (j = 0; j != h->n_buckets; ++j) { if (((h->flags[j>>4]>>((j&0xfU)<<1))&3) == 0) { kh_cstr_t key = h->keys[j]; VimLFuncDef val; khint_t new_mask; new_mask = new_n_buckets - 1; if (1) { val = h->vals[j]; } (h->flags[j>>4]|=(khint_t)1ul<<((j&0xfU)<<1)); while (1) { khint_t k, i, step = 0; k = __ac_X31_hash_string(key); i = k & new_mask; while (!((new_flags[i>>4]>>((i&0xfU)<<1))&2)) { i = (i + (++step)) & new_mask; } (new_flags[i>>4]&=~(khint_t)(2ul<<((i&0xfU)<<1))); if (i < h->n_buckets && ((h->flags[i>>4]>>((i&0xfU)<<1))&3) == 0) { { kh_cstr_t tmp = h->keys[i]; h->keys[i] = key; key = tmp; } if (1) { VimLFuncDef tmp = h->vals[i]; h->vals[i] = val; val = tmp; } (h->flags[i>>4]|=(khint_t)1ul<<((i&0xfU)<<1)); } else { h->keys[i] = key; if (1) { h->vals[i] = val; } break; } } } } if (h->n_buckets > new_n_buckets) { h->keys = (kh_cstr_t*)xrealloc((void *)h->keys,new_n_buckets * sizeof(kh_cstr_t)); if (1) { h->vals = (VimLFuncDef*)xrealloc((void *)h->vals,new_n_buckets * sizeof(VimLFuncDef)); } } xfree(h->flags); h->flags = new_flags; h->n_buckets = new_n_buckets; h->n_occupied = h->size; h->upper_bound = (khint_t)(h->n_buckets * 0.77 + 0.5); } } static inline khint_t kh_put_functions(kh_functions_t *h, kh_cstr_t key, int *ret) __attribute__((unused)); static inline khint_t kh_put_functions(kh_functions_t *h, kh_cstr_t key, int *ret) { khint_t x; if (h->n_occupied >= h->upper_bound) { if (h->n_buckets > (h->size << 1)) { kh_resize_functions(h, h->n_buckets - 1); } else { kh_resize_functions(h, h->n_buckets + 1); } } { khint_t k, i, site, last, mask = h->n_buckets - 1, step = 0; x = site = h->n_buckets; k = __ac_X31_hash_string(key); i = k & mask; if (((h->flags[i>>4]>>((i&0xfU)<<1))&2)) { x = i; } else { last = i; while (!((h->flags[i>>4]>>((i&0xfU)<<1))&2) && (((h->flags[i>>4]>>((i&0xfU)<<1))&1) || !(strcmp(h->keys[i], key) == 0))) { if (((h->flags[i>>4]>>((i&0xfU)<<1))&1)) { site = i; } i = (i + (++step)) & mask; if (i == last) { x = site; break; } } if (x == h->n_buckets) { if (((h->flags[i>>4]>>((i&0xfU)<<1))&2) && site != h->n_buckets) { x = site; } else { x = i; } } } } if (((h->flags[x>>4]>>((x&0xfU)<<1))&2)) { h->keys[x] = key; (h->flags[x>>4]&=~(khint_t)(3ul<<((x&0xfU)<<1))); h->size++; h->n_occupied++; *ret = 1; } else if (((h->flags[x>>4]>>((x&0xfU)<<1))&1)) { h->keys[x] = key; (h->flags[x>>4]&=~(khint_t)(3ul<<((x&0xfU)<<1))); h->size++; *ret = 2; } else { *ret = 0; } return x; } static inline void kh_del_functions(kh_functions_t *h, khint_t x) __attribute__((unused)); static inline void kh_del_functions(kh_functions_t *h, khint_t x) { if (x != h->n_buckets && !((h->flags[x>>4]>>((x&0xfU)<<1))&3)) { (h->flags[x>>4]|=(khint_t)1ul<<((x&0xfU)<<1)); --h->size; } }


typedef enum
{
  ASSERT_EQUAL,
  ASSERT_NOTEQUAL,
  ASSERT_MATCH,
  ASSERT_NOTMATCH,
  ASSERT_INRANGE,
  ASSERT_OTHER,
} assert_type_T;


typedef enum {
  kDictListKeys,
  kDictListValues,
  kDictListItems,
} DictListType;
# 500 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static uint64_t last_timer_id = 0;
static Map_uint64_t_ptr_t *timers = ((void*)0);







static va_list dummy_ap;

static const char *const msgpack_type_names[] = {
  [kMPNil] = "nil",
  [kMPBoolean] = "boolean",
  [kMPInteger] = "integer",
  [kMPFloat] = "float",
  [kMPString] = "string",
  [kMPBinary] = "binary",
  [kMPArray] = "array",
  [kMPMap] = "map",
  [kMPExt] = "ext",
};
const list_T *eval_msgpack_type_lists[] = {
  [kMPNil] = ((void*)0),
  [kMPBoolean] = ((void*)0),
  [kMPInteger] = ((void*)0),
  [kMPFloat] = ((void*)0),
  [kMPString] = ((void*)0),
  [kMPBinary] = ((void*)0),
  [kMPArray] = ((void*)0),
  [kMPMap] = ((void*)0),
  [kMPExt] = ((void*)0),
};




void eval_init(void)
{
  vimvars[VV_VERSION].vv_di.di_tv.vval.v_number = (8 * 100 + 0);

  timers = map_uint64_t_ptr_t_new();
  struct vimvar *p;

  init_var_dict(&globvardict, &globvars_var, VAR_DEF_SCOPE);
  init_var_dict(&vimvardict, &vimvars_var, VAR_SCOPE);
  vimvardict.dv_lock = VAR_FIXED;
  hash_init(&compat_hashtab);
  hash_init(&func_hashtab);

  for (size_t i = 0; i < ((sizeof(vimvars)/sizeof((vimvars)[0])) / ((size_t)(!(sizeof(vimvars) % sizeof((vimvars)[0]))))); i++) {
    p = &vimvars[i];
    ((void)0);
    __builtin___strcpy_chk ((char *)(p->vv_di.di_key), (char *)(p->vv_name), __builtin_object_size ((char *)(p->vv_di.di_key), 1 > 1 ? 1 : 0));
    if (p->vv_flags & 2)
      p->vv_di.di_flags = DI_FLAGS_RO | DI_FLAGS_FIX;
    else if (p->vv_flags & 4)
      p->vv_di.di_flags = DI_FLAGS_RO_SBX | DI_FLAGS_FIX;
    else
      p->vv_di.di_flags = DI_FLAGS_FIX;


    if (p->vv_di.di_tv.v_type != VAR_UNKNOWN)
      hash_add(&vimvardict.dv_hashtab, p->vv_di.di_key);
    if (p->vv_flags & 1)

      hash_add(&compat_hashtab, p->vv_di.di_key);
  }
  vimvars[VV_VERSION].vv_di.di_tv.vval.v_number = (8 * 100 + 0);

  dict_T *const msgpack_types_dict = tv_dict_alloc();
  for (size_t i = 0; i < ((sizeof(msgpack_type_names)/sizeof((msgpack_type_names)[0])) / ((size_t)(!(sizeof(msgpack_type_names) % sizeof((msgpack_type_names)[0]))))); i++) {
    list_T *const type_list = tv_list_alloc();
    tv_list_set_lock(type_list, VAR_FIXED);
    tv_list_ref(type_list);
    dictitem_T *const di = tv_dict_item_alloc(msgpack_type_names[i]);
    di->di_flags |= DI_FLAGS_RO|DI_FLAGS_FIX;
    di->di_tv = (typval_T) {
      .v_type = VAR_LIST,
      .vval = { .v_list = type_list, },
    };
    eval_msgpack_type_lists[i] = type_list;
    if (tv_dict_add(msgpack_types_dict, di) == 0) {

      ((void)0);
    }
  }
  msgpack_types_dict->dv_lock = VAR_FIXED;

  set_vim_var_dict(VV_MSGPACK_TYPES, msgpack_types_dict);
  set_vim_var_dict(VV_COMPLETED_ITEM, tv_dict_alloc());

  dict_T *v_event = tv_dict_alloc();
  v_event->dv_lock = VAR_FIXED;
  set_vim_var_dict(VV_EVENT, v_event);
  set_vim_var_list(VV_ERRORS, tv_list_alloc());
  set_vim_var_nr(VV_STDERR, 2);
  set_vim_var_nr(VV_SEARCHFORWARD, 1L);
  set_vim_var_nr(VV_HLSEARCH, 1L);
  set_vim_var_nr(VV_COUNT1, 1);
  set_vim_var_nr(VV_TYPE_NUMBER, 0);
  set_vim_var_nr(VV_TYPE_STRING, 1);
  set_vim_var_nr(VV_TYPE_FUNC, 2);
  set_vim_var_nr(VV_TYPE_LIST, 3);
  set_vim_var_nr(VV_TYPE_DICT, 4);
  set_vim_var_nr(VV_TYPE_FLOAT, 5);
  set_vim_var_nr(VV_TYPE_BOOL, 6);

  set_vim_var_special(VV_FALSE, kSpecialVarFalse);
  set_vim_var_special(VV_TRUE, kSpecialVarTrue);
  set_vim_var_special(VV_NULL, kSpecialVarNull);
  set_vim_var_special(VV_EXITING, kSpecialVarNull);

  set_reg_var(0);
}
# 665 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
char_u *func_name(void *cookie)
{
  return ((funccall_T *)cookie)->func->uf_name;
}




linenr_T *func_breakpoint(void *cookie)
{
  return &((funccall_T *)cookie)->breakpoint;
}




int *func_dbg_tick(void *cookie)
{
  return &((funccall_T *)cookie)->dbg_tick;
}




int func_level(void *cookie)
{
  return ((funccall_T *)cookie)->level;
}


funccall_T *current_funccal = ((void*)0);



funccall_T *previous_funccal = ((void*)0);




int current_func_returned(void)
{
  return current_funccal->returned;
}





void set_internal_string_var(char_u *name, char_u *value)
{
  const typval_T tv = {
    .v_type = VAR_STRING,
    .vval.v_string = value,
  };

  set_var((const char *)name, strlen((char *)(name)), (typval_T *)&tv, 1);
}

static lval_T *redir_lval = ((void*)0);
static garray_T redir_ga;
static char_u *redir_endp = ((void*)0);
static char_u *redir_varname = ((void*)0);





int
var_redir_start (
    char_u *name,
    int append
)
{
  int save_emsg;
  int err;
  typval_T tv;


  if (!eval_isnamec1(*name)) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return 0;
  }


  redir_varname = vim_strsave(name);

  redir_lval = xcalloc(1, sizeof(lval_T));


  ga_init(&redir_ga, (int)sizeof(char), 500);


  redir_endp = (char_u *)get_lval(redir_varname, ((void*)0), redir_lval, 0, 0,
                                  0, 2);
  if (redir_endp == ((void*)0) || redir_lval->ll_name == ((void*)0)
      || *redir_endp != '\000') {
    clear_lval(redir_lval);
    if (redir_endp != ((void*)0) && *redir_endp != '\000')

      emsg((char_u *)(libintl_gettext((char *)(e_trailing))));
    else
      emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    redir_endp = ((void*)0);
    var_redir_stop();
    return 0;
  }



  save_emsg = did_emsg;
  did_emsg = 0;
  tv.v_type = VAR_STRING;
  tv.vval.v_string = (char_u *)"";
  if (append)
    set_var_lval(redir_lval, redir_endp, &tv, 1, (char_u *)".");
  else
    set_var_lval(redir_lval, redir_endp, &tv, 1, (char_u *)"=");
  clear_lval(redir_lval);
  err = did_emsg;
  did_emsg |= save_emsg;
  if (err) {
    redir_endp = ((void*)0);
    var_redir_stop();
    return 0;
  }

  return 1;
}
# 803 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
void var_redir_str(char_u *value, int value_len)
{
  int len;

  if (redir_lval == ((void*)0))
    return;

  if (value_len == -1)
    len = (int)strlen((char *)(value));
  else
    len = value_len;

  ga_grow(&redir_ga, len);
  __builtin___memmove_chk ((char *)redir_ga.ga_data + redir_ga.ga_len, value, len, __builtin_object_size ((char *)redir_ga.ga_data + redir_ga.ga_len, 0));
  redir_ga.ga_len += len;
}





void var_redir_stop(void)
{
  typval_T tv;

  if (redir_lval != ((void*)0)) {

    if (redir_endp != ((void*)0)) {
      ga_append(&redir_ga, '\000');
      tv.v_type = VAR_STRING;
      tv.vval.v_string = redir_ga.ga_data;


      redir_endp = (char_u *)get_lval(redir_varname, ((void*)0), redir_lval,
                                      0, 0, 0, 2);
      if (redir_endp != ((void*)0) && redir_lval->ll_name != ((void*)0)) {
        set_var_lval(redir_lval, redir_endp, &tv, 0, (char_u *)".");
      }
      clear_lval(redir_lval);
    }


    xfree(redir_ga.ga_data);
    redir_ga.ga_data = ((void*)0);

    xfree(redir_lval);
    redir_lval = ((void*)0);
  }
  xfree(redir_varname);
  redir_varname = ((void*)0);
}

int eval_charconvert(const char *const enc_from, const char *const enc_to,
                     const char *const fname_from, const char *const fname_to)
{
  _Bool err = 0;

  set_vim_var_string(VV_CC_FROM, enc_from, -1);
  set_vim_var_string(VV_CC_TO, enc_to, -1);
  set_vim_var_string(VV_FNAME_IN, fname_from, -1);
  set_vim_var_string(VV_FNAME_OUT, fname_to, -1);
  if (eval_to_bool(p_ccv, &err, ((void*)0), 0)) {
    err = 1;
  }
  set_vim_var_string(VV_CC_FROM, ((void*)0), -1);
  set_vim_var_string(VV_CC_TO, ((void*)0), -1);
  set_vim_var_string(VV_FNAME_IN, ((void*)0), -1);
  set_vim_var_string(VV_FNAME_OUT, ((void*)0), -1);

  if (err) {
    return 0;
  }
  return 1;
}

int eval_printexpr(const char *const fname, const char *const args)
{
  _Bool err = 0;

  set_vim_var_string(VV_FNAME_IN, fname, -1);
  set_vim_var_string(VV_CMDARG, args, -1);
  if (eval_to_bool(p_pexpr, &err, ((void*)0), 0)) {
    err = 1;
  }
  set_vim_var_string(VV_FNAME_IN, ((void*)0), -1);
  set_vim_var_string(VV_CMDARG, ((void*)0), -1);

  if (err) {
    os_remove(fname);
    return 0;
  }
  return 1;
}

void eval_diff(const char *const origfile, const char *const newfile,
               const char *const outfile)
{
  _Bool err = 0;

  set_vim_var_string(VV_FNAME_IN, origfile, -1);
  set_vim_var_string(VV_FNAME_NEW, newfile, -1);
  set_vim_var_string(VV_FNAME_OUT, outfile, -1);
  (void)eval_to_bool(p_dex, &err, ((void*)0), 0);
  set_vim_var_string(VV_FNAME_IN, ((void*)0), -1);
  set_vim_var_string(VV_FNAME_NEW, ((void*)0), -1);
  set_vim_var_string(VV_FNAME_OUT, ((void*)0), -1);
}

void eval_patch(const char *const origfile, const char *const difffile,
                const char *const outfile)
{
  _Bool err = 0;

  set_vim_var_string(VV_FNAME_IN, origfile, -1);
  set_vim_var_string(VV_FNAME_DIFF, difffile, -1);
  set_vim_var_string(VV_FNAME_OUT, outfile, -1);
  (void)eval_to_bool(p_pex, &err, ((void*)0), 0);
  set_vim_var_string(VV_FNAME_IN, ((void*)0), -1);
  set_vim_var_string(VV_FNAME_DIFF, ((void*)0), -1);
  set_vim_var_string(VV_FNAME_OUT, ((void*)0), -1);
}






int
eval_to_bool (
    char_u *arg,
    _Bool *error,
    char_u **nextcmd,
    int skip
)
{
  typval_T tv;
  _Bool retval = 0;

  if (skip) {
    emsg_skip++;
  }
  if (eval0(arg, &tv, nextcmd, !skip) == 0) {
    *error = 1;
  } else {
    *error = 0;
    if (!skip) {
      retval = (tv_get_number_chk(&tv, error) != 0);
      tv_clear(&tv);
    }
  }
  if (skip) {
    emsg_skip--;
  }

  return retval;
}
# 969 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
char *eval_to_string_skip(const char *arg, const char **nextcmd,
                          const _Bool skip)
  FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_ARG(1) FUNC_ATTR_WARN_UNUSED_RESULT
{
  typval_T tv;
  char *retval;

  if (skip) {
    emsg_skip++;
  }
  if (eval0((char_u *)arg, &tv, (char_u **)nextcmd, !skip) == 0 || skip) {
    retval = ((void*)0);
  } else {
    retval = xstrdup(tv_get_string(&tv));
    tv_clear(&tv);
  }
  if (skip) {
    emsg_skip--;
  }

  return retval;
}





int skip_expr(char_u **pp)
{
  typval_T rettv;

  *pp = skipwhite(*pp);
  return eval1(pp, &rettv, 0);
}







char_u *eval_to_string(char_u *arg, char_u **nextcmd, int convert)
{
  typval_T tv;
  char *retval;
  garray_T ga;

  if (eval0(arg, &tv, nextcmd, 1) == 0) {
    retval = ((void*)0);
  } else {
    if (convert && tv.v_type == VAR_LIST) {
      ga_init(&ga, (int)sizeof(char), 80);
      if (tv.vval.v_list != ((void*)0)) {
        tv_list_join(&ga, tv.vval.v_list, "\n");
        if (tv_list_len(tv.vval.v_list) > 0) {
          ga_append(&ga, '\012');
        }
      }
      ga_append(&ga, '\000');
      retval = (char *)ga.ga_data;
    } else if (convert && tv.v_type == VAR_FLOAT) {
      char numbuf[NUMBUFLEN];
      vim_snprintf(numbuf, NUMBUFLEN, "%g", tv.vval.v_float);
      retval = xstrdup(numbuf);
    } else {
      retval = xstrdup(tv_get_string(&tv));
    }
    tv_clear(&tv);
  }

  return (char_u *)retval;
}





char_u *eval_to_string_safe(char_u *arg, char_u **nextcmd, int use_sandbox)
{
  char_u *retval;
  void *save_funccalp;

  save_funccalp = save_funccal();
  if (use_sandbox)
    ++sandbox;
  ++textlock;
  retval = eval_to_string(arg, nextcmd, 0);
  if (use_sandbox)
    --sandbox;
  --textlock;
  restore_funccal(save_funccalp);
  return retval;
}






varnumber_T eval_to_number(char_u *expr)
{
  typval_T rettv;
  varnumber_T retval;
  char_u *p = skipwhite(expr);

  ++emsg_off;

  if (eval1(&p, &rettv, 1) == 0) {
    retval = -1;
  } else {
    retval = tv_get_number_chk(&rettv, ((void*)0));
    tv_clear(&rettv);
  }
  --emsg_off;

  return retval;
}







static void prepare_vimvar(int idx, typval_T *save_tv)
{
  *save_tv = vimvars[idx].vv_di.di_tv;
  if (vimvars[idx].vv_di.di_tv.v_type == VAR_UNKNOWN)
    hash_add(&vimvardict.dv_hashtab, vimvars[idx].vv_di.di_key);
}





static void restore_vimvar(int idx, typval_T *save_tv)
{
  hashitem_T *hi;

  vimvars[idx].vv_di.di_tv = *save_tv;
  if (vimvars[idx].vv_di.di_tv.v_type == VAR_UNKNOWN) {
    hi = hash_find(&vimvardict.dv_hashtab, vimvars[idx].vv_di.di_key);
    if (((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
      internal_error("restore_vimvar()");
    } else {
      hash_remove(&vimvardict.dv_hashtab, hi);
    }
  }
}






list_T *eval_spell_expr(char_u *badword, char_u *expr)
{
  typval_T save_val;
  typval_T rettv;
  list_T *list = ((void*)0);
  char_u *p = skipwhite(expr);


  prepare_vimvar(VV_VAL, &save_val);
  vimvars[VV_VAL].vv_di.di_tv.v_type = VAR_STRING;
  vimvars[VV_VAL].vv_di.di_tv.vval.v_string = badword;
  if (p_verbose == 0)
    ++emsg_off;

  if (eval1(&p, &rettv, 1) == 1) {
    if (rettv.v_type != VAR_LIST) {
      tv_clear(&rettv);
    } else {
      list = rettv.vval.v_list;
    }
  }

  if (p_verbose == 0)
    --emsg_off;
  restore_vimvar(VV_VAL, &save_val);

  return list;
}
# 1166 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
int get_spellword(list_T *const list, const char **ret_word)
{
  if (tv_list_len(list) != 2) {
    emsg((char_u *)(libintl_gettext((char *)("E5700: Expression from 'spellsuggest' must yield lists with " "exactly two values"))));

    return -1;
  }
  *ret_word = tv_list_find_str(list, 0);
  if (*ret_word == ((void*)0)) {
    return -1;
  }
  return tv_list_find_nr(list, -1, ((void*)0));
}







int call_vim_function(
    const char_u *func,
    int argc,
    const char_u *const *const argv,
    int safe,
    int str_arg_only,
    typval_T *rettv
)
{
  varnumber_T n;
  int len;
  int doesrange;
  void *save_funccalp = ((void*)0);
  int ret;

  typval_T *argvars = xmalloc((argc + 1) * sizeof(typval_T));

  for (int i = 0; i < argc; i++) {

    if (argv[i] == ((void*)0) || *argv[i] == '\000') {
      argvars[i].v_type = VAR_STRING;
      argvars[i].vval.v_string = (char_u *)"";
      continue;
    }

    if (str_arg_only) {
      len = 0;
    } else {

      vim_str2nr(argv[i], ((void*)0), &len, STR2NR_ALL, &n, ((void*)0), 0);
    }
    if (len != 0 && len == (int)strlen((char *)(argv[i]))) {
      argvars[i].v_type = VAR_NUMBER;
      argvars[i].vval.v_number = n;
    } else {
      argvars[i].v_type = VAR_STRING;
      argvars[i].vval.v_string = (char_u *)argv[i];
    }
  }

  if (safe) {
    save_funccalp = save_funccal();
    ++sandbox;
  }

  rettv->v_type = VAR_UNKNOWN;
  ret = call_func(func, (int)strlen((char *)(func)), rettv, argc, argvars, ((void*)0),
                  curwin->w_cursor.lnum, curwin->w_cursor.lnum,
                  &doesrange, 1, ((void*)0), ((void*)0));
  if (safe) {
    --sandbox;
    restore_funccal(save_funccalp);
  }
  xfree(argvars);

  if (ret == 0) {
    tv_clear(rettv);
  }

  return ret;
}
# 1256 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
varnumber_T call_func_retnr(char_u *func, int argc,
                            const char_u *const *const argv, int safe)
{
  typval_T rettv;
  varnumber_T retval;


  if (call_vim_function(func, argc, argv, safe, 1, &rettv) == 0)
    return -1;

  retval = tv_get_number_chk(&rettv, ((void*)0));
  tv_clear(&rettv);
  return retval;
}
# 1280 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
char *call_func_retstr(const char *const func, const int argc,
                       const char_u *const *const argv,
                       const _Bool safe)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_MALLOC
{
  typval_T rettv;

  if (call_vim_function((const char_u *)func, argc, argv, safe, 1, &rettv)
      == 0) {
    return ((void*)0);
  }

  char *const retval = xstrdup(tv_get_string(&rettv));
  tv_clear(&rettv);
  return retval;
}
# 1306 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
void *call_func_retlist(char_u *func, int argc, const char_u *const *const argv,
                        int safe)
{
  typval_T rettv;


  if (call_vim_function(func, argc, argv, safe, 1, &rettv) == 0)
    return ((void*)0);

  if (rettv.v_type != VAR_LIST) {
    tv_clear(&rettv);
    return ((void*)0);
  }

  return rettv.vval.v_list;
}





void *save_funccal(void)
{
  funccall_T *fc = current_funccal;

  current_funccal = ((void*)0);
  return (void *)fc;
}

void restore_funccal(void *vfc)
{
  funccall_T *fc = (funccall_T *)vfc;

  current_funccal = fc;
}






void prof_child_enter(proftime_T *tm
                      )
{
  funccall_T *fc = current_funccal;

  if (fc != ((void*)0) && fc->func->uf_profiling) {
    fc->prof_child = profile_start();
  }

  script_prof_save(tm);
}





void prof_child_exit(proftime_T *tm
                     )
{
  funccall_T *fc = current_funccal;

  if (fc != ((void*)0) && fc->func->uf_profiling) {
    fc->prof_child = profile_end(fc->prof_child);

    fc->prof_child = profile_sub_wait(*tm, fc->prof_child);
    fc->func->uf_tm_children =
      profile_add(fc->func->uf_tm_children, fc->prof_child);
    fc->func->uf_tml_children =
      profile_add(fc->func->uf_tml_children, fc->prof_child);
  }
  script_prof_restore(tm);
}






int eval_foldexpr(char_u *arg, int *cp)
{
  typval_T tv;
  varnumber_T retval;
  char_u *s;
  int use_sandbox = was_set_insecurely((char_u *)"foldexpr",
      OPT_LOCAL);

  ++emsg_off;
  if (use_sandbox)
    ++sandbox;
  ++textlock;
  *cp = '\000';
  if (eval0(arg, &tv, ((void*)0), 1) == 0)
    retval = 0;
  else {

    if (tv.v_type == VAR_NUMBER)
      retval = tv.vval.v_number;
    else if (tv.v_type != VAR_STRING || tv.vval.v_string == ((void*)0))
      retval = 0;
    else {


      s = tv.vval.v_string;
      if (!ascii_isdigit(*s) && *s != '-')
        *cp = *s++;
      retval = atol((char *)s);
    }
    tv_clear(&tv);
  }
  --emsg_off;
  if (use_sandbox)
    --sandbox;
  --textlock;

  return (int)retval;
}
# 1433 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
void ex_let(exarg_T *eap)
{
  char_u *arg = eap->arg;
  char_u *expr = ((void*)0);
  typval_T rettv;
  int i;
  int var_count = 0;
  int semicolon = 0;
  char_u op[2];
  char_u *argend;
  int first = 1;

  argend = (char_u *)skip_var_list(arg, &var_count, &semicolon);
  if (argend == ((void*)0)) {
    return;
  }
  if (argend > arg && argend[-1] == '.') {
    argend--;
  }
  expr = skipwhite(argend);
  if (*expr != '=' && !(vim_strchr((char_u *)"+-.", *expr) != ((void*)0)
                        && expr[1] == '=')) {

    if (*arg == '[') {
      emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    } else if (!ends_excmd(*arg)) {

      arg = (char_u *)list_arg_vars(eap, (const char *)arg, &first);
    } else if (!eap->skip) {

      list_glob_vars(&first);
      list_buf_vars(&first);
      list_win_vars(&first);
      list_tab_vars(&first);
      list_script_vars(&first);
      list_func_vars(&first);
      list_vim_vars(&first);
    }
    eap->nextcmd = check_nextcmd(arg);
  } else {
    op[0] = '=';
    op[1] = '\000';
    if (*expr != '=') {
      if (vim_strchr((char_u *)"+-.", *expr) != ((void*)0)) {
        op[0] = *expr;
      }
      expr = skipwhite(expr + 2);
    } else {
      expr = skipwhite(expr + 1);
    }

    if (eap->skip)
      ++emsg_skip;
    i = eval0(expr, &rettv, &eap->nextcmd, !eap->skip);
    if (eap->skip) {
      if (i != 0) {
        tv_clear(&rettv);
      }
      emsg_skip--;
    } else if (i != 0) {
      (void)ex_let_vars(eap->arg, &rettv, 0, semicolon, var_count, op);
      tv_clear(&rettv);
    }
  }
}
# 1507 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int
ex_let_vars (
    char_u *arg_start,
    typval_T *tv,
    int copy,
    int semicolon,
    int var_count,
    char_u *nextchars
)
{
  char_u *arg = arg_start;
  typval_T ltv;

  if (*arg != '[') {



    if (ex_let_one(arg, tv, copy, nextchars, nextchars) == ((void*)0))
      return 0;
    return 1;
  }


  if (tv->v_type != VAR_LIST) {
    emsg((char_u *)(libintl_gettext((char *)(e_listreq))));
    return 0;
  }
  list_T *const l = tv->vval.v_list;

  const int len = tv_list_len(l);
  if (semicolon == 0 && var_count < len) {
    emsg((char_u *)(libintl_gettext((char *)("E687: Less targets than List items"))));
    return 0;
  }
  if (var_count - semicolon > len) {
    emsg((char_u *)(libintl_gettext((char *)("E688: More targets than List items"))));
    return 0;
  }


  ((void)0);

  listitem_T *item = tv_list_first(l);
  while (*arg != ']') {
    arg = skipwhite(arg + 1);
    arg = ex_let_one(arg, (&(item)->li_tv), 1, (const char_u *)",;]",
                     nextchars);
    if (arg == ((void*)0)) {
      return 0;
    }

    item = ((item)->li_next);
    arg = skipwhite(arg);
    if (*arg == ';') {


      list_T *const rest_list = tv_list_alloc();
      while (item != ((void*)0)) {
        tv_list_append_tv(rest_list, (&(item)->li_tv));
        item = ((item)->li_next);
      }

      ltv.v_type = VAR_LIST;
      ltv.v_lock = VAR_UNLOCKED;
      ltv.vval.v_list = rest_list;
      tv_list_ref(rest_list);

      arg = ex_let_one(skipwhite(arg + 1), &ltv, 0,
                       (char_u *)"]", nextchars);
      tv_clear(&ltv);
      if (arg == ((void*)0)) {
        return 0;
      }
      break;
    } else if (*arg != ',' && *arg != ']') {
      internal_error("ex_let_vars()");
      return 0;
    }
  }

  return 1;
}
# 1597 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static const char_u *skip_var_list(const char_u *arg, int *var_count,
                                   int *semicolon)
{
  const char_u *p;
  const char_u *s;

  if (*arg == '[') {

    p = arg;
    for (;; ) {
      p = skipwhite(p + 1);
      s = skip_var_one(p);
      if (s == p) {
        emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (p));
        return ((void*)0);
      }
      ++*var_count;

      p = skipwhite(s);
      if (*p == ']')
        break;
      else if (*p == ';') {
        if (*semicolon == 1) {
          emsg((char_u *)(libintl_gettext((char *)("Double ; in list of variables"))));
          return ((void*)0);
        }
        *semicolon = 1;
      } else if (*p != ',') {
        emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (p));
        return ((void*)0);
      }
    }
    return p + 1;
  } else
    return skip_var_one(arg);
}





static const char_u *skip_var_one(const char_u *arg)
{
  if (*arg == '@' && arg[1] != '\000')
    return arg + 2;
  return find_name_end(*arg == '$' || *arg == '&' ? arg + 1 : arg,
      ((void*)0), ((void*)0), 1 | 2);
}





static void list_hashtable_vars(hashtab_T *ht, const char *prefix, int empty,
                                int *first)
{
  hashitem_T *hi;
  dictitem_T *di;
  int todo;

  todo = (int)ht->ht_used;
  for (hi = ht->ht_array; todo > 0 && !got_int; ++hi) {
    if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
      todo--;
      di = ((dictitem_T *)((hi)->hi_key - __builtin_offsetof(dictitem_T, di_key)));
      if (empty || di->di_tv.v_type != VAR_STRING
          || di->di_tv.vval.v_string != ((void*)0)) {
        list_one_var(di, prefix, first);
      }
    }
  }
}




static void list_glob_vars(int *first)
{
  list_hashtable_vars(&globvardict.dv_hashtab, "", 1, first);
}




static void list_buf_vars(int *first)
{
  list_hashtable_vars(&curbuf->b_vars->dv_hashtab, "b:", 1, first);
}




static void list_win_vars(int *first)
{
  list_hashtable_vars(&curwin->w_vars->dv_hashtab, "w:", 1, first);
}




static void list_tab_vars(int *first)
{
  list_hashtable_vars(&curtab->tp_vars->dv_hashtab, "t:", 1, first);
}




static void list_vim_vars(int *first)
{
  list_hashtable_vars(&vimvardict.dv_hashtab, "v:", 0, first);
}




static void list_script_vars(int *first)
{
  if (current_SID > 0 && current_SID <= ga_scripts.ga_len) {
    list_hashtable_vars(&((((scriptvar_T **)ga_scripts.ga_data)[(current_SID) - 1])->sv_dict.dv_hashtab), "s:", 0, first);
  }
}




static void list_func_vars(int *first)
{
  if (current_funccal != ((void*)0)) {
    list_hashtable_vars(&current_funccal->l_vars.dv_hashtab, "l:", 0,
                        first);
  }
}




static const char *list_arg_vars(exarg_T *eap, const char *arg, int *first)
{
  int error = 0;
  int len;
  const char *name;
  const char *name_start;
  typval_T tv;

  while (!ends_excmd(*arg) && !got_int) {
    if (error || eap->skip) {
      arg = (const char *)find_name_end((char_u *)arg, ((void*)0), ((void*)0),
                                        1 | 2);
      if (!ascii_iswhite(*arg) && !ends_excmd(*arg)) {
        emsg_severe = 1;
        emsg((char_u *)(libintl_gettext((char *)(e_trailing))));
        break;
      }
    } else {

      name_start = name = arg;
      char *tofree;
      len = get_name_len(&arg, &tofree, 1, 1);
      if (len <= 0) {


        if (len < 0 && !aborting()) {
          emsg_severe = 1;
          emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (arg));
          break;
        }
        error = 1;
      } else {
        if (tofree != ((void*)0)) {
          name = tofree;
        }
        if (get_var_tv((const char *)name, len, &tv, ((void*)0), 1, 0)
            == 0) {
          error = 1;
        } else {

          const char *const arg_subsc = arg;
          if (handle_subscript(&arg, &tv, 1, 1) == 0) {
            error = 1;
          } else {
            if (arg == arg_subsc && len == 2 && name[1] == ':') {
              switch (*name) {
              case 'g': list_glob_vars(first); break;
              case 'b': list_buf_vars(first); break;
              case 'w': list_win_vars(first); break;
              case 't': list_tab_vars(first); break;
              case 'v': list_vim_vars(first); break;
              case 's': list_script_vars(first); break;
              case 'l': list_func_vars(first); break;
              default:
                emsgf((const char *) (libintl_gettext((char *)("E738: Can't list variables for %s"))), (name));
              }
            } else {
              char *const s = encode_tv2echo(&tv, ((void*)0));
              const char *const used_name = (arg == arg_subsc
                                             ? name
                                             : name_start);
              const ptrdiff_t name_size = (used_name == tofree
                                           ? (ptrdiff_t)strlen(used_name)
                                           : (arg - used_name));
              list_one_var_a("", used_name, name_size,
                             tv.v_type, s == ((void*)0) ? "" : s, first);
              xfree(s);
            }
            tv_clear(&tv);
          }
        }
      }

      xfree(tofree);
    }

    arg = (const char *)skipwhite((const char_u *)arg);
  }

  return arg;
}
# 1829 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static char_u *ex_let_one(char_u *arg, typval_T *const tv,
                          const _Bool copy, const char_u *const endchars,
                          const char_u *const op)
  FUNC_ATTR_NONNULL_ARG(1, 2) FUNC_ATTR_WARN_UNUSED_RESULT
{
  char_u *arg_end = ((void*)0);
  int len;
  int opt_flags;
  char_u *tofree = ((void*)0);




  if (*arg == '$') {

    arg++;
    char *name = (char *)arg;
    len = get_env_len((const char_u **)&arg);
    if (len == 0) {
      emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (name - 1));
    } else {
      if (op != ((void*)0) && (*op == '+' || *op == '-')) {
        emsgf((const char *) (libintl_gettext((char *)(e_letwrong))), (op));
      } else if (endchars != ((void*)0)
                 && vim_strchr(endchars, *skipwhite(arg)) == ((void*)0)) {
        emsg((char_u *)(libintl_gettext((char *)(e_letunexp))));
      } else if (!check_secure()) {
        const char c1 = name[len];
        name[len] = '\000';
        const char *p = tv_get_string_chk(tv);
        if (p != ((void*)0) && op != ((void*)0) && *op == '.') {
          char *s = vim_getenv(name);

          if (s != ((void*)0)) {
            tofree = concat_str((const char_u *)s, (const char_u *)p);
            p = (const char *)tofree;
            xfree(s);
          }
        }
        if (p != ((void*)0)) {
          vim_setenv(name, p);
          if (strcasecmp((char *)(name), (char *)("HOME")) == 0) {
            init_homedir();
          } else if (didset_vim && strcasecmp((char *)(name), (char *)("VIM")) == 0) {
            didset_vim = 0;
          } else if (didset_vimruntime
                     && strcasecmp((char *)(name), (char *)("VIMRUNTIME")) == 0) {
            didset_vimruntime = 0;
          }
          arg_end = arg;
        }
        name[len] = c1;
        xfree(tofree);
      }
    }



  } else if (*arg == '&') {

    char *const p = (char *)find_option_end((const char **)&arg, &opt_flags);
    if (p == ((void*)0)
        || (endchars != ((void*)0)
            && vim_strchr(endchars, *skipwhite((const char_u *)p)) == ((void*)0))) {
      emsg((char_u *)(libintl_gettext((char *)(e_letunexp))));
    } else {
      int opt_type;
      long numval;
      char *stringval = ((void*)0);

      const char c1 = *p;
      *p = '\000';

      varnumber_T n = tv_get_number(tv);
      const char *s = tv_get_string_chk(tv);
      if (s != ((void*)0) && op != ((void*)0) && *op != '=') {
        opt_type = get_option_value(arg, &numval, (char_u **)&stringval,
                                    opt_flags);
        if ((opt_type == 1 && *op == '.')
            || (opt_type == 0 && *op != '.')) {
          emsgf((const char *) (libintl_gettext((char *)(e_letwrong))), (op));
        } else {
          if (opt_type == 1) {
            if (*op == '+') {
              n = numval + n;
            } else {
              n = numval - n;
            }
          } else if (opt_type == 0 && stringval != ((void*)0)) {
            char *const oldstringval = stringval;
            stringval = (char *)concat_str((const char_u *)stringval,
                                           (const char_u *)s);
            xfree(oldstringval);
            s = stringval;
          }
        }
      }
      if (s != ((void*)0)) {
        set_option_value((const char *)arg, n, s, opt_flags);
        arg_end = (char_u *)p;
      }
      *p = c1;
      xfree(stringval);
    }

  } else if (*arg == '@') {
    arg++;
    if (op != ((void*)0) && (*op == '+' || *op == '-')) {
      emsgf(libintl_gettext((char *)(e_letwrong)), op);
    } else if (endchars != ((void*)0)
               && vim_strchr(endchars, *skipwhite(arg + 1)) == ((void*)0)) {
      emsgf(libintl_gettext((char *)(e_letunexp)));
    } else {
      char_u *s;

      char_u *ptofree = ((void*)0);
      const char *p = tv_get_string_chk(tv);
      if (p != ((void*)0) && op != ((void*)0) && *op == '.') {
        s = get_reg_contents(*arg == '@' ? '"' : *arg, kGRegExprSrc);
        if (s != ((void*)0)) {
          ptofree = concat_str(s, (const char_u *)p);
          p = (const char *)ptofree;
          xfree(s);
        }
      }
      if (p != ((void*)0)) {
        write_reg_contents(*arg == '@' ? '"' : *arg,
                           (const char_u *)p, strlen((char *)(p)), 0);
        arg_end = arg + 1;
      }
      xfree(ptofree);
    }
  }




  else if (eval_isnamec1(*arg) || *arg == '{') {
    lval_T lv;

    char_u *const p = get_lval(arg, tv, &lv, 0, 0, 0, 2);
    if (p != ((void*)0) && lv.ll_name != ((void*)0)) {
      if (endchars != ((void*)0) && vim_strchr(endchars, *skipwhite(p)) == ((void*)0)) {
        emsg((char_u *)(libintl_gettext((char *)(e_letunexp))));
      } else {
        set_var_lval(&lv, p, tv, copy, op);
        arg_end = p;
      }
    }
    clear_lval(&lv);
  } else
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (arg));

  return arg_end;
}
# 2010 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static char_u *get_lval(char_u *const name, typval_T *const rettv,
                        lval_T *const lp, const _Bool unlet, const _Bool skip,
                        const int flags, const int fne_flags)
  FUNC_ATTR_NONNULL_ARG(1, 3)
{
  dictitem_T *v;
  typval_T var1;
  typval_T var2;
  int empty1 = 0;
  listitem_T *ni;
  hashtab_T *ht;
  int quiet = flags & GLV_QUIET;


  __builtin___memset_chk (lp, 0, sizeof(lval_T), __builtin_object_size (lp, 0));

  if (skip) {

    lp->ll_name = (const char *)name;
    return (char_u *)find_name_end((const char_u *)name, ((void*)0), ((void*)0),
                                   1 | fne_flags);
  }


  char_u *expr_start;
  char_u *expr_end;
  char_u *p = (char_u *)find_name_end(name,
                                      (const char_u **)&expr_start,
                                      (const char_u **)&expr_end,
                                      fne_flags);
  if (expr_start != ((void*)0)) {

    if (unlet && !ascii_iswhite(*p) && !ends_excmd(*p)
        && *p != '[' && *p != '.') {
      emsg((char_u *)(libintl_gettext((char *)(e_trailing))));
      return ((void*)0);
    }

    lp->ll_exp_name = (char *)make_expanded_name(name, expr_start, expr_end,
                                                 (char_u *)p);
    lp->ll_name = lp->ll_exp_name;
    if (lp->ll_exp_name == ((void*)0)) {



      if (!aborting() && !quiet) {
        emsg_severe = 1;
        emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (name));
        return ((void*)0);
      }
      lp->ll_name_len = 0;
    } else {
      lp->ll_name_len = strlen(lp->ll_name);
    }
  } else {
    lp->ll_name = (const char *)name;
    lp->ll_name_len = (size_t)((const char *)p - lp->ll_name);
  }


  if ((*p != '[' && *p != '.') || lp->ll_name == ((void*)0)) {
    return p;
  }

  v = find_var(lp->ll_name, lp->ll_name_len, &ht, flags & GLV_NO_AUTOLOAD);
  if (v == ((void*)0) && !quiet) {
    emsgf(libintl_gettext((char *)("E121: Undefined variable: %.*s")),
          (int)lp->ll_name_len, lp->ll_name);
  }
  if (v == ((void*)0)) {
    return ((void*)0);
  }




  lp->ll_tv = &v->di_tv;
  while (*p == '[' || (*p == '.' && lp->ll_tv->v_type == VAR_DICT)) {
    if (!(lp->ll_tv->v_type == VAR_LIST && lp->ll_tv->vval.v_list != ((void*)0))
        && !(lp->ll_tv->v_type == VAR_DICT
             && lp->ll_tv->vval.v_dict != ((void*)0))) {
      if (!quiet)
        emsg((char_u *)(libintl_gettext((char *)("E689: Can only index a List or Dictionary"))));
      return ((void*)0);
    }
    if (lp->ll_range) {
      if (!quiet)
        emsg((char_u *)(libintl_gettext((char *)("E708: [:] must come last"))));
      return ((void*)0);
    }

    int len = -1;
    char_u *key = ((void*)0);
    if (*p == '.') {
      key = p + 1;
      for (len = 0; ((((unsigned)(key[len]) >= 'A' && (unsigned)(key[len]) <= 'Z') || ((unsigned)(key[len]) >= 'a' && (unsigned)(key[len]) <= 'z')) || ascii_isdigit(key[len])) || key[len] == '_'; len++) {
      }
      if (len == 0) {
        if (!quiet) {
          emsg((char_u *)(libintl_gettext((char *)("E713: Cannot use empty key after ."))));
        }
        return ((void*)0);
      }
      p = key + len;
    } else {

      p = skipwhite(p + 1);
      if (*p == ':') {
        empty1 = 1;
      } else {
        empty1 = 0;
        if (eval1(&p, &var1, 1) == 0) {
          return ((void*)0);
        }
        if (!tv_check_str(&var1)) {

          tv_clear(&var1);
          return ((void*)0);
        }
      }


      if (*p == ':') {
        if (lp->ll_tv->v_type == VAR_DICT) {
          if (!quiet) {
            emsg((char_u *)(libintl_gettext((char *)(e_dictrange))));
          }
          if (!empty1) {
            tv_clear(&var1);
          }
          return ((void*)0);
        }
        if (rettv != ((void*)0) && (rettv->v_type != VAR_LIST
                              || rettv->vval.v_list == ((void*)0))) {
          if (!quiet) {
            emsgf(libintl_gettext((char *)("E709: [:] requires a List value")));
          }
          if (!empty1) {
            tv_clear(&var1);
          }
          return ((void*)0);
        }
        p = skipwhite(p + 1);
        if (*p == ']') {
          lp->ll_empty2 = 1;
        } else {
          lp->ll_empty2 = 0;
          if (eval1(&p, &var2, 1) == 0) {
            if (!empty1) {
              tv_clear(&var1);
            }
            return ((void*)0);
          }
          if (!tv_check_str(&var2)) {

            if (!empty1) {
              tv_clear(&var1);
            }
            tv_clear(&var2);
            return ((void*)0);
          }
        }
        lp->ll_range = 1;
      } else
        lp->ll_range = 0;

      if (*p != ']') {
        if (!quiet) {
          emsgf(libintl_gettext((char *)(e_missbrac)));
        }
        if (!empty1) {
          tv_clear(&var1);
        }
        if (lp->ll_range && !lp->ll_empty2) {
          tv_clear(&var2);
        }
        return ((void*)0);
      }


      ++p;
    }

    if (lp->ll_tv->v_type == VAR_DICT) {
      if (len == -1) {

        key = (char_u *)tv_get_string(&var1);
      }
      lp->ll_list = ((void*)0);
      lp->ll_dict = lp->ll_tv->vval.v_dict;
      lp->ll_di = tv_dict_find(lp->ll_dict, (const char *)key, len);




      if (rettv != ((void*)0) && lp->ll_dict->dv_scope != 0) {
        int prevval;
        int wrong;

        if (len != -1) {
          prevval = key[len];
          key[len] = '\000';
        } else {
          prevval = 0;
        }
        wrong = ((lp->ll_dict->dv_scope == VAR_DEF_SCOPE
                  && tv_is_func(*rettv)
                  && !var_check_func_name((const char *)key, lp->ll_di == ((void*)0)))
                 || !valid_varname((const char *)key));
        if (len != -1) {
          key[len] = prevval;
        }
        if (wrong) {
          return ((void*)0);
        }
      }

      if (lp->ll_di == ((void*)0)) {

        if (lp->ll_dict == &vimvardict) {
          emsgf((const char *) (libintl_gettext((char *)(e_illvar))), (name));
          return ((void*)0);
        }


        if (*p == '[' || *p == '.' || unlet) {
          if (!quiet) {
            emsgf(libintl_gettext((char *)(e_dictkey)), key);
          }
          if (len == -1) {
            tv_clear(&var1);
          }
          return ((void*)0);
        }
        if (len == -1) {
          lp->ll_newkey = vim_strsave(key);
        } else {
          lp->ll_newkey = vim_strnsave(key, len);
        }
        if (len == -1) {
          tv_clear(&var1);
        }
        break;

      } else if (!(flags & GLV_READ_ONLY) && var_check_ro(lp->ll_di->di_flags,
                                                          (const char *)name,
                                                          (size_t)(p - name))) {
        if (len == -1) {
          tv_clear(&var1);
        }
        return ((void*)0);
      }

      if (len == -1) {
        tv_clear(&var1);
      }
      lp->ll_tv = &lp->ll_di->di_tv;
    } else {

      if (empty1) {
        lp->ll_n1 = 0;
      } else {
        lp->ll_n1 = (long)tv_get_number(&var1);
        tv_clear(&var1);
      }
      lp->ll_dict = ((void*)0);
      lp->ll_list = lp->ll_tv->vval.v_list;
      lp->ll_li = tv_list_find(lp->ll_list, lp->ll_n1);
      if (lp->ll_li == ((void*)0)) {
        if (lp->ll_n1 < 0) {
          lp->ll_n1 = 0;
          lp->ll_li = tv_list_find(lp->ll_list, lp->ll_n1);
        }
      }
      if (lp->ll_li == ((void*)0)) {
        if (lp->ll_range && !lp->ll_empty2) {
          tv_clear(&var2);
        }
        if (!quiet) {
          emsgf((const char *) (libintl_gettext((char *)(e_listidx))), (int64_t)(lp->ll_n1));
        }
        return ((void*)0);
      }







      if (lp->ll_range && !lp->ll_empty2) {
        lp->ll_n2 = (long)tv_get_number(&var2);
        tv_clear(&var2);
        if (lp->ll_n2 < 0) {
          ni = tv_list_find(lp->ll_list, lp->ll_n2);
          if (ni == ((void*)0)) {
            if (!quiet)
              emsgf((const char *) (libintl_gettext((char *)(e_listidx))), (int64_t)(lp->ll_n2));
            return ((void*)0);
          }
          lp->ll_n2 = tv_list_idx_of_item(lp->ll_list, ni);
        }


        if (lp->ll_n1 < 0) {
          lp->ll_n1 = tv_list_idx_of_item(lp->ll_list, lp->ll_li);
        }
        if (lp->ll_n2 < lp->ll_n1) {
          if (!quiet) {
            emsgf((const char *) (libintl_gettext((char *)(e_listidx))), (int64_t)(lp->ll_n2));
          }
          return ((void*)0);
        }
      }

      lp->ll_tv = (&(lp->ll_li)->li_tv);
    }
  }

  return p;
}






static void clear_lval(lval_T *lp)
{
  xfree(lp->ll_exp_name);
  xfree(lp->ll_newkey);
}
# 2350 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static void set_var_lval(lval_T *lp, char_u *endp, typval_T *rettv,
                         int copy, const char_u *op)
{
  int cc;
  listitem_T *ri;
  dictitem_T *di;

  if (lp->ll_tv == ((void*)0)) {
    cc = *endp;
    *endp = '\000';
    if (op != ((void*)0) && *op != '=') {
      typval_T tv;


      di = ((void*)0);
      if (get_var_tv((const char *)lp->ll_name, (int)strlen((char *)(lp->ll_name)),
                     &tv, &di, 1, 0) == 1) {
        if ((di == ((void*)0)
             || (!var_check_ro(di->di_flags, (const char *)lp->ll_name,
                               (18446744073709551615ULL - 1))
                 && !tv_check_lock(di->di_tv.v_lock, (const char *)lp->ll_name,
                                   (18446744073709551615ULL - 1))))
            && eexe_mod_op(&tv, rettv, (const char *)op) == 1) {
          set_var(lp->ll_name, lp->ll_name_len, &tv, 0);
        }
        tv_clear(&tv);
      }
    } else {
      set_var(lp->ll_name, lp->ll_name_len, rettv, copy);
    }
    *endp = cc;
  } else if (tv_check_lock(lp->ll_newkey == ((void*)0)
                           ? lp->ll_tv->v_lock
                           : lp->ll_tv->vval.v_dict->dv_lock,
                           (const char *)lp->ll_name, (18446744073709551615ULL - 1))) {
  } else if (lp->ll_range) {
    listitem_T *ll_li = lp->ll_li;
    int ll_n1 = lp->ll_n1;


    for (listitem_T *ri = tv_list_first(rettv->vval.v_list);
         ri != ((void*)0) && ll_li != ((void*)0); ) {
      if (tv_check_lock((&(ll_li)->li_tv)->v_lock,
                        (const char *)lp->ll_name,
                        (18446744073709551615ULL - 1))) {
        return;
      }
      ri = ((ri)->li_next);
      if (ri == ((void*)0) || (!lp->ll_empty2 && lp->ll_n2 == ll_n1)) {
        break;
      }
      ll_li = ((ll_li)->li_next);
      ll_n1++;
    }




    for (ri = tv_list_first(rettv->vval.v_list); ri != ((void*)0); ) {
      if (op != ((void*)0) && *op != '=') {
        eexe_mod_op((&(lp->ll_li)->li_tv), (&(ri)->li_tv),
                    (const char *)op);
      } else {
        tv_clear((&(lp->ll_li)->li_tv));
        tv_copy((&(ri)->li_tv), (&(lp->ll_li)->li_tv));
      }
      ri = ((ri)->li_next);
      if (ri == ((void*)0) || (!lp->ll_empty2 && lp->ll_n2 == lp->ll_n1)) {
        break;
      }
      ((void)0);
      if (((lp->ll_li)->li_next) == ((void*)0)) {

        tv_list_append_number(lp->ll_list, 0);

        lp->ll_li = tv_list_last(lp->ll_list);
      } else {
        lp->ll_li = ((lp->ll_li)->li_next);
      }
      lp->ll_n1++;
    }
    if (ri != ((void*)0)) {
      emsg((char_u *)(libintl_gettext((char *)("E710: List value has more items than target"))));
    } else if (lp->ll_empty2
               ? (lp->ll_li != ((void*)0)
                  && ((lp->ll_li)->li_next) != ((void*)0))
               : lp->ll_n1 != lp->ll_n2) {
      emsg((char_u *)(libintl_gettext((char *)("E711: List value has not enough items"))));
    }
  } else {
    typval_T oldtv = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });
    dict_T *dict = lp->ll_dict;
    _Bool watched = tv_dict_is_watched(dict);


    if (lp->ll_newkey != ((void*)0)) {
      if (op != ((void*)0) && *op != '=') {
        emsgf((const char *) (libintl_gettext((char *)(e_letwrong))), (op));
        return;
      }


      di = tv_dict_item_alloc((const char *)lp->ll_newkey);
      if (tv_dict_add(lp->ll_tv->vval.v_dict, di) == 0) {
        xfree(di);
        return;
      }
      lp->ll_tv = &di->di_tv;
    } else {
      if (watched) {
        tv_copy(lp->ll_tv, &oldtv);
      }

      if (op != ((void*)0) && *op != '=') {
        eexe_mod_op(lp->ll_tv, rettv, (const char *)op);
        goto notify;
      } else {
        tv_clear(lp->ll_tv);
      }
    }


    if (copy) {
      tv_copy(rettv, lp->ll_tv);
    } else {
      *lp->ll_tv = *rettv;
      lp->ll_tv->v_lock = 0;
      tv_init(rettv);
    }

notify:
    if (watched) {
      if (oldtv.v_type == VAR_UNKNOWN) {
        ((void)0);
        tv_dict_watcher_notify(dict, (char *)lp->ll_newkey, lp->ll_tv, ((void*)0));
      } else {
        dictitem_T *di = lp->ll_di;
        ((void)0);
        tv_dict_watcher_notify(dict, (char *)di->di_key, lp->ll_tv, &oldtv);
        tv_clear(&oldtv);
      }
    }
  }
}
# 2503 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
void *eval_for_line(const char_u *arg, _Bool *errp, char_u **nextcmdp, int skip)
{
  forinfo_T *fi = xcalloc(1, sizeof(forinfo_T));
  const char_u *expr;
  typval_T tv;
  list_T *l;

  *errp = 1;

  expr = skip_var_list(arg, &fi->fi_varcount, &fi->fi_semicolon);
  if (expr == ((void*)0))
    return fi;

  expr = skipwhite(expr);
  if (expr[0] != 'i' || expr[1] != 'n' || !ascii_iswhite(expr[2])) {
    emsg((char_u *)(libintl_gettext((char *)("E690: Missing \"in\" after :for"))));
    return fi;
  }

  if (skip)
    ++emsg_skip;
  if (eval0(skipwhite(expr + 2), &tv, nextcmdp, !skip) == 1) {
    *errp = 0;
    if (!skip) {
      l = tv.vval.v_list;
      if (tv.v_type != VAR_LIST) {
        emsg((char_u *)(libintl_gettext((char *)(e_listreq))));
        tv_clear(&tv);
      } else if (l == ((void*)0)) {

        tv_clear(&tv);
      } else {


        fi->fi_list = l;
        tv_list_watch_add(l, &fi->fi_lw);
        fi->fi_lw.lw_item = tv_list_first(l);
      }
    }
  }
  if (skip)
    --emsg_skip;

  return fi;
}
# 2557 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
_Bool next_for_item(void *fi_void, char_u *arg)
{
  forinfo_T *fi = (forinfo_T *)fi_void;

  listitem_T *item = fi->fi_lw.lw_item;
  if (item == ((void*)0)) {
    return 0;
  } else {
    fi->fi_lw.lw_item = ((item)->li_next);
    return (ex_let_vars(arg, (&(item)->li_tv), 1,
                        fi->fi_semicolon, fi->fi_varcount, ((void*)0)) == 1);
  }
}






void free_for_info(void *fi_void)
{
  forinfo_T *fi = (forinfo_T *)fi_void;

  if (fi != ((void*)0) && fi->fi_list != ((void*)0)) {
    tv_list_watch_remove(fi->fi_list, &fi->fi_lw);
    tv_list_unref(fi->fi_list);
  }
  xfree(fi);
}


void set_context_for_expression(expand_T *xp, char_u *arg, cmdidx_T cmdidx)
{
  int got_eq = 0;
  int c;
  char_u *p;

  if (cmdidx == CMD_let) {
    xp->xp_context = EXPAND_USER_VARS;
    if ((char_u *)strpbrk((char *)(arg), (char *)((char_u *)"\"'+-*/%.=!?~|&$([<>,#")) == ((void*)0)) {

      for (p = arg + strlen((char *)(arg)); p >= arg; ) {
        xp->xp_pattern = p;
        (p -= utf_head_off((char_u *)arg, (char_u *)p - 1) + 1);
        if (ascii_iswhite(*p))
          break;
      }
      return;
    }
  } else
    xp->xp_context = cmdidx == CMD_call ? EXPAND_FUNCTIONS
                     : EXPAND_EXPRESSION;
  while ((xp->xp_pattern = (char_u *)strpbrk((char *)(arg), (char *)((char_u *)"\"'+-*/%.=!?~|&$([<>,#"))) != ((void*)0)) {

    c = *xp->xp_pattern;
    if (c == '&') {
      c = xp->xp_pattern[1];
      if (c == '&') {
        ++xp->xp_pattern;
        xp->xp_context = cmdidx != CMD_let || got_eq
                         ? EXPAND_EXPRESSION : EXPAND_NOTHING;
      } else if (c != ' ') {
        xp->xp_context = EXPAND_SETTINGS;
        if ((c == 'l' || c == 'g') && xp->xp_pattern[2] == ':')
          xp->xp_pattern += 2;

      }
    } else if (c == '$') {

      xp->xp_context = EXPAND_ENV_VARS;
    } else if (c == '=') {
      got_eq = 1;
      xp->xp_context = EXPAND_EXPRESSION;
    } else if (c == '#'
               && xp->xp_context == EXPAND_EXPRESSION) {

      break;
    } else if ((c == '<' || c == '#')
               && xp->xp_context == EXPAND_FUNCTIONS
               && vim_strchr(xp->xp_pattern, '(') == ((void*)0)) {

      break;
    } else if (cmdidx != CMD_let || got_eq) {
      if (c == '"') {
        while ((c = *++xp->xp_pattern) != '\000' && c != '"')
          if (c == '\\' && xp->xp_pattern[1] != '\000')
            ++xp->xp_pattern;
        xp->xp_context = EXPAND_NOTHING;
      } else if (c == '\'') {

        while ((c = *++xp->xp_pattern) != '\000' && c != '\'')
                    ;
        xp->xp_context = EXPAND_NOTHING;
      } else if (c == '|') {
        if (xp->xp_pattern[1] == '|') {
          ++xp->xp_pattern;
          xp->xp_context = EXPAND_EXPRESSION;
        } else
          xp->xp_context = EXPAND_COMMANDS;
      } else
        xp->xp_context = EXPAND_EXPRESSION;
    } else


      xp->xp_context = EXPAND_EXPRESSION;
    arg = xp->xp_pattern;
    if (*arg != '\000')
      while ((c = *++arg) != '\000' && (c == ' ' || c == '\t'))
                  ;
  }
  xp->xp_pattern = arg;
}






void ex_call(exarg_T *eap)
{
  char_u *arg = eap->arg;
  char_u *startarg;
  char_u *name;
  char_u *tofree;
  int len;
  typval_T rettv;
  linenr_T lnum;
  int doesrange;
  _Bool failed = 0;
  funcdict_T fudi;
  partial_T *partial = ((void*)0);

  if (eap->skip) {



    emsg_skip++;
    if (eval0(eap->arg, &rettv, &eap->nextcmd, 0) != 0) {
      tv_clear(&rettv);
    }
    emsg_skip--;
    return;
  }

  tofree = trans_function_name(&arg, eap->skip, TFN_INT, &fudi, &partial);
  if (fudi.fd_newkey != ((void*)0)) {

    emsgf((const char *) (libintl_gettext((char *)(e_dictkey))), (fudi.fd_newkey));
    xfree(fudi.fd_newkey);
  }
  if (tofree == ((void*)0))
    return;



  if (fudi.fd_dict != ((void*)0))
    ++fudi.fd_dict->dv_refcount;




  len = (int)strlen((char *)(tofree));
  name = deref_func_name((const char *)tofree, &len,
                         partial != ((void*)0) ? ((void*)0) : &partial, 0);



  startarg = skipwhite(arg);
  rettv.v_type = VAR_UNKNOWN;

  if (*startarg != '(') {
    emsgf((const char *) (libintl_gettext((char *)("E107: Missing parentheses: %s"))), (eap->arg));
    goto end;
  }







  if (eap->skip) {
    emsg_skip++;
    lnum = eap->line2;
  } else {
    lnum = eap->line1;
  }
  for (; lnum <= eap->line2; lnum++) {
    if (!eap->skip && eap->addr_count > 0) {
      curwin->w_cursor.lnum = lnum;
      curwin->w_cursor.col = 0;
      curwin->w_cursor.coladd = 0;
    }
    arg = startarg;
    if (get_func_tv(name, (int)strlen((char *)(name)), &rettv, &arg,
                    eap->line1, eap->line2, &doesrange,
                    !eap->skip, partial, fudi.fd_dict) == 0) {
      failed = 1;
      break;
    }


    if (handle_subscript((const char **)&arg, &rettv, !eap->skip, 1)
        == 0) {
      failed = 1;
      break;
    }

    tv_clear(&rettv);
    if (doesrange || eap->skip) {
      break;
    }





    if (aborting())
      break;
  }
  if (eap->skip)
    --emsg_skip;

  if (!failed) {

    if (!ends_excmd(*arg)) {
      emsg_severe = 1;
      emsg((char_u *)(libintl_gettext((char *)(e_trailing))));
    } else
      eap->nextcmd = check_nextcmd(arg);
  }

end:
  tv_dict_unref(fudi.fd_dict);
  xfree(tofree);
}






void ex_unlet(exarg_T *eap)
{
  ex_unletlock(eap, eap->arg, 0);
}






void ex_lockvar(exarg_T *eap)
{
  char_u *arg = eap->arg;
  int deep = 2;

  if (eap->forceit)
    deep = -1;
  else if (ascii_isdigit(*arg)) {
    deep = getdigits_int(&arg);
    arg = skipwhite(arg);
  }

  ex_unletlock(eap, arg, deep);
}






static void ex_unletlock(exarg_T *eap, char_u *argstart, int deep)
{
  char_u *arg = argstart;
  _Bool error = 0;
  lval_T lv;

  do {

    char_u *const name_end = (char_u *)get_lval(arg, ((void*)0), &lv, 1,
                                                eap->skip || error,
                                                0, 2);
    if (lv.ll_name == ((void*)0)) {
      error = 1;
    }
    if (name_end == ((void*)0) || (!ascii_iswhite(*name_end)
                             && !ends_excmd(*name_end))) {
      if (name_end != ((void*)0)) {
        emsg_severe = 1;
        emsg((char_u *)(libintl_gettext((char *)(e_trailing))));
      }
      if (!(eap->skip || error))
        clear_lval(&lv);
      break;
    }

    if (!error && !eap->skip) {
      if (eap->cmdidx == CMD_unlet) {
        if (do_unlet_var(&lv, name_end, eap->forceit) == 0)
          error = 1;
      } else {
        if (do_lock_var(&lv, name_end, deep,
                        eap->cmdidx == CMD_lockvar) == 0) {
          error = 1;
        }
      }
    }

    if (!eap->skip)
      clear_lval(&lv);

    arg = skipwhite(name_end);
  } while (!ends_excmd(*arg));

  eap->nextcmd = check_nextcmd(arg);
}



static int do_unlet_var(lval_T *const lp, char_u *const name_end, int forceit)
{
  int ret = 1;
  int cc;

  if (lp->ll_tv == ((void*)0)) {
    cc = *name_end;
    *name_end = '\000';


    if (do_unlet(lp->ll_name, lp->ll_name_len, forceit) == 0) {
      ret = 0;
    }
    *name_end = cc;
  } else if ((lp->ll_list != ((void*)0)


              && tv_check_lock(tv_list_locked(lp->ll_list),
                               (const char *)lp->ll_name,
                               lp->ll_name_len))
             || (lp->ll_dict != ((void*)0)
                 && tv_check_lock(lp->ll_dict->dv_lock,
                                  (const char *)lp->ll_name,
                                  lp->ll_name_len))) {
    return 0;
  } else if (lp->ll_range) {
    ((void)0);

    listitem_T *const first_li = lp->ll_li;
    listitem_T *last_li = first_li;
    for (;;) {
      listitem_T *const li = ((lp->ll_li)->li_next);
      if (tv_check_lock((&(lp->ll_li)->li_tv)->v_lock,
                        (const char *)lp->ll_name,
                        lp->ll_name_len)) {
        return 0;
      }
      lp->ll_li = li;
      lp->ll_n1++;
      if (lp->ll_li == ((void*)0) || (!lp->ll_empty2 && lp->ll_n2 < lp->ll_n1)) {
        break;
      } else {
        last_li = lp->ll_li;
      }
    }
    tv_list_remove_items(lp->ll_list, first_li, last_li);
  } else {
    if (lp->ll_list != ((void*)0)) {

      tv_list_item_remove(lp->ll_list, lp->ll_li);
    } else {

      dict_T *d = lp->ll_dict;
      ((void)0);
      dictitem_T *di = lp->ll_di;
      _Bool watched = tv_dict_is_watched(d);
      char *key = ((void*)0);
      typval_T oldtv;

      if (watched) {
        tv_copy(&di->di_tv, &oldtv);

        key = xstrdup((char *)di->di_key);
      }

      tv_dict_item_remove(d, di);

      if (watched) {
        tv_dict_watcher_notify(d, key, ((void*)0), &oldtv);
        tv_clear(&oldtv);
        xfree(key);
      }
    }
  }

  return ret;
}
# 2964 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
int do_unlet(const char *const name, const size_t name_len, const int forceit)
  FUNC_ATTR_NONNULL_ALL
{
  const char *varname;
  dict_T *dict;
  hashtab_T *ht = find_var_ht_dict(name, name_len, &varname, &dict);

  if (ht != ((void*)0) && *varname != '\000') {
    dict_T *d;
    if (ht == &globvardict.dv_hashtab) {
      d = &globvardict;
    } else if (current_funccal != ((void*)0)
               && ht == &current_funccal->l_vars.dv_hashtab) {
      d = &current_funccal->l_vars;
    } else if (ht == &compat_hashtab) {
        d = &vimvardict;
    } else {
      dictitem_T *const di = find_var_in_ht(ht, *name, "", 0, 0);
      d = di->di_tv.vval.v_dict;
    }
    if (d == ((void*)0)) {
      internal_error("do_unlet()");
      return 0;
    }
    hashitem_T *hi = hash_find(ht, (const char_u *)varname);
    if (((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
      hi = find_hi_in_scoped_ht((const char *)name, &ht);
    }
    if (hi != ((void*)0) && !((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
      dictitem_T *const di = ((dictitem_T *)((hi)->hi_key - __builtin_offsetof(dictitem_T, di_key)));
      if (var_check_fixed(di->di_flags, (const char *)name, (18446744073709551615ULL - 1))
          || var_check_ro(di->di_flags, (const char *)name, (18446744073709551615ULL - 1))
          || tv_check_lock(d->dv_lock, (const char *)name, (18446744073709551615ULL - 1))) {
        return 0;
      }

      if (tv_check_lock(d->dv_lock, (const char *)name, (18446744073709551615ULL - 1))) {
        return 0;
      }

      typval_T oldtv;
      _Bool watched = tv_dict_is_watched(dict);

      if (watched) {
        tv_copy(&di->di_tv, &oldtv);
      }

      delete_var(ht, hi);

      if (watched) {
        tv_dict_watcher_notify(dict, varname, ((void*)0), &oldtv);
        tv_clear(&oldtv);
      }
      return 1;
    }
  }
  if (forceit)
    return 1;
  emsgf((const char *) (libintl_gettext((char *)("E108: No such variable: \"%s\""))), (name));
  return 0;
}
# 3033 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int do_lock_var(lval_T *lp, char_u *const name_end, const int deep,
                       const _Bool lock)
{
  int ret = 1;

  if (deep == 0) {
    return 1;
  }

  if (lp->ll_tv == ((void*)0)) {

    dictitem_T *const di = find_var(
        (const char *)lp->ll_name, lp->ll_name_len, ((void*)0),
        1);
    if (di == ((void*)0)) {
      ret = 0;
    } else if ((di->di_flags & DI_FLAGS_FIX)
               && di->di_tv.v_type != VAR_DICT
               && di->di_tv.v_type != VAR_LIST) {


      emsgf(libintl_gettext((char *)("E940: Cannot lock or unlock variable %s")), lp->ll_name);
    } else {
      if (lock) {
        di->di_flags |= DI_FLAGS_LOCK;
      } else {
        di->di_flags &= ~DI_FLAGS_LOCK;
      }
      tv_item_lock(&di->di_tv, deep, lock);
    }
  } else if (lp->ll_range) {
    listitem_T *li = lp->ll_li;


    while (li != ((void*)0) && (lp->ll_empty2 || lp->ll_n2 >= lp->ll_n1)) {
      tv_item_lock((&(li)->li_tv), deep, lock);
      li = ((li)->li_next);
      lp->ll_n1++;
    }
  } else if (lp->ll_list != ((void*)0)) {

    tv_item_lock((&(lp->ll_li)->li_tv), deep, lock);
  } else {

    tv_item_lock(&lp->ll_di->di_tv, deep, lock);
  }

  return ret;
}




void del_menutrans_vars(void)
{
  hash_lock(&globvardict.dv_hashtab);
  do { hashtab_T *const hiht_ = (&globvardict.dv_hashtab); size_t hitodo_ = hiht_->ht_used; for (hashitem_T *hi = hiht_->ht_array; hitodo_; hi++) { if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) { { { if (strncmp((char *)(hi->hi_key), (char *)("menutrans_"), (size_t)(10)) == 0) { delete_var(&globvardict.dv_hashtab, hi); } } } hitodo_--; } } } while (0);




  hash_unlock(&globvardict.dv_hashtab);
}
# 3104 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static char_u *varnamebuf = ((void*)0);
static size_t varnamebuflen = 0;




static char_u *cat_prefix_varname(int prefix, char_u *name)
{
  size_t len = strlen((char *)(name)) + 3;

  if (len > varnamebuflen) {
    xfree(varnamebuf);
    len += 10;
    varnamebuf = xmalloc(len);
    varnamebuflen = len;
  }
  *varnamebuf = prefix;
  varnamebuf[1] = ':';
  __builtin___strcpy_chk ((char *)(varnamebuf + 2), (char *)(name), __builtin_object_size ((char *)(varnamebuf + 2), 1 > 1 ? 1 : 0));
  return varnamebuf;
}





char_u *get_user_var_name(expand_T *xp, int idx)
{
  static size_t gdone;
  static size_t bdone;
  static size_t wdone;
  static size_t tdone;
  static size_t vidx;
  static hashitem_T *hi;
  hashtab_T *ht;

  if (idx == 0) {
    gdone = bdone = wdone = vidx = 0;
    tdone = 0;
  }


  if (gdone < globvardict.dv_hashtab.ht_used) {
    if (gdone++ == 0)
      hi = globvardict.dv_hashtab.ht_array;
    else
      ++hi;
    while (((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed))
      ++hi;
    if (strncmp((char *)("g:"), (char *)(xp->xp_pattern), (size_t)(2)) == 0)
      return cat_prefix_varname('g', hi->hi_key);
    return hi->hi_key;
  }


  ht = &curbuf->b_vars->dv_hashtab;
  if (bdone < ht->ht_used) {
    if (bdone++ == 0)
      hi = ht->ht_array;
    else
      ++hi;
    while (((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed))
      ++hi;
    return cat_prefix_varname('b', hi->hi_key);
  }


  ht = &curwin->w_vars->dv_hashtab;
  if (wdone < ht->ht_used) {
    if (wdone++ == 0)
      hi = ht->ht_array;
    else
      ++hi;
    while (((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed))
      ++hi;
    return cat_prefix_varname('w', hi->hi_key);
  }


  ht = &curtab->tp_vars->dv_hashtab;
  if (tdone < ht->ht_used) {
    if (tdone++ == 0)
      hi = ht->ht_array;
    else
      ++hi;
    while (((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed))
      ++hi;
    return cat_prefix_varname('t', hi->hi_key);
  }


  if (vidx < ((sizeof(vimvars)/sizeof((vimvars)[0])) / ((size_t)(!(sizeof(vimvars) % sizeof((vimvars)[0])))))) {
    return cat_prefix_varname('v', (char_u *)vimvars[vidx++].vv_name);
  }

  xfree(varnamebuf);
  varnamebuf = ((void*)0);
  varnamebuflen = 0;
  return ((void*)0);
}





static int pattern_match(char_u *pat, char_u *text, int ic)
{
  int matches = 0;
  regmatch_T regmatch;


  char_u *save_cpo = p_cpo;
  p_cpo = (char_u *)"";
  regmatch.regprog = vim_regcomp(pat, 1 + 2);
  if (regmatch.regprog != ((void*)0)) {
    regmatch.rm_ic = ic;
    matches = vim_regexec_nl(&regmatch, text, (colnr_T)0);
    vim_regfree(regmatch.regprog);
  }
  p_cpo = save_cpo;
  return matches;
}




typedef enum {
  TYPE_UNKNOWN = 0
  , TYPE_EQUAL
  , TYPE_NEQUAL
  , TYPE_GREATER
  , TYPE_GEQUAL
  , TYPE_SMALLER
  , TYPE_SEQUAL
  , TYPE_MATCH
  , TYPE_NOMATCH
} exptype_T;
# 3257 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
int eval0(char_u *arg, typval_T *rettv, char_u **nextcmd, int evaluate)
{
  int ret;
  char_u *p;

  p = skipwhite(arg);
  ret = eval1(&p, rettv, evaluate);
  if (ret == 0 || !ends_excmd(*p)) {
    if (ret != 0) {
      tv_clear(rettv);
    }



    if (!aborting()) {
      emsgf(libintl_gettext((char *)(e_invexpr2)), arg);
    }
    ret = 0;
  }
  if (nextcmd != ((void*)0))
    *nextcmd = check_nextcmd(p);

  return ret;
}
# 3295 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int eval1(char_u **arg, typval_T *rettv, int evaluate)
{
  int result;
  typval_T var2;




  if (eval2(arg, rettv, evaluate) == 0)
    return 0;

  if ((*arg)[0] == '?') {
    result = 0;
    if (evaluate) {
      _Bool error = 0;

      if (tv_get_number_chk(rettv, &error) != 0) {
        result = 1;
      }
      tv_clear(rettv);
      if (error) {
        return 0;
      }
    }




    *arg = skipwhite(*arg + 1);
    if (eval1(arg, rettv, evaluate && result) == 0)
      return 0;




    if ((*arg)[0] != ':') {
      emsgf(libintl_gettext((char *)("E109: Missing ':' after '?'")));
      if (evaluate && result) {
        tv_clear(rettv);
      }
      return 0;
    }




    *arg = skipwhite(*arg + 1);
    if (eval1(arg, &var2, evaluate && !result) == 0) {
      if (evaluate && result) {
        tv_clear(rettv);
      }
      return 0;
    }
    if (evaluate && !result)
      *rettv = var2;
  }

  return 1;
}
# 3366 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int eval2(char_u **arg, typval_T *rettv, int evaluate)
{
  typval_T var2;
  long result;
  int first;
  _Bool error = 0;




  if (eval3(arg, rettv, evaluate) == 0)
    return 0;




  first = 1;
  result = 0;
  while ((*arg)[0] == '|' && (*arg)[1] == '|') {
    if (evaluate && first) {
      if (tv_get_number_chk(rettv, &error) != 0) {
        result = 1;
      }
      tv_clear(rettv);
      if (error) {
        return 0;
      }
      first = 0;
    }




    *arg = skipwhite(*arg + 2);
    if (eval3(arg, &var2, evaluate && !result) == 0)
      return 0;




    if (evaluate && !result) {
      if (tv_get_number_chk(&var2, &error) != 0) {
        result = 1;
      }
      tv_clear(&var2);
      if (error) {
        return 0;
      }
    }
    if (evaluate) {
      rettv->v_type = VAR_NUMBER;
      rettv->vval.v_number = result;
    }
  }

  return 1;
}
# 3435 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int eval3(char_u **arg, typval_T *rettv, int evaluate)
{
  typval_T var2;
  long result;
  int first;
  _Bool error = 0;




  if (eval4(arg, rettv, evaluate) == 0)
    return 0;




  first = 1;
  result = 1;
  while ((*arg)[0] == '&' && (*arg)[1] == '&') {
    if (evaluate && first) {
      if (tv_get_number_chk(rettv, &error) == 0) {
        result = 0;
      }
      tv_clear(rettv);
      if (error) {
        return 0;
      }
      first = 0;
    }




    *arg = skipwhite(*arg + 2);
    if (eval4(arg, &var2, evaluate && result) == 0)
      return 0;




    if (evaluate && result) {
      if (tv_get_number_chk(&var2, &error) == 0) {
        result = 0;
      }
      tv_clear(&var2);
      if (error) {
        return 0;
      }
    }
    if (evaluate) {
      rettv->v_type = VAR_NUMBER;
      rettv->vval.v_number = result;
    }
  }

  return 1;
}
# 3513 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int eval4(char_u **arg, typval_T *rettv, int evaluate)
{
  typval_T var2;
  char_u *p;
  int i;
  exptype_T type = TYPE_UNKNOWN;
  int type_is = 0;
  int len = 2;
  varnumber_T n1, n2;
  int ic;




  if (eval5(arg, rettv, evaluate) == 0)
    return 0;

  p = *arg;
  switch (p[0]) {
  case '=': if (p[1] == '=')
      type = TYPE_EQUAL;
    else if (p[1] == '~')
      type = TYPE_MATCH;
    break;
  case '!': if (p[1] == '=')
      type = TYPE_NEQUAL;
    else if (p[1] == '~')
      type = TYPE_NOMATCH;
    break;
  case '>': if (p[1] != '=') {
      type = TYPE_GREATER;
      len = 1;
  } else
      type = TYPE_GEQUAL;
    break;
  case '<': if (p[1] != '=') {
      type = TYPE_SMALLER;
      len = 1;
  } else
      type = TYPE_SEQUAL;
    break;
  case 'i': if (p[1] == 's') {
      if (p[2] == 'n' && p[3] == 'o' && p[4] == 't') {
        len = 5;
      }
      if (!isalnum(p[len]) && p[len] != '_') {
        type = len == 2 ? TYPE_EQUAL : TYPE_NEQUAL;
        type_is = 1;
      }
  }
    break;
  }




  if (type != TYPE_UNKNOWN) {

    if (p[len] == '?') {
      ic = 1;
      ++len;
    }

    else if (p[len] == '#') {
      ic = 0;
      ++len;
    }

    else
      ic = p_ic;




    *arg = skipwhite(p + len);
    if (eval5(arg, &var2, evaluate) == 0) {
      tv_clear(rettv);
      return 0;
    }

    if (evaluate) {
      if (type_is && rettv->v_type != var2.v_type) {


        n1 = (type == TYPE_NEQUAL);
      } else if (rettv->v_type == VAR_LIST || var2.v_type == VAR_LIST) {
        if (type_is) {
          n1 = (rettv->v_type == var2.v_type
                && rettv->vval.v_list == var2.vval.v_list);
          if (type == TYPE_NEQUAL)
            n1 = !n1;
        } else if (rettv->v_type != var2.v_type
                   || (type != TYPE_EQUAL && type != TYPE_NEQUAL)) {
          if (rettv->v_type != var2.v_type) {
            emsg((char_u *)(libintl_gettext((char *)("E691: Can only compare List with List"))));
          } else {
            emsg((char_u *)(libintl_gettext((char *)("E692: Invalid operation for List"))));
          }
          tv_clear(rettv);
          tv_clear(&var2);
          return 0;
        } else {

          n1 = tv_list_equal(rettv->vval.v_list, var2.vval.v_list, ic, 0);
          if (type == TYPE_NEQUAL) {
            n1 = !n1;
          }
        }
      } else if (rettv->v_type == VAR_DICT || var2.v_type == VAR_DICT) {
        if (type_is) {
          n1 = (rettv->v_type == var2.v_type
                && rettv->vval.v_dict == var2.vval.v_dict);
          if (type == TYPE_NEQUAL)
            n1 = !n1;
        } else if (rettv->v_type != var2.v_type
                   || (type != TYPE_EQUAL && type != TYPE_NEQUAL)) {
          if (rettv->v_type != var2.v_type)
            emsg((char_u *)(libintl_gettext((char *)("E735: Can only compare Dictionary with Dictionary"))));
          else
            emsg((char_u *)(libintl_gettext((char *)("E736: Invalid operation for Dictionary"))));
          tv_clear(rettv);
          tv_clear(&var2);
          return 0;
        } else {

          n1 = tv_dict_equal(rettv->vval.v_dict, var2.vval.v_dict,
                             ic, 0);
          if (type == TYPE_NEQUAL) {
            n1 = !n1;
          }
        }
      } else if (tv_is_func(*rettv) || tv_is_func(var2)) {
        if (type != TYPE_EQUAL && type != TYPE_NEQUAL) {
          emsg((char_u *)(libintl_gettext((char *)("E694: Invalid operation for Funcrefs"))));
          tv_clear(rettv);
          tv_clear(&var2);
          return 0;
        }
        if ((rettv->v_type == VAR_PARTIAL
             && rettv->vval.v_partial == ((void*)0))
            || (var2.v_type == VAR_PARTIAL
                && var2.vval.v_partial == ((void*)0))) {

            n1 = 0;
        } else if (type_is) {
          if (rettv->v_type == VAR_FUNC && var2.v_type == VAR_FUNC) {


            n1 = tv_equal(rettv, &var2, ic, 0);
          } else if (rettv->v_type == VAR_PARTIAL
                     && var2.v_type == VAR_PARTIAL) {
            n1 = (rettv->vval.v_partial == var2.vval.v_partial);
          } else {
            n1 = 0;
          }
        } else {
          n1 = tv_equal(rettv, &var2, ic, 0);
        }
        if (type == TYPE_NEQUAL) {
          n1 = !n1;
        }
      }




      else if ((rettv->v_type == VAR_FLOAT || var2.v_type == VAR_FLOAT)
               && type != TYPE_MATCH && type != TYPE_NOMATCH) {
        float_T f1, f2;

        if (rettv->v_type == VAR_FLOAT) {
          f1 = rettv->vval.v_float;
        } else {
          f1 = tv_get_number(rettv);
        }
        if (var2.v_type == VAR_FLOAT) {
          f2 = var2.vval.v_float;
        } else {
          f2 = tv_get_number(&var2);
        }
        n1 = 0;
        switch (type) {
          case TYPE_EQUAL: n1 = (f1 == f2); break;
          case TYPE_NEQUAL: n1 = (f1 != f2); break;
          case TYPE_GREATER: n1 = (f1 > f2); break;
          case TYPE_GEQUAL: n1 = (f1 >= f2); break;
          case TYPE_SMALLER: n1 = (f1 < f2); break;
          case TYPE_SEQUAL: n1 = (f1 <= f2); break;
          case TYPE_UNKNOWN:
          case TYPE_MATCH:
          case TYPE_NOMATCH: break;
        }
      }




      else if ((rettv->v_type == VAR_NUMBER || var2.v_type == VAR_NUMBER)
               && type != TYPE_MATCH && type != TYPE_NOMATCH) {
        n1 = tv_get_number(rettv);
        n2 = tv_get_number(&var2);
        switch (type) {
          case TYPE_EQUAL: n1 = (n1 == n2); break;
          case TYPE_NEQUAL: n1 = (n1 != n2); break;
          case TYPE_GREATER: n1 = (n1 > n2); break;
          case TYPE_GEQUAL: n1 = (n1 >= n2); break;
          case TYPE_SMALLER: n1 = (n1 < n2); break;
          case TYPE_SEQUAL: n1 = (n1 <= n2); break;
          case TYPE_UNKNOWN:
          case TYPE_MATCH:
          case TYPE_NOMATCH: break;
        }
      } else {
        char buf1[NUMBUFLEN];
        char buf2[NUMBUFLEN];
        const char *const s1 = tv_get_string_buf(rettv, buf1);
        const char *const s2 = tv_get_string_buf(&var2, buf2);
        if (type != TYPE_MATCH && type != TYPE_NOMATCH) {
          i = mb_strcmp_ic((_Bool)ic, s1, s2);
        } else {
          i = 0;
        }
        n1 = 0;
        switch (type) {
          case TYPE_EQUAL: n1 = (i == 0); break;
          case TYPE_NEQUAL: n1 = (i != 0); break;
          case TYPE_GREATER: n1 = (i > 0); break;
          case TYPE_GEQUAL: n1 = (i >= 0); break;
          case TYPE_SMALLER: n1 = (i < 0); break;
          case TYPE_SEQUAL: n1 = (i <= 0); break;

          case TYPE_MATCH:
          case TYPE_NOMATCH: {
            n1 = pattern_match((char_u *)s2, (char_u *)s1, ic);
            if (type == TYPE_NOMATCH) {
              n1 = !n1;
            }
            break;
          }
          case TYPE_UNKNOWN: break;
        }
      }
      tv_clear(rettv);
      tv_clear(&var2);
      rettv->v_type = VAR_NUMBER;
      rettv->vval.v_number = n1;
    }
  }

  return 1;
}
# 3778 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int eval5(char_u **arg, typval_T *rettv, int evaluate)
{
  typval_T var2;
  typval_T var3;
  int op;
  varnumber_T n1, n2;
  float_T f1 = 0, f2 = 0;
  char_u *p;




  if (eval6(arg, rettv, evaluate, 0) == 0)
    return 0;




  for (;; ) {
    op = **arg;
    if (op != '+' && op != '-' && op != '.')
      break;

    if ((op != '+' || rettv->v_type != VAR_LIST)
        && (op == '.' || rettv->v_type != VAR_FLOAT)) {







      if (evaluate && !tv_check_str(rettv)) {
        tv_clear(rettv);
        return 0;
      }
    }




    *arg = skipwhite(*arg + 1);
    if (eval6(arg, &var2, evaluate, op == '.') == 0) {
      tv_clear(rettv);
      return 0;
    }

    if (evaluate) {



      if (op == '.') {
        char buf1[NUMBUFLEN];
        char buf2[NUMBUFLEN];

        const char *const s1 = tv_get_string_buf(rettv, buf1);
        const char *const s2 = tv_get_string_buf_chk(&var2, buf2);
        if (s2 == ((void*)0)) {
          tv_clear(rettv);
          tv_clear(&var2);
          return 0;
        }
        p = concat_str((const char_u *)s1, (const char_u *)s2);
        tv_clear(rettv);
        rettv->v_type = VAR_STRING;
        rettv->vval.v_string = p;
      } else if (op == '+' && rettv->v_type == VAR_LIST
                 && var2.v_type == VAR_LIST) {

        if (tv_list_concat(rettv->vval.v_list, var2.vval.v_list, &var3)
            == 0) {
          tv_clear(rettv);
          tv_clear(&var2);
          return 0;
        }
        tv_clear(rettv);
        *rettv = var3;
      } else {
        _Bool error = 0;

        if (rettv->v_type == VAR_FLOAT) {
          f1 = rettv->vval.v_float;
          n1 = 0;
        } else {
          n1 = tv_get_number_chk(rettv, &error);
          if (error) {



            tv_clear(rettv);
            return 0;
          }
          if (var2.v_type == VAR_FLOAT)
            f1 = n1;
        }
        if (var2.v_type == VAR_FLOAT) {
          f2 = var2.vval.v_float;
          n2 = 0;
        } else {
          n2 = tv_get_number_chk(&var2, &error);
          if (error) {
            tv_clear(rettv);
            tv_clear(&var2);
            return 0;
          }
          if (rettv->v_type == VAR_FLOAT)
            f2 = n2;
        }
        tv_clear(rettv);


        if (rettv->v_type == VAR_FLOAT || var2.v_type == VAR_FLOAT) {
          if (op == '+')
            f1 = f1 + f2;
          else
            f1 = f1 - f2;
          rettv->v_type = VAR_FLOAT;
          rettv->vval.v_float = f1;
        } else {
          if (op == '+')
            n1 = n1 + n2;
          else
            n1 = n1 - n2;
          rettv->v_type = VAR_NUMBER;
          rettv->vval.v_number = n1;
        }
      }
      tv_clear(&var2);
    }
  }
  return 1;
}
# 3926 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int eval6(char_u **arg, typval_T *rettv, int evaluate, int want_string)
  FUNC_ATTR_NO_SANITIZE_UNDEFINED
{
  typval_T var2;
  int op;
  varnumber_T n1, n2;
  _Bool use_float = 0;
  float_T f1 = 0, f2;
  _Bool error = 0;




  if (eval7(arg, rettv, evaluate, want_string) == 0)
    return 0;




  for (;; ) {
    op = **arg;
    if (op != '*' && op != '/' && op != '%')
      break;

    if (evaluate) {
      if (rettv->v_type == VAR_FLOAT) {
        f1 = rettv->vval.v_float;
        use_float = 1;
        n1 = 0;
      } else {
        n1 = tv_get_number_chk(rettv, &error);
      }
      tv_clear(rettv);
      if (error) {
        return 0;
      }
    } else {
      n1 = 0;
    }




    *arg = skipwhite(*arg + 1);
    if (eval7(arg, &var2, evaluate, 0) == 0)
      return 0;

    if (evaluate) {
      if (var2.v_type == VAR_FLOAT) {
        if (!use_float) {
          f1 = n1;
          use_float = 1;
        }
        f2 = var2.vval.v_float;
        n2 = 0;
      } else {
        n2 = tv_get_number_chk(&var2, &error);
        tv_clear(&var2);
        if (error) {
          return 0;
        }
        if (use_float) {
          f2 = n2;
        }
      }





      if (use_float) {
        if (op == '*') {
          f1 = f1 * f2;
        } else if (op == '/') {

          f1 = (f2 == 0
                ? (

                    f1 == 0
                    ? __builtin_nanf("0x7fc00000")
                    :

                    (f1 > 0
                     ? __builtin_huge_valf()
                     : -__builtin_huge_valf())
                )
                : f1 / f2);
        } else {
          emsg((char_u *)(libintl_gettext((char *)("E804: Cannot use '%' with Float"))));
          return 0;
        }
        rettv->v_type = VAR_FLOAT;
        rettv->vval.v_float = f1;
      } else {
        if (op == '*') {
          n1 = n1 * n2;
        } else if (op == '/') {
          if (n2 == 0) {
            if (n1 == 0) {
              n1 = (-9223372036854775807LL -1);
            } else if (n1 < 0) {
              n1 = -9223372036854775807LL;
            } else {
              n1 = 9223372036854775807LL;
            }
          } else {
            n1 = n1 / n2;
          }
        } else {
          if (n2 == 0)
            n1 = 0;
          else
            n1 = n1 % n2;
        }
        rettv->v_type = VAR_NUMBER;
        rettv->vval.v_number = n1;
      }
    }
  }

  return 1;
}
# 4075 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int eval7(
    char_u **arg,
    typval_T *rettv,
    int evaluate,
    int want_string
)
{
  varnumber_T n;
  int len;
  char_u *s;
  char_u *start_leader, *end_leader;
  int ret = 1;
  char_u *alias;



  rettv->v_type = VAR_UNKNOWN;


  start_leader = *arg;
  while (**arg == '!' || **arg == '-' || **arg == '+') {
    *arg = skipwhite(*arg + 1);
  }
  end_leader = *arg;

  switch (**arg) {

  case '0':
  case '1':
  case '2':
  case '3':
  case '4':
  case '5':
  case '6':
  case '7':
  case '8':
  case '9':
  {
    char_u *p = skipdigits(*arg + 1);
    int get_float = 0;






    if (!want_string && p[0] == '.' && ascii_isdigit(p[1])) {
      get_float = 1;
      p = skipdigits(p + 2);
      if (*p == 'e' || *p == 'E') {
        ++p;
        if (*p == '-' || *p == '+') {
          ++p;
        }
        if (!ascii_isdigit(*p)) {
          get_float = 0;
        } else {
          p = skipdigits(p + 1);
        }
      }
      if ((((unsigned)(*p) >= 'A' && (unsigned)(*p) <= 'Z') || ((unsigned)(*p) >= 'a' && (unsigned)(*p) <= 'z')) || *p == '.') {
        get_float = 0;
      }
    }
    if (get_float) {
      float_T f;

      *arg += string2float((char *) *arg, &f);
      if (evaluate) {
        rettv->v_type = VAR_FLOAT;
        rettv->vval.v_float = f;
      }
    } else {
      vim_str2nr(*arg, ((void*)0), &len, STR2NR_ALL, &n, ((void*)0), 0);
      *arg += len;
      if (evaluate) {
        rettv->v_type = VAR_NUMBER;
        rettv->vval.v_number = n;
      }
    }
    break;
  }


  case '"': ret = get_string_tv(arg, rettv, evaluate);
    break;


  case '\'': ret = get_lit_string_tv(arg, rettv, evaluate);
    break;


  case '[': ret = get_list_tv(arg, rettv, evaluate);
    break;



  case '{': ret = get_lambda_tv(arg, rettv, evaluate);
              if (ret == 2) {
                ret = get_dict_tv(arg, rettv, evaluate);
              }
    break;


  case '&': {
    ret = get_option_tv((const char **)arg, rettv, evaluate);
    break;
  }

  case '$': ret = get_env_tv(arg, rettv, evaluate);
    break;


  case '@': ++*arg;
    if (evaluate) {
      rettv->v_type = VAR_STRING;
      rettv->vval.v_string = get_reg_contents(**arg, kGRegExprSrc);
    }
    if (**arg != '\000') {
      ++*arg;
    }
    break;


  case '(': *arg = skipwhite(*arg + 1);
    ret = eval1(arg, rettv, evaluate);
    if (**arg == ')') {
      ++*arg;
    } else if (ret == 1) {
      emsg((char_u *)(libintl_gettext((char *)("E110: Missing ')'"))));
      tv_clear(rettv);
      ret = 0;
    }
    break;

  default: ret = 2;
    break;
  }

  if (ret == 2) {


    s = *arg;
    len = get_name_len((const char **)arg, (char **)&alias, evaluate, 1);
    if (alias != ((void*)0)) {
      s = alias;
    }

    if (len <= 0) {
      ret = 0;
    } else {
      if (**arg == '(') {
        partial_T *partial;

        if (!evaluate) {
          check_vars((const char *)s, len);
        }



        s = deref_func_name((const char *)s, &len, &partial, !evaluate);



        s = xmemdupz(s, len);


        ret = get_func_tv(s, len, rettv, arg,
                          curwin->w_cursor.lnum, curwin->w_cursor.lnum,
                          &len, evaluate, partial, ((void*)0));

        xfree(s);




        if (rettv->v_type == VAR_UNKNOWN && !evaluate && **arg == '(') {
          rettv->vval.v_string = (char_u *)tv_empty_string;
          rettv->v_type = VAR_FUNC;
        }




        if (aborting()) {
          if (ret == 1) {
            tv_clear(rettv);
          }
          ret = 0;
        }
      } else if (evaluate) {
        ret = get_var_tv((const char *)s, len, rettv, ((void*)0), 1, 0);
      } else {
        check_vars((const char *)s, len);
        ret = 1;
      }
    }
    xfree(alias);
  }

  *arg = skipwhite(*arg);



  if (ret == 1) {
    ret = handle_subscript((const char **)arg, rettv, evaluate, 1);
  }


  if (ret == 1 && evaluate && end_leader > start_leader) {
    _Bool error = 0;
    varnumber_T val = 0;
    float_T f = 0.0;

    if (rettv->v_type == VAR_FLOAT) {
      f = rettv->vval.v_float;
    } else {
      val = tv_get_number_chk(rettv, &error);
    }
    if (error) {
      tv_clear(rettv);
      ret = 0;
    } else {
      while (end_leader > start_leader) {
        --end_leader;
        if (*end_leader == '!') {
          if (rettv->v_type == VAR_FLOAT) {
            f = !f;
          } else {
            val = !val;
          }
        } else if (*end_leader == '-') {
          if (rettv->v_type == VAR_FLOAT) {
            f = -f;
          } else {
            val = -val;
          }
        }
      }
      if (rettv->v_type == VAR_FLOAT) {
        tv_clear(rettv);
        rettv->vval.v_float = f;
      } else {
        tv_clear(rettv);
        rettv->v_type = VAR_NUMBER;
        rettv->vval.v_number = val;
      }
    }
  }

  return ret;
}
# 4335 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int
eval_index (
    char_u **arg,
    typval_T *rettv,
    int evaluate,
    int verbose
)
{
  _Bool empty1 = 0;
  _Bool empty2 = 0;
  long n1, n2 = 0;
  ptrdiff_t len = -1;
  int range = 0;
  char_u *key = ((void*)0);

  switch (rettv->v_type) {
    case VAR_FUNC:
    case VAR_PARTIAL: {
      if (verbose) {
        emsg((char_u *)(libintl_gettext((char *)("E695: Cannot index a Funcref"))));
      }
      return 0;
    }
    case VAR_FLOAT: {
      if (verbose) {
        emsg((char_u *)(libintl_gettext((char *)(e_float_as_string))));
      }
      return 0;
    }
    case VAR_SPECIAL: {
      if (verbose) {
        emsg((char_u *)(libintl_gettext((char *)("E909: Cannot index a special variable"))));
      }
      return 0;
    }
    case VAR_UNKNOWN: {
      if (evaluate) {
        return 0;
      }

    }
    case VAR_STRING:
    case VAR_NUMBER:
    case VAR_LIST:
    case VAR_DICT: {
      break;
    }
  }

  typval_T var1 = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });
  typval_T var2 = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });
  if (**arg == '.') {



    key = *arg + 1;
    for (len = 0; ((((unsigned)(key[len]) >= 'A' && (unsigned)(key[len]) <= 'Z') || ((unsigned)(key[len]) >= 'a' && (unsigned)(key[len]) <= 'z')) || ascii_isdigit(key[len])) || key[len] == '_'; ++len)
      ;
    if (len == 0)
      return 0;
    *arg = skipwhite(key + len);
  } else {





    *arg = skipwhite(*arg + 1);
    if (**arg == ':') {
      empty1 = 1;
    } else if (eval1(arg, &var1, evaluate) == 0) {
      return 0;
    } else if (evaluate && !tv_check_str(&var1)) {

      tv_clear(&var1);
      return 0;
    }




    if (**arg == ':') {
      range = 1;
      *arg = skipwhite(*arg + 1);
      if (**arg == ']') {
        empty2 = 1;
      } else if (eval1(arg, &var2, evaluate) == 0) {
        if (!empty1) {
          tv_clear(&var1);
        }
        return 0;
      } else if (evaluate && !tv_check_str(&var2)) {

        if (!empty1) {
          tv_clear(&var1);
        }
        tv_clear(&var2);
        return 0;
      }
    }


    if (**arg != ']') {
      if (verbose) {
        emsgf(libintl_gettext((char *)(e_missbrac)));
      }
      tv_clear(&var1);
      if (range) {
        tv_clear(&var2);
      }
      return 0;
    }
    *arg = skipwhite(*arg + 1);
  }

  if (evaluate) {
    n1 = 0;
    if (!empty1 && rettv->v_type != VAR_DICT) {
      n1 = tv_get_number(&var1);
      tv_clear(&var1);
    }
    if (range) {
      if (empty2) {
        n2 = -1;
      } else {
        n2 = tv_get_number(&var2);
        tv_clear(&var2);
      }
    }

    switch (rettv->v_type) {
      case VAR_NUMBER:
      case VAR_STRING: {
        const char *const s = tv_get_string(rettv);
        char *v;
        len = (ptrdiff_t)strlen(s);
        if (range) {


          if (n1 < 0) {
            n1 = len + n1;
            if (n1 < 0) {
              n1 = 0;
            }
          }
          if (n2 < 0) {
            n2 = len + n2;
          } else if (n2 >= len) {
            n2 = len;
          }
          if (n1 >= len || n2 < 0 || n1 > n2) {
            v = ((void*)0);
          } else {
            v = xmemdupz(s + n1, (size_t)(n2 - n1 + 1));
          }
        } else {



          if (n1 >= len || n1 < 0) {
            v = ((void*)0);
          } else {
            v = xmemdupz(s + n1, 1);
          }
        }
        tv_clear(rettv);
        rettv->v_type = VAR_STRING;
        rettv->vval.v_string = (char_u *)v;
        break;
      }
      case VAR_LIST: {
        len = tv_list_len(rettv->vval.v_list);
        if (n1 < 0) {
          n1 = len + n1;
        }
        if (!empty1 && (n1 < 0 || n1 >= len)) {


          if (!range) {
            if (verbose) {
              emsgf((const char *) (libintl_gettext((char *)(e_listidx))), (int64_t)(n1));
            }
            return 0;
          }
          n1 = len;
        }
        if (range) {
          list_T *l;
          listitem_T *item;

          if (n2 < 0) {
            n2 = len + n2;
          } else if (n2 >= len) {
            n2 = len - 1;
          }
          if (!empty2 && (n2 < 0 || n2 + 1 < n1)) {
            n2 = -1;
          }
          l = tv_list_alloc();
          item = tv_list_find(rettv->vval.v_list, n1);
          while (n1++ <= n2) {
            tv_list_append_tv(l, (&(item)->li_tv));
            item = ((item)->li_next);
          }
          tv_clear(rettv);
          rettv->v_type = VAR_LIST;
          rettv->vval.v_list = l;
          tv_list_ref(l);
        } else {
          tv_copy((&(tv_list_find(rettv->vval.v_list, n1))->li_tv), &var1);
          tv_clear(rettv);
          *rettv = var1;
        }
        break;
      }
      case VAR_DICT: {
        if (range) {
          if (verbose) {
            emsgf(libintl_gettext((char *)(e_dictrange)));
          }
          if (len == -1) {
            tv_clear(&var1);
          }
          return 0;
        }

        if (len == -1) {
          key = (char_u *)tv_get_string_chk(&var1);
          if (key == ((void*)0)) {
            tv_clear(&var1);
            return 0;
          }
        }

        dictitem_T *const item = tv_dict_find(rettv->vval.v_dict,
                                              (const char *)key, len);

        if (item == ((void*)0) && verbose) {
          emsgf(libintl_gettext((char *)(e_dictkey)), key);
        }
        if (len == -1) {
          tv_clear(&var1);
        }
        if (item == ((void*)0)) {
          return 0;
        }

        tv_copy(&item->di_tv, &var1);
        tv_clear(rettv);
        *rettv = var1;
        break;
      }
      case VAR_SPECIAL:
      case VAR_FUNC:
      case VAR_FLOAT:
      case VAR_PARTIAL:
      case VAR_UNKNOWN: {
        break;
      }
    }
  }

  return 1;
}
# 4610 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int get_option_tv(const char **const arg, typval_T *const rettv,
                         const _Bool evaluate)
  FUNC_ATTR_NONNULL_ARG(1)
{
  long numval;
  char_u *stringval;
  int opt_type;
  int c;
  _Bool working = (**arg == '+');
  int ret = 1;
  int opt_flags;


  char *option_end = (char *)find_option_end(arg, &opt_flags);
  if (option_end == ((void*)0)) {
    if (rettv != ((void*)0)) {
      emsgf((const char *) (libintl_gettext((char *)("E112: Option name missing: %s"))), (*arg));
    }
    return 0;
  }

  if (!evaluate) {
    *arg = option_end;
    return 1;
  }

  c = *option_end;
  *option_end = '\000';
  opt_type = get_option_value((char_u *)(*arg), &numval,
                              rettv == ((void*)0) ? ((void*)0) : &stringval, opt_flags);

  if (opt_type == -3) {
    if (rettv != ((void*)0))
      emsgf((const char *) (libintl_gettext((char *)("E113: Unknown option: %s"))), (*arg));
    ret = 0;
  } else if (rettv != ((void*)0)) {
    if (opt_type == -2) {
      rettv->v_type = VAR_STRING;
      rettv->vval.v_string = ((void*)0);
    } else if (opt_type == -1) {
      rettv->v_type = VAR_NUMBER;
      rettv->vval.v_number = 0;
    } else if (opt_type == 1) {
      rettv->v_type = VAR_NUMBER;
      rettv->vval.v_number = numval;
    } else {
      rettv->v_type = VAR_STRING;
      rettv->vval.v_string = stringval;
    }
  } else if (working && (opt_type == -2 || opt_type == -1))
    ret = 0;

  *option_end = c;
  *arg = option_end;

  return ret;
}





static int get_string_tv(char_u **arg, typval_T *rettv, int evaluate)
{
  char_u *p;
  char_u *name;
  unsigned int extra = 0;




  for (p = *arg + 1; *p != '\000' && *p != '"'; (p += utfc_ptr2len((char_u *)p))) {
    if (*p == '\\' && p[1] != '\000') {
      ++p;


      if (*p == '<')
        extra += 2;
    }
  }

  if (*p != '"') {
    emsgf((const char *) (libintl_gettext((char *)("E114: Missing quote: %s"))), (*arg));
    return 0;
  }


  if (!evaluate) {
    *arg = p + 1;
    return 1;
  }





  name = xmalloc(p - *arg + extra);
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = name;

  for (p = *arg + 1; *p != '\000' && *p != '"'; ) {
    if (*p == '\\') {
      switch (*++p) {
      case 'b': *name++ = '\010'; ++p; break;
      case 'e': *name++ = '\033'; ++p; break;
      case 'f': *name++ = '\014'; ++p; break;
      case 'n': *name++ = '\012'; ++p; break;
      case 'r': *name++ = '\015'; ++p; break;
      case 't': *name++ = '\011'; ++p; break;

      case 'X':
      case 'x':
      case 'u':
      case 'U':
        if (ascii_isxdigit(p[1])) {
          int n, nr;
          int c = toupper(*p);

          if (c == 'X') {
            n = 2;
          } else if (*p == 'u') {
            n = 4;
          } else {
            n = 8;
          }
          nr = 0;
          while (--n >= 0 && ascii_isxdigit(p[1])) {
            ++p;
            nr = (nr << 4) + hex2nr(*p);
          }
          ++p;


          if (c != 'X')
            name += (*utf_char2bytes)(nr, name);
          else
            *name++ = nr;
        }
        break;


      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7': *name = *p++ - '0';
        if (*p >= '0' && *p <= '7') {
          *name = (*name << 3) + *p++ - '0';
          if (*p >= '0' && *p <= '7')
            *name = (*name << 3) + *p++ - '0';
        }
        ++name;
        break;


      case '<':
        extra = trans_special((const char_u **)&p, strlen((char *)(p)), name, 1, 1);
        if (extra != 0) {
          name += extra;
          break;
        }


      default: mb_copy_char((const char_u **)(&p), &name);;
        break;
      }
    } else
      mb_copy_char((const char_u **)(&p), &name);;

  }
  *name = '\000';
  if (*p != '\000') {
    p++;
  }
  *arg = p;

  return 1;
}





static int get_lit_string_tv(char_u **arg, typval_T *rettv, int evaluate)
{
  char_u *p;
  char_u *str;
  int reduce = 0;




  for (p = *arg + 1; *p != '\000'; (p += utfc_ptr2len((char_u *)p))) {
    if (*p == '\'') {
      if (p[1] != '\'')
        break;
      ++reduce;
      ++p;
    }
  }

  if (*p != '\'') {
    emsgf((const char *) (libintl_gettext((char *)("E115: Missing quote: %s"))), (*arg));
    return 0;
  }


  if (!evaluate) {
    *arg = p + 1;
    return 1;
  }




  str = xmalloc((p - *arg) - reduce);
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = str;

  for (p = *arg + 1; *p != '\000'; ) {
    if (*p == '\'') {
      if (p[1] != '\'')
        break;
      ++p;
    }
    mb_copy_char((const char_u **)(&p), &str);;
  }
  *str = '\000';
  *arg = p + 1;

  return 1;
}


char_u *partial_name(partial_T *pt)
{
  if (pt->pt_name != ((void*)0)) {
    return pt->pt_name;
  }
  return pt->pt_func->uf_name;
}



static void partial_free(partial_T *pt)
{
  for (int i = 0; i < pt->pt_argc; i++) {
    tv_clear(&pt->pt_argv[i]);
  }
  xfree(pt->pt_argv);
  tv_dict_unref(pt->pt_dict);
  if (pt->pt_name != ((void*)0)) {
    func_unref(pt->pt_name);
    xfree(pt->pt_name);
  } else {
    func_ptr_unref(pt->pt_func);
  }
  xfree(pt);
}





void partial_unref(partial_T *pt)
{
  if (pt != ((void*)0) && --pt->pt_refcount <= 0) {
    partial_free(pt);
  }
}



static int get_list_tv(char_u **arg, typval_T *rettv, int evaluate)
{
  list_T *l = ((void*)0);

  if (evaluate) {
    l = tv_list_alloc();
  }

  *arg = skipwhite(*arg + 1);
  while (**arg != ']' && **arg != '\000') {
    typval_T tv;
    if (eval1(arg, &tv, evaluate) == 0) {
      goto failret;
    }
    if (evaluate) {
      tv.v_lock = VAR_UNLOCKED;
      tv_list_append_owned_tv(l, tv);
    }

    if (**arg == ']') {
      break;
    }
    if (**arg != ',') {
      emsgf(libintl_gettext((char *)("E696: Missing comma in List: %s")), *arg);
      goto failret;
    }
    *arg = skipwhite(*arg + 1);
  }

  if (**arg != ']') {
    emsgf(libintl_gettext((char *)("E697: Missing end of List ']': %s")), *arg);
failret:
    if (evaluate) {
      tv_list_free(l);
    }
    return 0;
  }

  *arg = skipwhite(*arg + 1);
  if (evaluate) {
    rettv->v_type = VAR_LIST;
    rettv->vval.v_list = l;
    tv_list_ref(l);
  }

  return 1;
}

_Bool func_equal(
    typval_T *tv1,
    typval_T *tv2,
    _Bool ic
) {
  char_u *s1, *s2;
  dict_T *d1, *d2;
  int a1, a2;


  s1 = tv1->v_type == VAR_FUNC ? tv1->vval.v_string
                     : partial_name(tv1->vval.v_partial);
  if (s1 != ((void*)0) && *s1 == '\000') {
    s1 = ((void*)0);
  }
  s2 = tv2->v_type == VAR_FUNC ? tv2->vval.v_string
                     : partial_name(tv2->vval.v_partial);
  if (s2 != ((void*)0) && *s2 == '\000') {
    s2 = ((void*)0);
  }
  if (s1 == ((void*)0) || s2 == ((void*)0)) {
    if (s1 != s2) {
      return 0;
    }
  } else if (strcmp((char *)(s1), (char *)(s2)) != 0) {
    return 0;
  }


  d1 = tv1->v_type == VAR_FUNC ? ((void*)0) : tv1->vval.v_partial->pt_dict;
  d2 = tv2->v_type == VAR_FUNC ? ((void*)0) : tv2->vval.v_partial->pt_dict;
  if (d1 == ((void*)0) || d2 == ((void*)0)) {
    if (d1 != d2) {
      return 0;
    }
  } else if (!tv_dict_equal(d1, d2, ic, 1)) {
    return 0;
  }


  a1 = tv1->v_type == VAR_FUNC ? 0 : tv1->vval.v_partial->pt_argc;
  a2 = tv2->v_type == VAR_FUNC ? 0 : tv2->vval.v_partial->pt_argc;
  if (a1 != a2) {
    return 0;
  }
  for (int i = 0; i < a1; i++) {
    if (!tv_equal(tv1->vval.v_partial->pt_argv + i,
                  tv2->vval.v_partial->pt_argv + i, ic, 1)) {
      return 0;
    }
  }
  return 1;
}





int get_copyID(void)
  FUNC_ATTR_WARN_UNUSED_RESULT
{




  static int current_copyID = 0;
  current_copyID += 2;
  return current_copyID;
}


static garray_T funcargs = { 0, 0, 0, 1, ((void*)0) };
# 5031 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
_Bool garbage_collect(_Bool testing)
{
  _Bool abort = 0;


  if (!testing) {

    want_garbage_collect = 0;
    may_garbage_collect = 0;
    garbage_collect_at_exit = 0;
  }



  const int copyID = get_copyID();







  for (funccall_T *fc = previous_funccal; fc != ((void*)0); fc = fc->caller) {
    fc->fc_copyID = copyID + 1;
    abort = abort || set_ref_in_ht(&fc->l_vars.dv_hashtab, copyID + 1, ((void*)0));
    abort = abort || set_ref_in_ht(&fc->l_avars.dv_hashtab, copyID + 1, ((void*)0));
  }


  for (int i = 1; i <= ga_scripts.ga_len; ++i) {
    abort = abort || set_ref_in_ht(&((((scriptvar_T **)ga_scripts.ga_data)[(i) - 1])->sv_dict.dv_hashtab), copyID, ((void*)0));
  }

  for (buf_T *buf = firstbuf; buf != ((void*)0); buf = buf->b_next) {

    abort = abort || set_ref_in_item(&buf->b_bufvar.di_tv, copyID, ((void*)0), ((void*)0));

    abort = abort || set_ref_in_fmark(buf->b_last_cursor, copyID);
    abort = abort || set_ref_in_fmark(buf->b_last_insert, copyID);
    abort = abort || set_ref_in_fmark(buf->b_last_change, copyID);
    for (size_t i = 0; i < ('z' - 'a' + 1); i++) {
      abort = abort || set_ref_in_fmark(buf->b_namedm[i], copyID);
    }

    for (int i = 0; i < buf->b_changelistlen; i++) {
      abort = abort || set_ref_in_fmark(buf->b_changelist[i], copyID);
    }

    abort = abort || set_ref_dict(buf->additional_data, copyID);
  }

  for (tabpage_T *tp = first_tabpage; tp != ((void*)0); tp = tp->tp_next) for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; wp != ((void*)0); wp = wp->w_next) {

    abort = abort || set_ref_in_item(&wp->w_winvar.di_tv, copyID, ((void*)0), ((void*)0));

    for (int i = 0; i < wp->w_jumplistlen; i++) {
      abort = abort || set_ref_in_fmark(wp->w_jumplist[i].fmark, copyID);
    }
  }
  if (aucmd_win != ((void*)0)) {
    abort = abort || set_ref_in_item(&aucmd_win->w_winvar.di_tv, copyID, ((void*)0), ((void*)0));
  }


  {
    const void *reg_iter = ((void*)0);
    do {
      yankreg_T reg;
      char name = '\000';
      _Bool is_unnamed = 0;
      reg_iter = op_register_iter(reg_iter, &name, &reg, &is_unnamed);
      if (name != '\000') {
        abort = abort || set_ref_dict(reg.additional_data, copyID);
      }
    } while (reg_iter != ((void*)0));
  }


  {
    const void *mark_iter = ((void*)0);
    do {
      xfmark_T fm;
      char name = '\000';
      mark_iter = mark_global_iter(mark_iter, &name, &fm);
      if (name != '\000') {
        abort = abort || set_ref_dict(fm.fmark.additional_data, copyID);
      }
    } while (mark_iter != ((void*)0));
  }


  for (tabpage_T *tp = first_tabpage; tp != ((void*)0); tp = tp->tp_next) {
    abort = abort || set_ref_in_item(&tp->tp_winvar.di_tv, copyID, ((void*)0), ((void*)0));
  }


  abort = abort || set_ref_in_ht(&globvardict.dv_hashtab, copyID, ((void*)0));


  for (funccall_T *fc = current_funccal; fc != ((void*)0); fc = fc->caller) {
    fc->fc_copyID = copyID;
    abort = abort || set_ref_in_ht(&fc->l_vars.dv_hashtab, copyID, ((void*)0));
    abort = abort || set_ref_in_ht(&fc->l_avars.dv_hashtab, copyID, ((void*)0));
  }


  abort = abort || set_ref_in_functions(copyID);


  {
    Channel *data;
    { khint_t __i; for (__i = (khint_t)(0); __i != ((channels->table)->n_buckets); ++__i) { if (!(!(((channels->table)->flags[(__i)>>4]>>(((__i)&0xfU)<<1))&3))) continue; (data) = ((channels->table)->vals[__i]); { set_ref_in_callback_reader(&data->on_stdout, copyID, ((void*)0), ((void*)0)); set_ref_in_callback_reader(&data->on_stderr, copyID, ((void*)0), ((void*)0)); set_ref_in_callback(&data->on_exit, copyID, ((void*)0), ((void*)0)); }; } }




  }


  {
    timer_T *timer;
    { khint_t __i; for (__i = (khint_t)(0); __i != ((timers->table)->n_buckets); ++__i) { if (!(!(((timers->table)->flags[(__i)>>4]>>(((__i)&0xfU)<<1))&3))) continue; (timer) = ((timers->table)->vals[__i]); { set_ref_in_callback(&timer->callback, copyID, ((void*)0), ((void*)0)); }; } }


  }


  for (int i = 0; i < funcargs.ga_len; i++) {
    abort = abort || set_ref_in_item(((typval_T **)funcargs.ga_data)[i],
                              copyID, ((void*)0), ((void*)0));
  }


  abort = abort || set_ref_in_ht(&vimvardict.dv_hashtab, copyID, ((void*)0));


  if (p_hi) {
    for (uint8_t i = 0; i < (HIST_DEBUG + 1); i++) {
      const void *iter = ((void*)0);
      do {
        histentry_T hist;
        iter = hist_iter(iter, i, 0, &hist);
        if (hist.hisstr != ((void*)0)) {
          abort = abort || set_ref_list(hist.additional_elements, copyID);
        }
      } while (iter != ((void*)0));
    }
  }


  {
    SearchPattern pat;
    get_search_pattern(&pat);
    abort = abort || set_ref_dict(pat.additional_data, copyID);
    get_substitute_pattern(&pat);
    abort = abort || set_ref_dict(pat.additional_data, copyID);
  }


  {
    SubReplacementString sub;
    sub_get_replacement(&sub);
    abort = abort || set_ref_list(sub.additional_elements, copyID);
  }

  abort = abort || set_ref_in_quickfix(copyID);

  _Bool did_free = 0;
  if (!abort) {

    did_free = free_unref_items(copyID);


    _Bool did_free_funccal = 0;
    for (funccall_T **pfc = &previous_funccal; *pfc != ((void*)0);) {
      if (can_free_funccal(*pfc, copyID)) {
        funccall_T *fc = *pfc;
        *pfc = fc->caller;
        free_funccal(fc, 1);
        did_free = 1;
        did_free_funccal = 1;
      } else {
        pfc = &(*pfc)->caller;
      }
    }
    if (did_free_funccal) {


      (void)garbage_collect(testing);
    }
  } else if (p_verbose > 0) {
    verb_msg((char_u *)libintl_gettext((char *)("Not enough memory to set references, garbage collection aborted!")));

  }

  return did_free;
}







static int free_unref_items(int copyID)
{
  dict_T *dd, *dd_next;
  list_T *ll, *ll_next;
  _Bool did_free = 0;




  tv_in_free_unref_items = 1;






  for (dict_T *dd = gc_first_dict; dd != ((void*)0); dd = dd->dv_used_next) {
    if ((dd->dv_copyID & (~0x1)) != (copyID & (~0x1))) {



      tv_dict_free_contents(dd);
      did_free = 1;
    }
  }




  for (list_T *ll = gc_first_list; ll != ((void*)0); ll = ll->lv_used_next) {
    if ((tv_list_copyid(ll) & (~0x1)) != (copyID & (~0x1))
        && !tv_list_has_watchers(ll)) {



      tv_list_free_contents(ll);
      did_free = 1;
    }
  }


  for (dd = gc_first_dict; dd != ((void*)0); dd = dd_next) {
    dd_next = dd->dv_used_next;
    if ((dd->dv_copyID & (~0x1)) != (copyID & (~0x1))) {
      tv_dict_free_dict(dd);
    }
  }

  for (ll = gc_first_list; ll != ((void*)0); ll = ll_next) {
    ll_next = ll->lv_used_next;
    if ((ll->lv_copyID & (~0x1)) != (copyID & (~0x1))
        && !tv_list_has_watchers(ll)) {



      tv_list_free_list(ll);
    }
  }
  tv_in_free_unref_items = 0;
  return did_free;
}
# 5304 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
_Bool set_ref_in_ht(hashtab_T *ht, int copyID, list_stack_T **list_stack)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  _Bool abort = 0;
  ht_stack_T *ht_stack = ((void*)0);

  hashtab_T *cur_ht = ht;
  for (;;) {
    if (!abort) {



      do { hashtab_T *const hiht_ = (cur_ht); size_t hitodo_ = hiht_->ht_used; for (hashitem_T *hi = hiht_->ht_array; hitodo_; hi++) { if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) { { { abort = abort || set_ref_in_item( &((dictitem_T *)((hi)->hi_key - __builtin_offsetof(dictitem_T, di_key)))->di_tv, copyID, &ht_stack, list_stack); } } hitodo_--; } } } while (0);



    }

    if (ht_stack == ((void*)0)) {
      break;
    }


    cur_ht = ht_stack->ht;
    ht_stack_T *tempitem = ht_stack;
    ht_stack = ht_stack->prev;
    xfree(tempitem);
  }

  return abort;
}
# 5343 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
_Bool set_ref_in_list(list_T *l, int copyID, ht_stack_T **ht_stack)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  _Bool abort = 0;
  list_stack_T *list_stack = ((void*)0);

  list_T *cur_l = l;
  for (;;) {



    do { list_T *const l_ = (cur_l); if (l_ != ((void*)0)) { for ( listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { if (abort) { break; } abort = set_ref_in_item((&(li)->li_tv), copyID, ht_stack, &list_stack); } } } } while (0);







    if (list_stack == ((void*)0)) {
      break;
    }


    cur_l = list_stack->list;
    list_stack_T *tempitem = list_stack;
    list_stack = list_stack->prev;
    xfree(tempitem);
  }

  return abort;
}
# 5384 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
_Bool set_ref_in_item(typval_T *tv, int copyID, ht_stack_T **ht_stack,
                     list_stack_T **list_stack)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  _Bool abort = 0;

  switch (tv->v_type) {
    case VAR_DICT: {
      dict_T *dd = tv->vval.v_dict;
      if (dd != ((void*)0) && dd->dv_copyID != copyID) {

        dd->dv_copyID = copyID;
        if (ht_stack == ((void*)0)) {
          abort = set_ref_in_ht(&dd->dv_hashtab, copyID, list_stack);
        } else {
          ht_stack_T *newitem = try_malloc(sizeof(ht_stack_T));
          if (newitem == ((void*)0)) {
            abort = 1;
          } else {
            newitem->ht = &dd->dv_hashtab;
            newitem->prev = *ht_stack;
            *ht_stack = newitem;
          }
        }

        QUEUE *w = ((void*)0);
        DictWatcher *watcher = ((void*)0);
        for ( (w) = (&dd->watchers)->next; (w) != (&dd->watchers); (w) = (w)->next) {
          watcher = tv_dict_watcher_node_data(w);
          set_ref_in_callback(&watcher->callback, copyID, ht_stack, list_stack);
        }
      }
      break;
    }

    case VAR_LIST: {
      list_T *ll = tv->vval.v_list;
      if (ll != ((void*)0) && ll->lv_copyID != copyID) {

        ll->lv_copyID = copyID;
        if (list_stack == ((void*)0)) {
          abort = set_ref_in_list(ll, copyID, ht_stack);
        } else {
          list_stack_T *newitem = try_malloc(sizeof(list_stack_T));
          if (newitem == ((void*)0)) {
            abort = 1;
          } else {
            newitem->list = ll;
            newitem->prev = *list_stack;
            *list_stack = newitem;
          }
        }
      }
      break;
    }

    case VAR_PARTIAL: {
      partial_T *pt = tv->vval.v_partial;


      if (pt != ((void*)0)) {
        abort = set_ref_in_func(pt->pt_name, pt->pt_func, copyID);
        if (pt->pt_dict != ((void*)0)) {
          typval_T dtv;

          dtv.v_type = VAR_DICT;
          dtv.vval.v_dict = pt->pt_dict;
          abort = abort || set_ref_in_item(&dtv, copyID, ht_stack, list_stack);
        }

        for (int i = 0; i < pt->pt_argc; i++) {
          abort = abort || set_ref_in_item(&pt->pt_argv[i], copyID,
                                           ht_stack, list_stack);
        }
      }
      break;
    }
    case VAR_FUNC:
      abort = set_ref_in_func(tv->vval.v_string, ((void*)0), copyID);
      break;
    case VAR_UNKNOWN:
    case VAR_SPECIAL:
    case VAR_FLOAT:
    case VAR_NUMBER:
    case VAR_STRING: {
      break;
    }
  }
  return abort;
}


_Bool set_ref_in_functions(int copyID)
{
  int todo;
  hashitem_T *hi = ((void*)0);
  _Bool abort = 0;
  ufunc_T *fp;

  todo = (int)func_hashtab.ht_used;
  for (hi = func_hashtab.ht_array; todo > 0 && !got_int; hi++) {
    if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
      todo--;
      fp = ((ufunc_T *)((hi)->hi_key - __builtin_offsetof(ufunc_T, uf_name)));
      if (!func_name_refcount(fp->uf_name)) {
        abort = abort || set_ref_in_func(((void*)0), fp, copyID);
      }
    }
  }
  return abort;
}






static inline _Bool set_ref_in_fmark(fmark_T fm, int copyID)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  if (fm.additional_data != ((void*)0)
      && fm.additional_data->dv_copyID != copyID) {
    fm.additional_data->dv_copyID = copyID;
    return set_ref_in_ht(&fm.additional_data->dv_hashtab, copyID, ((void*)0));
  }
  return 0;
}




static inline _Bool set_ref_list(list_T *list, int copyID)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  if (list != ((void*)0)) {
    typval_T tv = (typval_T) {
      .v_type = VAR_LIST,
      .vval = { .v_list = list }
    };
    return set_ref_in_item(&tv, copyID, ((void*)0), ((void*)0));
  }
  return 0;
}




static inline _Bool set_ref_dict(dict_T *dict, int copyID)
  FUNC_ATTR_WARN_UNUSED_RESULT
{
  if (dict != ((void*)0)) {
    typval_T tv = (typval_T) {
      .v_type = VAR_DICT,
      .vval = { .v_dict = dict }
    };
    return set_ref_in_item(&tv, copyID, ((void*)0), ((void*)0));
  }
  return 0;
}

static _Bool set_ref_in_funccal(funccall_T *fc, int copyID)
{
  _Bool abort = 0;

  if (fc->fc_copyID != copyID) {
    fc->fc_copyID = copyID;
    abort = abort || set_ref_in_ht(&fc->l_vars.dv_hashtab, copyID, ((void*)0));
    abort = abort || set_ref_in_ht(&fc->l_avars.dv_hashtab, copyID, ((void*)0));
    abort = abort || set_ref_in_func(((void*)0), fc->func, copyID);
  }
  return abort;
}





static int get_dict_tv(char_u **arg, typval_T *rettv, int evaluate)
{
  dict_T *d = ((void*)0);
  typval_T tvkey;
  typval_T tv;
  char_u *key = ((void*)0);
  dictitem_T *item;
  char_u *start = skipwhite(*arg + 1);
  char buf[NUMBUFLEN];
# 5578 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  if (*start != '}') {
    if (eval1(&start, &tv, 0) == 0)
      return 0;
    if (*start == '}')
      return 2;
  }

  if (evaluate) {
    d = tv_dict_alloc();
  }
  tvkey.v_type = VAR_UNKNOWN;
  tv.v_type = VAR_UNKNOWN;

  *arg = skipwhite(*arg + 1);
  while (**arg != '}' && **arg != '\000') {
    if (eval1(arg, &tvkey, evaluate) == 0)
      goto failret;
    if (**arg != ':') {
      emsgf((const char *) (libintl_gettext((char *)("E720: Missing colon in Dictionary: %s"))), (*arg));
      tv_clear(&tvkey);
      goto failret;
    }
    if (evaluate) {
      key = (char_u *)tv_get_string_buf_chk(&tvkey, buf);
      if (key == ((void*)0)) {

        tv_clear(&tvkey);
        goto failret;
      }
    }

    *arg = skipwhite(*arg + 1);
    if (eval1(arg, &tv, evaluate) == 0) {
      if (evaluate) {
        tv_clear(&tvkey);
      }
      goto failret;
    }
    if (evaluate) {
      item = tv_dict_find(d, (const char *)key, -1);
      if (item != ((void*)0)) {
        emsgf((const char *) (libintl_gettext((char *)("E721: Duplicate key in Dictionary: \"%s\""))), (key));
        tv_clear(&tvkey);
        tv_clear(&tv);
        goto failret;
      }
      item = tv_dict_item_alloc((const char *)key);
      tv_clear(&tvkey);
      item->di_tv = tv;
      item->di_tv.v_lock = 0;
      if (tv_dict_add(d, item) == 0) {
        tv_dict_item_free(item);
      }
    }

    if (**arg == '}')
      break;
    if (**arg != ',') {
      emsgf((const char *) (libintl_gettext((char *)("E722: Missing comma in Dictionary: %s"))), (*arg));
      goto failret;
    }
    *arg = skipwhite(*arg + 1);
  }

  if (**arg != '}') {
    emsgf((const char *) (libintl_gettext((char *)("E723: Missing end of Dictionary '}': %s"))), (*arg));
failret:
    if (evaluate) {
      tv_dict_free(d);
    }
    return 0;
  }

  *arg = skipwhite(*arg + 1);
  if (evaluate) {
    rettv->v_type = VAR_DICT;
    rettv->vval.v_dict = d;
    ++d->dv_refcount;
  }

  return 1;
}


static int get_function_args(char_u **argp, char_u endchar, garray_T *newargs,
                             int *varargs, _Bool skip)
{
  _Bool mustend = 0;
  char_u *arg = *argp;
  char_u *p = arg;
  int c;
  int i;

  if (newargs != ((void*)0)) {
    ga_init(newargs, (int)sizeof(char_u *), 3);
  }

  if (varargs != ((void*)0)) {
    *varargs = 0;
  }


  while (*p != endchar) {
    if (p[0] == '.' && p[1] == '.' && p[2] == '.') {
      if (varargs != ((void*)0)) {
        *varargs = 1;
      }
      p += 3;
      mustend = 1;
    } else {
      arg = p;
      while (((((unsigned)(*p) >= 'A' && (unsigned)(*p) <= 'Z') || ((unsigned)(*p) >= 'a' && (unsigned)(*p) <= 'z')) || ascii_isdigit(*p)) || *p == '_') {
        p++;
      }
      if (arg == p || isdigit(*arg)
          || (p - arg == 9 && strncmp((char *)(arg), (char *)("firstline"), (size_t)(9)) == 0)
          || (p - arg == 8 && strncmp((char *)(arg), (char *)("lastline"), (size_t)(8)) == 0)) {
        if (!skip) {
          emsgf((const char *) (libintl_gettext((char *)("E125: Illegal argument: %s"))), (arg));
        }
        break;
      }
      if (newargs != ((void*)0)) {
        ga_grow(newargs, 1);
        c = *p;
        *p = '\000';
        arg = vim_strsave(arg);


        for (i = 0; i < newargs->ga_len; i++) {
          if (strcmp((char *)(((char_u **)(newargs->ga_data))[i]), (char *)(arg)) == 0) {
            emsgf((const char *) (libintl_gettext((char *)("E853: Duplicate argument name: %s"))), (arg));
            xfree(arg);
            goto err_ret;
          }
        }
        ((char_u **)(newargs->ga_data))[newargs->ga_len] = arg;
        newargs->ga_len++;

        *p = c;
      }
      if (*p == ',') {
        p++;
      } else {
        mustend = 1;
      }
    }
    p = skipwhite(p);
    if (mustend && *p != endchar) {
      if (!skip) {
        emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (*argp));
      }
      break;
    }
  }
  if (*p != endchar) {
    goto err_ret;
  }
  p++;

  *argp = p;
  return 1;

err_ret:
  if (newargs != ((void*)0)) {
    ga_clear_strings(newargs);
  }
  return 0;
}


static void register_closure(ufunc_T *fp)
{
  if (fp->uf_scoped == current_funccal) {

    return;
  }
  funccal_unref(fp->uf_scoped, fp, 0);
  fp->uf_scoped = current_funccal;
  current_funccal->fc_refcount++;
  ga_grow(&current_funccal->fc_funcs, 1);
  ((ufunc_T **)current_funccal->fc_funcs.ga_data)
    [current_funccal->fc_funcs.ga_len++] = fp;
}




static int get_lambda_tv(char_u **arg, typval_T *rettv, _Bool evaluate)
{
  garray_T newargs = { 0, 0, 0, 1, ((void*)0) };
  garray_T *pnewargs;
  ufunc_T *fp = ((void*)0);
  int varargs;
  int ret;
  char_u *start = skipwhite(*arg + 1);
  char_u *s, *e;
  static int lambda_no = 0;
  int *old_eval_lavars = eval_lavars_used;
  int eval_lavars = 0;


  ret = get_function_args(&start, '-', ((void*)0), ((void*)0), 1);
  if (ret == 0 || *start != '>') {
    return 2;
  }


  if (evaluate) {
    pnewargs = &newargs;
  } else {
    pnewargs = ((void*)0);
  }
  *arg = skipwhite(*arg + 1);
  ret = get_function_args(arg, '-', pnewargs, &varargs, 0);
  if (ret == 0 || **arg != '>') {
    goto errret;
  }


  if (evaluate) {
    eval_lavars_used = &eval_lavars;
  }


  *arg = skipwhite(*arg + 1);
  s = *arg;
  ret = skip_expr(arg);
  if (ret == 0) {
    goto errret;
  }
  e = *arg;
  *arg = skipwhite(*arg);
  if (**arg != '}') {
    goto errret;
  }
  (*arg)++;

  if (evaluate) {
    int len, flags = 0;
    char_u *p;
    char_u name[20];
    partial_T *pt;
    garray_T newlines;

    lambda_no++;
    __builtin___snprintf_chk ((char *)name, sizeof(name), 0, __builtin_object_size ((char *)name, 1 > 1 ? 1 : 0), "<lambda>%d", lambda_no);

    fp = (ufunc_T *)xcalloc(1, sizeof(ufunc_T) + strlen((char *)(name)));
    pt = (partial_T *)xcalloc(1, sizeof(partial_T));

    ga_init(&newlines, (int)sizeof(char_u *), 1);
    ga_grow(&newlines, 1);


    len = 7 + e - s + 1;
    p = (char_u *)xmalloc(len);
    ((char_u **)(newlines.ga_data))[newlines.ga_len++] = p;
    __builtin___strcpy_chk ((char *)(p), (char *)("return "), __builtin_object_size ((char *)(p), 1 > 1 ? 1 : 0));
    xstrlcpy((char *)(p + 7), (char *)(s), (size_t)(e - s + 1));

    fp->uf_refcount = 1;
    __builtin___strcpy_chk ((char *)(fp->uf_name), (char *)(name), __builtin_object_size ((char *)(fp->uf_name), 1 > 1 ? 1 : 0));
    hash_add(&func_hashtab, ((fp)->uf_name));
    fp->uf_args = newargs;
    fp->uf_lines = newlines;
    if (current_funccal != ((void*)0) && eval_lavars) {
      flags |= 0x08;
      register_closure(fp);
    } else {
      fp->uf_scoped = ((void*)0);
    }

    fp->uf_tml_count = ((void*)0);
    fp->uf_tml_total = ((void*)0);
    fp->uf_tml_self = ((void*)0);
    fp->uf_profiling = 0;
    if (prof_def_func()) {
      func_do_profile(fp);
    }
    fp->uf_varargs = 1;
    fp->uf_flags = flags;
    fp->uf_calls = 0;
    fp->uf_script_ID = current_SID;

    pt->pt_func = fp;
    pt->pt_refcount = 1;
    rettv->vval.v_partial = pt;
    rettv->v_type = VAR_PARTIAL;
  }

  eval_lavars_used = old_eval_lavars;
  return 1;

errret:
  ga_clear_strings(&newargs);
  xfree(fp);
  eval_lavars_used = old_eval_lavars;
  return 0;
}
# 5888 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
size_t string2float(const char *const text, float_T *const ret_value)
  FUNC_ATTR_NONNULL_ALL
{
  char *s = ((void*)0);


  if (strncasecmp((char *)(text), (char *)("inf"), (size_t)(3)) == 0) {
    *ret_value = __builtin_huge_valf();
    return 3;
  }
  if (strncasecmp((char *)(text), (char *)("-inf"), (size_t)(3)) == 0) {
    *ret_value = -__builtin_huge_valf();
    return 4;
  }
  if (strncasecmp((char *)(text), (char *)("nan"), (size_t)(3)) == 0) {
    *ret_value = __builtin_nanf("0x7fc00000");
    return 3;
  }
  *ret_value = strtod(text, &s);
  return (size_t) (s - text);
}
# 5917 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int get_env_tv(char_u **arg, typval_T *rettv, int evaluate)
{
  char_u *name;
  char_u *string = ((void*)0);
  int len;
  int cc;

  ++*arg;
  name = *arg;
  len = get_env_len((const char_u **)arg);

  if (evaluate) {
    if (len == 0) {
      return 0;
    }
    cc = name[len];
    name[len] = '\000';

    string = (char_u *)vim_getenv((char *)name);
    if (string == ((void*)0) || *string == '\000') {
      xfree(string);


      string = expand_env_save(name - 1);
      if (string != ((void*)0) && *string == '$') {
        xfree(string);
        string = ((void*)0);
      }
    }
    name[len] = cc;
    rettv->v_type = VAR_STRING;
    rettv->vval.v_string = string;
  }

  return 1;
}
# 5962 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
char_u *get_function_name(expand_T *xp, int idx)
{
  static int intidx = -1;
  char_u *name;

  if (idx == 0)
    intidx = -1;
  if (intidx < 0) {
    name = get_user_func_name(xp, idx);
    if (name != ((void*)0))
      return name;
  }
  while ( (size_t)++intidx < ((sizeof(functions)/sizeof((functions)[0])) / ((size_t)(!(sizeof(functions) % sizeof((functions)[0])))))
         && functions[intidx].name[0] == '\0') {
  }

  if ((size_t)intidx >= ((sizeof(functions)/sizeof((functions)[0])) / ((size_t)(!(sizeof(functions) % sizeof((functions)[0])))))) {
    return ((void*)0);
  }

  const char *const key = functions[intidx].name;
  const size_t key_len = strlen(key);
  __builtin___memcpy_chk (IObuff, key, key_len, __builtin_object_size (IObuff, 0));
  IObuff[key_len] = '(';
  if (functions[intidx].max_argc == 0) {
    IObuff[key_len + 1] = ')';
    IObuff[key_len + 2] = '\000';
  } else {
    IObuff[key_len + 1] = '\000';
  }
  return IObuff;
}





char_u *get_expr_name(expand_T *xp, int idx)
{
  static int intidx = -1;
  char_u *name;

  if (idx == 0)
    intidx = -1;
  if (intidx < 0) {
    name = get_function_name(xp, idx);
    if (name != ((void*)0))
      return name;
  }
  return get_user_var_name(xp, ++intidx);
}






static const VimLFuncDef *find_internal_func(const char *const name)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_PURE FUNC_ATTR_NONNULL_ALL
{
  size_t len = strlen(name);
  return find_internal_func_gperf(name, len);
}
# 6041 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static char_u *deref_func_name(const char *name, int *lenp,
                               partial_T **const partialp, _Bool no_autoload)
  FUNC_ATTR_NONNULL_ARG(1, 2)
{
  if (partialp != ((void*)0)) {
    *partialp = ((void*)0);
  }

  dictitem_T *const v = find_var(name, (size_t)(*lenp), ((void*)0), no_autoload);
  if (v != ((void*)0) && v->di_tv.v_type == VAR_FUNC) {
    if (v->di_tv.vval.v_string == ((void*)0)) {
      *lenp = 0;
      return (char_u *)"";
    }
    *lenp = (int)strlen((char *)(v->di_tv.vval.v_string));
    return v->di_tv.vval.v_string;
  }

  if (v != ((void*)0) && v->di_tv.v_type == VAR_PARTIAL) {
    partial_T *const pt = v->di_tv.vval.v_partial;

    if (pt == ((void*)0)) {
      *lenp = 0;
      return (char_u *)"";
    }
    if (partialp != ((void*)0)) {
      *partialp = pt;
    }
    char_u *s = partial_name(pt);
    *lenp = (int)strlen((char *)(s));
    return s;
  }

  return (char_u *)name;
}





static int
get_func_tv (
    char_u *name,
    int len,
    typval_T *rettv,
    char_u **arg,
    linenr_T firstline,
    linenr_T lastline,
    int *doesrange,
    int evaluate,
    partial_T *partial,
    dict_T *selfdict
)
{
  char_u *argp;
  int ret = 1;
  typval_T argvars[20 + 1];
  int argcount = 0;




  argp = *arg;
  while (argcount < 20 - (partial == ((void*)0) ? 0 : partial->pt_argc)) {
    argp = skipwhite(argp + 1);
    if (*argp == ')' || *argp == ',' || *argp == '\000') {
      break;
    }
    if (eval1(&argp, &argvars[argcount], evaluate) == 0) {
      ret = 0;
      break;
    }
    ++argcount;
    if (*argp != ',')
      break;
  }
  if (*argp == ')')
    ++argp;
  else
    ret = 0;

  if (ret == 1) {
    int i = 0;

    if (get_vim_var_nr(VV_TESTING)) {


      if (funcargs.ga_itemsize == 0) {
        ga_init(&funcargs, (int)sizeof(typval_T *), 50);
      }
      for (i = 0; i < argcount; i++) {
        ga_grow(&funcargs, 1);
        ((typval_T **)funcargs.ga_data)[funcargs.ga_len++] = &argvars[i];
      }
    }
    ret = call_func(name, len, rettv, argcount, argvars, ((void*)0),
                    firstline, lastline, doesrange, evaluate,
                    partial, selfdict);

    funcargs.ga_len -= i;
  } else if (!aborting()) {
    if (argcount == 20) {
      emsg_funcname("E740: Too many arguments for function %s", name);
    } else {
      emsg_funcname("E116: Invalid arguments for function %s", name);
    }
  }

  while (--argcount >= 0) {
    tv_clear(&argvars[argcount]);
  }

  *arg = skipwhite(argp);
  return ret;
}

typedef enum {
  ERROR_UNKNOWN = 0,
  ERROR_TOOMANY,
  ERROR_TOOFEW,
  ERROR_SCRIPT,
  ERROR_DICT,
  ERROR_NONE,
  ERROR_OTHER,
  ERROR_BOTH,
  ERROR_DELETED,
} FnameTransError;
# 6187 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static char_u *fname_trans_sid(const char_u *const name,
                               char_u *const fname_buf,
                               char_u **const tofree, int *const error)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
{
  char_u *fname;
  const int llen = eval_fname_script((const char *)name);
  if (llen > 0) {
    fname_buf[0] = (0x80);
    fname_buf[1] = 253;
    fname_buf[2] = (int)KE_SNR;
    int i = 3;
    if (eval_fname_sid((const char *)name)) {
      if (current_SID <= 0) {
        *error = ERROR_SCRIPT;
      } else {
        __builtin___snprintf_chk ((char *)fname_buf + 3, 40 + 1, 0, __builtin_object_size ((char *)fname_buf + 3, 1 > 1 ? 1 : 0), "%" "ll" "d" "_", (int64_t)current_SID);

        i = (int)strlen((char *)(fname_buf));
      }
    }
    if (i + strlen((char *)(name + llen)) < 40) {
      __builtin___strcpy_chk ((char *)(fname_buf + i), (char *)(name + llen), __builtin_object_size ((char *)(fname_buf + i), 1 > 1 ? 1 : 0));
      fname = fname_buf;
    } else {
      fname = xmalloc(i + strlen((char *)(name + llen)) + 1);
      *tofree = fname;
      __builtin___memmove_chk (fname, fname_buf, (size_t)i, __builtin_object_size (fname, 0));
      __builtin___strcpy_chk ((char *)(fname + i), (char *)(name + llen), __builtin_object_size ((char *)(fname + i), 1 > 1 ? 1 : 0));
    }
  } else {
    fname = (char_u *)name;
  }

  return fname;
}






_Bool set_ref_in_func(char_u *name, ufunc_T *fp_in, int copyID)
{
  ufunc_T *fp = fp_in;
  funccall_T *fc;
  int error = ERROR_NONE;
  char_u fname_buf[40 + 1];
  char_u *tofree = ((void*)0);
  char_u *fname;
  _Bool abort = 0;
  if (name == ((void*)0) && fp_in == ((void*)0)) {
    return 0;
  }

  if (fp_in == ((void*)0)) {
    fname = fname_trans_sid(name, fname_buf, &tofree, &error);
    fp = find_func(fname);
  }
  if (fp != ((void*)0)) {
    for (fc = fp->uf_scoped; fc != ((void*)0); fc = fc->func->uf_scoped) {
      abort = abort || set_ref_in_funccal(fc, copyID);
    }
  }
  xfree(tofree);
  return abort;
}
# 6263 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
int
call_func(
    const char_u *funcname,
    int len,
    typval_T *rettv,
    int argcount_in,
    typval_T *argvars_in,

    ArgvFunc argv_func,
    linenr_T firstline,
    linenr_T lastline,
    int *doesrange,
    _Bool evaluate,
    partial_T *partial,
    dict_T *selfdict_in
)
{
  int ret = 0;
  int error = ERROR_NONE;
  ufunc_T *fp;
  char_u fname_buf[40 + 1];
  char_u *tofree = ((void*)0);
  char_u *fname;
  char_u *name;
  int argcount = argcount_in;
  typval_T *argvars = argvars_in;
  dict_T *selfdict = selfdict_in;
  typval_T argv[20 + 1];
  int argv_clear = 0;



  name = vim_strnsave(funcname, len);

  fname = fname_trans_sid(name, fname_buf, &tofree, &error);

  *doesrange = 0;

  if (partial != ((void*)0)) {



    if (partial->pt_dict != ((void*)0)
        && (selfdict_in == ((void*)0) || !partial->pt_auto)) {
      selfdict = partial->pt_dict;
    }
    if (error == ERROR_NONE && partial->pt_argc > 0) {
      for (argv_clear = 0; argv_clear < partial->pt_argc; argv_clear++) {
        tv_copy(&partial->pt_argv[argv_clear], &argv[argv_clear]);
      }
      for (int i = 0; i < argcount_in; i++) {
        argv[i + argv_clear] = argvars_in[i];
      }
      argvars = argv;
      argcount = partial->pt_argc + argcount_in;
    }
  }



  if (evaluate && error == ERROR_NONE) {
    char_u *rfname = fname;


    if (fname[0] == 'g' && fname[1] == ':') {
      rfname = fname + 2;
    }

    rettv->v_type = VAR_NUMBER;
    rettv->vval.v_number = 0;
    error = ERROR_UNKNOWN;

    if (!builtin_function((const char *)rfname, -1)) {

      if (partial != ((void*)0) && partial->pt_func != ((void*)0)) {
        fp = partial->pt_func;
      } else {
        fp = find_func(rfname);
      }


      if (fp == ((void*)0)
          && apply_autocmds(EVENT_FUNCUNDEFINED, rfname, rfname, 1, ((void*)0))
          && !aborting()) {

        fp = find_func(rfname);
      }

      if (fp == ((void*)0) && script_autoload((const char *)rfname, strlen((char *)(rfname)),
                                        1) && !aborting()) {

        fp = find_func(rfname);
      }

      if (fp != ((void*)0) && (fp->uf_flags & 0x10)) {
        error = ERROR_DELETED;
      } else if (fp != ((void*)0)) {
        if (argv_func != ((void*)0)) {
          argcount = argv_func(argcount, argvars, fp->uf_args.ga_len);
        }
        if (fp->uf_flags & 0x02) {
          *doesrange = 1;
        }
        if (argcount < fp->uf_args.ga_len) {
          error = ERROR_TOOFEW;
        } else if (!fp->uf_varargs && argcount > fp->uf_args.ga_len) {
          error = ERROR_TOOMANY;
        } else if ((fp->uf_flags & 0x04) && selfdict == ((void*)0)) {
          error = ERROR_DICT;
        } else {

          call_user_func(fp, argcount, argvars, rettv, firstline, lastline,
                         (fp->uf_flags & 0x04) ? selfdict : ((void*)0));
          error = ERROR_NONE;
        }
      }
    } else {

      const VimLFuncDef *const fdef = find_internal_func((const char *)fname);
      if (fdef != ((void*)0)) {
        if (argcount < fdef->min_argc) {
          error = ERROR_TOOFEW;
        } else if (argcount > fdef->max_argc) {
          error = ERROR_TOOMANY;
        } else {
          argvars[argcount].v_type = VAR_UNKNOWN;
          fdef->func(argvars, rettv, fdef->data);
          error = ERROR_NONE;
        }
      }
    }
# 6404 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
    update_force_abort();
  }
  if (error == ERROR_NONE)
    ret = 1;





  if (!aborting()) {
    switch (error) {
    case ERROR_UNKNOWN:
      emsg_funcname("E117: Unknown function: %s", name);
      break;
    case ERROR_DELETED:
      emsg_funcname("E933: Function was deleted: %s", name);
      break;
    case ERROR_TOOMANY:
      emsg_funcname(e_toomanyarg, name);
      break;
    case ERROR_TOOFEW:
      emsg_funcname("E119: Not enough arguments for function: %s",
          name);
      break;
    case ERROR_SCRIPT:
      emsg_funcname("E120: Using <SID> not in a script context: %s",
          name);
      break;
    case ERROR_DICT:
      emsg_funcname("E725: Calling dict function without Dictionary: %s",
          name);
      break;
    }
  }

  while (argv_clear > 0) {
    tv_clear(&argv[--argv_clear]);
  }
  xfree(tofree);
  xfree(name);

  return ret;
}





static void emsg_funcname(char *ermsg, char_u *name)
{
  char_u *p;

  if (*name == (0x80))
    p = concat_str((char_u *)"<SNR>", name + 3);
  else
    p = name;
  emsgf((const char *) (libintl_gettext((char *)(ermsg))), (p));
  if (p != name)
    xfree(p);
}




static int non_zero_arg(typval_T *argvars)
{
  return ((argvars[0].v_type == VAR_NUMBER
           && argvars[0].vval.v_number != 0)
          || (argvars[0].v_type == VAR_SPECIAL
              && argvars[0].vval.v_special == kSpecialVarTrue)
          || (argvars[0].v_type == VAR_STRING
              && argvars[0].vval.v_string != ((void*)0)
              && *argvars[0].vval.v_string != '\000'));
}
# 6489 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static void float_op_wrapper(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  float_T f;
  float_T (*function)(float_T) = (float_T (*)(float_T))fptr;

  rettv->v_type = VAR_FLOAT;
  if (tv_get_float_chk(argvars, &f)) {
    rettv->vval.v_float = function(f);
  } else {
    rettv->vval.v_float = 0.0;
  }
}

static void api_wrapper(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  ApiDispatchWrapper fn = (ApiDispatchWrapper)fptr;

  Array args = {.size = 0, .capacity = 0, .items = ((void*)0)};

  for (typval_T *tv = argvars; tv->v_type != VAR_UNKNOWN; tv++) {
    (*((((args).size == (args).capacity) ? (((args).capacity = ((args).capacity ? (args).capacity << 1 : 8), (args).items = xrealloc((args).items, sizeof((args).items[0]) * (args).capacity)), 0) : 0), ((args).items + ((args).size++))) = (vim_to_object(tv)));
  }

  Error err = { .type = kErrorTypeNone, .msg = ((void*)0) };
  Object result = fn((((uint64_t)1) << (sizeof(uint64_t) * 8 - 1)), args, &err);

  if (((&err)->type != kErrorTypeNone)) {
    nvim_err_writeln(cstr_as_string(err.msg));
    goto end;
  }

  if (!object_to_vim(result, rettv, &err)) {
    emsgf((const char *) (libintl_gettext((char *)("Error converting the call result: %s"))), (err.msg));
  }

end:
  api_free_array(args);
  api_free_object(result);
  api_clear_error(&err);
}




static void f_abs(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (argvars[0].v_type == VAR_FLOAT) {
    float_op_wrapper(argvars, rettv, (FunPtr)&fabs);
  } else {
    varnumber_T n;
    _Bool error = 0;

    n = tv_get_number_chk(&argvars[0], &error);
    if (error) {
      rettv->vval.v_number = -1;
    } else if (n > 0) {
      rettv->vval.v_number = n;
    } else {
      rettv->vval.v_number = -n;
    }
  }
}




static void f_add(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = 1;
  if (argvars[0].v_type == VAR_LIST) {
    list_T *const l = argvars[0].vval.v_list;
    if (!tv_check_lock(tv_list_locked(l), "add() argument", (18446744073709551615ULL))) {
      tv_list_append_tv(l, &argvars[1]);
      tv_copy(&argvars[0], rettv);
    }
  } else {
    emsg((char_u *)(libintl_gettext((char *)(e_listreq))));
  }
}




static void f_and(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = tv_get_number_chk(&argvars[0], ((void*)0))
                         & tv_get_number_chk(&argvars[1], ((void*)0));
}



static void f_api_info(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  Dictionary metadata = api_metadata();
  (void)object_to_vim(((Object) { .type = kObjectTypeDictionary, .data.dictionary = metadata }), rettv, ((void*)0));
  api_free_dictionary(metadata);
}




static void f_append(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  long lnum;
  list_T *l = ((void*)0);
  listitem_T *li = ((void*)0);
  typval_T *tv;
  long added = 0;



  if (u_sync_once == 2) {
    u_sync_once = 1;
    u_sync(1);
  }

  lnum = tv_get_lnum(argvars);
  if (lnum >= 0
      && lnum <= curbuf->b_ml.ml_line_count
      && u_save(lnum, lnum + 1) == 1) {
    if (argvars[1].v_type == VAR_LIST) {
      l = argvars[1].vval.v_list;
      if (l == ((void*)0)) {
        return;
      }
      li = tv_list_first(l);
    }
    for (;; ) {
      if (l == ((void*)0)) {
        tv = &argvars[1];
      } else if (li == ((void*)0)) {
        break;
      } else {
        tv = (&(li)->li_tv);
      }
      const char *const line = tv_get_string_chk(tv);
      if (line == ((void*)0)) {
        rettv->vval.v_number = 1;
        break;
      }
      ml_append(lnum + added, (char_u *)line, (colnr_T)0, 0);
      added++;
      if (l == ((void*)0)) {
        break;
      }
      li = ((li)->li_next);
    }

    appended_lines_mark(lnum, added);
    if (curwin->w_cursor.lnum > lnum)
      curwin->w_cursor.lnum += added;
  } else
    rettv->vval.v_number = 1;
}




static void f_argc(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = ((curwin)->w_alist->al_ga.ga_len);
}




static void f_argidx(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = curwin->w_arg_idx;
}


static void f_arglistid(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = -1;
  win_T *wp = find_tabwin(&argvars[0], &argvars[1]);
  if (wp != ((void*)0)) {
    rettv->vval.v_number = wp->w_alist->id;
  }
}




static void f_argv(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int idx;

  if (argvars[0].v_type != VAR_UNKNOWN) {
    idx = (int)tv_get_number_chk(&argvars[0], ((void*)0));
    if (idx >= 0 && idx < ((curwin)->w_alist->al_ga.ga_len)) {
      rettv->vval.v_string = (char_u *)xstrdup(
          (const char *)alist_name(&((aentry_T *)(curwin)->w_alist->al_ga.ga_data)[idx]));
    } else {
      rettv->vval.v_string = ((void*)0);
    }
    rettv->v_type = VAR_STRING;
  } else {
    tv_list_alloc_ret(rettv);
    for (idx = 0; idx < ((curwin)->w_alist->al_ga.ga_len); idx++) {
      tv_list_append_string(rettv->vval.v_list,
                            (const char *)alist_name(&((aentry_T *)(curwin)->w_alist->al_ga.ga_data)[idx]), -1);
    }
  }
}


static void prepare_assert_error(garray_T *gap)
{
  char buf[NUMBUFLEN];

  ga_init(gap, 1, 100);
  if (sourcing_name != ((void*)0)) {
    ga_concat(gap, sourcing_name);
    if (sourcing_lnum > 0) {
      ga_concat(gap, (char_u *)" ");
    }
  }
  if (sourcing_lnum > 0) {
    vim_snprintf(buf, ((sizeof(buf)/sizeof((buf)[0])) / ((size_t)(!(sizeof(buf) % sizeof((buf)[0]))))), "line %" "ll" "d", (int64_t)sourcing_lnum);
    ga_concat(gap, (char_u *)buf);
  }
  if (sourcing_name != ((void*)0) || sourcing_lnum > 0) {
    ga_concat(gap, (char_u *)": ");
  }
}



static void ga_concat_esc(garray_T *gap, char_u *str)
{
  char_u *p;
  char_u buf[NUMBUFLEN];

  if (str == ((void*)0)) {
    ga_concat(gap, (char_u *)"NULL");
    return;
  }

  for (p = str; *p != '\000'; p++) {
    switch (*p) {
      case '\010': ga_concat(gap, (char_u *)"\\b"); break;
      case '\033': ga_concat(gap, (char_u *)"\\e"); break;
      case '\014': ga_concat(gap, (char_u *)"\\f"); break;
      case '\012': ga_concat(gap, (char_u *)"\\n"); break;
      case '\011': ga_concat(gap, (char_u *)"\\t"); break;
      case '\015': ga_concat(gap, (char_u *)"\\r"); break;
      case '\\': ga_concat(gap, (char_u *)"\\\\"); break;
      default:
        if (*p < ' ') {
          vim_snprintf((char *)buf, NUMBUFLEN, "\\x%02x", *p);
          ga_concat(gap, buf);
        } else {
          ga_append(gap, *p);
        }
        break;
    }
  }
}


static void fill_assert_error(garray_T *gap, typval_T *opt_msg_tv,
                              char_u *exp_str, typval_T *exp_tv,
                              typval_T *got_tv, assert_type_T atype)
{
  char_u *tofree;

  if (opt_msg_tv->v_type != VAR_UNKNOWN) {
    tofree = (char_u *) encode_tv2string(opt_msg_tv, ((void*)0));
    ga_concat(gap, tofree);
    xfree(tofree);
  } else {
    if (atype == ASSERT_MATCH || atype == ASSERT_NOTMATCH) {
      ga_concat(gap, (char_u *)"Pattern ");
    } else if (atype == ASSERT_NOTEQUAL) {
      ga_concat(gap, (char_u *)"Expected not equal to ");
    } else {
      ga_concat(gap, (char_u *)"Expected ");
    }
    if (exp_str == ((void*)0)) {
      tofree = (char_u *)encode_tv2string(exp_tv, ((void*)0));
      ga_concat_esc(gap, tofree);
      xfree(tofree);
    } else {
      ga_concat_esc(gap, exp_str);
    }
    if (atype != ASSERT_NOTEQUAL) {
      if (atype == ASSERT_MATCH) {
        ga_concat(gap, (char_u *)" does not match ");
      } else if (atype == ASSERT_NOTMATCH) {
        ga_concat(gap, (char_u *)" does match ");
      } else {
        ga_concat(gap, (char_u *)" but got ");
      }
      tofree = (char_u *)encode_tv2string(got_tv, ((void*)0));
      ga_concat_esc(gap, tofree);
      xfree(tofree);
    }
  }
}


static void assert_error(garray_T *gap)
{
  struct vimvar *vp = &vimvars[VV_ERRORS];

  if (vp->vv_di.di_tv.v_type != VAR_LIST || vimvars[VV_ERRORS].vv_di.di_tv.vval.v_list == ((void*)0)) {

    set_vim_var_list(VV_ERRORS, tv_list_alloc());
  }
  tv_list_append_string(vimvars[VV_ERRORS].vv_di.di_tv.vval.v_list,
                        (const char *)gap->ga_data, (ptrdiff_t)gap->ga_len);
}

static void assert_equal_common(typval_T *argvars, assert_type_T atype)
{
  garray_T ga;

  if (tv_equal(&argvars[0], &argvars[1], 0, 0)
      != (atype == ASSERT_EQUAL)) {
    prepare_assert_error(&ga);
    fill_assert_error(&ga, &argvars[2], ((void*)0),
                      &argvars[0], &argvars[1], atype);
    assert_error(&ga);
    ga_clear(&ga);
  }
}


static void f_assert_equal(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  assert_equal_common(argvars, ASSERT_EQUAL);
}


static void f_assert_notequal(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  assert_equal_common(argvars, ASSERT_NOTEQUAL);
}


static void f_assert_report(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
    garray_T ga;

    prepare_assert_error(&ga);
    ga_concat(&ga, (const char_u *)tv_get_string(&argvars[0]));
    assert_error(&ga);
    ga_clear(&ga);
}


static void f_assert_exception(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  garray_T ga;

  const char *const error = tv_get_string_chk(&argvars[0]);
  if (vimvars[VV_EXCEPTION].vv_di.di_tv.vval.v_string == ((void*)0)) {
    prepare_assert_error(&ga);
    ga_concat(&ga, (char_u *)"v:exception is not set");
    assert_error(&ga);
    ga_clear(&ga);
  } else if (error != ((void*)0)
             && strstr((char *)vimvars[VV_EXCEPTION].vv_di.di_tv.vval.v_string, error) == ((void*)0)) {
    prepare_assert_error(&ga);
    fill_assert_error(&ga, &argvars[1], ((void*)0), &argvars[0],
                      &vimvars[VV_EXCEPTION].vv_di.di_tv, ASSERT_OTHER);
    assert_error(&ga);
    ga_clear(&ga);
  }
}


static void f_assert_fails(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *const cmd = tv_get_string_chk(&argvars[0]);
  garray_T ga;

  called_emsg = 0;
  suppress_errthrow = 1;
  emsg_silent = 1;
  do_cmdline_cmd(cmd);
  if (!called_emsg) {
    prepare_assert_error(&ga);
    ga_concat(&ga, (const char_u *)"command did not fail: ");
    ga_concat(&ga, (const char_u *)cmd);
    assert_error(&ga);
    ga_clear(&ga);
  } else if (argvars[1].v_type != VAR_UNKNOWN) {
    char buf[NUMBUFLEN];
    const char *const error = tv_get_string_buf_chk(&argvars[1], buf);

    if (error == ((void*)0)
        || strstr((char *)vimvars[VV_ERRMSG].vv_di.di_tv.vval.v_string, error) == ((void*)0)) {
      prepare_assert_error(&ga);
      fill_assert_error(&ga, &argvars[2], ((void*)0), &argvars[1],
                        &vimvars[VV_ERRMSG].vv_di.di_tv, ASSERT_OTHER);
      assert_error(&ga);
      ga_clear(&ga);
    }
  }

  called_emsg = 0;
  suppress_errthrow = 0;
  emsg_silent = 0;
  emsg_on_display = 0;
  set_vim_var_string(VV_ERRMSG, ((void*)0), 0);
}

void assert_inrange(typval_T *argvars)
{
  _Bool error = 0;
  const varnumber_T lower = tv_get_number_chk(&argvars[0], &error);
  const varnumber_T upper = tv_get_number_chk(&argvars[1], &error);
  const varnumber_T actual = tv_get_number_chk(&argvars[2], &error);

  if (error) {
    return;
  }
  if (actual < lower || actual > upper) {
    garray_T ga;
    prepare_assert_error(&ga);

    char msg[55];
    vim_snprintf(msg, sizeof(msg),
                 "range %" "ll" "d" " - %" "ll" "d" ",",
                 lower, upper);
    fill_assert_error(&ga, &argvars[3], (char_u *)msg, ((void*)0), &argvars[2],
                      ASSERT_INRANGE);
    assert_error(&ga);
    ga_clear(&ga);
  }
}


static void assert_bool(typval_T *argvars, _Bool is_true)
{
  _Bool error = 0;
  garray_T ga;

  if ((argvars[0].v_type != VAR_NUMBER
       || (tv_get_number_chk(&argvars[0], &error) == 0) == is_true
       || error)
      && (argvars[0].v_type != VAR_SPECIAL
          || (argvars[0].vval.v_special
              != (SpecialVarValue) (is_true
                                    ? kSpecialVarTrue
                                    : kSpecialVarFalse)))) {
    prepare_assert_error(&ga);
    fill_assert_error(&ga, &argvars[1],
                      (char_u *)(is_true ? "True" : "False"),
                      ((void*)0), &argvars[0], ASSERT_OTHER);
    assert_error(&ga);
    ga_clear(&ga);
  }
}


static void f_assert_false(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  assert_bool(argvars, 0);
}

static void assert_match_common(typval_T *argvars, assert_type_T atype)
{
  char buf1[NUMBUFLEN];
  char buf2[NUMBUFLEN];
  const char *const pat = tv_get_string_buf_chk(&argvars[0], buf1);
  const char *const text = tv_get_string_buf_chk(&argvars[1], buf2);

  if (pat == ((void*)0) || text == ((void*)0)) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
  } else if (pattern_match((char_u *)pat, (char_u *)text, 0)
             != (atype == ASSERT_MATCH)) {
    garray_T ga;
    prepare_assert_error(&ga);
    fill_assert_error(&ga, &argvars[2], ((void*)0), &argvars[0], &argvars[1], atype);
    assert_error(&ga);
    ga_clear(&ga);
  }
}


static void f_assert_inrange(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
    assert_inrange(argvars);
}


static void f_assert_match(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  assert_match_common(argvars, ASSERT_MATCH);
}


static void f_assert_notmatch(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  assert_match_common(argvars, ASSERT_NOTMATCH);
}


static void f_assert_true(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  assert_bool(argvars, 1);
}




static void f_atan2(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  float_T fx;
  float_T fy;

  rettv->v_type = VAR_FLOAT;
  if (tv_get_float_chk(argvars, &fx) && tv_get_float_chk(&argvars[1], &fy)) {
    rettv->vval.v_float = atan2(fx, fy);
  } else {
    rettv->vval.v_float = 0.0;
  }
}




static void f_browse(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_string = ((void*)0);
  rettv->v_type = VAR_STRING;
}




static void f_browsedir(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  f_browse(argvars, rettv, ((void*)0));
}





static buf_T *find_buffer(typval_T *avar)
{
  buf_T *buf = ((void*)0);

  if (avar->v_type == VAR_NUMBER)
    buf = buflist_findnr((int)avar->vval.v_number);
  else if (avar->v_type == VAR_STRING && avar->vval.v_string != ((void*)0)) {
    buf = buflist_findname_exp(avar->vval.v_string);
    if (buf == ((void*)0)) {


      for (buf_T *bp = firstbuf; bp != ((void*)0); bp = bp->b_next) {
        if (bp->b_fname != ((void*)0)
            && (path_with_url((char *)bp->b_fname)
                || bt_nofile(bp)
                )
            && strcmp((char *)(bp->b_fname), (char *)(avar->vval.v_string)) == 0) {
          buf = bp;
          break;
        }
      }
    }
  }
  return buf;
}




static void f_bufexists(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = (find_buffer(&argvars[0]) != ((void*)0));
}




static void f_buflisted(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  buf_T *buf;

  buf = find_buffer(&argvars[0]);
  rettv->vval.v_number = (buf != ((void*)0) && buf->b_p_bl);
}




static void f_bufloaded(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  buf_T *buf;

  buf = find_buffer(&argvars[0]);
  rettv->vval.v_number = (buf != ((void*)0) && buf->b_ml.ml_mfp != ((void*)0));
}





static buf_T *get_buf_tv(typval_T *tv, int curtab_only)
{
  char_u *name = tv->vval.v_string;
  int save_magic;
  char_u *save_cpo;
  buf_T *buf;

  if (tv->v_type == VAR_NUMBER)
    return buflist_findnr((int)tv->vval.v_number);
  if (tv->v_type != VAR_STRING)
    return ((void*)0);
  if (name == ((void*)0) || *name == '\000')
    return curbuf;
  if (name[0] == '$' && name[1] == '\000')
    return lastbuf;


  save_magic = p_magic;
  p_magic = 1;
  save_cpo = p_cpo;
  p_cpo = (char_u *)"";

  buf = buflist_findnr(buflist_findpat(name, name + strlen((char *)(name)),
          1, 0, curtab_only));

  p_magic = save_magic;
  p_cpo = save_cpo;


  if (buf == ((void*)0))
    buf = find_buffer(tv);

  return buf;
}




static void f_bufname(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);
  if (!tv_check_str_or_nr(&argvars[0])) {
    return;
  }
  emsg_off++;
  const buf_T *const buf = get_buf_tv(&argvars[0], 0);
  emsg_off--;
  if (buf != ((void*)0) && buf->b_fname != ((void*)0)) {
    rettv->vval.v_string = (char_u *)xstrdup((char *)buf->b_fname);
  }
}




static void f_bufnr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  _Bool error = 0;

  rettv->vval.v_number = -1;
  if (!tv_check_str_or_nr(&argvars[0])) {
    return;
  }
  emsg_off++;
  const buf_T *buf = get_buf_tv(&argvars[0], 0);
  emsg_off--;



  const char *name;
  if (buf == ((void*)0)
      && argvars[1].v_type != VAR_UNKNOWN
      && tv_get_number_chk(&argvars[1], &error) != 0
      && !error
      && (name = tv_get_string_chk(&argvars[0])) != ((void*)0)) {
    buf = buflist_new((char_u *)name, ((void*)0), 1, 0);
  }

  if (buf != ((void*)0)) {
    rettv->vval.v_number = buf->handle;
  }
}

static void buf_win_common(typval_T *argvars, typval_T *rettv, _Bool get_nr)
{
  if (!tv_check_str_or_nr(&argvars[0])) {
    rettv->vval.v_number = -1;
    return;
  }

  emsg_off++;
  buf_T *buf = get_buf_tv(&argvars[0], 1);
  if (buf == ((void*)0)) {
    rettv->vval.v_number = -1;
    goto end;
  }

  int winnr = 0;
  int winid;
  _Bool found_buf = 0;
  for (win_T *wp = ((curtab) == curtab) ? firstwin : (curtab)->tp_firstwin; wp != ((void*)0); wp = wp->w_next) {
    winnr++;
    if (wp->w_buffer == buf) {
      found_buf = 1;
      winid = wp->handle;
      break;
    }
  }
  rettv->vval.v_number = (found_buf ? (get_nr ? winnr : winid) : -1);
end:
  emsg_off--;
}


static void f_bufwinid(typval_T *argvars, typval_T *rettv, FunPtr fptr) {
  buf_win_common(argvars, rettv, 0);
}


static void f_bufwinnr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  buf_win_common(argvars, rettv, 1);
}




static void f_byte2line(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  long boff = tv_get_number(&argvars[0]) - 1;
  if (boff < 0) {
    rettv->vval.v_number = -1;
  } else {
    rettv->vval.v_number = (varnumber_T)ml_find_line_or_offset(curbuf, 0,
                                                               &boff);
  }
}

static void byteidx(typval_T *argvars, typval_T *rettv, int comp)
{
  const char *const str = tv_get_string_chk(&argvars[0]);
  varnumber_T idx = tv_get_number_chk(&argvars[1], ((void*)0));
  rettv->vval.v_number = -1;
  if (str == ((void*)0) || idx < 0) {
    return;
  }

  const char *t = str;
  for (; idx > 0; idx--) {
    if (*t == '\000') {
      return;
    }
    if (1 && comp) {
      t += utf_ptr2len((const char_u *)t);
    } else {
      t += (*utfc_ptr2len)((const char_u *)t);
    }
  }
  rettv->vval.v_number = (varnumber_T)(t - str);
}




static void f_byteidx(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  byteidx(argvars, rettv, 0);
}




static void f_byteidxcomp(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  byteidx(argvars, rettv, 1);
}

int func_call(char_u *name, typval_T *args, partial_T *partial,
              dict_T *selfdict, typval_T *rettv)
{
  typval_T argv[20 + 1];
  int argc = 0;
  int dummy;
  int r = 0;

  do { list_T *const l_ = (args->vval.v_list); if (l_ != ((void*)0)) { for ( listitem_T *item = l_->lv_first; item != ((void*)0); item = item->li_next) { { if (argc == 20 - (partial == ((void*)0) ? 0 : partial->pt_argc)) { emsg((char_u *)(libintl_gettext((char *)("E699: Too many arguments")))); goto func_call_skip_call; } tv_copy((&(item)->li_tv), &argv[argc++]); } } } } while (0);
# 7288 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  r = call_func(name, (int)strlen((char *)(name)), rettv, argc, argv, ((void*)0),
                curwin->w_cursor.lnum, curwin->w_cursor.lnum,
                &dummy, 1, partial, selfdict);

func_call_skip_call:

  while (argc > 0) {
    tv_clear(&argv[--argc]);
  }

  return r;
}


static void f_call(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (argvars[1].v_type != VAR_LIST) {
    emsg((char_u *)(libintl_gettext((char *)(e_listreq))));
    return;
  }
  if (argvars[1].vval.v_list == ((void*)0)) {
    return;
  }

  char_u *func;
  partial_T *partial = ((void*)0);
  dict_T *selfdict = ((void*)0);
  if (argvars[0].v_type == VAR_FUNC) {
    func = argvars[0].vval.v_string;
  } else if (argvars[0].v_type == VAR_PARTIAL) {
    partial = argvars[0].vval.v_partial;
    func = partial_name(partial);
  } else {
    func = (char_u *)tv_get_string(&argvars[0]);
  }
  if (*func == '\000') {
    return;
  }

  if (argvars[2].v_type != VAR_UNKNOWN) {
    if (argvars[2].v_type != VAR_DICT) {
      emsg((char_u *)(libintl_gettext((char *)(e_dictreq))));
      return;
    }
    selfdict = argvars[2].vval.v_dict;
  }

  func_call(func, &argvars[1], partial, selfdict, rettv);
}




static void f_changenr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = curbuf->b_u_seq_cur;
}


static void f_chanclose(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_NUMBER || (argvars[1].v_type != VAR_STRING
        && argvars[1].v_type != VAR_UNKNOWN)) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }

  ChannelPart part = kChannelPartAll;
  if (argvars[1].v_type == VAR_STRING) {
    char *stream = (char *)argvars[1].vval.v_string;
    if (!strcmp(stream, "stdin")) {
      part = kChannelPartStdin;
    } else if (!strcmp(stream, "stdout")) {
      part = kChannelPartStdout;
    } else if (!strcmp(stream, "stderr")) {
      part = kChannelPartStderr;
    } else if (!strcmp(stream, "rpc")) {
      part = kChannelPartRpc;
    } else {
      emsgf((const char *) (libintl_gettext((char *)("Invalid channel stream \"%s\""))), (stream));
      return;
    }
  }
  const char *error;
  rettv->vval.v_number = channel_close(argvars[0].vval.v_number, part, &error);
  if (!rettv->vval.v_number) {
    emsg((char_u *)(error));
  }
}


static void f_chansend(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_NUMBER || argvars[1].v_type == VAR_UNKNOWN) {

    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }

  ptrdiff_t input_len = 0;
  char *input = save_tv_as_string(&argvars[1], &input_len, 0);
  if (!input) {


    return;
  }
  uint64_t id = argvars[0].vval.v_number;
  const char *error = ((void*)0);
  rettv->vval.v_number = channel_send(id, input, input_len, &error);
  if (error) {
    emsg((char_u *)(error));
  }
}




static void f_char2nr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (argvars[1].v_type != VAR_UNKNOWN) {
    if (!tv_check_num(&argvars[1])) {
      return;
    }
  }

  rettv->vval.v_number = utf_ptr2char(
      (const char_u *)tv_get_string(&argvars[0]));
}




static void f_cindent(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  pos_T pos;
  linenr_T lnum;

  pos = curwin->w_cursor;
  lnum = tv_get_lnum(argvars);
  if (lnum >= 1 && lnum <= curbuf->b_ml.ml_line_count) {
    curwin->w_cursor.lnum = lnum;
    rettv->vval.v_number = get_c_indent();
    curwin->w_cursor = pos;
  } else
    rettv->vval.v_number = -1;
}




static void f_clearmatches(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  clear_matches(curwin);
}




static void f_col(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  colnr_T col = 0;
  pos_T *fp;
  int fnum = curbuf->handle;

  fp = var2fpos(&argvars[0], 0, &fnum);
  if (fp != ((void*)0) && fnum == curbuf->handle) {
    if (fp->col == 0x7fffffff) {

      if (fp->lnum <= curbuf->b_ml.ml_line_count)
        col = (colnr_T)strlen((char *)(ml_get(fp->lnum))) + 1;
      else
        col = 0x7fffffff;
    } else {
      col = fp->col + 1;


      if (virtual_active() && fp == &curwin->w_cursor) {
        char_u *p = get_cursor_pos_ptr();

        if (curwin->w_cursor.coladd >= (colnr_T)chartabsize(p,
                curwin->w_virtcol - curwin->w_cursor.coladd)) {
          int l;

          if (*p != '\000' && p[(l = (*utfc_ptr2len)(p))] == '\000')
            col += l;
        }
      }
    }
  }
  rettv->vval.v_number = col;
}




static void f_complete(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if ((State & 0x10) == 0) {
    emsg((char_u *)(libintl_gettext((char *)("E785: complete() can only be used in Insert mode"))));
    return;
  }



  if (!undo_allowed())
    return;

  if (argvars[1].v_type != VAR_LIST) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }

  const colnr_T startcol = tv_get_number_chk(&argvars[0], ((void*)0));
  if (startcol <= 0) {
    return;
  }

  set_completion(startcol - 1, argvars[1].vval.v_list);
}




static void f_complete_add(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = ins_compl_add_tv(&argvars[0], 0);
}




static void f_complete_check(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int saved = RedrawingDisabled;

  RedrawingDisabled = 0;
  ins_compl_check_keys(0, 1);
  rettv->vval.v_number = compl_interrupted;
  RedrawingDisabled = saved;
}




static void f_confirm(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char buf[NUMBUFLEN];
  char buf2[NUMBUFLEN];
  const char *message;
  const char *buttons = ((void*)0);
  int def = 1;
  int type = 0;
  const char *typestr;
  _Bool error = 0;

  message = tv_get_string_chk(&argvars[0]);
  if (message == ((void*)0)) {
    error = 1;
  }
  if (argvars[1].v_type != VAR_UNKNOWN) {
    buttons = tv_get_string_buf_chk(&argvars[1], buf);
    if (buttons == ((void*)0)) {
      error = 1;
    }
    if (argvars[2].v_type != VAR_UNKNOWN) {
      def = tv_get_number_chk(&argvars[2], &error);
      if (argvars[3].v_type != VAR_UNKNOWN) {
        typestr = tv_get_string_buf_chk(&argvars[3], buf2);
        if (typestr == ((void*)0)) {
          error = 1;
        } else {
          switch ((((*typestr) < 'a' || (*typestr) > 'z') ? (*typestr) : (*typestr) - ('a' - 'A'))) {
            case 'E': type = 1; break;
            case 'Q': type = 4; break;
            case 'I': type = 3; break;
            case 'W': type = 2; break;
            case 'G': type = 0; break;
          }
        }
      }
    }
  }

  if (buttons == ((void*)0) || *buttons == '\000') {
    buttons = libintl_gettext((char *)("&Ok"));
  }

  if (!error) {
    rettv->vval.v_number = do_dialog(
        type, ((void*)0), (char_u *)message, (char_u *)buttons, def, ((void*)0), 0);
  }
}




static void f_copy(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  var_item_copy(((void*)0), &argvars[0], rettv, 0, 0);
}




static void f_count(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  long n = 0;
  int ic = 0;

  if (argvars[0].v_type == VAR_LIST) {
    listitem_T *li;
    list_T *l;
    long idx;

    if ((l = argvars[0].vval.v_list) != ((void*)0)) {
      li = tv_list_first(l);
      if (argvars[2].v_type != VAR_UNKNOWN) {
        _Bool error = 0;

        ic = tv_get_number_chk(&argvars[2], &error);
        if (argvars[3].v_type != VAR_UNKNOWN) {
          idx = tv_get_number_chk(&argvars[3], &error);
          if (!error) {
            li = tv_list_find(l, idx);
            if (li == ((void*)0)) {
              emsgf((const char *) (libintl_gettext((char *)(e_listidx))), (int64_t)(idx));
            }
          }
        }
        if (error)
          li = ((void*)0);
      }

      for (; li != ((void*)0); li = ((li)->li_next)) {
        if (tv_equal((&(li)->li_tv), &argvars[1], ic, 0)) {
          n++;
        }
      }
    }
  } else if (argvars[0].v_type == VAR_DICT) {
    int todo;
    dict_T *d;
    hashitem_T *hi;

    if ((d = argvars[0].vval.v_dict) != ((void*)0)) {
      _Bool error = 0;

      if (argvars[2].v_type != VAR_UNKNOWN) {
        ic = tv_get_number_chk(&argvars[2], &error);
        if (argvars[3].v_type != VAR_UNKNOWN) {
          emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
        }
      }

      todo = error ? 0 : (int)d->dv_hashtab.ht_used;
      for (hi = d->dv_hashtab.ht_array; todo > 0; ++hi) {
        if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
          todo--;
          if (tv_equal(&((dictitem_T *)((hi)->hi_key - __builtin_offsetof(dictitem_T, di_key)))->di_tv, &argvars[1], ic, 0)) {
            n++;
          }
        }
      }
    }
  } else
    emsgf((const char *) (libintl_gettext((char *)(e_listdictarg))), ("count()"));
  rettv->vval.v_number = n;
}






static void f_cscope_connection(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int num = 0;
  const char *dbpath = ((void*)0);
  const char *prepend = ((void*)0);
  char buf[NUMBUFLEN];

  if (argvars[0].v_type != VAR_UNKNOWN
      && argvars[1].v_type != VAR_UNKNOWN) {
    num = (int)tv_get_number(&argvars[0]);
    dbpath = tv_get_string(&argvars[1]);
    if (argvars[2].v_type != VAR_UNKNOWN) {
      prepend = tv_get_string_buf(&argvars[2], buf);
    }
  }

  rettv->vval.v_number = cs_connection(num, (char_u *)dbpath,
                                       (char_u *)prepend);
}







static void f_cursor(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  long line, col;
  long coladd = 0;
  _Bool set_curswant = 1;

  rettv->vval.v_number = -1;
  if (argvars[1].v_type == VAR_UNKNOWN) {
    pos_T pos;
    colnr_T curswant = -1;

    if (list2fpos(argvars, &pos, ((void*)0), &curswant) == 0) {
      emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
      return;
    }

    line = pos.lnum;
    col = pos.col;
    coladd = pos.coladd;
    if (curswant >= 0) {
      curwin->w_curswant = curswant - 1;
      set_curswant = 0;
    }
  } else {
    line = tv_get_lnum(argvars);
    col = (long)tv_get_number_chk(&argvars[1], ((void*)0));
    if (argvars[2].v_type != VAR_UNKNOWN) {
      coladd = (long)tv_get_number_chk(&argvars[2], ((void*)0));
    }
  }
  if (line < 0 || col < 0
      || coladd < 0) {
    return;
  }
  if (line > 0) {
    curwin->w_cursor.lnum = line;
  }
  if (col > 0) {
    curwin->w_cursor.col = col - 1;
  }
  curwin->w_cursor.coladd = coladd;


  check_cursor();

  if (1) {
    mb_adjust_cursor();
  }

  curwin->w_set_curswant = set_curswant;
  rettv->vval.v_number = 0;
}




static void f_deepcopy(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int noref = 0;

  if (argvars[1].v_type != VAR_UNKNOWN) {
    noref = tv_get_number_chk(&argvars[1], ((void*)0));
  }
  if (noref < 0 || noref > 1) {
    emsgf(libintl_gettext((char *)(e_invarg)));
  } else {
    var_item_copy(((void*)0), &argvars[0], rettv, 1, (noref == 0
                                                   ? get_copyID()
                                                   : 0));
  }
}


static void f_delete(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = -1;
  if (check_restricted() || check_secure()) {
    return;
  }

  const char *const name = tv_get_string(&argvars[0]);
  if (*name == '\000') {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }

  char nbuf[NUMBUFLEN];
  const char *flags;
  if (argvars[1].v_type != VAR_UNKNOWN) {
    flags = tv_get_string_buf(&argvars[1], nbuf);
  } else {
    flags = "";
  }

  if (*flags == '\000') {

    rettv->vval.v_number = os_remove(name) == 0 ? 0 : -1;
  } else if (strcmp(flags, "d") == 0) {

    rettv->vval.v_number = os_rmdir(name) == 0 ? 0 : -1;
  } else if (strcmp(flags, "rf") == 0) {

    rettv->vval.v_number = delete_recursive(name);
  } else {
    emsgf((const char *) (libintl_gettext((char *)(e_invexpr2))), (flags));
  }
}


static void f_dictwatcheradd(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_DICT) {
    emsgf(libintl_gettext((char *)(e_invarg2)), "dict");
    return;
  } else if (argvars[0].vval.v_dict == ((void*)0)) {
    const char *const arg_errmsg = libintl_gettext((char *)("dictwatcheradd() argument"));
    const size_t arg_errmsg_len = strlen(arg_errmsg);
    emsgf(libintl_gettext((char *)(e_readonlyvar)), (int)arg_errmsg_len, arg_errmsg);
    return;
  }

  if (argvars[1].v_type != VAR_STRING && argvars[1].v_type != VAR_NUMBER) {
    emsgf(libintl_gettext((char *)(e_invarg2)), "key");
    return;
  }

  const char *const key_pattern = tv_get_string_chk(argvars + 1);
  if (key_pattern == ((void*)0)) {
    return;
  }
  const size_t key_pattern_len = strlen(key_pattern);

  Callback callback;
  if (!callback_from_typval(&callback, &argvars[2])) {
    emsgf(libintl_gettext((char *)(e_invarg2)), "funcref");
    return;
  }

  tv_dict_watcher_add(argvars[0].vval.v_dict, key_pattern, key_pattern_len,
                      callback);
}


static void f_dictwatcherdel(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_DICT) {
    emsgf(libintl_gettext((char *)(e_invarg2)), "dict");
    return;
  }

  if (argvars[2].v_type != VAR_FUNC && argvars[2].v_type != VAR_STRING) {
    emsgf(libintl_gettext((char *)(e_invarg2)), "funcref");
    return;
  }

  const char *const key_pattern = tv_get_string_chk(argvars + 1);
  if (key_pattern == ((void*)0)) {
    return;
  }

  Callback callback;
  if (!callback_from_typval(&callback, &argvars[2])) {
    return;
  }

  if (!tv_dict_watcher_remove(argvars[0].vval.v_dict, key_pattern,
                              strlen(key_pattern), callback)) {
    emsg((char_u *)("Couldn't find a watcher matching key and callback"));
  }

  callback_free(&callback);
}




static void f_did_filetype(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = did_filetype;
}




static void f_diff_filler(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = diff_check_fill(curwin, tv_get_lnum(argvars));
}




static void f_diff_hlID(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  linenr_T lnum = tv_get_lnum(argvars);
  static linenr_T prev_lnum = 0;
  static int changedtick = 0;
  static int fnum = 0;
  static int change_start = 0;
  static int change_end = 0;
  static hlf_T hlID = (hlf_T)0;
  int filler_lines;
  int col;

  if (lnum < 0)
    lnum = 0;
  if (lnum != prev_lnum
      || changedtick != curbuf->changedtick_di.di_tv.vval.v_number
      || fnum != curbuf->handle) {

    filler_lines = diff_check(curwin, lnum);
    if (filler_lines < 0) {
      if (filler_lines == -1) {
        change_start = 0x7fffffff;
        change_end = -1;
        if (diff_find_change(curwin, lnum, &change_start, &change_end))
          hlID = HLF_ADD;
        else
          hlID = HLF_CHD;
      } else
        hlID = HLF_ADD;
    } else
      hlID = (hlf_T)0;
    prev_lnum = lnum;
    changedtick = curbuf->changedtick_di.di_tv.vval.v_number;
    fnum = curbuf->handle;
  }

  if (hlID == HLF_CHD || hlID == HLF_TXD) {
    col = tv_get_number(&argvars[1]) - 1;
    if (col >= change_start && col <= change_end) {
      hlID = HLF_TXD;
    } else {
      hlID = HLF_CHD;
    }
  }
  rettv->vval.v_number = hlID == (hlf_T)0 ? 0 : (int)hlID;
}




static void f_empty(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  _Bool n = 1;

  switch (argvars[0].v_type) {
    case VAR_STRING:
    case VAR_FUNC: {
      n = argvars[0].vval.v_string == ((void*)0)
          || *argvars[0].vval.v_string == '\000';
      break;
    }
    case VAR_PARTIAL: {
      n = 0;
      break;
    }
    case VAR_NUMBER: {
      n = argvars[0].vval.v_number == 0;
      break;
    }
    case VAR_FLOAT: {
      n = argvars[0].vval.v_float == 0.0;
      break;
    }
    case VAR_LIST: {
      n = (tv_list_len(argvars[0].vval.v_list) == 0);
      break;
    }
    case VAR_DICT: {
      n = (tv_dict_len(argvars[0].vval.v_dict) == 0);
      break;
    }
    case VAR_SPECIAL: {

      switch (argvars[0].vval.v_special) {
        case kSpecialVarTrue: {
          n = 0;
          break;
        }
        case kSpecialVarFalse:
        case kSpecialVarNull: {
          n = 1;
          break;
        }
      }
      break;
    }
    case VAR_UNKNOWN: {
      internal_error("f_empty(UNKNOWN)");
      break;
    }
  }

  rettv->vval.v_number = n;
}




static void f_escape(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char buf[NUMBUFLEN];

  rettv->vval.v_string = vim_strsave_escaped(
      (const char_u *)tv_get_string(&argvars[0]),
      (const char_u *)tv_get_string_buf(&argvars[1], buf));
  rettv->v_type = VAR_STRING;
}




static void f_eval(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *s = tv_get_string_chk(&argvars[0]);
  if (s != ((void*)0)) {
    s = (const char *)skipwhite((const char_u *)s);
  }

  const char *const expr_start = s;
  if (s == ((void*)0) || eval1((char_u **)&s, rettv, 1) == 0) {
    if (expr_start != ((void*)0) && !aborting()) {
      emsgf((const char *) (libintl_gettext((char *)(e_invexpr2))), (expr_start));
    }
    need_clr_eos = 0;
    rettv->v_type = VAR_NUMBER;
    rettv->vval.v_number = 0;
  } else if (*s != '\000') {
    emsg((char_u *)(libintl_gettext((char *)(e_trailing))));
  }
}




static void f_eventhandler(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = vgetc_busy;
}




static void f_executable(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *name = tv_get_string(&argvars[0]);


  rettv->vval.v_number = (
      os_can_exe((const char_u *)name, ((void*)0), 1)
      || (gettail_dir(name) != name
          && os_can_exe((const char_u *)name, ((void*)0), 0)));
}

typedef struct {
  const list_T *const l;
  const listitem_T *li;
} GetListLineCookie;

static char_u *get_list_line(int c, void *cookie, int indent)
{
  GetListLineCookie *const p = (GetListLineCookie *)cookie;

  const listitem_T *const item = p->li;
  if (item == ((void*)0)) {
    return ((void*)0);
  }
  char buf[NUMBUFLEN];
  const char *const s = tv_get_string_buf_chk((&(item)->li_tv), buf);
  p->li = ((item)->li_next);
  return (char_u *)(s == ((void*)0) ? ((void*)0) : xstrdup(s));
}


static void f_execute(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const int save_msg_silent = msg_silent;
  const int save_emsg_silent = emsg_silent;
  const _Bool save_emsg_noredir = emsg_noredir;
  garray_T *const save_capture_ga = capture_ga;

  if (check_secure()) {
    return;
  }

  if (argvars[1].v_type != VAR_UNKNOWN) {
    char buf[NUMBUFLEN];
    const char *const s = tv_get_string_buf_chk(&argvars[1], buf);

    if (s == ((void*)0)) {
      return;
    }
    if (strncmp(s, "silent", 6) == 0) {
      msg_silent++;
    }
    if (strcmp(s, "silent!") == 0) {
      emsg_silent = 1;
      emsg_noredir = 1;
    }
  } else {
    msg_silent++;
  }

  garray_T capture_local;
  ga_init(&capture_local, (int)sizeof(char), 80);
  capture_ga = &capture_local;

  if (argvars[0].v_type != VAR_LIST) {
    do_cmdline_cmd(tv_get_string(&argvars[0]));
  } else if (argvars[0].vval.v_list != ((void*)0)) {
    list_T *const list = argvars[0].vval.v_list;
    tv_list_ref(list);
    GetListLineCookie cookie = {
      .l = list,
      .li = tv_list_first(list),
    };
    do_cmdline(((void*)0), get_list_line, (void *)&cookie,
               0x02|0x01|0x04|0x08);
    tv_list_unref(list);
  }
  msg_silent = save_msg_silent;
  emsg_silent = save_emsg_silent;
  emsg_noredir = save_emsg_noredir;

  ga_append(capture_ga, '\000');
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = vim_strsave(capture_ga->ga_data);
  ga_clear(capture_ga);

  capture_ga = save_capture_ga;
}


static void f_exepath(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *arg = tv_get_string(&argvars[0]);
  char_u *path = ((void*)0);

  (void)os_can_exe((const char_u *)arg, &path, 1);

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = path;
}




static void f_exists(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int n = 0;
  int len = 0;

  const char *p = tv_get_string(&argvars[0]);
  if (*p == '$') {

    if (os_getenv(p + 1) != ((void*)0)) {
      n = 1;
    } else {

      char_u *const exp = expand_env_save((char_u *)p);
      if (exp != ((void*)0) && *exp != '$') {
        n = 1;
      }
      xfree(exp);
    }
  } else if (*p == '&' || *p == '+') {
    n = (get_option_tv(&p, ((void*)0), 1) == 1);
    if (*skipwhite((const char_u *)p) != '\000') {
      n = 0;
    }
  } else if (*p == '*') {
    n = function_exists(p + 1, 0);
  } else if (*p == ':') {
    n = cmd_exists(p + 1);
  } else if (*p == '#') {
    if (p[1] == '#') {
      n = autocmd_supported(p + 2);
    } else {
      n = au_exists(p + 1);
    }
  } else {
    typval_T tv;


    const char *name = p;
    char *tofree;
    len = get_name_len((const char **)&p, &tofree, 1, 0);
    if (len > 0) {
      if (tofree != ((void*)0)) {
        name = tofree;
      }
      n = (get_var_tv(name, len, &tv, ((void*)0), 0, 1) == 1);
      if (n) {

        n = (handle_subscript(&p, &tv, 1, 0) == 1);
        if (n) {
          tv_clear(&tv);
        }
      }
    }
    if (*p != '\000')
      n = 0;

    xfree(tofree);
  }

  rettv->vval.v_number = n;
}




static void f_expand(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  size_t len;
  char_u *errormsg;
  int options = 0x40|0x04|0x01;
  expand_T xpc;
  _Bool error = 0;
  char_u *result;

  rettv->v_type = VAR_STRING;
  if (argvars[1].v_type != VAR_UNKNOWN
      && argvars[2].v_type != VAR_UNKNOWN
      && tv_get_number_chk(&argvars[2], &error)
      && !error) {
    rettv->v_type = VAR_LIST;
    rettv->vval.v_list = ((void*)0);
  }

  const char *s = tv_get_string(&argvars[0]);
  if (*s == '%' || *s == '#' || *s == '<') {
    emsg_off++;
    result = eval_vars((char_u *)s, (char_u *)s, &len, ((void*)0), &errormsg, ((void*)0));
    emsg_off--;
    if (rettv->v_type == VAR_LIST) {
      tv_list_alloc_ret(rettv);
      if (result != ((void*)0)) {
        tv_list_append_string(rettv->vval.v_list, (const char *)result, -1);
      }
    } else
      rettv->vval.v_string = result;
  } else {


    if (argvars[1].v_type != VAR_UNKNOWN
        && tv_get_number_chk(&argvars[1], &error)) {
      options |= 0x20;
    }
    if (!error) {
      ExpandInit(&xpc);
      xpc.xp_context = EXPAND_FILES;
      if (p_wic) {
        options += 0x100;
      }
      if (rettv->v_type == VAR_STRING) {
        rettv->vval.v_string = ExpandOne(&xpc, (char_u *)s, ((void*)0), options,
                                         6);
      } else {
        tv_list_alloc_ret(rettv);
        ExpandOne(&xpc, (char_u *)s, ((void*)0), options, 8);
        for (int i = 0; i < xpc.xp_numfiles; i++) {
          tv_list_append_string(rettv->vval.v_list,
                                (const char *)xpc.xp_files[i], -1);
        }
        ExpandCleanup(&xpc);
      }
    } else {
      rettv->vval.v_string = ((void*)0);
    }
  }
}



static void f_menu_get(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  tv_list_alloc_ret(rettv);
  int modes = ((1 << 6) - 1);
  if (argvars[1].v_type == VAR_STRING) {
    const char_u *const strmodes = (char_u *)tv_get_string(&argvars[1]);
    modes = get_menu_cmd_modes(strmodes, 0, ((void*)0), ((void*)0));
  }
  menu_get((char_u *)tv_get_string(&argvars[0]), modes, rettv->vval.v_list);
}





static void f_extend(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *const arg_errmsg = "extend() argument";

  if (argvars[0].v_type == VAR_LIST && argvars[1].v_type == VAR_LIST) {
    long before;
    _Bool error = 0;

    list_T *const l1 = argvars[0].vval.v_list;
    list_T *const l2 = argvars[1].vval.v_list;
    if (!tv_check_lock(tv_list_locked(l1), arg_errmsg, (18446744073709551615ULL))) {
      listitem_T *item;
      if (argvars[2].v_type != VAR_UNKNOWN) {
        before = (long)tv_get_number_chk(&argvars[2], &error);
        if (error) {
          return;
        }

        if (before == tv_list_len(l1)) {
          item = ((void*)0);
        } else {
          item = tv_list_find(l1, before);
          if (item == ((void*)0)) {
            emsgf((const char *) (libintl_gettext((char *)(e_listidx))), (int64_t)(before));
            return;
          }
        }
      } else {
        item = ((void*)0);
      }
      tv_list_extend(l1, l2, item);

      tv_copy(&argvars[0], rettv);
    }
  } else if (argvars[0].v_type == VAR_DICT && argvars[1].v_type ==
             VAR_DICT) {
    dict_T *const d1 = argvars[0].vval.v_dict;
    dict_T *const d2 = argvars[1].vval.v_dict;
    if (d1 == ((void*)0)) {
      const _Bool locked = tv_check_lock(VAR_FIXED, arg_errmsg, (18446744073709551615ULL));
      (void)locked;
      ((void)0);
    } else if (d2 == ((void*)0)) {

      tv_copy(&argvars[0], rettv);
    } else if (!tv_check_lock(d1->dv_lock, arg_errmsg, (18446744073709551615ULL))) {
      const char *action = "force";

      if (argvars[2].v_type != VAR_UNKNOWN) {
        const char *const av[] = { "keep", "force", "error" };

        action = tv_get_string_chk(&argvars[2]);
        if (action == ((void*)0)) {
          return;
        }
        size_t i;
        for (i = 0; i < ((sizeof(av)/sizeof((av)[0])) / ((size_t)(!(sizeof(av) % sizeof((av)[0]))))); i++) {
          if (strcmp(action, av[i]) == 0) {
            break;
          }
        }
        if (i == 3) {
          emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (action));
          return;
        }
      }

      tv_dict_extend(d1, d2, action);

      tv_copy(&argvars[0], rettv);
    }
  } else {
    emsgf((const char *) (libintl_gettext((char *)(e_listdictarg))), ("extend()"));
  }
}




static void f_feedkeys(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{



  if (check_secure()) {
    return;
  }

  const char *const keys = tv_get_string(&argvars[0]);
  char nbuf[NUMBUFLEN];
  const char *flags = ((void*)0);
  if (argvars[1].v_type != VAR_UNKNOWN) {
    flags = tv_get_string_buf(&argvars[1], nbuf);
  }

  nvim_feedkeys(cstr_as_string((char *)keys),
                cstr_as_string((char *)flags), 1);
}


static void f_filereadable(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *const p = tv_get_string(&argvars[0]);
  rettv->vval.v_number =
    (*p && !os_isdir((const char_u *)p) && os_file_is_readable(p));
}





static void f_filewritable(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *filename = tv_get_string(&argvars[0]);
  rettv->vval.v_number = os_file_is_writable(filename);
}


static void findfilendir(typval_T *argvars, typval_T *rettv, int find_what)
{
  char_u *fresult = ((void*)0);
  char_u *path = *curbuf->b_p_path == '\000' ? p_path : curbuf->b_p_path;
  int count = 1;
  _Bool first = 1;
  _Bool error = 0;

  rettv->vval.v_string = ((void*)0);
  rettv->v_type = VAR_STRING;

  const char *fname = tv_get_string(&argvars[0]);

  char pathbuf[NUMBUFLEN];
  if (argvars[1].v_type != VAR_UNKNOWN) {
    const char *p = tv_get_string_buf_chk(&argvars[1], pathbuf);
    if (p == ((void*)0)) {
      error = 1;
    } else {
      if (*p != '\000') {
        path = (char_u *)p;
      }

      if (argvars[2].v_type != VAR_UNKNOWN) {
        count = tv_get_number_chk(&argvars[2], &error);
      }
    }
  }

  if (count < 0) {
    tv_list_alloc_ret(rettv);
  }

  if (*fname != '\000' && !error) {
    do {
      if (rettv->v_type == VAR_STRING || rettv->v_type == VAR_LIST)
        xfree(fresult);
      fresult = find_file_in_path_option(first ? (char_u *)fname : ((void*)0),
                                         first ? strlen(fname) : 0,
                                         0, first, path,
                                         find_what, curbuf->b_ffname,
                                         (find_what == 1
                                          ? (char_u *)""
                                          : curbuf->b_p_sua));
      first = 0;

      if (fresult != ((void*)0) && rettv->v_type == VAR_LIST) {
        tv_list_append_string(rettv->vval.v_list, (const char *)fresult, -1);
      }
    } while ((rettv->v_type == VAR_LIST || --count > 0) && fresult != ((void*)0));
  }

  if (rettv->v_type == VAR_STRING)
    rettv->vval.v_string = fresult;
}





static void filter_map(typval_T *argvars, typval_T *rettv, int map)
{
  typval_T *expr;
  list_T *l = ((void*)0);
  dictitem_T *di;
  hashtab_T *ht;
  hashitem_T *hi;
  dict_T *d = ((void*)0);
  typval_T save_val;
  typval_T save_key;
  int rem = 0;
  int todo;
  char_u *ermsg = (char_u *)(map ? "map()" : "filter()");
  const char *const arg_errmsg = (map
                                  ? "map() argument"
                                  : "filter() argument");
  int save_did_emsg;
  int idx = 0;

  if (argvars[0].v_type == VAR_LIST) {
    tv_copy(&argvars[0], rettv);
    if ((l = argvars[0].vval.v_list) == ((void*)0)
        || (!map && tv_check_lock(tv_list_locked(l), arg_errmsg,
                                  (18446744073709551615ULL)))) {
      return;
    }
  } else if (argvars[0].v_type == VAR_DICT) {
    tv_copy(&argvars[0], rettv);
    if ((d = argvars[0].vval.v_dict) == ((void*)0)
        || (!map && tv_check_lock(d->dv_lock, arg_errmsg, (18446744073709551615ULL)))) {
      return;
    }
  } else {
    emsgf((const char *) (libintl_gettext((char *)(e_listdictarg))), (ermsg));
    return;
  }

  expr = &argvars[1];



  if (expr->v_type != VAR_UNKNOWN) {
    prepare_vimvar(VV_VAL, &save_val);



    save_did_emsg = did_emsg;
    did_emsg = 0;

    prepare_vimvar(VV_KEY, &save_key);
    if (argvars[0].v_type == VAR_DICT) {
      vimvars[VV_KEY].vv_di.di_tv.v_type = VAR_STRING;

      ht = &d->dv_hashtab;
      hash_lock(ht);
      todo = (int)ht->ht_used;
      for (hi = ht->ht_array; todo > 0; ++hi) {
        if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
          --todo;

          di = ((dictitem_T *)((hi)->hi_key - __builtin_offsetof(dictitem_T, di_key)));
          if (map
              && (tv_check_lock(di->di_tv.v_lock, arg_errmsg, (18446744073709551615ULL))
                  || var_check_ro(di->di_flags, arg_errmsg, (18446744073709551615ULL)))) {
            break;
          }

          vimvars[VV_KEY].vv_di.di_tv.vval.v_string = vim_strsave(di->di_key);
          int r = filter_map_one(&di->di_tv, expr, map, &rem);
          tv_clear(&vimvars[VV_KEY].vv_di.di_tv);
          if (r == 0 || did_emsg) {
            break;
          }
          if (!map && rem) {
            if (var_check_fixed(di->di_flags, arg_errmsg, (18446744073709551615ULL))
                || var_check_ro(di->di_flags, arg_errmsg, (18446744073709551615ULL))) {
              break;
            }
            tv_dict_item_remove(d, di);
          }
        }
      }
      hash_unlock(ht);
    } else {
      vimvars[VV_KEY].vv_di.di_tv.v_type = VAR_NUMBER;

      for (listitem_T *li = tv_list_first(l); li != ((void*)0);) {
        if (map
            && tv_check_lock((&(li)->li_tv)->v_lock, arg_errmsg,
                             (18446744073709551615ULL))) {
          break;
        }
        vimvars[VV_KEY].vv_di.di_tv.vval.v_number = idx;
        if (filter_map_one((&(li)->li_tv), expr, map, &rem) == 0
            || did_emsg) {
          break;
        }
        if (!map && rem) {
          li = tv_list_item_remove(l, li);
        } else {
          li = ((li)->li_next);
        }
        idx++;
      }
    }

    restore_vimvar(VV_KEY, &save_key);
    restore_vimvar(VV_VAL, &save_val);

    did_emsg |= save_did_emsg;
  }
}

static int filter_map_one(typval_T *tv, typval_T *expr, int map, int *remp)
{
  typval_T rettv;
  typval_T argv[3];
  int retval = 0;
  int dummy;

  tv_copy(tv, &vimvars[VV_VAL].vv_di.di_tv);
  argv[0] = vimvars[VV_KEY].vv_di.di_tv;
  argv[1] = vimvars[VV_VAL].vv_di.di_tv;
  if (expr->v_type == VAR_FUNC) {
    const char_u *const s = expr->vval.v_string;
    if (call_func(s, (int)strlen((char *)(s)), &rettv, 2, argv, ((void*)0),
                  0L, 0L, &dummy, 1, ((void*)0), ((void*)0)) == 0) {
      goto theend;
    }
  } else if (expr->v_type == VAR_PARTIAL) {
    partial_T *partial = expr->vval.v_partial;

    const char_u *const s = partial_name(partial);
    if (call_func(s, (int)strlen((char *)(s)), &rettv, 2, argv, ((void*)0),
                  0L, 0L, &dummy, 1, partial, ((void*)0)) == 0) {
      goto theend;
    }
  } else {
    char buf[NUMBUFLEN];
    const char *s = tv_get_string_buf_chk(expr, buf);
    if (s == ((void*)0)) {
      goto theend;
    }
    s = (const char *)skipwhite((const char_u *)s);
    if (eval1((char_u **)&s, &rettv, 1) == 0) {
      goto theend;
    }

    if (*s != '\000') {
      emsgf(libintl_gettext((char *)(e_invexpr2)), s);
      goto theend;
    }
  }
  if (map) {

    tv_clear(tv);
    rettv.v_lock = 0;
    *tv = rettv;
  } else {
    _Bool error = 0;


    *remp = (tv_get_number_chk(&rettv, &error) == 0);
    tv_clear(&rettv);


    if (error) {
      goto theend;
    }
  }
  retval = 1;
theend:
  tv_clear(&vimvars[VV_VAL].vv_di.di_tv);
  return retval;
}




static void f_filter(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  filter_map(argvars, rettv, 0);
}




static void f_finddir(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  findfilendir(argvars, rettv, 1);
}




static void f_findfile(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  findfilendir(argvars, rettv, 0);
}




static void f_float2nr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  float_T f;

  if (tv_get_float_chk(argvars, &f)) {
    if (f <= -9223372036854775807LL + 2.2204460492503131e-16) {
      rettv->vval.v_number = -9223372036854775807LL;
    } else if (f >= 9223372036854775807LL - 2.2204460492503131e-16) {
      rettv->vval.v_number = 9223372036854775807LL;
    } else {
      rettv->vval.v_number = (varnumber_T)f;
    }
  }
}




static void f_fmod(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  float_T fx;
  float_T fy;

  rettv->v_type = VAR_FLOAT;
  if (tv_get_float_chk(argvars, &fx) && tv_get_float_chk(&argvars[1], &fy)) {
    rettv->vval.v_float = fmod(fx, fy);
  } else {
    rettv->vval.v_float = 0.0;
  }
}




static void f_fnameescape(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_string = (char_u *)vim_strsave_fnameescape(
      tv_get_string(&argvars[0]), 0);
  rettv->v_type = VAR_STRING;
}




static void f_fnamemodify(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char_u *fbuf = ((void*)0);
  size_t len;
  char buf[NUMBUFLEN];
  const char *fname = tv_get_string_chk(&argvars[0]);
  const char *const mods = tv_get_string_buf_chk(&argvars[1], buf);
  if (fname == ((void*)0) || mods == ((void*)0)) {
    fname = ((void*)0);
  } else {
    len = strlen(fname);
    size_t usedlen = 0;
    (void)modify_fname((char_u *)mods, &usedlen, (char_u **)&fname, &fbuf,
                       &len);
  }

  rettv->v_type = VAR_STRING;
  if (fname == ((void*)0)) {
    rettv->vval.v_string = ((void*)0);
  } else {
    rettv->vval.v_string = (char_u *)xmemdupz(fname, len);
  }
  xfree(fbuf);
}





static void foldclosed_both(typval_T *argvars, typval_T *rettv, int end)
{
  const linenr_T lnum = tv_get_lnum(argvars);
  if (lnum >= 1 && lnum <= curbuf->b_ml.ml_line_count) {
    linenr_T first;
    linenr_T last;
    if (hasFoldingWin(curwin, lnum, &first, &last, 0, ((void*)0))) {
      if (end) {
        rettv->vval.v_number = (varnumber_T)last;
      } else {
        rettv->vval.v_number = (varnumber_T)first;
      }
      return;
    }
  }
  rettv->vval.v_number = -1;
}




static void f_foldclosed(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  foldclosed_both(argvars, rettv, 0);
}




static void f_foldclosedend(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  foldclosed_both(argvars, rettv, 1);
}




static void f_foldlevel(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const linenr_T lnum = tv_get_lnum(argvars);
  if (lnum >= 1 && lnum <= curbuf->b_ml.ml_line_count) {
    rettv->vval.v_number = foldLevel(lnum);
  }
}




static void f_foldtext(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  linenr_T foldstart;
  linenr_T foldend;
  char_u *dashes;
  linenr_T lnum;
  char_u *s;
  char_u *r;
  int len;
  char *txt;

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);

  foldstart = (linenr_T)get_vim_var_nr(VV_FOLDSTART);
  foldend = (linenr_T)get_vim_var_nr(VV_FOLDEND);
  dashes = get_vim_var_str(VV_FOLDDASHES);
  if (foldstart > 0 && foldend <= curbuf->b_ml.ml_line_count) {

    for (lnum = foldstart; lnum < foldend; lnum++) {
      if (!linewhite(lnum)) {
        break;
      }
    }


    s = skipwhite(ml_get(lnum));

    if (s[0] == '/' && (s[1] == '*' || s[1] == '/')) {
      s = skipwhite(s + 2);
      if (*skipwhite(s) == '\000' && lnum + 1 < foldend) {
        s = skipwhite(ml_get(lnum + 1));
        if (*s == '*')
          s = skipwhite(s + 1);
      }
    }
    unsigned long count = (unsigned long)(foldend - foldstart + 1);
    txt = libintl_ngettext("+-%s%3ld line: ", "+-%s%3ld lines: ", count);
    r = xmalloc(strlen((char *)(txt))
                + strlen((char *)(dashes))
                + 20
                + strlen((char *)(s)));
    __builtin___sprintf_chk ((char *)r, 0, __builtin_object_size ((char *)r, 1 > 1 ? 1 : 0), txt, dashes, count);
    len = (int)strlen((char *)(r));
    __builtin___strcat_chk ((char *)(r), (char *)(s), __builtin_object_size ((char *)(r), 1 > 1 ? 1 : 0));

    foldtext_cleanup(r + len);
    rettv->vval.v_string = r;
  }
}




static void f_foldtextresult(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char_u *text;
  char_u buf[FOLD_TEXT_LEN];
  foldinfo_T foldinfo;
  int fold_count;

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);
  linenr_T lnum = tv_get_lnum(argvars);

  if (lnum < 0) {
    lnum = 0;
  }
  fold_count = foldedCount(curwin, lnum, &foldinfo);
  if (fold_count > 0) {
    text = get_foldtext(curwin, lnum, lnum + fold_count - 1, &foldinfo, buf);
    if (text == buf) {
      text = vim_strsave(text);
    }
    rettv->vval.v_string = text;
  }
}




static void f_foreground(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
}

static void common_function(typval_T *argvars, typval_T *rettv,
                            _Bool is_funcref, FunPtr fptr)
{
  char_u *s;
  char_u *name;
  _Bool use_string = 0;
  partial_T *arg_pt = ((void*)0);
  char_u *trans_name = ((void*)0);

  if (argvars[0].v_type == VAR_FUNC) {

    s = argvars[0].vval.v_string;
  } else if (argvars[0].v_type == VAR_PARTIAL
             && argvars[0].vval.v_partial != ((void*)0)) {

    arg_pt = argvars[0].vval.v_partial;
    s = partial_name(arg_pt);
  } else {

    s = (char_u *)tv_get_string(&argvars[0]);
    use_string = 1;
  }

  if ((use_string && vim_strchr(s, '#') == ((void*)0)) || is_funcref) {
    name = s;
    trans_name = trans_function_name(&name, 0,
                                     TFN_INT | TFN_QUIET | TFN_NO_AUTOLOAD
                                     | TFN_NO_DEREF, ((void*)0), ((void*)0));
    if (*name != '\000') {
      s = ((void*)0);
    }
  }
  if (s == ((void*)0) || *s == '\000' || (use_string && ascii_isdigit(*s))
      || (is_funcref && trans_name == ((void*)0))) {
    emsgf(libintl_gettext((char *)(e_invarg2)), (use_string
                         ? tv_get_string(&argvars[0])
                         : (const char *)s));

  } else if (trans_name != ((void*)0)
             && (is_funcref ? find_func(trans_name) == ((void*)0)
                 : !translated_function_exists((const char *)trans_name))) {
    emsgf((const char *) (libintl_gettext((char *)("E700: Unknown function: %s"))), (s));
  } else {
    int dict_idx = 0;
    int arg_idx = 0;
    list_T *list = ((void*)0);
    if (strncmp((char *)(s), (char *)("s:"), (size_t)(2)) == 0 || strncmp((char *)(s), (char *)("<SID>"), (size_t)(5)) == 0) {
      char sid_buf[25];
      int off = *s == 's' ? 2 : 5;





      __builtin___snprintf_chk (sid_buf, sizeof(sid_buf), 0, __builtin_object_size (sid_buf, 1 > 1 ? 1 : 0), "<SNR>%" "ll" "d" "_", (int64_t)current_SID);

      name = xmalloc(strlen((char *)(sid_buf)) + strlen((char *)(s + off)) + 1);
      __builtin___strcpy_chk ((char *)(name), (char *)(sid_buf), __builtin_object_size ((char *)(name), 1 > 1 ? 1 : 0));
      __builtin___strcat_chk ((char *)(name), (char *)(s + off), __builtin_object_size ((char *)(name), 1 > 1 ? 1 : 0));
    } else {
      name = vim_strsave(s);
    }

    if (argvars[1].v_type != VAR_UNKNOWN) {
      if (argvars[2].v_type != VAR_UNKNOWN) {

        arg_idx = 1;
        dict_idx = 2;
      } else if (argvars[1].v_type == VAR_DICT) {

        dict_idx = 1;
      } else {

        arg_idx = 1;
      }
      if (dict_idx > 0) {
        if (argvars[dict_idx].v_type != VAR_DICT) {
          emsg((char_u *)(libintl_gettext((char *)("E922: expected a dict"))));
          xfree(name);
          goto theend;
        }
        if (argvars[dict_idx].vval.v_dict == ((void*)0)) {
          dict_idx = 0;
        }
      }
      if (arg_idx > 0) {
        if (argvars[arg_idx].v_type != VAR_LIST) {
          emsg((char_u *)(libintl_gettext((char *)("E923: Second argument of function() must be " "a list or a dict"))));

          xfree(name);
          goto theend;
        }
        list = argvars[arg_idx].vval.v_list;
        if (tv_list_len(list) == 0) {
          arg_idx = 0;
        }
      }
    }
    if (dict_idx > 0 || arg_idx > 0 || arg_pt != ((void*)0) || is_funcref) {
      partial_T *const pt = xcalloc(1, sizeof(*pt));


      if (arg_idx > 0 || (arg_pt != ((void*)0) && arg_pt->pt_argc > 0)) {
        const int arg_len = (arg_pt == ((void*)0) ? 0 : arg_pt->pt_argc);
        const int lv_len = tv_list_len(list);

        pt->pt_argc = arg_len + lv_len;
        pt->pt_argv = xmalloc(sizeof(pt->pt_argv[0]) * pt->pt_argc);
        int i = 0;
        for (; i < arg_len; i++) {
          tv_copy(&arg_pt->pt_argv[i], &pt->pt_argv[i]);
        }
        if (lv_len > 0) {
          do { list_T *const l_ = (list); if (l_ != ((void*)0)) { for ( listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { tv_copy((&(li)->li_tv), &pt->pt_argv[i++]); } } } } while (0);


        }
      }



      if (dict_idx > 0) {

        pt->pt_dict = argvars[dict_idx].vval.v_dict;
        (pt->pt_dict->dv_refcount)++;
      } else if (arg_pt != ((void*)0)) {


        pt->pt_dict = arg_pt->pt_dict;
        pt->pt_auto = arg_pt->pt_auto;
        if (pt->pt_dict != ((void*)0)) {
          (pt->pt_dict->dv_refcount)++;
        }
      }

      pt->pt_refcount = 1;
      if (arg_pt != ((void*)0) && arg_pt->pt_func != ((void*)0)) {
        pt->pt_func = arg_pt->pt_func;
        func_ptr_ref(pt->pt_func);
        xfree(name);
      } else if (is_funcref) {
        pt->pt_func = find_func(trans_name);
        func_ptr_ref(pt->pt_func);
        xfree(name);
      } else {
        pt->pt_name = name;
        func_ref(name);
      }

      rettv->v_type = VAR_PARTIAL;
      rettv->vval.v_partial = pt;
    } else {

      rettv->v_type = VAR_FUNC;
      rettv->vval.v_string = name;
      func_ref(name);
    }
  }
theend:
  xfree(trans_name);
}

static void f_funcref(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  common_function(argvars, rettv, 1, fptr);
}

static void f_function(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  common_function(argvars, rettv, 0, fptr);
}


static void f_garbagecollect(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{


  want_garbage_collect = 1;

  if (argvars[0].v_type != VAR_UNKNOWN && tv_get_number(&argvars[0]) == 1) {
    garbage_collect_at_exit = 1;
  }
}




static void f_get(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  listitem_T *li;
  list_T *l;
  dictitem_T *di;
  dict_T *d;
  typval_T *tv = ((void*)0);

  if (argvars[0].v_type == VAR_LIST) {
    if ((l = argvars[0].vval.v_list) != ((void*)0)) {
      _Bool error = 0;

      li = tv_list_find(l, tv_get_number_chk(&argvars[1], &error));
      if (!error && li != ((void*)0)) {
        tv = (&(li)->li_tv);
      }
    }
  } else if (argvars[0].v_type == VAR_DICT) {
    if ((d = argvars[0].vval.v_dict) != ((void*)0)) {
      di = tv_dict_find(d, tv_get_string(&argvars[1]), -1);
      if (di != ((void*)0)) {
        tv = &di->di_tv;
      }
    }
  } else if (tv_is_func(argvars[0])) {
    partial_T *pt;
    partial_T fref_pt;

    if (argvars[0].v_type == VAR_PARTIAL) {
      pt = argvars[0].vval.v_partial;
    } else {
      __builtin___memset_chk (&fref_pt, 0, sizeof(fref_pt), __builtin_object_size (&fref_pt, 0));
      fref_pt.pt_name = argvars[0].vval.v_string;
      pt = &fref_pt;
    }

    if (pt != ((void*)0)) {
      const char *const what = tv_get_string(&argvars[1]);

      if (strcmp(what, "func") == 0 || strcmp(what, "name") == 0) {
        rettv->v_type = (*what == 'f' ? VAR_FUNC : VAR_STRING);
        const char *const n = (const char *)partial_name(pt);
        ((void)0);
        rettv->vval.v_string = (char_u *)xstrdup(n);
        if (rettv->v_type == VAR_FUNC) {
          func_ref(rettv->vval.v_string);
        }
      } else if (strcmp(what, "dict") == 0) {
        rettv->v_type = VAR_DICT;
        rettv->vval.v_dict = pt->pt_dict;
        if (pt->pt_dict != ((void*)0)) {
          (pt->pt_dict->dv_refcount)++;
        }
      } else if (strcmp(what, "args") == 0) {
        rettv->v_type = VAR_LIST;
        if (tv_list_alloc_ret(rettv) != ((void*)0)) {
          for (int i = 0; i < pt->pt_argc; i++) {
            tv_list_append_tv(rettv->vval.v_list, &pt->pt_argv[i]);
          }
        }
      } else {
        emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (what));
      }
      return;
    }
  } else {
    emsgf((const char *) (libintl_gettext((char *)(e_listdictarg))), ("get()"));
  }

  if (tv == ((void*)0)) {
    if (argvars[2].v_type != VAR_UNKNOWN) {
      tv_copy(&argvars[2], rettv);
    }
  } else {
    tv_copy(tv, rettv);
  }
}


static void get_buffer_signs(buf_T *buf, list_T *l)
{
  for (signlist_T *sign = buf->b_signlist; sign; sign = sign->next) {
    dict_T *const d = tv_dict_alloc();

    tv_dict_add_nr(d, ("id"), (sizeof("id") - 1), sign->id);
    tv_dict_add_nr(d, ("lnum"), (sizeof("lnum") - 1), sign->lnum);
    tv_dict_add_str(d, ("name"), (sizeof("name") - 1),
                    (const char *)sign_typenr2name(sign->typenr));

    tv_list_append_dict(l, d);
  }
}


static dict_T *get_buffer_info(buf_T *buf)
{
  dict_T *const dict = tv_dict_alloc();

  tv_dict_add_nr(dict, ("bufnr"), (sizeof("bufnr") - 1), buf->handle);
  tv_dict_add_str(dict, ("name"), (sizeof("name") - 1),
                  buf->b_ffname != ((void*)0) ? (const char *)buf->b_ffname : "");
  tv_dict_add_nr(dict, ("lnum"), (sizeof("lnum") - 1),
                 buf == curbuf ? curwin->w_cursor.lnum : buflist_findlnum(buf));
  tv_dict_add_nr(dict, ("loaded"), (sizeof("loaded") - 1), buf->b_ml.ml_mfp != ((void*)0));
  tv_dict_add_nr(dict, ("listed"), (sizeof("listed") - 1), buf->b_p_bl);
  tv_dict_add_nr(dict, ("changed"), (sizeof("changed") - 1), bufIsChanged(buf));
  tv_dict_add_nr(dict, ("changedtick"), (sizeof("changedtick") - 1), buf->changedtick_di.di_tv.vval.v_number);
  tv_dict_add_nr(dict, ("hidden"), (sizeof("hidden") - 1),
                 buf->b_ml.ml_mfp != ((void*)0) && buf->b_nwindows == 0);


  tv_dict_add_dict(dict, ("variables"), (sizeof("variables") - 1), buf->b_vars);


  list_T *const windows = tv_list_alloc();
  for (tabpage_T *tp = first_tabpage; tp != ((void*)0); tp = tp->tp_next) for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; wp != ((void*)0); wp = wp->w_next) {
    if (wp->w_buffer == buf) {
      tv_list_append_number(windows, (varnumber_T)wp->handle);
    }
  }
  tv_dict_add_list(dict, ("windows"), (sizeof("windows") - 1), windows);

  if (buf->b_signlist != ((void*)0)) {

    list_T *const signs = tv_list_alloc();
    get_buffer_signs(buf, signs);
    tv_dict_add_list(dict, ("signs"), (sizeof("signs") - 1), signs);
  }

  return dict;
}


static void f_getbufinfo(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  buf_T *argbuf = ((void*)0);
  _Bool filtered = 0;
  _Bool sel_buflisted = 0;
  _Bool sel_bufloaded = 0;

  tv_list_alloc_ret(rettv);


  if (argvars[0].v_type == VAR_DICT) {
    dict_T *sel_d = argvars[0].vval.v_dict;

    if (sel_d != ((void*)0)) {
      dictitem_T *di;

      filtered = 1;

      di = tv_dict_find(sel_d, ("buflisted"), (sizeof("buflisted") - 1));
      if (di != ((void*)0) && tv_get_number(&di->di_tv)) {
        sel_buflisted = 1;
      }

      di = tv_dict_find(sel_d, ("bufloaded"), (sizeof("bufloaded") - 1));
      if (di != ((void*)0) && tv_get_number(&di->di_tv)) {
        sel_bufloaded = 1;
      }
    }
  } else if (argvars[0].v_type != VAR_UNKNOWN) {

    if (tv_check_num(&argvars[0])) {
      emsg_off++;
      argbuf = get_buf_tv(&argvars[0], 0);
      emsg_off--;
      if (argbuf == ((void*)0)) {
        return;
      }
    }
  }


  for (buf_T *buf = firstbuf; buf != ((void*)0); buf = buf->b_next) {
    if (argbuf != ((void*)0) && argbuf != buf) {
      continue;
    }
    if (filtered && ((sel_bufloaded && buf->b_ml.ml_mfp == ((void*)0))
                     || (sel_buflisted && !buf->b_p_bl))) {
      continue;
    }

    dict_T *const d = get_buffer_info(buf);
    tv_list_append_dict(rettv->vval.v_list, d);
    if (argbuf != ((void*)0)) {
      return;
    }
  }
}







static void get_buffer_lines(buf_T *buf, linenr_T start, linenr_T end, int retlist, typval_T *rettv)
{
  char_u *p;

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);
  if (retlist) {
    tv_list_alloc_ret(rettv);
  }

  if (buf == ((void*)0) || buf->b_ml.ml_mfp == ((void*)0) || start < 0)
    return;

  if (!retlist) {
    if (start >= 1 && start <= buf->b_ml.ml_line_count)
      p = ml_get_buf(buf, start, 0);
    else
      p = (char_u *)"";
    rettv->vval.v_string = vim_strsave(p);
  } else {
    if (end < start)
      return;

    if (start < 1)
      start = 1;
    if (end > buf->b_ml.ml_line_count)
      end = buf->b_ml.ml_line_count;
    while (start <= end) {
      tv_list_append_string(rettv->vval.v_list,
                            (const char *)ml_get_buf(buf, start++, 0), -1);
    }
  }
}
# 9316 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static linenr_T tv_get_lnum_buf(const typval_T *const tv,
                                const buf_T *const buf)
  FUNC_ATTR_NONNULL_ARG(1) FUNC_ATTR_WARN_UNUSED_RESULT
{
  if (tv->v_type == VAR_STRING
      && tv->vval.v_string != ((void*)0)
      && tv->vval.v_string[0] == '$'
      && buf != ((void*)0)) {
    return buf->b_ml.ml_line_count;
  }
  return tv_get_number_chk(tv, ((void*)0));
}




static void f_getbufline(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  buf_T *buf = ((void*)0);

  if (tv_check_str_or_nr(&argvars[0])) {
    emsg_off++;
    buf = get_buf_tv(&argvars[0], 0);
    emsg_off--;
  }

  const linenr_T lnum = tv_get_lnum_buf(&argvars[1], buf);
  const linenr_T end = (argvars[2].v_type == VAR_UNKNOWN
                        ? lnum
                        : tv_get_lnum_buf(&argvars[2], buf));

  get_buffer_lines(buf, lnum, end, 1, rettv);
}




static void f_getbufvar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  _Bool done = 0;

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);

  if (!tv_check_str_or_nr(&argvars[0])) {
    goto f_getbufvar_end;
  }

  const char *varname = tv_get_string_chk(&argvars[1]);
  emsg_off++;
  buf_T *const buf = get_buf_tv(&argvars[0], 0);

  if (buf != ((void*)0) && varname != ((void*)0)) {

    buf_T *const save_curbuf = curbuf;
    curbuf = buf;

    if (*varname == '&') {
      if (varname[1] == '\000') {

        dict_T *opts = get_winbuf_options(1);

        if (opts != ((void*)0)) {
          rettv->v_type = VAR_DICT;
          rettv->vval.v_dict = opts;
          opts->dv_refcount++;
          done = 1;
        }
      } else if (get_option_tv(&varname, rettv, 1) == 1) {

        done = 1;
      }
    } else {


      dictitem_T *const v = find_var_in_ht(&curbuf->b_vars->dv_hashtab, 'b',
                                           varname, strlen(varname), 0);
      if (v != ((void*)0)) {
        tv_copy(&v->di_tv, rettv);
        done = 1;
      }
    }


    curbuf = save_curbuf;
  }
  emsg_off--;

f_getbufvar_end:
  if (!done && argvars[2].v_type != VAR_UNKNOWN) {

    tv_copy(&argvars[2], rettv);
  }
}




static void f_getchar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  varnumber_T n;
  _Bool error = 0;

  no_mapping++;
  for (;; ) {


    ui_cursor_goto(msg_row, msg_col);

    if (argvars[0].v_type == VAR_UNKNOWN) {

      if (!(char_avail() || using_script() || input_available())) {
        input_enable_events();
        (void)os_inchar(((void*)0), 0, -1, 0);
        input_disable_events();
        if (!multiqueue_empty(main_loop.events)) {
          multiqueue_process_events(main_loop.events);
          continue;
        }
      }
      n = safe_vgetc();
    } else if (tv_get_number_chk(&argvars[0], &error) == 1) {

      n = vpeekc_any();
    } else if (error || vpeekc_any() == '\000') {

      n = 0;
    } else {

      n = safe_vgetc();
    }

    if (n == (-((253) + ((int)(KE_IGNORE) << 8)))) {
      continue;
    }
    break;
  }
  no_mapping--;

  vimvars[VV_MOUSE_WIN].vv_di.di_tv.vval.v_number = 0;
  vimvars[VV_MOUSE_WINID].vv_di.di_tv.vval.v_number = 0;
  vimvars[VV_MOUSE_LNUM].vv_di.di_tv.vval.v_number = 0;
  vimvars[VV_MOUSE_COL].vv_di.di_tv.vval.v_number = 0;

  rettv->vval.v_number = n;
  if (((n) < 0) || mod_mask != 0) {
    char_u temp[10];
    int i = 0;


    if (mod_mask != 0) {
      temp[i++] = (0x80);
      temp[i++] = 252;
      temp[i++] = mod_mask;
    }
    if (((n) < 0)) {
      temp[i++] = (0x80);
      temp[i++] = ((n) == (0x80) ? 254 : (n) == '\000' ? 255 : ((-(n)) & 0xff));
      temp[i++] = (((n) == (0x80) || (n) == '\000') ? ('X') : (((unsigned)(-(n)) >> 8) & 0xff));
    } else if (1)
      i += (*utf_char2bytes)(n, temp + i);
    else
      temp[i++] = n;
    temp[i++] = '\000';
    rettv->v_type = VAR_STRING;
    rettv->vval.v_string = vim_strsave(temp);

    if (is_mouse_key(n)) {
      int row = mouse_row;
      int col = mouse_col;
      win_T *win;
      linenr_T lnum;
      win_T *wp;
      int winnr = 1;

      if (row >= 0 && col >= 0) {


        win = mouse_find_win(mouse_grid, &row, &col);
        (void)mouse_comp_pos(win, &row, &col, &lnum);
        for (wp = firstwin; wp != win; wp = wp->w_next)
          ++winnr;
        vimvars[VV_MOUSE_WIN].vv_di.di_tv.vval.v_number = winnr;
        vimvars[VV_MOUSE_WINID].vv_di.di_tv.vval.v_number = wp->handle;
        vimvars[VV_MOUSE_LNUM].vv_di.di_tv.vval.v_number = lnum;
        vimvars[VV_MOUSE_COL].vv_di.di_tv.vval.v_number = col + 1;
      }
    }
  }
}




static void f_getcharmod(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = mod_mask;
}




static void f_getcharsearch(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  tv_dict_alloc_ret(rettv);

  dict_T *dict = rettv->vval.v_dict;

  tv_dict_add_str(dict, ("char"), (sizeof("char") - 1), last_csearch());
  tv_dict_add_nr(dict, ("forward"), (sizeof("forward") - 1), last_csearch_forward());
  tv_dict_add_nr(dict, ("until"), (sizeof("until") - 1), last_csearch_until());
}




static void f_getcmdline(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = get_cmdline_str();
}




static void f_getcmdpos(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = get_cmdline_pos() + 1;
}




static void f_getcmdtype(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = xmallocz(1);
  rettv->vval.v_string[0] = get_cmdline_type();
}




static void f_getcmdwintype(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);
  rettv->vval.v_string = xmallocz(1);
  rettv->vval.v_string[0] = cmdwin_type;
}


static void f_getcompletion(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char_u *pat;
  expand_T xpc;
  _Bool filtered = 0;
  int options = 0x40 | 0x04 | 0x10
          | 0x08;

  if (argvars[2].v_type != VAR_UNKNOWN) {
    filtered = (_Bool)tv_get_number_chk(&argvars[2], ((void*)0));
  }

  if (p_wic) {
    options |= 0x100;
  }


  if (!filtered) {
    options |= 0x20;
  }

  if (argvars[0].v_type != VAR_STRING || argvars[1].v_type != VAR_STRING) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }

  if (strcmp(tv_get_string(&argvars[1]), "cmdline") == 0) {
    set_one_cmd_context(&xpc, tv_get_string(&argvars[0]));
    xpc.xp_pattern_len = (int)strlen((char *)(xpc.xp_pattern));
    goto theend;
  }

  ExpandInit(&xpc);
  xpc.xp_pattern = (char_u *)tv_get_string(&argvars[0]);
  xpc.xp_pattern_len = (int)strlen((char *)(xpc.xp_pattern));
  xpc.xp_context = cmdcomplete_str_to_type(
      (char_u *)tv_get_string(&argvars[1]));
  if (xpc.xp_context == EXPAND_NOTHING) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (argvars[1].vval.v_string));
    return;
  }

  if (xpc.xp_context == EXPAND_MENUS) {
    set_context_in_menu_cmd(&xpc, (char_u *)"menu", xpc.xp_pattern, 0);
    xpc.xp_pattern_len = (int)strlen((char *)(xpc.xp_pattern));
  }

  if (xpc.xp_context == EXPAND_CSCOPE) {
    set_context_in_cscope_cmd(&xpc, (const char *)xpc.xp_pattern, CMD_cscope);
    xpc.xp_pattern_len = (int)strlen((char *)(xpc.xp_pattern));
  }

  if (xpc.xp_context == EXPAND_SIGN) {
    set_context_in_sign_cmd(&xpc, xpc.xp_pattern);
    xpc.xp_pattern_len = (int)strlen((char *)(xpc.xp_pattern));
  }

theend:
  pat = addstar(xpc.xp_pattern, xpc.xp_pattern_len, xpc.xp_context);
  tv_list_alloc_ret(rettv);
  ExpandOne(&xpc, pat, ((void*)0), options, 8);

  for (int i = 0; i < xpc.xp_numfiles; i++) {
    tv_list_append_string(rettv->vval.v_list, (const char *)xpc.xp_files[i],
                          -1);
  }
  xfree(pat);
  ExpandCleanup(&xpc);
}
# 9647 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static void f_getcwd(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{

  CdScope scope = kCdScopeInvalid;



  int scope_number[] = {
    [kCdScopeWindow] = 0,
    [kCdScopeTab ] = 0,
  };

  char_u *cwd = ((void*)0);
  char_u *from = ((void*)0);

  tabpage_T *tp = curtab;
  win_T *win = curwin;

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);


  for (int i = kCdScopeWindow; i < kCdScopeGlobal; i++) {

    if (argvars[i].v_type == VAR_UNKNOWN) {
      break;
    }
    if (argvars[i].v_type != VAR_NUMBER) {
      emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
      return;
    }
    scope_number[i] = argvars[i].vval.v_number;

    if (scope_number[i] < -1) {
      emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
      return;
    }

    if (scope_number[i] >= 0 && scope == kCdScopeInvalid) {

      scope = i;
    } else if (scope_number[i] < 0) {
      scope = i + 1;
    }
  }


  if (scope == kCdScopeInvalid) {
    scope = kCdScopeWindow;
  }


  if (scope_number[kCdScopeTab] > 0) {
    tp = find_tabpage(scope_number[kCdScopeTab]);
    if (!tp) {
      emsg((char_u *)(libintl_gettext((char *)("E5000: Cannot find tab number."))));
      return;
    }
  }


  if (scope_number[kCdScopeWindow] >= 0) {
    if (scope_number[kCdScopeTab] < 0) {
      emsg((char_u *)(libintl_gettext((char *)("E5001: Higher scope cannot be -1 if lower scope is >= 0."))));
      return;
    }

    if (scope_number[kCdScopeWindow] > 0) {
      win = find_win_by_nr(&argvars[0], tp);
      if (!win) {
        emsg((char_u *)(libintl_gettext((char *)("E5002: Cannot find window number."))));
        return;
      }
    }
  }

  cwd = xmalloc(1024);

  switch (scope) {
    case kCdScopeWindow:
      ((void)0);
      from = win->w_localdir;
      if (from) {
        break;
      }

    case kCdScopeTab:
      ((void)0);
      from = tp->tp_localdir;
      if (from) {
        break;
      }

    case kCdScopeGlobal:
      if (globaldir) {
        from = globaldir;
      } else if (os_dirname(cwd, 1024) == 0) {
        from = (char_u *)"";
      }
      break;
    case kCdScopeInvalid:
      ((void)0);
  }

  if (from) {
    xstrlcpy((char *)cwd, (char *)from, 1024);
  }

  rettv->vval.v_string = vim_strsave(cwd);




  xfree(cwd);
}




static void f_getfontname(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);
}




static void f_getfperm(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char *perm = ((void*)0);
  char_u flags[] = "rwx";

  const char *filename = tv_get_string(&argvars[0]);
  int32_t file_perm = os_getperm(filename);
  if (file_perm >= 0) {
    perm = xstrdup("---------");
    for (int i = 0; i < 9; i++) {
      if (file_perm & (1 << (8 - i))) {
        perm[i] = flags[i % 3];
      }
    }
  }
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = (char_u *)perm;
}




static void f_getfsize(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *fname = tv_get_string(&argvars[0]);

  rettv->v_type = VAR_NUMBER;

  FileInfo file_info;
  if (os_fileinfo(fname, &file_info)) {
    uint64_t filesize = os_fileinfo_size(&file_info);
    if (os_isdir((const char_u *)fname)) {
      rettv->vval.v_number = 0;
    } else {
      rettv->vval.v_number = (varnumber_T)filesize;


      if ((uint64_t)rettv->vval.v_number != filesize) {
        rettv->vval.v_number = -2;
      }
    }
  } else {
    rettv->vval.v_number = -1;
  }
}




static void f_getftime(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *fname = tv_get_string(&argvars[0]);

  FileInfo file_info;
  if (os_fileinfo(fname, &file_info)) {
    rettv->vval.v_number = (varnumber_T)file_info.stat.st_mtim.tv_sec;
  } else {
    rettv->vval.v_number = -1;
  }
}




static void f_getftype(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char_u *type = ((void*)0);
  char *t;

  const char *fname = tv_get_string(&argvars[0]);

  rettv->v_type = VAR_STRING;
  FileInfo file_info;
  if (os_fileinfo_link(fname, &file_info)) {
    uint64_t mode = file_info.stat.st_mode;

    if ((((mode) & 0170000) == 0100000))
      t = "file";
    else if ((((mode) & 0170000) == 0040000))
      t = "dir";

    else if ((((mode) & 0170000) == 0120000))
      t = "link";


    else if ((((mode) & 0170000) == 0060000))
      t = "bdev";


    else if ((((mode) & 0170000) == 0020000))
      t = "cdev";


    else if ((((mode) & 0170000) == 0010000))
      t = "fifo";


    else if ((((mode) & 0170000) == 0140000))
      t = "fifo";

    else
      t = "other";
# 9907 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
    type = vim_strsave((char_u *)t);
  }
  rettv->vval.v_string = type;
}




static void f_getline(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  linenr_T end;
  _Bool retlist;

  const linenr_T lnum = tv_get_lnum(argvars);
  if (argvars[1].v_type == VAR_UNKNOWN) {
    end = 0;
    retlist = 0;
  } else {
    end = tv_get_lnum(&argvars[1]);
    retlist = 1;
  }

  get_buffer_lines(curbuf, lnum, end, retlist, rettv);
}

static void get_qf_loc_list(int is_qf, win_T *wp, typval_T *what_arg,
                            typval_T *rettv)
{
  if (what_arg->v_type == VAR_UNKNOWN) {
    tv_list_alloc_ret(rettv);
    if (is_qf || wp != ((void*)0)) {
      (void)get_errorlist(wp, -1, rettv->vval.v_list);
    }
  } else {
    tv_dict_alloc_ret(rettv);
    if (is_qf || wp != ((void*)0)) {
      if (what_arg->v_type == VAR_DICT) {
        dict_T *d = what_arg->vval.v_dict;

        if (d != ((void*)0)) {
          get_errorlist_properties(wp, d, rettv->vval.v_dict);
        }
      } else {
        emsg((char_u *)(libintl_gettext((char *)(e_dictreq))));
      }
    }
  }
}


static void f_getloclist(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  win_T *wp = find_win_by_nr(&argvars[0], ((void*)0));
  get_qf_loc_list(0, wp, &argvars[1], rettv);
}




static void f_getmatches(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  matchitem_T *cur = curwin->w_match_head;
  int i;

  tv_list_alloc_ret(rettv);
  while (cur != ((void*)0)) {
    dict_T *dict = tv_dict_alloc();
    if (cur->match.regprog == ((void*)0)) {

      for (i = 0; i < 8; ++i) {
        llpos_T *llpos;
        char buf[6];

        llpos = &cur->pos.pos[i];
        if (llpos->lnum == 0) {
          break;
        }
        list_T *l = tv_list_alloc();
        tv_list_append_number(l, (varnumber_T)llpos->lnum);
        if (llpos->col > 0) {
          tv_list_append_number(l, (varnumber_T)llpos->col);
          tv_list_append_number(l, (varnumber_T)llpos->len);
        }
        int len = __builtin___snprintf_chk (buf, sizeof(buf), 0, __builtin_object_size (buf, 1 > 1 ? 1 : 0), "pos%d", i + 1);
        ((void)0);
        tv_dict_add_list(dict, buf, (size_t)len, l);
      }
    } else {
      tv_dict_add_str(dict, ("pattern"), (sizeof("pattern") - 1), (const char *)cur->pattern);
    }
    tv_dict_add_str(dict, ("group"), (sizeof("group") - 1),
                    (const char *)syn_id2name(cur->hlg_id));
    tv_dict_add_nr(dict, ("priority"), (sizeof("priority") - 1), (varnumber_T)cur->priority);
    tv_dict_add_nr(dict, ("id"), (sizeof("id") - 1), (varnumber_T)cur->id);

    if (cur->conceal_char) {
      char buf[21 + 1];

      buf[(*utf_char2bytes)((int)cur->conceal_char, (char_u *)buf)] = '\000';
      tv_dict_add_str(dict, ("conceal"), (sizeof("conceal") - 1), buf);
    }

    tv_list_append_dict(rettv->vval.v_list, dict);
    cur = cur->next;
  }
}




static void f_getpid(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = os_get_pid();
}

static void getpos_both(typval_T *argvars, typval_T *rettv, _Bool getcurpos)
{
  pos_T *fp;
  int fnum = -1;

  if (getcurpos) {
    fp = &curwin->w_cursor;
  } else {
    fp = var2fpos(&argvars[0], 1, &fnum);
  }

  list_T *l = tv_list_alloc_ret(rettv);
  tv_list_append_number(l, (fnum != -1) ? (varnumber_T)fnum : (varnumber_T)0);
  tv_list_append_number(l, ((fp != ((void*)0))
                            ? (varnumber_T)fp->lnum
                            : (varnumber_T)0));
  tv_list_append_number(
      l, ((fp != ((void*)0))
          ? (varnumber_T)(fp->col == 0x7fffffff ? 0x7fffffff : fp->col + 1)
          : (varnumber_T)0));
  tv_list_append_number(
      l, (fp != ((void*)0)) ? (varnumber_T)fp->coladd : (varnumber_T)0);
  if (getcurpos) {
    update_curswant();
    tv_list_append_number(l, (curwin->w_curswant == 0x7fffffff
                              ? (varnumber_T)0x7fffffff
                              : (varnumber_T)curwin->w_curswant + 1));
  }
}




static void f_getcurpos(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  getpos_both(argvars, rettv, 1);
}




static void f_getpos(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  getpos_both(argvars, rettv, 0);
}


static void f_getqflist(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  get_qf_loc_list(1, ((void*)0), &argvars[0], rettv);
}


static void f_getreg(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *strregname;
  int arg2 = 0;
  _Bool return_list = 0;
  _Bool error = 0;

  if (argvars[0].v_type != VAR_UNKNOWN) {
    strregname = tv_get_string_chk(&argvars[0]);
    error = strregname == ((void*)0);
    if (argvars[1].v_type != VAR_UNKNOWN) {
      arg2 = tv_get_number_chk(&argvars[1], &error);
      if (!error && argvars[2].v_type != VAR_UNKNOWN) {
        return_list = tv_get_number_chk(&argvars[2], &error);
      }
    }
  } else {
    strregname = (const char *)vimvars[VV_REG].vv_di.di_tv.vval.v_string;
  }

  if (error) {
    return;
  }

  int regname = (uint8_t)(strregname == ((void*)0) ? '"' : *strregname);
  if (regname == 0) {
    regname = '"';
  }

  if (return_list) {
    rettv->v_type = VAR_LIST;
    rettv->vval.v_list =
      get_reg_contents(regname, (arg2 ? kGRegExprSrc : 0) | kGRegList);
    if (rettv->vval.v_list == ((void*)0)) {
      rettv->vval.v_list = tv_list_alloc();
    }
    tv_list_ref(rettv->vval.v_list);
  } else {
    rettv->v_type = VAR_STRING;
    rettv->vval.v_string = get_reg_contents(regname, arg2 ? kGRegExprSrc : 0);
  }
}




static void f_getregtype(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *strregname;

  if (argvars[0].v_type != VAR_UNKNOWN) {
    strregname = tv_get_string_chk(&argvars[0]);
    if (strregname == ((void*)0)) {
      rettv->v_type = VAR_STRING;
      rettv->vval.v_string = ((void*)0);
      return;
    }
  } else {

    strregname = (const char *)vimvars[VV_REG].vv_di.di_tv.vval.v_string;
  }

  int regname = (uint8_t)(strregname == ((void*)0) ? '"' : *strregname);
  if (regname == 0) {
    regname = '"';
  }

  colnr_T reglen = 0;
  char buf[NUMBUFLEN + 2];
  MotionType reg_type = get_reg_type(regname, &reglen);
  format_reg_type(reg_type, reglen, buf, ((sizeof(buf)/sizeof((buf)[0])) / ((size_t)(!(sizeof(buf) % sizeof((buf)[0]))))));

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = (char_u *)xstrdup(buf);
}



static dict_T *get_tabpage_info(tabpage_T *tp, int tp_idx)
{
  dict_T *const dict = tv_dict_alloc();

  tv_dict_add_nr(dict, ("tabnr"), (sizeof("tabnr") - 1), tp_idx);

  list_T *const l = tv_list_alloc();
  for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; wp != ((void*)0); wp = wp->w_next) {
    tv_list_append_number(l, (varnumber_T)wp->handle);
  }
  tv_dict_add_list(dict, ("windows"), (sizeof("windows") - 1), l);


  tv_dict_add_dict(dict, ("variables"), (sizeof("variables") - 1), tp->tp_vars);

  return dict;
}


static void f_gettabinfo(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  tabpage_T *tparg = ((void*)0);

  tv_list_alloc_ret(rettv);

  if (argvars[0].v_type != VAR_UNKNOWN) {

    tparg = find_tabpage((int)tv_get_number_chk(&argvars[0], ((void*)0)));
    if (tparg == ((void*)0)) {
      return;
    }
  }


  int tpnr = 0;
  for (tabpage_T *tp = first_tabpage; tp != ((void*)0); tp = tp->tp_next) {
    tpnr++;
    if (tparg != ((void*)0) && tp != tparg) {
      continue;
    }
    dict_T *const d = get_tabpage_info(tp, tpnr);
    tv_list_append_dict(rettv->vval.v_list, d);
    if (tparg != ((void*)0)) {
      return;
    }
  }
}




static void f_gettabvar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  win_T *oldcurwin;
  tabpage_T *tp, *oldtabpage;
  dictitem_T *v;
  _Bool done = 0;

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);

  const char *const varname = tv_get_string_chk(&argvars[1]);
  tp = find_tabpage((int)tv_get_number_chk(&argvars[0], ((void*)0)));
  if (tp != ((void*)0) && varname != ((void*)0)) {


    win_T *window = tp->tp_firstwin == ((void*)0) ? firstwin : tp->tp_firstwin;
    if (switch_win(&oldcurwin, &oldtabpage, window, tp, 1) == 1) {


      v = find_var_in_ht(&tp->tp_vars->dv_hashtab, 't',
                         varname, strlen(varname), 0);
      if (v != ((void*)0)) {
        tv_copy(&v->di_tv, rettv);
        done = 1;
      }
    }


    restore_win(oldcurwin, oldtabpage, 1);
  }

  if (!done && argvars[2].v_type != VAR_UNKNOWN) {
    tv_copy(&argvars[2], rettv);
  }
}




static void f_gettabwinvar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  getwinvar(argvars, rettv, 1);
}


static dict_T *get_win_info(win_T *wp, int16_t tpnr, int16_t winnr)
{
  dict_T *const dict = tv_dict_alloc();

  tv_dict_add_nr(dict, ("tabnr"), (sizeof("tabnr") - 1), tpnr);
  tv_dict_add_nr(dict, ("winnr"), (sizeof("winnr") - 1), winnr);
  tv_dict_add_nr(dict, ("winid"), (sizeof("winid") - 1), wp->handle);
  tv_dict_add_nr(dict, ("height"), (sizeof("height") - 1), wp->w_height);
  tv_dict_add_nr(dict, ("width"), (sizeof("width") - 1), wp->w_width);
  tv_dict_add_nr(dict, ("bufnr"), (sizeof("bufnr") - 1), wp->w_buffer->handle);

  tv_dict_add_nr(dict, ("quickfix"), (sizeof("quickfix") - 1), bt_quickfix(wp->w_buffer));
  tv_dict_add_nr(dict, ("loclist"), (sizeof("loclist") - 1),
                 (bt_quickfix(wp->w_buffer) && wp->w_llist_ref != ((void*)0)));


  tv_dict_add_dict(dict, ("variables"), (sizeof("variables") - 1), wp->w_vars);

  return dict;
}


static void f_getwininfo(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  win_T *wparg = ((void*)0);

  tv_list_alloc_ret(rettv);

  if (argvars[0].v_type != VAR_UNKNOWN) {
    wparg = win_id2wp(argvars);
    if (wparg == ((void*)0)) {
      return;
    }
  }



  int16_t tabnr = 0;
  for (tabpage_T *tp = first_tabpage; tp != ((void*)0); tp = tp->tp_next) {
    tabnr++;
    int16_t winnr = 0;
    for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; wp != ((void*)0); wp = wp->w_next) {
      if (wparg != ((void*)0) && wp != wparg) {
        continue;
      }
      winnr++;
      dict_T *const d = get_win_info(wp, tabnr, winnr);
      tv_list_append_dict(rettv->vval.v_list, d);
      if (wparg != ((void*)0)) {

        return;
      }
    }
  }
}




static void f_getwinposx(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = -1;
}




static void f_getwinposy(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = -1;
}




static win_T *
find_win_by_nr (
    typval_T *vp,
    tabpage_T *tp
)
{
  int nr = (int)tv_get_number_chk(vp, ((void*)0));

  if (nr < 0) {
    return ((void*)0);
  }

  if (nr == 0) {
    return curwin;
  }


  if (tp == ((void*)0)) {
     tp = curtab;
  }

  for (win_T *wp = ((tp) == curtab) ? firstwin : (tp)->tp_firstwin; wp != ((void*)0); wp = wp->w_next) {
    if (nr >= 1000) {
      if (wp->handle == nr) {
        return wp;
      }
    } else if (--nr <= 0) {
      return wp;
    }
  }
  return ((void*)0);
}


static win_T *find_tabwin(typval_T *wvp, typval_T *tvp)
{
  win_T *wp = ((void*)0);
  tabpage_T *tp = ((void*)0);

  if (wvp->v_type != VAR_UNKNOWN) {
    if (tvp->v_type != VAR_UNKNOWN) {
      long n = tv_get_number(tvp);
      if (n >= 0) {
        tp = find_tabpage(n);
      }
    } else {
      tp = curtab;
    }

    if (tp != ((void*)0)) {
      wp = find_win_by_nr(wvp, tp);
    }
  } else {
    wp = curwin;
  }

  return wp;
}


static void f_getwinvar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  getwinvar(argvars, rettv, 0);
}




static void
getwinvar (
    typval_T *argvars,
    typval_T *rettv,
    int off
)
{
  win_T *win, *oldcurwin;
  dictitem_T *v;
  tabpage_T *tp = ((void*)0);
  tabpage_T *oldtabpage = ((void*)0);
  _Bool done = 0;

  if (off == 1) {
    tp = find_tabpage((int)tv_get_number_chk(&argvars[0], ((void*)0)));
  } else {
    tp = curtab;
  }
  win = find_win_by_nr(&argvars[off], tp);
  const char *varname = tv_get_string_chk(&argvars[off + 1]);

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);

  emsg_off++;
  if (win != ((void*)0) && varname != ((void*)0)) {



    _Bool need_switch_win = tp != curtab || win != curwin;
    if (!need_switch_win
        || switch_win(&oldcurwin, &oldtabpage, win, tp, 1) == 1) {
      if (*varname == '&') {
        if (varname[1] == '\000') {

          dict_T *opts = get_winbuf_options(0);

          if (opts != ((void*)0)) {
            rettv->v_type = VAR_DICT;
            rettv->vval.v_dict = opts;
            opts->dv_refcount++;
            done = 1;
          }
        } else if (get_option_tv(&varname, rettv, 1) == 1) {

          done = 1;
        }
      } else {


        v = find_var_in_ht(&win->w_vars->dv_hashtab, 'w', varname,
                           strlen(varname), 0);
        if (v != ((void*)0)) {
          tv_copy(&v->di_tv, rettv);
          done = 1;
        }
      }
    }

    if (need_switch_win) {

      restore_win(oldcurwin, oldtabpage, 1);
    }
  }
  emsg_off--;

  if (!done && argvars[off + 2].v_type != VAR_UNKNOWN) {

    tv_copy(&argvars[off + 2], rettv);
  }
}




static void f_glob(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int options = 0x40|0x04;
  expand_T xpc;
  _Bool error = 0;



  rettv->v_type = VAR_STRING;
  if (argvars[1].v_type != VAR_UNKNOWN) {
    if (tv_get_number_chk(&argvars[1], &error)) {
      options |= 0x20;
    }
    if (argvars[2].v_type != VAR_UNKNOWN) {
      if (tv_get_number_chk(&argvars[2], &error)) {
        rettv->v_type = VAR_LIST;
        rettv->vval.v_list = ((void*)0);
      }
      if (argvars[3].v_type != VAR_UNKNOWN
          && tv_get_number_chk(&argvars[3], &error)) {
        options |= 0x200;
      }
    }
  }
  if (!error) {
    ExpandInit(&xpc);
    xpc.xp_context = EXPAND_FILES;
    if (p_wic)
      options += 0x100;
    if (rettv->v_type == VAR_STRING) {
      rettv->vval.v_string = ExpandOne(
          &xpc, (char_u *)tv_get_string(&argvars[0]), ((void*)0), options, 6);
    } else {
      tv_list_alloc_ret(rettv);
      ExpandOne(&xpc, (char_u *)tv_get_string(&argvars[0]), ((void*)0), options,
                8);
      for (int i = 0; i < xpc.xp_numfiles; i++) {
        tv_list_append_string(rettv->vval.v_list, (const char *)xpc.xp_files[i],
                              -1);
      }
      ExpandCleanup(&xpc);
    }
  } else
    rettv->vval.v_string = ((void*)0);
}


static void f_globpath(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int flags = 0;
  _Bool error = 0;


  rettv->v_type = VAR_STRING;

  if (argvars[2].v_type != VAR_UNKNOWN) {


    if (tv_get_number_chk(&argvars[2], &error)) {
      flags |= 0x20;
    }

    if (argvars[3].v_type != VAR_UNKNOWN) {
      if (tv_get_number_chk(&argvars[3], &error)) {
        rettv->v_type = VAR_LIST;
        rettv->vval.v_list = ((void*)0);
      }
      if (argvars[4].v_type != VAR_UNKNOWN
          && tv_get_number_chk(&argvars[4], &error)) {
        flags |= 0x200;
      }
    }
  }

  char buf1[NUMBUFLEN];
  const char *const file = tv_get_string_buf_chk(&argvars[1], buf1);
  if (file != ((void*)0) && !error) {
    garray_T ga;
    ga_init(&ga, (int)sizeof(char_u *), 10);
    globpath((char_u *)tv_get_string(&argvars[0]), (char_u *)file, &ga, flags);

    if (rettv->v_type == VAR_STRING) {
      rettv->vval.v_string = ga_concat_strings_sep(&ga, "\n");
    } else {
      tv_list_alloc_ret(rettv);
      for (int i = 0; i < ga.ga_len; i++) {
        tv_list_append_string(rettv->vval.v_list,
                              ((const char **)(ga.ga_data))[i], -1);
      }
    }

    ga_clear_strings(&ga);
  } else {
    rettv->vval.v_string = ((void*)0);
  }
}


static void f_glob2regpat(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *const pat = tv_get_string_chk(&argvars[0]);

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((pat == ((void*)0))
                          ? ((void*)0)
                          : file_pat_to_reg_pat((char_u *)pat, ((void*)0), ((void*)0),
                                                0));
}


static void f_has(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  static const char *const has_list[] = {

    "unix",







    "fname_case",

    "acl",

    "arabic",
    "autocmd",
    "browsefilter",
    "byte_offset",
    "cindent",
    "cmdline_compl",
    "cmdline_hist",
    "comments",
    "conceal",
    "cscope",
    "cursorbind",
    "cursorshape",



    "dialog_con",
    "diff",
    "digraphs",
    "eval",
    "ex_extra",
    "extra_search",
    "farsi",
    "file_in_path",
    "filterpipe",
    "find_in_path",
    "float",
    "folding",

    "fork",

    "gettext",

    "iconv",

    "insert_expand",
    "jumplist",
    "keymap",
    "lambda",
    "langmap",
    "libcall",
    "linebreak",
    "lispindent",
    "listcmds",
    "localmap",

    "mac",
    "macunix",

    "menu",
    "mksession",
    "modify_fname",
    "mouse",
    "multi_byte",
    "multi_lang",
    "num64",
    "packages",
    "path_extra",
    "persistent_undo",
    "postscript",
    "printer",
    "profile",
    "reltime",
    "quickfix",
    "rightleft",
    "scrollbind",
    "showcmd",
    "cmdline_info",
    "shada",
    "signs",
    "smartindent",
    "startuptime",
    "statusline",
    "spell",
    "syntax",



    "tablineat",
    "tag_binary",
    "tag_old_static",
    "termguicolors",
    "termresponse",
    "textobjects",
    "timers",
    "title",
    "user-commands",
    "user_commands",
    "vertsplit",
    "virtualedit",
    "visual",
    "visualextra",
    "vreplace",
    "wildignore",
    "wildmenu",
    "windows",
    "winaltkeys",
    "writebackup",
    "nvim",
  };

  _Bool n = 0;
  const char *const name = tv_get_string(&argvars[0]);
  for (size_t i = 0; i < ((sizeof(has_list)/sizeof((has_list)[0])) / ((size_t)(!(sizeof(has_list) % sizeof((has_list)[0]))))); i++) {
    if (strcasecmp((char *)(name), (char *)(has_list[i])) == 0) {
      n = 1;
      break;
    }
  }

  if (!n) {
    if (strncasecmp((char *)(name), (char *)("patch"), (size_t)(5)) == 0) {
      if (name[5] == '-'
          && strlen(name) >= 11
          && ascii_isdigit(name[6])
          && ascii_isdigit(name[8])
          && ascii_isdigit(name[10])) {
        int major = atoi(name + 6);
        int minor = atoi(name + 8);


        n = (major < 8
             || (major == 8
                 && (minor < 0
                     || (minor == 0
                         && has_vim_patch(atoi(name + 10))))));
      } else {
        n = has_vim_patch(atoi(name + 5));
      }
    } else if (strncasecmp((char *)(name), (char *)("nvim-"), (size_t)(5)) == 0) {

      n = has_nvim_version(name + 5);
    } else if (strcasecmp((char *)(name), (char *)("vim_starting")) == 0) {
      n = (starting != 0);
    } else if (strcasecmp((char *)(name), (char *)("ttyin")) == 0) {
      n = stdin_isatty;
    } else if (strcasecmp((char *)(name), (char *)("ttyout")) == 0) {
      n = stdout_isatty;
    } else if (strcasecmp((char *)(name), (char *)("multi_byte_encoding")) == 0) {
      n = 1 != 0;




    } else if (strcasecmp((char *)(name), (char *)("syntax_items")) == 0) {
      n = syntax_present(curwin);

    } else if (strcasecmp((char *)(name), (char *)("unnamedplus")) == 0) {
      n = eval_has_provider("clipboard");

    }
  }

  if (!n && eval_has_provider(name)) {
    n = 1;
  }

  rettv->vval.v_number = n;
}




static void f_has_key(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (argvars[0].v_type != VAR_DICT) {
    emsg((char_u *)(libintl_gettext((char *)(e_dictreq))));
    return;
  }
  if (argvars[0].vval.v_dict == ((void*)0))
    return;

  rettv->vval.v_number = tv_dict_find(argvars[0].vval.v_dict,
                                      tv_get_string(&argvars[1]),
                                      -1) != ((void*)0);
}
# 10780 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static void f_haslocaldir(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{

  CdScope scope = kCdScopeInvalid;



  int scope_number[] = {
    [kCdScopeWindow] = 0,
    [kCdScopeTab ] = 0,
  };

  tabpage_T *tp = curtab;
  win_T *win = curwin;

  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;


  for (int i = kCdScopeWindow; i < kCdScopeGlobal; i++) {
    if (argvars[i].v_type == VAR_UNKNOWN) {
      break;
    }
    if (argvars[i].v_type != VAR_NUMBER) {
      emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
      return;
    }
    scope_number[i] = argvars[i].vval.v_number;
    if (scope_number[i] < -1) {
      emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
      return;
    }

    if (scope_number[i] >= 0 && scope == kCdScopeInvalid) {

      scope = i;
    } else if (scope_number[i] < 0) {
      scope = i + 1;
    }
  }


  if (scope == kCdScopeInvalid) {
    scope = kCdScopeWindow;
  }


  if (scope_number[kCdScopeTab] > 0) {
    tp = find_tabpage(scope_number[kCdScopeTab]);
    if (!tp) {
      emsg((char_u *)(libintl_gettext((char *)("E5000: Cannot find tab number."))));
      return;
    }
  }


  if (scope_number[kCdScopeWindow] >= 0) {
    if (scope_number[kCdScopeTab] < 0) {
      emsg((char_u *)(libintl_gettext((char *)("E5001: Higher scope cannot be -1 if lower scope is >= 0."))));
      return;
    }

    if (scope_number[kCdScopeWindow] > 0) {
      win = find_win_by_nr(&argvars[0], tp);
      if (!win) {
        emsg((char_u *)(libintl_gettext((char *)("E5002: Cannot find window number."))));
        return;
      }
    }
  }

  switch (scope) {
    case kCdScopeWindow:
      ((void)0);
      rettv->vval.v_number = win->w_localdir ? 1 : 0;
      break;
    case kCdScopeTab:
      ((void)0);
      rettv->vval.v_number = tp->tp_localdir ? 1 : 0;
      break;
    case kCdScopeGlobal:

      rettv->vval.v_number = 0;
      break;
    case kCdScopeInvalid:

      ((void)0);
  }
}




static void f_hasmapto(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *mode;
  const char *const name = tv_get_string(&argvars[0]);
  _Bool abbr = 0;
  char buf[NUMBUFLEN];
  if (argvars[1].v_type == VAR_UNKNOWN) {
    mode = "nvo";
  } else {
    mode = tv_get_string_buf(&argvars[1], buf);
    if (argvars[2].v_type != VAR_UNKNOWN) {
      abbr = tv_get_number(&argvars[2]);
    }
  }

  if (map_to_exists(name, mode, abbr)) {
    rettv->vval.v_number = 1;
  } else {
    rettv->vval.v_number = 0;
  }
}




static void f_histadd(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  HistoryType histype;

  rettv->vval.v_number = 0;
  if (check_restricted() || check_secure()) {
    return;
  }
  const char *str = tv_get_string_chk(&argvars[0]);
  histype = str != ((void*)0) ? get_histtype(str, strlen(str), 0) : HIST_INVALID;
  if (histype != HIST_INVALID) {
    char buf[NUMBUFLEN];
    str = tv_get_string_buf(&argvars[1], buf);
    if (*str != '\000') {
      init_history();
      add_to_history(histype, (char_u *)str, 0, '\000');
      rettv->vval.v_number = 1;
      return;
    }
  }
}




static void f_histdel(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int n;
  const char *const str = tv_get_string_chk(&argvars[0]);
  if (str == ((void*)0)) {
    n = 0;
  } else if (argvars[1].v_type == VAR_UNKNOWN) {

    n = clr_history(get_histtype(str, strlen(str), 0));
  } else if (argvars[1].v_type == VAR_NUMBER) {

    n = del_history_idx(get_histtype(str, strlen(str), 0),
                        (int)tv_get_number(&argvars[1]));
  } else {

    char buf[NUMBUFLEN];
    n = del_history_entry(get_histtype(str, strlen(str), 0),
                          (char_u *)tv_get_string_buf(&argvars[1], buf));
  }
  rettv->vval.v_number = n;
}




static void f_histget(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  HistoryType type;
  int idx;

  const char *const str = tv_get_string_chk(&argvars[0]);
  if (str == ((void*)0)) {
    rettv->vval.v_string = ((void*)0);
  } else {
    type = get_histtype(str, strlen(str), 0);
    if (argvars[1].v_type == VAR_UNKNOWN) {
      idx = get_history_idx(type);
    } else {
      idx = (int)tv_get_number_chk(&argvars[1], ((void*)0));
    }

    rettv->vval.v_string = vim_strsave(get_history_entry(type, idx));
  }
  rettv->v_type = VAR_STRING;
}




static void f_histnr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int i;

  const char *const history = tv_get_string_chk(&argvars[0]);

  i = history == ((void*)0) ? HIST_CMD - 1 : get_histtype(history, strlen(history),
                                                    0);
  if (i != HIST_INVALID) {
    i = get_history_idx(i);
  } else {
    i = -1;
  }
  rettv->vval.v_number = i;
}




static void f_hlID(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = syn_name2id(
      (const char_u *)tv_get_string(&argvars[0]));
}




static void f_hlexists(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = highlight_exists(
      (const char_u *)tv_get_string(&argvars[0]));
}




static void f_hostname(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char hostname[256];

  os_get_hostname(hostname, 256);
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = vim_strsave((char_u *)hostname);
}




static void f_iconv(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  vimconv_T vimconv;

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);

  const char *const str = tv_get_string(&argvars[0]);
  char buf1[NUMBUFLEN];
  char_u *const from = enc_canonize(enc_skip(
      (char_u *)tv_get_string_buf(&argvars[1], buf1)));
  char buf2[NUMBUFLEN];
  char_u *const to = enc_canonize(enc_skip(
      (char_u *)tv_get_string_buf(&argvars[2], buf2)));
  vimconv.vc_type = CONV_NONE;
  convert_setup(&vimconv, from, to);


  if (vimconv.vc_type == CONV_NONE) {
    rettv->vval.v_string = (char_u *)xstrdup(str);
  } else {
    rettv->vval.v_string = string_convert(&vimconv, (char_u *)str, ((void*)0));
  }

  convert_setup(&vimconv, ((void*)0), ((void*)0));
  xfree(from);
  xfree(to);
}




static void f_indent(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const linenr_T lnum = tv_get_lnum(argvars);
  if (lnum >= 1 && lnum <= curbuf->b_ml.ml_line_count) {
    rettv->vval.v_number = get_indent_lnum(lnum);
  } else {
    rettv->vval.v_number = -1;
  }
}




static void f_index(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  long idx = 0;
  _Bool ic = 0;

  rettv->vval.v_number = -1;
  if (argvars[0].v_type != VAR_LIST) {
    emsg((char_u *)(libintl_gettext((char *)(e_listreq))));
    return;
  }
  list_T *const l = argvars[0].vval.v_list;
  if (l != ((void*)0)) {
    listitem_T *item = tv_list_first(l);
    if (argvars[2].v_type != VAR_UNKNOWN) {
      _Bool error = 0;


      idx = tv_list_uidx(l, tv_get_number_chk(&argvars[2], &error));
      if (error || idx == -1) {
        item = ((void*)0);
      } else {
        item = tv_list_find(l, idx);
        ((void)0);
      }
      if (argvars[3].v_type != VAR_UNKNOWN) {
        ic = !!tv_get_number_chk(&argvars[3], &error);
        if (error) {
          item = ((void*)0);
        }
      }
    }

    for (; item != ((void*)0); item = ((item)->li_next), idx++) {
      if (tv_equal((&(item)->li_tv), &argvars[1], ic, 0)) {
        rettv->vval.v_number = idx;
        break;
      }
    }
  }
}

static int inputsecret_flag = 0;
# 11116 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
void get_user_input(const typval_T *const argvars,
                    typval_T *const rettv, const _Bool inputdialog)
  FUNC_ATTR_NONNULL_ALL
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);

  const char *prompt = "";
  const char *defstr = "";
  const char *cancelreturn = ((void*)0);
  const char *xp_name = ((void*)0);
  Callback input_callback = { .type = kCallbackNone };
  char prompt_buf[NUMBUFLEN];
  char defstr_buf[NUMBUFLEN];
  char cancelreturn_buf[NUMBUFLEN];
  char xp_name_buf[NUMBUFLEN];
  if (argvars[0].v_type == VAR_DICT) {
    if (argvars[1].v_type != VAR_UNKNOWN) {
      emsgf(libintl_gettext((char *)("E5050: {opts} must be the only argument")));
      return;
    }
    dict_T *const dict = argvars[0].vval.v_dict;
    prompt = tv_dict_get_string_buf_chk(dict, ("prompt"), (sizeof("prompt") - 1), prompt_buf, "");
    if (prompt == ((void*)0)) {
      return;
    }
    defstr = tv_dict_get_string_buf_chk(dict, ("default"), (sizeof("default") - 1), defstr_buf, "");
    if (defstr == ((void*)0)) {
      return;
    }
    char def[1] = { 0 };
    cancelreturn = tv_dict_get_string_buf_chk(dict, ("cancelreturn"), (sizeof("cancelreturn") - 1),
                                              cancelreturn_buf, def);
    if (cancelreturn == ((void*)0)) {
      return;
    }
    if (*cancelreturn == '\000') {
      cancelreturn = ((void*)0);
    }
    xp_name = tv_dict_get_string_buf_chk(dict, ("completion"), (sizeof("completion") - 1),
                                         xp_name_buf, def);
    if (xp_name == ((void*)0)) {
      return;
    }
    if (xp_name == def) {
      xp_name = ((void*)0);
    }
    if (!tv_dict_get_callback(dict, ("highlight"), (sizeof("highlight") - 1), &input_callback)) {
      return;
    }
  } else {
    prompt = tv_get_string_buf_chk(&argvars[0], prompt_buf);
    if (prompt == ((void*)0)) {
      return;
    }
    if (argvars[1].v_type != VAR_UNKNOWN) {
      defstr = tv_get_string_buf_chk(&argvars[1], defstr_buf);
      if (defstr == ((void*)0)) {
        return;
      }
      if (argvars[2].v_type != VAR_UNKNOWN) {
        const char *const arg2 = tv_get_string_buf_chk(&argvars[2],
                                                       cancelreturn_buf);
        if (arg2 == ((void*)0)) {
          return;
        }
        if (inputdialog) {
          cancelreturn = arg2;
        } else {
          xp_name = arg2;
        }
      }
    }
  }

  int xp_type = EXPAND_NOTHING;
  char *xp_arg = ((void*)0);
  if (xp_name != ((void*)0)) {

    const int xp_namelen = (int)strlen(xp_name);

    uint32_t argt;
    if (parse_compl_arg((char_u *)xp_name, xp_namelen, &xp_type,
                        &argt, (char_u **)&xp_arg) == 0) {
      return;
    }
  }

  int cmd_silent_save = cmd_silent;

  cmd_silent = 0;


  const char *p = prompt;
  if (!ui_is_external(kUICmdline)) {
    const char *lastnl = strrchr(prompt, '\n');
    if (lastnl != ((void*)0)) {
      p = lastnl+1;
      msg_start();
      msg_clr_eos();
      msg_puts_attr_len(prompt, p - prompt, echo_attr);
      msg_didout = 0;
      msg_starthere();
    }
  }
  cmdline_row = msg_row;

  stuffReadbuffSpec(defstr);

  const int save_ex_normal_busy = ex_normal_busy;
  ex_normal_busy = 0;
  rettv->vval.v_string =
    (char_u *)getcmdline_prompt(inputsecret_flag ? '\000' : '@', p, echo_attr,
                                xp_type, xp_arg, input_callback);
  ex_normal_busy = save_ex_normal_busy;
  callback_free(&input_callback);

  if (rettv->vval.v_string == ((void*)0) && cancelreturn != ((void*)0)) {
    rettv->vval.v_string = (char_u *)xstrdup(cancelreturn);
  }

  xfree(xp_arg);


  need_wait_return = 0;
  msg_didout = 0;
  cmd_silent = cmd_silent_save;
}





static void f_input(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  get_user_input(argvars, rettv, 0);
}




static void f_inputdialog(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  get_user_input(argvars, rettv, 1);
}




static void f_inputlist(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int selected;
  int mouse_used;

  if (argvars[0].v_type != VAR_LIST) {
    emsgf((const char *) (libintl_gettext((char *)(e_listarg))), ("inputlist()"));
    return;
  }

  msg_start();
  msg_row = Rows - 1;
  lines_left = Rows;
  msg_scroll = 1;
  msg_clr_eos();

  do { const list_T *const l_ = (argvars[0].vval.v_list); if (l_ != ((void*)0)) { for (const listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { msg_puts(tv_get_string((&(li)->li_tv))); msg_putchar('\n'); } } } } while (0);





  selected = prompt_for_number(&mouse_used);
  if (mouse_used) {
    selected -= lines_left;
  }

  rettv->vval.v_number = selected;
}


static garray_T ga_userinput = {0, 0, sizeof(tasave_T), 4, ((void*)0)};




static void f_inputrestore(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (!((&ga_userinput)->ga_len <= 0)) {
    --ga_userinput.ga_len;
    restore_typeahead((tasave_T *)(ga_userinput.ga_data)
        + ga_userinput.ga_len);

  } else if (p_verbose > 1) {
    verb_msg((char_u *)libintl_gettext((char *)("called inputrestore() more often than inputsave()")));
    rettv->vval.v_number = 1;
  }
}




static void f_inputsave(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{

  tasave_T *p = ga_append_via_ptr(&ga_userinput, sizeof(tasave_T));
  save_typeahead(p);
}




static void f_inputsecret(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  cmdline_star++;
  inputsecret_flag++;
  f_input(argvars, rettv, ((void*)0));
  cmdline_star--;
  inputsecret_flag--;
}




static void f_insert(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  list_T *l;
  _Bool error = 0;

  if (argvars[0].v_type != VAR_LIST) {
    emsgf((const char *) (libintl_gettext((char *)(e_listarg))), ("insert()"));
  } else if (!tv_check_lock(tv_list_locked((l = argvars[0].vval.v_list)),
                            "insert() argument", (18446744073709551615ULL))) {
    long before = 0;
    if (argvars[2].v_type != VAR_UNKNOWN) {
      before = tv_get_number_chk(&argvars[2], &error);
    }
    if (error) {

      return;
    }

    listitem_T *item = ((void*)0);
    if (before != tv_list_len(l)) {
      item = tv_list_find(l, before);
      if (item == ((void*)0)) {
        emsgf((const char *) (libintl_gettext((char *)(e_listidx))), (int64_t)(before));
        l = ((void*)0);
      }
    }
    if (l != ((void*)0)) {
      tv_list_insert_tv(l, &argvars[1], item);
      tv_copy(&argvars[0], rettv);
    }
  }
}




static void f_invert(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = ~tv_get_number_chk(&argvars[0], ((void*)0));
}




static void f_isdirectory(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = os_isdir((const char_u *)tv_get_string(&argvars[0]));
}




static void f_islocked(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  lval_T lv;
  dictitem_T *di;

  rettv->vval.v_number = -1;
  const char_u *const end = get_lval((char_u *)tv_get_string(&argvars[0]),
                                     ((void*)0),
                                     &lv, 0, 0,
                                     GLV_NO_AUTOLOAD|GLV_READ_ONLY,
                                     2);
  if (end != ((void*)0) && lv.ll_name != ((void*)0)) {
    if (*end != '\000') {
      emsg((char_u *)(libintl_gettext((char *)(e_trailing))));
    } else {
      if (lv.ll_tv == ((void*)0)) {
        di = find_var((const char *)lv.ll_name, lv.ll_name_len, ((void*)0), 1);
        if (di != ((void*)0)) {




          rettv->vval.v_number = ((di->di_flags & DI_FLAGS_LOCK)
                                  || tv_islocked(&di->di_tv));
        }
      } else if (lv.ll_range) {
        emsg((char_u *)(libintl_gettext((char *)("E786: Range not allowed"))));
      } else if (lv.ll_newkey != ((void*)0)) {
        emsgf((const char *) (libintl_gettext((char *)(e_dictkey))), (lv.ll_newkey));
      } else if (lv.ll_list != ((void*)0)) {

        rettv->vval.v_number = tv_islocked((&(lv.ll_li)->li_tv));
      } else {

        rettv->vval.v_number = tv_islocked(&lv.ll_di->di_tv);
      }
    }
  }

  clear_lval(&lv);
}
# 11440 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static void dict_list(typval_T *const tv, typval_T *const rettv,
                      const DictListType what)
{
  if (tv->v_type != VAR_DICT) {
    emsgf(libintl_gettext((char *)(e_dictreq)));
    return;
  }
  if (tv->vval.v_dict == ((void*)0)) {
    return;
  }

  tv_list_alloc_ret(rettv);

  do { hashtab_T *const dihi_ht_ = (&(tv->vval.v_dict)->dv_hashtab); size_t dihi_todo_ = dihi_ht_->ht_used; for (hashitem_T *dihi_ = dihi_ht_->ht_array; dihi_todo_; dihi_++) { if (!((dihi_)->hi_key == ((void*)0) || (dihi_)->hi_key == (char_u *)&hash_removed)) { { { { dictitem_T *const di = ((dictitem_T *)((dihi_)->hi_key - __builtin_offsetof(dictitem_T, di_key))); { { typval_T tv = { .v_lock = VAR_UNLOCKED }; switch (what) { case kDictListKeys: { tv.v_type = VAR_STRING; tv.vval.v_string = vim_strsave(di->di_key); break; } case kDictListValues: { tv_copy(&di->di_tv, &tv); break; } case kDictListItems: { list_T *const sub_l = tv_list_alloc(); tv.v_type = VAR_LIST; tv.vval.v_list = sub_l; tv_list_ref(sub_l); tv_list_append_owned_tv(sub_l, (typval_T) { .v_type = VAR_STRING, .v_lock = VAR_UNLOCKED, .vval.v_string = (char_u *)xstrdup((const char *)di->di_key), }); tv_list_append_tv(sub_l, &di->di_tv); break; } } tv_list_append_owned_tv(rettv->vval.v_list, tv); } } } } } dihi_todo_--; } } } while (0);
# 11487 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
}


static void f_id(typval_T *argvars, typval_T *rettv, FunPtr fptr)
  FUNC_ATTR_NONNULL_ALL
{
  const int len = vim_vsnprintf(((void*)0), 0, "%p", dummy_ap, argvars);
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = xmalloc(len + 1);
  vim_vsnprintf((char *)rettv->vval.v_string, len + 1, "%p", dummy_ap, argvars);
}




static void f_items(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  dict_list(argvars, rettv, 2);
}


static void f_jobpid(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_NUMBER) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }

  Channel *data = find_job(argvars[0].vval.v_number, 1);
  if (!data) {
    return;
  }

  Process *proc = (Process *)&data->stream.proc;
  rettv->vval.v_number = proc->pid;
}


static void f_jobresize(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_NUMBER || argvars[1].v_type != VAR_NUMBER
      || argvars[2].v_type != VAR_NUMBER) {

    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }


  Channel *data = find_job(argvars[0].vval.v_number, 1);
  if (!data) {
    return;
  }

  if (data->stream.proc.type != kProcessTypePty) {
    emsg((char_u *)(libintl_gettext((char *)(e_channotpty))));
    return;
  }

  pty_process_resize(&data->stream.pty, argvars[1].vval.v_number,
                     argvars[2].vval.v_number);
  rettv->vval.v_number = 1;
}

static char **tv_to_argv(typval_T *cmd_tv, const char **cmd, _Bool *executable)
{
  if (cmd_tv->v_type == VAR_STRING) {
    const char *cmd_str = tv_get_string(cmd_tv);
    if (cmd) {
      *cmd = cmd_str;
    }
    return shell_build_argv(cmd_str, ((void*)0));
  }

  if (cmd_tv->v_type != VAR_LIST) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("expected String or List"));
    return ((void*)0);
  }

  list_T *argl = cmd_tv->vval.v_list;
  int argc = tv_list_len(argl);
  if (!argc) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return ((void*)0);
  }

  const char *exe = tv_get_string_chk((&(tv_list_first(argl))->li_tv));
  if (!exe || !os_can_exe((const char_u *)exe, ((void*)0), 1)) {
    if (exe && executable) {
      *executable = 0;
    }
    return ((void*)0);
  }

  if (cmd) {
    *cmd = exe;
  }


  int i = 0;
  char **argv = xcalloc(argc + 1, sizeof(char *));
  do { const list_T *const l_ = (argl); if (l_ != ((void*)0)) { for (const listitem_T *arg = l_->lv_first; arg != ((void*)0); arg = arg->li_next) { { const char *a = tv_get_string_chk((&(arg)->li_tv)); if (!a) { shell_free_argv(argv); return ((void*)0); } argv[i++] = xstrdup(a); } } } } while (0);
# 11611 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  return argv;
}


static void f_jobstart(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  _Bool executable = 1;
  char **argv = tv_to_argv(&argvars[0], ((void*)0), &executable);
  if (!argv) {
    rettv->vval.v_number = executable ? 0 : -1;
    return;
  }

  if (argvars[1].v_type != VAR_DICT && argvars[1].v_type != VAR_UNKNOWN) {

    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("expected dictionary"));
    shell_free_argv(argv);
    return;
  }


  dict_T *job_opts = ((void*)0);
  _Bool detach = 0;
  _Bool rpc = 0;
  _Bool pty = 0;
  CallbackReader on_stdout = ((CallbackReader){ .cb = ((Callback){ .type = kCallbackNone }), .self = ((void*)0), .buffer = { 0, 0, 0, 1, ((void*)0) }, .buffered = 0 }),
                 on_stderr = ((CallbackReader){ .cb = ((Callback){ .type = kCallbackNone }), .self = ((void*)0), .buffer = { 0, 0, 0, 1, ((void*)0) }, .buffered = 0 });
  Callback on_exit = ((Callback){ .type = kCallbackNone });
  char *cwd = ((void*)0);
  if (argvars[1].v_type == VAR_DICT) {
    job_opts = argvars[1].vval.v_dict;

    detach = tv_dict_get_number(job_opts, "detach") != 0;
    rpc = tv_dict_get_number(job_opts, "rpc") != 0;
    pty = tv_dict_get_number(job_opts, "pty") != 0;
    if (pty && rpc) {
      emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("job cannot have both 'pty' and 'rpc' options set"));
      shell_free_argv(argv);
      return;
    }

    char *new_cwd = tv_dict_get_string(job_opts, "cwd", 0);
    if (new_cwd && strlen(new_cwd) > 0) {
      cwd = new_cwd;

      if (!os_isdir((char_u *)cwd)) {
        emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("expected valid directory"));
        shell_free_argv(argv);
        return;
      }
    }

    if (!common_job_callbacks(job_opts, &on_stdout, &on_stderr, &on_exit)) {
      shell_free_argv(argv);
      return;
    }
  }

  uint16_t width = 0, height = 0;
  char *term_name = ((void*)0);

  if (pty) {
    width = (uint16_t)tv_dict_get_number(job_opts, "width");
    height = (uint16_t)tv_dict_get_number(job_opts, "height");
    term_name = tv_dict_get_string(job_opts, "TERM", 1);
  }

  Channel *chan = channel_job_start(argv, on_stdout, on_stderr, on_exit, pty,
                                    rpc, detach, cwd, width, height, term_name,
                                    &rettv->vval.v_number);
  if (chan) {
    channel_create_event(chan, ((void*)0));
  }
}


static void f_jobstop(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_NUMBER) {

    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }


  Channel *data = find_job(argvars[0].vval.v_number, 1);
  if (!data) {
    return;
  }

  process_stop((Process *)&data->stream.proc);
  rettv->vval.v_number = 1;
}


static void f_jobwait(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_LIST || (argvars[1].v_type != VAR_NUMBER
        && argvars[1].v_type != VAR_UNKNOWN)) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }


  list_T *args = argvars[0].vval.v_list;
  Channel **jobs = xcalloc(tv_list_len(args), sizeof(*jobs));

  ui_busy_start();
  MultiQueue *waiting_jobs = multiqueue_new_parent(loop_on_put, &main_loop);




  int i = 0;
  do { const list_T *const l_ = (args); if (l_ != ((void*)0)) { for (const listitem_T *arg = l_->lv_first; arg != ((void*)0); arg = arg->li_next) { { Channel *chan = ((void*)0); if ((&(arg)->li_tv)->v_type != VAR_NUMBER || !(chan = find_job((&(arg)->li_tv)->vval.v_number, 0))) { jobs[i] = ((void*)0); } else { jobs[i] = chan; channel_incref(chan); if (chan->stream.proc.status < 0) { multiqueue_process_events(chan->events); multiqueue_replace_parent(chan->events, waiting_jobs); } } i++; } } } } while (0);
# 11764 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  int remaining = -1;
  uint64_t before = 0;
  if (argvars[1].v_type == VAR_NUMBER && argvars[1].vval.v_number >= 0) {
    remaining = argvars[1].vval.v_number;
    before = os_hrtime();
  }

  for (i = 0; i < tv_list_len(args); i++) {
    if (remaining == 0) {

      break;
    }


    if (jobs[i] == ((void*)0) || jobs[i]->stream.proc.status >= 0) {
      continue;
    }

    int status = process_wait(&jobs[i]->stream.proc, remaining,
                              waiting_jobs);
    if (status < 0) {

      break;
    }
    if (remaining > 0) {
      uint64_t now = os_hrtime();
      remaining -= (int) ((now - before) / 1000000);
      before = now;
      if (remaining <= 0) {
        break;
      }
    }
  }

  list_T *rv = tv_list_alloc();


  for (i = 0; i < tv_list_len(args); i++) {
    if (jobs[i] == ((void*)0)) {
      tv_list_append_number(rv, -3);
      continue;
    }

    multiqueue_process_events(jobs[i]->events);
    multiqueue_replace_parent(jobs[i]->events, main_loop.events);

    tv_list_append_number(rv, jobs[i]->stream.proc.status);
    channel_decref(jobs[i]);
  }

  multiqueue_free(waiting_jobs);
  xfree(jobs);
  ui_busy_stop();
  tv_list_ref(rv);
  rettv->v_type = VAR_LIST;
  rettv->vval.v_list = rv;
}




static void f_join(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (argvars[0].v_type != VAR_LIST) {
    emsg((char_u *)(libintl_gettext((char *)(e_listreq))));
    return;
  }
  const char *const sep = (argvars[1].v_type == VAR_UNKNOWN
                           ? " "
                           : tv_get_string_chk(&argvars[1]));

  rettv->v_type = VAR_STRING;

  if (sep != ((void*)0)) {
    garray_T ga;
    ga_init(&ga, (int)sizeof(char), 80);
    tv_list_join(&ga, argvars[0].vval.v_list, sep);
    ga_append(&ga, '\000');
    rettv->vval.v_string = (char_u *)ga.ga_data;
  } else {
    rettv->vval.v_string = ((void*)0);
  }
}


static void f_json_decode(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char numbuf[NUMBUFLEN];
  const char *s = ((void*)0);
  char *tofree = ((void*)0);
  size_t len;
  if (argvars[0].v_type == VAR_LIST) {
    if (!encode_vim_list_to_buf(argvars[0].vval.v_list, &len, &tofree)) {
      emsg((char_u *)(libintl_gettext((char *)("E474: Failed to convert list to string"))));
      return;
    }
    s = tofree;
    if (s == ((void*)0)) {
      ((void)0);
      s = "";
    }
  } else {
    s = tv_get_string_buf_chk(&argvars[0], numbuf);
    if (s) {
      len = strlen(s);
    } else {
      return;
    }
  }
  if (json_decode_string(s, len, rettv) == 0) {
    emsgf(libintl_gettext((char *)("E474: Failed to parse %.*s")), (int) len, s);
    rettv->v_type = VAR_NUMBER;
    rettv->vval.v_number = 0;
  }
  ((void)0);
  xfree(tofree);
}


static void f_json_encode(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = (char_u *) encode_tv2json(&argvars[0], ((void*)0));
}




static void f_keys(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  dict_list(argvars, rettv, 0);
}




static void f_last_buffer_nr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int n = 0;

  for (buf_T *buf = firstbuf; buf != ((void*)0); buf = buf->b_next) {
    if (n < buf->handle) {
      n = buf->handle;
    }
  }

  rettv->vval.v_number = n;
}




static void f_len(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  switch (argvars[0].v_type) {
    case VAR_STRING:
    case VAR_NUMBER: {
      rettv->vval.v_number = (varnumber_T)strlen(
          tv_get_string(&argvars[0]));
      break;
    }
    case VAR_LIST: {
      rettv->vval.v_number = tv_list_len(argvars[0].vval.v_list);
      break;
    }
    case VAR_DICT: {
      rettv->vval.v_number = tv_dict_len(argvars[0].vval.v_dict);
      break;
    }
    case VAR_UNKNOWN:
    case VAR_SPECIAL:
    case VAR_FLOAT:
    case VAR_PARTIAL:
    case VAR_FUNC: {
      emsg((char_u *)(libintl_gettext((char *)("E701: Invalid type for len()"))));
      break;
    }
  }
}

static void libcall_common(typval_T *argvars, typval_T *rettv, int out_type)
{
  rettv->v_type = out_type;
  if (out_type != VAR_NUMBER) {
    rettv->vval.v_string = ((void*)0);
  }

  if (check_restricted() || check_secure()) {
    return;
  }


  if (argvars[0].v_type != VAR_STRING || argvars[1].v_type != VAR_STRING) {
    return;
  }

  const char *libname = (char *) argvars[0].vval.v_string;
  const char *funcname = (char *) argvars[1].vval.v_string;

  int in_type = argvars[2].v_type;


  char *str_in = (in_type == VAR_STRING)
      ? (char *) argvars[2].vval.v_string : ((void*)0);
  int64_t int_in = argvars[2].vval.v_number;


  char **str_out = (out_type == VAR_STRING)
      ? (char **) &rettv->vval.v_string : ((void*)0);
  int64_t int_out = 0;

  _Bool success = os_libcall(libname, funcname,
                            str_in, int_in,
                            str_out, &int_out);

  if (!success) {
    emsgf((const char *) (libintl_gettext((char *)(e_libcall))), (funcname));
    return;
  }

  if (out_type == VAR_NUMBER) {
     rettv->vval.v_number = (int) int_out;
  }
}




static void f_libcall(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  libcall_common(argvars, rettv, VAR_STRING);
}




static void f_libcallnr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  libcall_common(argvars, rettv, VAR_NUMBER);
}




static void f_line(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  linenr_T lnum = 0;
  pos_T *fp;
  int fnum;

  fp = var2fpos(&argvars[0], 1, &fnum);
  if (fp != ((void*)0))
    lnum = fp->lnum;
  rettv->vval.v_number = lnum;
}




static void f_line2byte(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const linenr_T lnum = tv_get_lnum(argvars);
  if (lnum < 1 || lnum > curbuf->b_ml.ml_line_count + 1) {
    rettv->vval.v_number = -1;
  } else {
    rettv->vval.v_number = ml_find_line_or_offset(curbuf, lnum, ((void*)0));
  }
  if (rettv->vval.v_number >= 0) {
    rettv->vval.v_number++;
  }
}




static void f_lispindent(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const pos_T pos = curwin->w_cursor;
  const linenr_T lnum = tv_get_lnum(argvars);
  if (lnum >= 1 && lnum <= curbuf->b_ml.ml_line_count) {
    curwin->w_cursor.lnum = lnum;
    rettv->vval.v_number = get_lisp_indent();
    curwin->w_cursor = pos;
  } else {
    rettv->vval.v_number = -1;
  }
}




static void f_localtime(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = (varnumber_T)time(((void*)0));
}


static void get_maparg(typval_T *argvars, typval_T *rettv, int exact)
{
  char_u *keys_buf = ((void*)0);
  char_u *rhs;
  int mode;
  int abbr = 0;
  int get_dict = 0;
  mapblock_T *mp;
  int buffer_local;


  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);

  char_u *keys = (char_u *)tv_get_string(&argvars[0]);
  if (*keys == '\000') {
    return;
  }

  char buf[NUMBUFLEN];
  const char *which;
  if (argvars[1].v_type != VAR_UNKNOWN) {
    which = tv_get_string_buf_chk(&argvars[1], buf);
    if (argvars[2].v_type != VAR_UNKNOWN) {
      abbr = tv_get_number(&argvars[2]);
      if (argvars[3].v_type != VAR_UNKNOWN) {
        get_dict = tv_get_number(&argvars[3]);
      }
    }
  } else {
    which = "";
  }
  if (which == ((void*)0)) {
    return;
  }

  mode = get_map_mode((char_u **)&which, 0);

  keys = replace_termcodes(keys, strlen((char *)(keys)), &keys_buf, 1, 1, 1,
                           ((vim_strchr(p_cpo, 'B') == ((void*)0)) ? 0 : 0x01));
  rhs = check_map(keys, mode, exact, 0, abbr, &mp, &buffer_local);
  xfree(keys_buf);

  if (!get_dict) {

    if (rhs != ((void*)0)) {
      rettv->vval.v_string = (char_u *)str2special_save(
          (const char *)rhs, 0, 0);
    }

  } else {
    tv_dict_alloc_ret(rettv);
    if (rhs != ((void*)0)) {

      mapblock_fill_dict(rettv->vval.v_dict, mp, buffer_local, 1);
    }
  }
}


static void f_luaeval(typval_T *argvars, typval_T *rettv, FunPtr fptr)
  FUNC_ATTR_NONNULL_ALL
{
  const char *const str = (const char *)tv_get_string_chk(&argvars[0]);
  if (str == ((void*)0)) {
    return;
  }

  executor_eval_lua(cstr_as_string((char *)str), &argvars[1], rettv);
}







void mapblock_fill_dict(dict_T *const dict,
                        const mapblock_T *const mp,
                        long buffer_value,
                        _Bool compatible)
  FUNC_ATTR_NONNULL_ALL
{
  char *const lhs = str2special_save((const char *)mp->m_keys,
                                     compatible, !compatible);
  char *const mapmode = map_mode_to_chars(mp->m_mode);
  varnumber_T noremap_value;

  if (compatible) {


    noremap_value = !!mp->m_noremap;
  } else {


    noremap_value = mp->m_noremap == -2 ? 2 : !!mp->m_noremap;
  }

  if (compatible) {
    tv_dict_add_str(dict, ("rhs"), (sizeof("rhs") - 1), (const char *)mp->m_orig_str);
  } else {
    tv_dict_add_allocated_str(dict, ("rhs"), (sizeof("rhs") - 1),
                              str2special_save((const char *)mp->m_str, 0,
                                               1));
  }
  tv_dict_add_allocated_str(dict, ("lhs"), (sizeof("lhs") - 1), lhs);
  tv_dict_add_nr(dict, ("noremap"), (sizeof("noremap") - 1), noremap_value);
  tv_dict_add_nr(dict, ("expr"), (sizeof("expr") - 1), mp->m_expr ? 1 : 0);
  tv_dict_add_nr(dict, ("silent"), (sizeof("silent") - 1), mp->m_silent ? 1 : 0);
  tv_dict_add_nr(dict, ("sid"), (sizeof("sid") - 1), (varnumber_T)mp->m_script_ID);
  tv_dict_add_nr(dict, ("buffer"), (sizeof("buffer") - 1), (varnumber_T)buffer_value);
  tv_dict_add_nr(dict, ("nowait"), (sizeof("nowait") - 1), mp->m_nowait ? 1 : 0);
  tv_dict_add_allocated_str(dict, ("mode"), (sizeof("mode") - 1), mapmode);
}




static void f_map(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  filter_map(argvars, rettv, 1);
}




static void f_maparg(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  get_maparg(argvars, rettv, 1);
}




static void f_mapcheck(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  get_maparg(argvars, rettv, 0);
}


static void find_some_match(typval_T *const argvars, typval_T *const rettv,
                            const SomeMatchType type)
{
  char_u *str = ((void*)0);
  long len = 0;
  char_u *expr = ((void*)0);
  regmatch_T regmatch;
  char_u *save_cpo;
  long start = 0;
  long nth = 1;
  colnr_T startcol = 0;
  int match = 0;
  list_T *l = ((void*)0);
  listitem_T *li = ((void*)0);
  long idx = 0;
  char_u *tofree = ((void*)0);


  save_cpo = p_cpo;
  p_cpo = (char_u *)"";

  rettv->vval.v_number = -1;
  switch (type) {

    case kSomeMatchList: {
      tv_list_alloc_ret(rettv);
      break;
    }

    case kSomeMatchStrPos: {
      tv_list_alloc_ret(rettv);
      tv_list_append_string(rettv->vval.v_list, "", 0);
      tv_list_append_number(rettv->vval.v_list, -1);
      tv_list_append_number(rettv->vval.v_list, -1);
      tv_list_append_number(rettv->vval.v_list, -1);
      break;
    }
    case kSomeMatchStr: {
      rettv->v_type = VAR_STRING;
      rettv->vval.v_string = ((void*)0);
      break;
    }
    case kSomeMatch:
    case kSomeMatchEnd: {

      break;
    }
  }

  if (argvars[0].v_type == VAR_LIST) {
    if ((l = argvars[0].vval.v_list) == ((void*)0)) {
      goto theend;
    }
    li = tv_list_first(l);
  } else {
    expr = str = (char_u *)tv_get_string(&argvars[0]);
    len = (long)strlen((char *)(str));
  }

  char patbuf[NUMBUFLEN];
  const char *const pat = tv_get_string_buf_chk(&argvars[1], patbuf);
  if (pat == ((void*)0)) {
    goto theend;
  }

  if (argvars[2].v_type != VAR_UNKNOWN) {
    _Bool error = 0;

    start = tv_get_number_chk(&argvars[2], &error);
    if (error) {
      goto theend;
    }
    if (l != ((void*)0)) {
      idx = tv_list_uidx(l, start);
      if (idx == -1) {
        goto theend;
      }
      li = tv_list_find(l, idx);
    } else {
      if (start < 0)
        start = 0;
      if (start > len)
        goto theend;



      if (argvars[3].v_type != VAR_UNKNOWN)
        startcol = start;
      else {
        str += start;
        len -= start;
      }
    }

    if (argvars[3].v_type != VAR_UNKNOWN) {
      nth = tv_get_number_chk(&argvars[3], &error);
    }
    if (error) {
      goto theend;
    }
  }

  regmatch.regprog = vim_regcomp((char_u *)pat, 1 + 2);
  if (regmatch.regprog != ((void*)0)) {
    regmatch.rm_ic = p_ic;

    for (;; ) {
      if (l != ((void*)0)) {
        if (li == ((void*)0)) {
          match = 0;
          break;
        }
        xfree(tofree);
        tofree = expr = str = (char_u *)encode_tv2echo((&(li)->li_tv),
                                                       ((void*)0));
        if (str == ((void*)0)) {
          break;
        }
      }

      match = vim_regexec_nl(&regmatch, str, (colnr_T)startcol);

      if (match && --nth <= 0)
        break;
      if (l == ((void*)0) && !match)
        break;


      if (l != ((void*)0)) {
        li = ((li)->li_next);
        idx++;
      } else {
        startcol = (colnr_T)(regmatch.startp[0]
                             + (*utfc_ptr2len)(regmatch.startp[0]) - str);
        if (startcol > (colnr_T)len || str + startcol <= regmatch.startp[0]) {
            match = 0;
            break;
        }
      }
    }

    if (match) {
      switch (type) {
        case kSomeMatchStrPos: {
          list_T *const ret_l = rettv->vval.v_list;
          listitem_T *li1 = tv_list_first(ret_l);
          listitem_T *li2 = ((li1)->li_next);
          listitem_T *li3 = ((li2)->li_next);
          listitem_T *li4 = ((li3)->li_next);
          xfree((&(li1)->li_tv)->vval.v_string);

          const size_t rd = (size_t)(regmatch.endp[0] - regmatch.startp[0]);
          (&(li1)->li_tv)->vval.v_string = xmemdupz(
              (const char *)regmatch.startp[0], rd);
          (&(li3)->li_tv)->vval.v_number = (varnumber_T)(
              regmatch.startp[0] - expr);
          (&(li4)->li_tv)->vval.v_number = (varnumber_T)(
              regmatch.endp[0] - expr);
          if (l != ((void*)0)) {
            (&(li2)->li_tv)->vval.v_number = (varnumber_T)idx;
          }
          break;
        }
        case kSomeMatchList: {

          for (int i = 0; i < 10; i++) {
            if (regmatch.endp[i] == ((void*)0)) {
              tv_list_append_string(rettv->vval.v_list, ((void*)0), 0);
            } else {
              tv_list_append_string(rettv->vval.v_list,
                                    (const char *)regmatch.startp[i],
                                    (regmatch.endp[i] - regmatch.startp[i]));
            }
          }
          break;
        }
        case kSomeMatchStr: {

          if (l != ((void*)0)) {
            tv_copy((&(li)->li_tv), rettv);
          } else {
            rettv->vval.v_string = (char_u *)xmemdupz(
                (const char *)regmatch.startp[0],
                (size_t)(regmatch.endp[0] - regmatch.startp[0]));
          }
          break;
        }
        case kSomeMatch:
        case kSomeMatchEnd: {
          if (l != ((void*)0)) {
            rettv->vval.v_number = idx;
          } else {
            if (type == kSomeMatch) {
              rettv->vval.v_number =
                (varnumber_T)(regmatch.startp[0] - str);
            } else {
              rettv->vval.v_number =
                (varnumber_T)(regmatch.endp[0] - str);
            }
            rettv->vval.v_number += (varnumber_T)(str - expr);
          }
          break;
        }
      }
    }
    vim_regfree(regmatch.regprog);
  }

  if (type == kSomeMatchStrPos && l == ((void*)0)) {

    list_T *const ret_l = rettv->vval.v_list;
    tv_list_item_remove(ret_l, ((tv_list_first(ret_l))->li_next));
  }

theend:
  xfree(tofree);
  p_cpo = save_cpo;
}




static void f_match(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  find_some_match(argvars, rettv, kSomeMatch);
}




static void f_matchadd(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char grpbuf[NUMBUFLEN];
  char patbuf[NUMBUFLEN];
  const char *const grp = tv_get_string_buf_chk(&argvars[0], grpbuf);
  const char *const pat = tv_get_string_buf_chk(&argvars[1], patbuf);
  int prio = 10;
  int id = -1;
  _Bool error = 0;
  const char *conceal_char = ((void*)0);

  rettv->vval.v_number = -1;

  if (grp == ((void*)0) || pat == ((void*)0)) {
    return;
  }
  if (argvars[2].v_type != VAR_UNKNOWN) {
    prio = tv_get_number_chk(&argvars[2], &error);
    if (argvars[3].v_type != VAR_UNKNOWN) {
      id = tv_get_number_chk(&argvars[3], &error);
      if (argvars[4].v_type != VAR_UNKNOWN) {
        if (argvars[4].v_type != VAR_DICT) {
          emsg((char_u *)(libintl_gettext((char *)(e_dictreq))));
          return;
        }
        dictitem_T *di;
        if ((di = tv_dict_find(argvars[4].vval.v_dict, ("conceal"), (sizeof("conceal") - 1)))
            != ((void*)0)) {
          conceal_char = tv_get_string(&di->di_tv);
        }
      }
    }
  }
  if (error) {
    return;
  }
  if (id >= 1 && id <= 3) {
    emsgf((const char *) (libintl_gettext((char *)("E798: ID is reserved for \":match\": %" "ll" "d"))), (int64_t)(id));
    return;
  }

  rettv->vval.v_number = match_add(curwin, grp, pat, prio, id, ((void*)0),
                                   conceal_char);
}

static void f_matchaddpos(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = -1;

  char buf[NUMBUFLEN];
  const char *const group = tv_get_string_buf_chk(&argvars[0], buf);
  if (group == ((void*)0)) {
    return;
  }

  if (argvars[1].v_type != VAR_LIST) {
    emsgf((const char *) (libintl_gettext((char *)(e_listarg))), ("matchaddpos()"));
    return;
  }

  list_T *l;
  l = argvars[1].vval.v_list;
  if (l == ((void*)0)) {
    return;
  }

  _Bool error = 0;
  int prio = 10;
  int id = -1;
  const char *conceal_char = ((void*)0);

  if (argvars[2].v_type != VAR_UNKNOWN) {
    prio = tv_get_number_chk(&argvars[2], &error);
    if (argvars[3].v_type != VAR_UNKNOWN) {
      id = tv_get_number_chk(&argvars[3], &error);
      if (argvars[4].v_type != VAR_UNKNOWN) {
        if (argvars[4].v_type != VAR_DICT) {
          emsg((char_u *)(libintl_gettext((char *)(e_dictreq))));
          return;
        }
        dictitem_T *di;
        if ((di = tv_dict_find(argvars[4].vval.v_dict, ("conceal"), (sizeof("conceal") - 1)))
            != ((void*)0)) {
          conceal_char = tv_get_string(&di->di_tv);
        }
      }
    }
  }
  if (error == 1) {
    return;
  }


  if (id == 1 || id == 2) {
    emsgf((const char *) (libintl_gettext((char *)("E798: ID is reserved for \"match\": %" "ll" "d"))), (int64_t)(id));
    return;
  }

  rettv->vval.v_number = match_add(curwin, group, ((void*)0), prio, id, l,
                                   conceal_char);
}




static void f_matcharg(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  tv_list_alloc_ret(rettv);

  const int id = tv_get_number(&argvars[0]);

  if (id >= 1 && id <= 3) {
    matchitem_T *const m = (matchitem_T *)get_match(curwin, id);

    if (m != ((void*)0)) {
      tv_list_append_string(rettv->vval.v_list,
                            (const char *)syn_id2name(m->hlg_id), -1);
      tv_list_append_string(rettv->vval.v_list, (const char *)m->pattern, -1);
    } else {
      tv_list_append_string(rettv->vval.v_list, ((void*)0), 0);
      tv_list_append_string(rettv->vval.v_list, ((void*)0), 0);
    }
  }
}




static void f_matchdelete(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = match_delete(curwin,
                                      (int)tv_get_number(&argvars[0]), 1);
}




static void f_matchend(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  find_some_match(argvars, rettv, kSomeMatchEnd);
}




static void f_matchlist(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  find_some_match(argvars, rettv, kSomeMatchList);
}




static void f_matchstr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  find_some_match(argvars, rettv, kSomeMatchStr);
}


static void f_matchstrpos(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  find_some_match(argvars, rettv, kSomeMatchStrPos);
}
# 12604 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static void max_min(const typval_T *const tv, typval_T *const rettv,
                    const _Bool domax)
  FUNC_ATTR_NONNULL_ALL
{
  _Bool error = 0;

  rettv->vval.v_number = 0;
  varnumber_T n = (domax ? (-9223372036854775807LL -1) : 9223372036854775807LL);
  if (tv->v_type == VAR_LIST) {
    if (tv_list_len(tv->vval.v_list) == 0) {
      return;
    }
    do { const list_T *const l_ = (tv->vval.v_list); if (l_ != ((void*)0)) { for (const listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { const varnumber_T i = tv_get_number_chk((&(li)->li_tv), &error); if (error) { return; } if (domax ? i > n : i < n) { n = i; } } } } } while (0);
# 12625 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  } else if (tv->v_type == VAR_DICT) {
    if (tv_dict_len(tv->vval.v_dict) == 0) {
      return;
    }
    do { hashtab_T *const dihi_ht_ = (&(tv->vval.v_dict)->dv_hashtab); size_t dihi_todo_ = dihi_ht_->ht_used; for (hashitem_T *dihi_ = dihi_ht_->ht_array; dihi_todo_; dihi_++) { if (!((dihi_)->hi_key == ((void*)0) || (dihi_)->hi_key == (char_u *)&hash_removed)) { { { { dictitem_T *const di = ((dictitem_T *)((dihi_)->hi_key - __builtin_offsetof(dictitem_T, di_key))); { { const varnumber_T i = tv_get_number_chk(&di->di_tv, &error); if (error) { return; } if (domax ? i > n : i < n) { n = i; } } } } } } dihi_todo_--; } } } while (0);
# 12638 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  } else {
    emsgf((const char *) (libintl_gettext((char *)(e_listdictarg))), (domax ? "max()" : "min()"));
    return;
  }
  rettv->vval.v_number = n;
}




static void f_max(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  max_min(argvars, rettv, 1);
}




static void f_min(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  max_min(argvars, rettv, 0);
}




static void f_mkdir(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int prot = 0755;

  rettv->vval.v_number = 0;
  if (check_restricted() || check_secure())
    return;

  char buf[NUMBUFLEN];
  const char *const dir = tv_get_string_buf(&argvars[0], buf);
  if (*dir == '\000') {
    rettv->vval.v_number = 0;
  } else {
    if (*path_tail((char_u *)dir) == '\000') {

      *path_tail_with_sep((char_u *)dir) = '\000';
    }

    if (argvars[1].v_type != VAR_UNKNOWN) {
      if (argvars[2].v_type != VAR_UNKNOWN) {
        prot = tv_get_number_chk(&argvars[2], ((void*)0));
      }
      if (prot != -1 && strcmp(tv_get_string(&argvars[1]), "p") == 0) {
        char *failed_dir;
        int ret = os_mkdir_recurse(dir, prot, &failed_dir);
        if (ret != 0) {
          emsgf((const char *) (libintl_gettext((char *)(e_mkdir))), (failed_dir), (uv_strerror(ret)));
          xfree(failed_dir);
          rettv->vval.v_number = 0;
          return;
        } else {
          rettv->vval.v_number = 1;
          return;
        }
      }
    }
    rettv->vval.v_number = prot == -1 ? 0 : vim_mkdir_emsg(dir, prot);
  }
}


static void f_mode(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char *mode = get_mode();



  if (!non_zero_arg(&argvars[0])) {
    mode[1] = '\000';
  }

  rettv->vval.v_string = (char_u *)mode;
  rettv->v_type = VAR_STRING;
}


static void f_msgpackdump(typval_T *argvars, typval_T *rettv, FunPtr fptr)
  FUNC_ATTR_NONNULL_ALL
{
  if (argvars[0].v_type != VAR_LIST) {
    emsgf((const char *) (libintl_gettext((char *)(e_listarg))), ("msgpackdump()"));
    return;
  }
  list_T *ret_list = tv_list_alloc_ret(rettv);
  list_T *list = argvars[0].vval.v_list;
  msgpack_packer *lpacker = msgpack_packer_new(ret_list, &encode_list_write);
  const char *const msg = libintl_gettext((char *)("msgpackdump() argument, index %i"));

  char msgbuf[sizeof("msgpackdump() argument, index ") * 4 + NUMBUFLEN];
  int idx = 0;
  do { list_T *const l_ = (list); if (l_ != ((void*)0)) { for ( listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { vim_snprintf(msgbuf, sizeof(msgbuf), (char *)msg, idx); idx++; if (encode_vim_to_msgpack(lpacker, (&(li)->li_tv), msgbuf) == 0) { break; } } } } } while (0);






  msgpack_packer_free(lpacker);
}


static void f_msgpackparse(typval_T *argvars, typval_T *rettv, FunPtr fptr)
  FUNC_ATTR_NONNULL_ALL
{
  if (argvars[0].v_type != VAR_LIST) {
    emsgf((const char *) (libintl_gettext((char *)(e_listarg))), ("msgpackparse()"));
    return;
  }
  list_T *ret_list = tv_list_alloc_ret(rettv);
  const list_T *list = argvars[0].vval.v_list;
  if (tv_list_len(list) == 0) {
    return;
  }
  if ((&(tv_list_first(list))->li_tv)->v_type != VAR_STRING) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("List item is not a string"));
    return;
  }
  ListReaderState lrstate = encode_init_lrstate(list);
  msgpack_unpacker *const unpacker = msgpack_unpacker_new((1024+1));
  if (unpacker == ((void*)0)) {
    emsg((char_u *)(libintl_gettext((char *)(e_outofmem))));
    return;
  }
  msgpack_unpacked unpacked;
  msgpack_unpacked_init(&unpacked);
  do {
    if (!msgpack_unpacker_reserve_buffer(unpacker, (1024+1))) {
      emsg((char_u *)(libintl_gettext((char *)(e_outofmem))));
      goto f_msgpackparse_exit;
    }
    size_t read_bytes;
    const int rlret = encode_read_from_list(
        &lrstate, msgpack_unpacker_buffer(unpacker), (1024+1), &read_bytes);
    if (rlret == 0) {
      emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("List item is not a string"));
      goto f_msgpackparse_exit;
    }
    msgpack_unpacker_buffer_consumed(unpacker, read_bytes);
    if (read_bytes == 0) {
      break;
    }
    while (unpacker->off < unpacker->used) {
      const msgpack_unpack_return result = msgpack_unpacker_next(unpacker,
                                                                 &unpacked);
      if (result == MSGPACK_UNPACK_PARSE_ERROR) {
        emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("Failed to parse msgpack string"));
        goto f_msgpackparse_exit;
      }
      if (result == MSGPACK_UNPACK_NOMEM_ERROR) {
        emsg((char_u *)(libintl_gettext((char *)(e_outofmem))));
        goto f_msgpackparse_exit;
      }
      if (result == MSGPACK_UNPACK_SUCCESS) {
        typval_T tv = { .v_type = VAR_UNKNOWN };
        if (msgpack_to_vim(unpacked.data, &tv) == 0) {
          emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("Failed to convert msgpack string"));
          goto f_msgpackparse_exit;
        }
        tv_list_append_owned_tv(ret_list, tv);
      }
      if (result == MSGPACK_UNPACK_CONTINUE) {
        if (rlret == 1) {
          emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("Incomplete msgpack string"));
        }
        break;
      }
    }
    if (rlret == 1) {
      break;
    }
  } while (1);

f_msgpackparse_exit:
  msgpack_unpacked_destroy(&unpacked);
  msgpack_unpacker_free(unpacker);
  return;
}




static void f_nextnonblank(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  linenr_T lnum;

  for (lnum = tv_get_lnum(argvars);; lnum++) {
    if (lnum < 0 || lnum > curbuf->b_ml.ml_line_count) {
      lnum = 0;
      break;
    }
    if (*skipwhite(ml_get(lnum)) != '\000') {
      break;
    }
  }
  rettv->vval.v_number = lnum;
}




static void f_nr2char(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (argvars[1].v_type != VAR_UNKNOWN) {
    if (!tv_check_num(&argvars[1])) {
      return;
    }
  }

  _Bool error = 0;
  const varnumber_T num = tv_get_number_chk(&argvars[0], &error);
  if (error) {
    return;
  }
  if (num < 0) {
    emsgf(libintl_gettext((char *)("E5070: Character number must not be less than zero")));
    return;
  }
  if (num > 2147483647) {
    emsgf(libintl_gettext((char *)("E5071: Character number must not be greater than INT_MAX (%i)")),
          2147483647);
    return;
  }

  char buf[21];
  const int len = utf_char2bytes((int)num, (char_u *)buf);

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = xmemdupz(buf, (size_t)len);
}




static void f_or(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = tv_get_number_chk(&argvars[0], ((void*)0))
                         | tv_get_number_chk(&argvars[1], ((void*)0));
}




static void f_pathshorten(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  const char *const s = tv_get_string_chk(&argvars[0]);
  if (!s) {
    return;
  }
  rettv->vval.v_string = shorten_dir((char_u *)xstrdup(s));
}




static void f_pow(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  float_T fx;
  float_T fy;

  rettv->v_type = VAR_FLOAT;
  if (tv_get_float_chk(argvars, &fx) && tv_get_float_chk(&argvars[1], &fy)) {
    rettv->vval.v_float = pow(fx, fy);
  } else {
    rettv->vval.v_float = 0.0;
  }
}




static void f_prevnonblank(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  linenr_T lnum = tv_get_lnum(argvars);
  if (lnum < 1 || lnum > curbuf->b_ml.ml_line_count) {
    lnum = 0;
  } else {
    while (lnum >= 1 && *skipwhite(ml_get(lnum)) == '\000') {
      lnum--;
    }
  }
  rettv->vval.v_number = lnum;
}




static void f_printf(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);
  {
    int len;
    int saved_did_emsg = did_emsg;


    did_emsg = 0;
    char buf[NUMBUFLEN];
    const char *fmt = tv_get_string_buf(&argvars[0], buf);
    len = vim_vsnprintf(((void*)0), 0, fmt, dummy_ap, argvars + 1);
    if (!did_emsg) {
      char *s = xmalloc(len + 1);
      rettv->vval.v_string = (char_u *)s;
      (void)vim_vsnprintf(s, len + 1, fmt, dummy_ap, argvars + 1);
    }
    did_emsg |= saved_did_emsg;
  }
}




static void f_pumvisible(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (pum_visible())
    rettv->vval.v_number = 1;
}




static void f_pyeval(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  script_host_eval("python", argvars, rettv);
}




static void f_py3eval(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  script_host_eval("python3", argvars, rettv);
}




static void f_range(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  varnumber_T start;
  varnumber_T end;
  varnumber_T stride = 1;
  varnumber_T i;
  _Bool error = 0;

  start = tv_get_number_chk(&argvars[0], &error);
  if (argvars[1].v_type == VAR_UNKNOWN) {
    end = start - 1;
    start = 0;
  } else {
    end = tv_get_number_chk(&argvars[1], &error);
    if (argvars[2].v_type != VAR_UNKNOWN) {
      stride = tv_get_number_chk(&argvars[2], &error);
    }
  }

  if (error) {
    return;
  }
  if (stride == 0) {
    emsgf(libintl_gettext((char *)("E726: Stride is zero")));
  } else if (stride > 0 ? end + 1 < start : end - 1 > start) {
    emsgf(libintl_gettext((char *)("E727: Start past end")));
  } else {
    tv_list_alloc_ret(rettv);
    for (i = start; stride > 0 ? i <= end : i >= end; i += stride) {
      tv_list_append_number(rettv->vval.v_list, (varnumber_T)i);
    }
  }
}




static void f_readfile(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  _Bool binary = 0;
  FILE *fd;
  char_u buf[((1024+1)/256)*256];
  int io_size = sizeof(buf);
  int readlen;
  char_u *prev = ((void*)0);
  long prevlen = 0;
  long prevsize = 0;
  long maxline = 0x7fffffff;

  if (argvars[1].v_type != VAR_UNKNOWN) {
    if (strcmp(tv_get_string(&argvars[1]), "b") == 0) {
      binary = 1;
    }
    if (argvars[2].v_type != VAR_UNKNOWN) {
      maxline = tv_get_number(&argvars[2]);
    }
  }

  tv_list_alloc_ret(rettv);
  list_T *const l = rettv->vval.v_list;



  const char *const fname = tv_get_string(&argvars[0]);
  if (*fname == '\000' || (fd = fopen((fname), ("rb"))) == ((void*)0)) {
    emsgf((const char *) (libintl_gettext((char *)(e_notopen))), (*fname == '\000' ? libintl_gettext((char *)("<empty>")) : fname));
    return;
  }

  while (maxline < 0 || tv_list_len(l) < maxline) {
    readlen = (int)fread(buf, 1, io_size, fd);






    char_u *p;
    char_u *start;
    for (p = buf, start = buf;
         p < buf + readlen || (readlen <= 0 && (prevlen > 0 || binary));
         p++) {
      if (*p == '\n' || readlen <= 0) {
        char_u *s = ((void*)0);
        size_t len = p - start;


        if (readlen > 0 && !binary) {
          while (len > 0 && start[len - 1] == '\r')
            --len;

          if (len == 0)
            while (prevlen > 0 && prev[prevlen - 1] == '\r')
              --prevlen;
        }
        if (prevlen == 0) {
          ((void)0);
          s = vim_strnsave(start, (int)len);
        } else {



          s = xrealloc(prev, prevlen + len + 1);
          __builtin___memcpy_chk (s + prevlen, start, len, __builtin_object_size (s + prevlen, 0));
          s[prevlen + len] = '\000';
          prev = ((void*)0);
          prevlen = prevsize = 0;
        }

        tv_list_append_owned_tv(l, (typval_T) {
          .v_type = VAR_STRING,
          .v_lock = VAR_UNLOCKED,
          .vval.v_string = s,
        });

        start = p + 1;
        if (maxline < 0) {
          if (tv_list_len(l) > -maxline) {
            ((void)0);
            tv_list_item_remove(l, tv_list_first(l));
          }
        } else if (tv_list_len(l) >= maxline) {
          ((void)0);
          break;
        }
        if (readlen <= 0) {
          break;
        }
      } else if (*p == '\000') {
        *p = '\n';


      } else if (*p == 0xbf && !binary) {


        char_u back1 = p >= buf + 1 ? p[-1]
                       : prevlen >= 1 ? prev[prevlen - 1] : '\000';
        char_u back2 = p >= buf + 2 ? p[-2]
                       : p == buf + 1 && prevlen >= 1 ? prev[prevlen - 1]
                       : prevlen >= 2 ? prev[prevlen - 2] : '\000';

        if (back2 == 0xef && back1 == 0xbb) {
          char_u *dest = p - 2;




          if (start == dest)
            start = p + 1;
          else {

            int adjust_prevlen = 0;

            if (dest < buf) {
              adjust_prevlen = (int)(buf - dest);

              dest = buf;
            }
            if (readlen > p - buf + 1)
              __builtin___memmove_chk (dest, p + 1, readlen - (p - buf) - 1, __builtin_object_size (dest, 0));
            readlen -= 3 - adjust_prevlen;
            prevlen -= adjust_prevlen;
            p = dest - 1;
          }
        }
      }
    }

    if ((maxline >= 0 && tv_list_len(l) >= maxline) || readlen <= 0) {
      break;
    }
    if (start < p) {

      if (p - start + prevlen >= prevsize) {





        if (prevsize == 0)
          prevsize = (long)(p - start);
        else {
          long grow50pc = (prevsize * 3) / 2;
          long growmin = (long)((p - start) * 2 + prevlen);
          prevsize = grow50pc > growmin ? grow50pc : growmin;
        }
        prev = xrealloc(prev, prevsize);
      }

      __builtin___memmove_chk (prev + prevlen, start, p - start, __builtin_object_size (prev + prevlen, 0));
      prevlen += (long)(p - start);
    }
  }

  xfree(prev);
  fclose(fd);
}
# 13186 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int list2proftime(typval_T *arg, proftime_T *tm) FUNC_ATTR_NONNULL_ALL
{
  if (arg->v_type != VAR_LIST || tv_list_len(arg->vval.v_list) != 2) {
    return 0;
  }

  _Bool error = 0;
  varnumber_T n1 = tv_list_find_nr(arg->vval.v_list, 0L, &error);
  varnumber_T n2 = tv_list_find_nr(arg->vval.v_list, 1L, &error);
  if (error) {
    return 0;
  }



  union {
    struct { int32_t low, high; } split;
    proftime_T prof;
  } u = { .split.high = n1, .split.low = n2 };

  *tm = u.prof;

  return 1;
}







static void f_reltime(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  proftime_T res;
  proftime_T start;

  if (argvars[0].v_type == VAR_UNKNOWN) {

    res = profile_start();
  } else if (argvars[1].v_type == VAR_UNKNOWN) {
    if (list2proftime(&argvars[0], &res) == 0) {
      return;
    }
    res = profile_end(res);
  } else {

    if (list2proftime(&argvars[0], &start) == 0
        || list2proftime(&argvars[1], &res) == 0) {
      return;
    }
    res = profile_sub(res, start);
  }




  union {
    struct { int32_t low, high; } split;
    proftime_T prof;
  } u = { .prof = res };




  do { _Static_assert(sizeof(u.prof) == sizeof(u) && sizeof(u.split) == sizeof(u), "type punning will produce incorrect results on this platform"); } while (0);


  tv_list_alloc_ret(rettv);
  tv_list_append_number(rettv->vval.v_list, u.split.high);
  tv_list_append_number(rettv->vval.v_list, u.split.low);
}






static void f_reltimestr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
  FUNC_ATTR_NONNULL_ALL
{
  proftime_T tm;

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);
  if (list2proftime(&argvars[0], &tm) == 1) {
    rettv->vval.v_string = (char_u *) xstrdup(profile_msg(tm));
  }
}




static void f_remove(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  list_T *l;
  listitem_T *item, *item2;
  listitem_T *li;
  long idx;
  long end;
  dict_T *d;
  dictitem_T *di;
  const char *const arg_errmsg = "remove() argument";

  if (argvars[0].v_type == VAR_DICT) {
    if (argvars[2].v_type != VAR_UNKNOWN) {
      emsgf((const char *) (libintl_gettext((char *)(e_toomanyarg))), ("remove()"));
    } else if ((d = argvars[0].vval.v_dict) != ((void*)0)
               && !tv_check_lock(d->dv_lock, arg_errmsg, (18446744073709551615ULL))) {
      const char *key = tv_get_string_chk(&argvars[1]);
      if (key != ((void*)0)) {
        di = tv_dict_find(d, key, -1);
        if (di == ((void*)0)) {
          emsgf((const char *) (libintl_gettext((char *)(e_dictkey))), (key));
        } else if (!var_check_fixed(di->di_flags, arg_errmsg, (18446744073709551615ULL))
                   && !var_check_ro(di->di_flags, arg_errmsg, (18446744073709551615ULL))) {
          *rettv = di->di_tv;
          di->di_tv = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });
          tv_dict_item_remove(d, di);
          if (tv_dict_is_watched(d)) {
            tv_dict_watcher_notify(d, key, ((void*)0), rettv);
          }
        }
      }
    }
  } else if (argvars[0].v_type != VAR_LIST) {
    emsgf((const char *) (libintl_gettext((char *)(e_listdictarg))), ("remove()"));
  } else if (!tv_check_lock(tv_list_locked((l = argvars[0].vval.v_list)),
                            arg_errmsg, (18446744073709551615ULL))) {
    _Bool error = 0;

    idx = tv_get_number_chk(&argvars[1], &error);
    if (error) {

    } else if ((item = tv_list_find(l, idx)) == ((void*)0)) {
      emsgf((const char *) (libintl_gettext((char *)(e_listidx))), (int64_t)(idx));
    } else {
      if (argvars[2].v_type == VAR_UNKNOWN) {

        tv_list_drop_items(l, item, item);
        *rettv = *(&(item)->li_tv);
        xfree(item);
      } else {

        end = tv_get_number_chk(&argvars[2], &error);
        if (error) {

        } else if ((item2 = tv_list_find(l, end)) == ((void*)0)) {
          emsgf((const char *) (libintl_gettext((char *)(e_listidx))), (int64_t)(end));
        } else {
          int cnt = 0;

          for (li = item; li != ((void*)0); li = ((li)->li_next)) {
            cnt++;
            if (li == item2) {
              break;
            }
          }
          if (li == ((void*)0)) {
            emsgf(libintl_gettext((char *)(e_invrange)));
          } else {
            tv_list_move_items(l, item, item2, tv_list_alloc_ret(rettv), cnt);
          }
        }
      }
    }
  }
}




static void f_rename(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (check_restricted() || check_secure()) {
    rettv->vval.v_number = -1;
  } else {
    char buf[NUMBUFLEN];
    rettv->vval.v_number = vim_rename(
        (const char_u *)tv_get_string(&argvars[0]),
        (const char_u *)tv_get_string_buf(&argvars[1], buf));
  }
}




static void f_repeat(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  varnumber_T n = tv_get_number(&argvars[1]);
  if (argvars[0].v_type == VAR_LIST) {
    tv_list_alloc_ret(rettv);
    while (n-- > 0) {
      tv_list_extend(rettv->vval.v_list, argvars[0].vval.v_list, ((void*)0));
    }
  } else {
    rettv->v_type = VAR_STRING;
    rettv->vval.v_string = ((void*)0);
    if (n <= 0) {
      return;
    }

    const char *const p = tv_get_string(&argvars[0]);

    const size_t slen = strlen(p);
    if (slen == 0) {
      return;
    }
    const size_t len = slen * n;

    if (len / n != slen) {
      return;
    }

    char *const r = xmallocz(len);
    for (varnumber_T i = 0; i < n; i++) {
      __builtin___memmove_chk (r + i * slen, p, slen, __builtin_object_size (r + i * slen, 0));
    }

    rettv->vval.v_string = (char_u *)r;
  }
}




static void f_resolve(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  const char *fname = tv_get_string(&argvars[0]);





  {
    _Bool is_relative_to_current = 0;
    _Bool has_trailing_pathsep = 0;
    int limit = 100;

    char *p = xstrdup(fname);

    if (p[0] == '.' && (vim_ispathsep(p[1])
                        || (p[1] == '.' && (vim_ispathsep(p[2]))))) {
      is_relative_to_current = 1;
    }

    ptrdiff_t len = (ptrdiff_t)strlen(p);
    if (len > 0 && after_pathsep(p, p + len)) {
      has_trailing_pathsep = 1;
      p[len - 1] = '\000';
    }

    char *q = (char *)path_next_component(p);
    char *remain = ((void*)0);
    if (*q != '\000') {


      remain = xstrdup(q - 1);
      q[-1] = '\000';
    }

    char *const buf = xmallocz(1024);

    char *cpy;
    for (;; ) {
      for (;; ) {
        len = readlink(p, buf, 1024);
        if (len <= 0) {
          break;
        }
        buf[len] = '\000';

        if (limit-- == 0) {
          xfree(p);
          xfree(remain);
          emsg((char_u *)(libintl_gettext((char *)("E655: Too many symbolic links (cycle?)"))));
          rettv->vval.v_string = ((void*)0);
          xfree(buf);
          return;
        }



        if (remain == ((void*)0) && has_trailing_pathsep) {
          add_pathsep(buf);
        }



        q = (char *)path_next_component(vim_ispathsep(*buf) ? buf + 1 : buf);
        if (*q != '\000') {
          cpy = remain;
          remain = (remain
                    ? (char *)concat_str((char_u *)q - 1, (char_u *)remain)
                    : xstrdup(q - 1));
          xfree(cpy);
          q[-1] = '\000';
        }

        q = (char *)path_tail((char_u *)p);
        if (q > p && *q == '\000') {

          q[-1] = '\000';
          q = (char *)path_tail((char_u *)p);
        }
        if (q > p && !path_is_absolute_path((const char_u *)buf)) {


          const size_t p_len = strlen(p);
          const size_t buf_len = strlen(buf);
          p = xrealloc(p, p_len + buf_len + 1);
          __builtin___memcpy_chk (path_tail((char_u *)p), buf, buf_len + 1, __builtin_object_size (path_tail((char_u *)p), 0));
        } else {
          xfree(p);
          p = xstrdup(buf);
        }
      }

      if (remain == ((void*)0)) {
        break;
      }


      q = (char *)path_next_component(remain + 1);
      len = q - remain - (*q != '\000');
      const size_t p_len = strlen(p);
      cpy = xmallocz(p_len + len);
      __builtin___memcpy_chk (cpy, p, p_len + 1, __builtin_object_size (cpy, 0));
      xstrlcat(cpy + p_len, remain, len + 1);
      xfree(p);
      p = cpy;


      if (*q != '\000') {
        __builtin___memmove_chk ((remain), (q - 1), strlen((char *)(q - 1)) + 1, __builtin_object_size ((remain), 0));
      } else {
        xfree(remain);
        remain = ((void*)0);
      }
    }



    if (!vim_ispathsep(*p)) {
      if (is_relative_to_current
          && *p != '\000'
          && !(p[0] == '.'
               && (p[1] == '\000'
                   || vim_ispathsep(p[1])
                   || (p[1] == '.'
                       && (p[2] == '\000'
                           || vim_ispathsep(p[2])))))) {

        cpy = (char *)concat_str((const char_u *)"./", (const char_u *)p);
        xfree(p);
        p = cpy;
      } else if (!is_relative_to_current) {

        q = p;
        while (q[0] == '.' && vim_ispathsep(q[1])) {
          q += 2;
        }
        if (q > p) {
          __builtin___memmove_chk ((p), (p + 2), strlen((char *)(p + 2)) + 1, __builtin_object_size ((p), 0));
        }
      }
    }



    if (!has_trailing_pathsep) {
      q = p + strlen(p);
      if (after_pathsep(p, q)) {
        *path_tail_with_sep((char_u *)p) = '\000';
      }
    }

    rettv->vval.v_string = (char_u *)p;
    xfree(buf);
  }





  simplify_filename(rettv->vval.v_string);
}




static void f_reverse(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  list_T *l;
  if (argvars[0].v_type != VAR_LIST) {
    emsgf((const char *) (libintl_gettext((char *)(e_listarg))), ("reverse()"));
  } else if (!tv_check_lock(tv_list_locked((l = argvars[0].vval.v_list)),
                            "reverse() argument", (18446744073709551615ULL))) {
    tv_list_reverse(l);
    rettv->vval.v_list = l;
    rettv->v_type = VAR_LIST;
    tv_list_ref(l);
  }
}
# 13605 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int get_search_arg(typval_T *varp, int *flagsp)
{
  int dir = FORWARD;
  int mask;

  if (varp->v_type != VAR_UNKNOWN) {
    char nbuf[NUMBUFLEN];
    const char *flags = tv_get_string_buf_chk(varp, nbuf);
    if (flags == ((void*)0)) {
      return 0;
    }
    while (*flags != '\000') {
      switch (*flags) {
        case 'b': dir = BACKWARD; break;
        case 'w': p_ws = 1; break;
        case 'W': p_ws = 0; break;
        default: {
          mask = 0;
          if (flagsp != ((void*)0)) {
            switch (*flags) {
              case 'c': mask = 0x10; break;
              case 'e': mask = 0x40; break;
              case 'm': mask = 0x04; break;
              case 'n': mask = 0x01; break;
              case 'p': mask = 0x20; break;
              case 'r': mask = 0x02; break;
              case 's': mask = 0x08; break;
              case 'z': mask = 0x80; break;
            }
          }
          if (mask == 0) {
            emsgf(libintl_gettext((char *)(e_invarg2)), flags);
            dir = 0;
          } else {
            *flagsp |= mask;
          }
        }
      }
      if (dir == 0) {
        break;
      }
      flags++;
    }
  }
  return dir;
}


static int search_cmn(typval_T *argvars, pos_T *match_pos, int *flagsp)
{
  int flags;
  pos_T pos;
  pos_T save_cursor;
  _Bool save_p_ws = p_ws;
  int dir;
  int retval = 0;
  long lnum_stop = 0;
  proftime_T tm;
  long time_limit = 0;
  int options = 0x400;
  int subpatnum;

  const char *const pat = tv_get_string(&argvars[0]);
  dir = get_search_arg(&argvars[1], flagsp);
  if (dir == 0) {
    goto theend;
  }
  flags = *flagsp;
  if (flags & 0x10) {
    options |= 0x100;
  }
  if (flags & 0x40) {
    options |= 0x40;
  }
  if (flags & 0x80) {
    options |= 0x1000;
  }


  if (argvars[1].v_type != VAR_UNKNOWN && argvars[2].v_type != VAR_UNKNOWN) {
    lnum_stop = tv_get_number_chk(&argvars[2], ((void*)0));
    if (lnum_stop < 0) {
      goto theend;
    }
    if (argvars[3].v_type != VAR_UNKNOWN) {
      time_limit = tv_get_number_chk(&argvars[3], ((void*)0));
      if (time_limit < 0) {
        goto theend;
      }
    }
  }


  tm = profile_setlimit(time_limit);







  if (((flags & (0x02 | 0x04)) != 0)
      || ((flags & 0x01) && (flags & 0x08))) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (tv_get_string(&argvars[1])));
    goto theend;
  }

  pos = save_cursor = curwin->w_cursor;
  subpatnum = searchit(curwin, curbuf, &pos, dir, (char_u *)pat, 1,
                       options, 0, (linenr_T)lnum_stop, &tm);
  if (subpatnum != 0) {
    if (flags & 0x20)
      retval = subpatnum;
    else
      retval = pos.lnum;
    if (flags & 0x08)
      setpcmark();
    curwin->w_cursor = pos;
    if (match_pos != ((void*)0)) {

      match_pos->lnum = pos.lnum;
      match_pos->col = pos.col + 1;
    }


    check_cursor();
  }


  if (flags & 0x01)
    curwin->w_cursor = save_cursor;
  else
    curwin->w_set_curswant = 1;
theend:
  p_ws = save_p_ws;

  return retval;
}


static void f_rpcnotify(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_NUMBER || argvars[0].vval.v_number < 0) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("Channel id must be a positive integer"));
    return;
  }

  if (argvars[1].v_type != VAR_STRING) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("Event type must be a string"));
    return;
  }

  Array args = {.size = 0, .capacity = 0, .items = ((void*)0)};

  for (typval_T *tv = argvars + 2; tv->v_type != VAR_UNKNOWN; tv++) {
    (*((((args).size == (args).capacity) ? (((args).capacity = ((args).capacity ? (args).capacity << 1 : 8), (args).items = xrealloc((args).items, sizeof((args).items[0]) * (args).capacity)), 0) : 0), ((args).items + ((args).size++))) = (vim_to_object(tv)));
  }

  if (!rpc_send_event((uint64_t)argvars[0].vval.v_number,
                      tv_get_string(&argvars[1]), args)) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("Channel doesn't exist"));
    return;
  }

  rettv->vval.v_number = 1;
}


static void f_rpcrequest(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;
  const int l_provider_call_nesting = provider_call_nesting;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_NUMBER || argvars[0].vval.v_number <= 0) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("Channel id must be a positive integer"));
    return;
  }

  if (argvars[1].v_type != VAR_STRING) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("Method name must be a string"));
    return;
  }

  Array args = {.size = 0, .capacity = 0, .items = ((void*)0)};

  for (typval_T *tv = argvars + 2; tv->v_type != VAR_UNKNOWN; tv++) {
    (*((((args).size == (args).capacity) ? (((args).capacity = ((args).capacity ? (args).capacity << 1 : 8), (args).items = xrealloc((args).items, sizeof((args).items[0]) * (args).capacity)), 0) : 0), ((args).items + ((args).size++))) = (vim_to_object(tv)));
  }

  scid_T save_current_SID;
  uint8_t *save_sourcing_name, *save_autocmd_fname, *save_autocmd_match;
  linenr_T save_sourcing_lnum;
  int save_autocmd_fname_full, save_autocmd_bufnr;
  void *save_funccalp;

  if (l_provider_call_nesting) {


    save_current_SID = current_SID;
    save_sourcing_name = sourcing_name;
    save_sourcing_lnum = sourcing_lnum;
    save_autocmd_fname = autocmd_fname;
    save_autocmd_match = autocmd_match;
    save_autocmd_fname_full = autocmd_fname_full;
    save_autocmd_bufnr = autocmd_bufnr;
    save_funccalp = save_funccal();

    current_SID = provider_caller_scope.SID;
    sourcing_name = provider_caller_scope.sourcing_name;
    sourcing_lnum = provider_caller_scope.sourcing_lnum;
    autocmd_fname = provider_caller_scope.autocmd_fname;
    autocmd_match = provider_caller_scope.autocmd_match;
    autocmd_fname_full = provider_caller_scope.autocmd_fname_full;
    autocmd_bufnr = provider_caller_scope.autocmd_bufnr;
    restore_funccal(provider_caller_scope.funccalp);
  }


  Error err = { .type = kErrorTypeNone, .msg = ((void*)0) };
  Object result = rpc_send_call((uint64_t)argvars[0].vval.v_number,
                                tv_get_string(&argvars[1]), args, &err);

  if (l_provider_call_nesting) {
    current_SID = save_current_SID;
    sourcing_name = save_sourcing_name;
    sourcing_lnum = save_sourcing_lnum;
    autocmd_fname = save_autocmd_fname;
    autocmd_match = save_autocmd_match;
    autocmd_fname_full = save_autocmd_fname_full;
    autocmd_bufnr = save_autocmd_bufnr;
    restore_funccal(save_funccalp);
  }

  if (((&err)->type != kErrorTypeNone)) {
    nvim_err_writeln(cstr_as_string(err.msg));
    goto end;
  }

  if (!object_to_vim(result, rettv, &err)) {
    emsgf((const char *) (libintl_gettext((char *)("Error converting the call result: %s"))), (err.msg));
  }

end:
  api_free_object(result);
  api_clear_error(&err);
}


static void f_rpcstart(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_STRING
      || (argvars[1].v_type != VAR_LIST && argvars[1].v_type != VAR_UNKNOWN)) {

    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }

  list_T *args = ((void*)0);
  int argsl = 0;
  if (argvars[1].v_type == VAR_LIST) {
    args = argvars[1].vval.v_list;
    argsl = tv_list_len(args);

    int i = 0;
    do { const list_T *const l_ = (args); if (l_ != ((void*)0)) { for (const listitem_T *arg = l_->lv_first; arg != ((void*)0); arg = arg->li_next) { { if ((&(arg)->li_tv)->v_type != VAR_STRING) { emsgf(libintl_gettext((char *)("E5010: List item %d of the second argument is not a string")), i); return; } i++; } } } } while (0);







  }

  if (argvars[0].vval.v_string == ((void*)0) || argvars[0].vval.v_string[0] == '\000') {
    emsg((char_u *)(libintl_gettext((char *)(e_api_spawn_failed))));
    return;
  }


  int argvl = argsl + 2;
  char **argv = xmalloc(sizeof(char_u *) * argvl);


  argv[0] = xstrdup((char *)argvars[0].vval.v_string);

  int i = 1;

  if (argsl > 0) {
    do { const list_T *const l_ = (args); if (l_ != ((void*)0)) { for (const listitem_T *arg = l_->lv_first; arg != ((void*)0); arg = arg->li_next) { { argv[i++] = xstrdup(tv_get_string((&(arg)->li_tv))); } } } } while (0);


  }


  argv[i] = ((void*)0);

  Channel *chan = channel_job_start(argv, ((CallbackReader){ .cb = ((Callback){ .type = kCallbackNone }), .self = ((void*)0), .buffer = { 0, 0, 0, 1, ((void*)0) }, .buffered = 0 }),
                                    ((CallbackReader){ .cb = ((Callback){ .type = kCallbackNone }), .self = ((void*)0), .buffer = { 0, 0, 0, 1, ((void*)0) }, .buffered = 0 }), ((Callback){ .type = kCallbackNone }),
                                    0, 1, 0, ((void*)0), 0, 0, ((void*)0),
                                    &rettv->vval.v_number);
  if (chan) {
    channel_create_event(chan, ((void*)0));
  }
}


static void f_rpcstop(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_NUMBER;
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_NUMBER) {

    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }


  uint64_t id = argvars[0].vval.v_number;
  if (find_job(id, 0)) {
    f_jobstop(argvars, rettv, ((void*)0));
  } else {
    const char *error;
    rettv->vval.v_number = channel_close(argvars[0].vval.v_number,
                                         kChannelPartRpc, &error);
    if (!rettv->vval.v_number) {
      emsg((char_u *)(error));
    }
  }
}




static void f_screenattr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int c;

  const int row = (int)tv_get_number_chk(&argvars[0], ((void*)0)) - 1;
  const int col = (int)tv_get_number_chk(&argvars[1], ((void*)0)) - 1;
  if (row < 0 || row >= screen_Rows
      || col < 0 || col >= screen_Columns) {
    c = -1;
  } else {
    c = ScreenAttrs[LineOffset[row] + col];
  }
  rettv->vval.v_number = c;
}




static void f_screenchar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int off;
  int c;

  const int row = tv_get_number_chk(&argvars[0], ((void*)0)) - 1;
  const int col = tv_get_number_chk(&argvars[1], ((void*)0)) - 1;
  if (row < 0 || row >= screen_Rows
      || col < 0 || col >= screen_Columns) {
    c = -1;
  } else {
    off = LineOffset[row] + col;
    if (1 && ScreenLinesUC[off] != 0)
      c = ScreenLinesUC[off];
    else
      c = ScreenLines[off];
  }
  rettv->vval.v_number = c;
}






static void f_screencol(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = ui_current_col() + 1;
}




static void f_screenrow(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = ui_current_row() + 1;
}




static void f_search(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int flags = 0;

  rettv->vval.v_number = search_cmn(argvars, ((void*)0), &flags);
}




static void f_searchdecl(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int locally = 1;
  int thisblock = 0;
  _Bool error = 0;

  rettv->vval.v_number = 1;

  const char *const name = tv_get_string_chk(&argvars[0]);
  if (argvars[1].v_type != VAR_UNKNOWN) {
    locally = tv_get_number_chk(&argvars[1], &error) == 0;
    if (!error && argvars[2].v_type != VAR_UNKNOWN) {
      thisblock = tv_get_number_chk(&argvars[2], &error) != 0;
    }
  }
  if (!error && name != ((void*)0)) {
    rettv->vval.v_number = find_decl((char_u *)name, strlen(name), locally,
                                     thisblock, 0x400) == 0;
  }
}




static int searchpair_cmn(typval_T *argvars, pos_T *match_pos)
{
  _Bool save_p_ws = p_ws;
  int dir;
  int flags = 0;
  int retval = 0;
  long lnum_stop = 0;
  long time_limit = 0;


  char nbuf1[NUMBUFLEN];
  char nbuf2[NUMBUFLEN];
  char nbuf3[NUMBUFLEN];
  const char *spat = tv_get_string_chk(&argvars[0]);
  const char *mpat = tv_get_string_buf_chk(&argvars[1], nbuf1);
  const char *epat = tv_get_string_buf_chk(&argvars[2], nbuf2);
  if (spat == ((void*)0) || mpat == ((void*)0) || epat == ((void*)0)) {
    goto theend;
  }


  dir = get_search_arg(&argvars[3], &flags);
  if (dir == 0) {
    goto theend;
  }



  if ((flags & (0x40 | 0x20)) != 0
      || ((flags & 0x01) && (flags & 0x08))) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (tv_get_string(&argvars[3])));
    goto theend;
  }


  if (flags & 0x02) {
    p_ws = 0;
  }


  const char *skip;
  if (argvars[3].v_type == VAR_UNKNOWN
      || argvars[4].v_type == VAR_UNKNOWN) {
    skip = "";
  } else {
    skip = tv_get_string_buf_chk(&argvars[4], nbuf3);
    if (skip == ((void*)0)) {
      goto theend;
    }
    if (argvars[5].v_type != VAR_UNKNOWN) {
      lnum_stop = tv_get_number_chk(&argvars[5], ((void*)0));
      if (lnum_stop < 0) {
        goto theend;
      }
      if (argvars[6].v_type != VAR_UNKNOWN) {
        time_limit = tv_get_number_chk(&argvars[6], ((void*)0));
        if (time_limit < 0) {
          goto theend;
        }
      }
    }
  }

  retval = do_searchpair(
      (char_u *)spat, (char_u *)mpat, (char_u *)epat, dir, (char_u *)skip,
      flags, match_pos, lnum_stop, time_limit);

theend:
  p_ws = save_p_ws;

  return retval;
}




static void f_searchpair(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = searchpair_cmn(argvars, ((void*)0));
}




static void f_searchpairpos(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  pos_T match_pos;
  int lnum = 0;
  int col = 0;

  tv_list_alloc_ret(rettv);

  if (searchpair_cmn(argvars, &match_pos) > 0) {
    lnum = match_pos.lnum;
    col = match_pos.col;
  }

  tv_list_append_number(rettv->vval.v_list, (varnumber_T)lnum);
  tv_list_append_number(rettv->vval.v_list, (varnumber_T)col);
}






long
do_searchpair (
    char_u *spat,
    char_u *mpat,
    char_u *epat,
    int dir,
    char_u *skip,
    int flags,
    pos_T *match_pos,
    linenr_T lnum_stop,
    long time_limit
)
{
  char_u *save_cpo;
  char_u *pat, *pat2 = ((void*)0), *pat3 = ((void*)0);
  long retval = 0;
  pos_T pos;
  pos_T firstpos;
  pos_T foundpos;
  pos_T save_cursor;
  pos_T save_pos;
  int n;
  int r;
  int nest = 1;
  int options = 0x400;
  proftime_T tm;
  size_t pat2_len;
  size_t pat3_len;


  save_cpo = p_cpo;
  p_cpo = empty_option;


  tm = profile_setlimit(time_limit);



  pat2_len = strlen((char *)(spat)) + strlen((char *)(epat)) + 17;
  pat2 = xmalloc(pat2_len);
  pat3_len = strlen((char *)(spat)) + strlen((char *)(mpat)) + strlen((char *)(epat)) + 25;
  pat3 = xmalloc(pat3_len);
  __builtin___snprintf_chk ((char *)pat2, pat2_len, 0, __builtin_object_size ((char *)pat2, 1 > 1 ? 1 : 0), "\\m\\(%s\\m\\)\\|\\(%s\\m\\)", spat, epat);
  if (*mpat == '\000') {
    __builtin___strcpy_chk ((char *)(pat3), (char *)(pat2), __builtin_object_size ((char *)(pat3), 1 > 1 ? 1 : 0));
  } else {
    __builtin___snprintf_chk ((char *)pat3, pat3_len, 0, __builtin_object_size ((char *)pat3, 1 > 1 ? 1 : 0), "\\m\\(%s\\m\\)\\|\\(%s\\m\\)\\|\\(%s\\m\\)", spat, epat, mpat);

  }
  if (flags & 0x10) {
    options |= 0x100;
  }

  save_cursor = curwin->w_cursor;
  pos = curwin->w_cursor;
  clearpos(&firstpos);
  clearpos(&foundpos);
  pat = pat3;
  for (;; ) {
    n = searchit(curwin, curbuf, &pos, dir, pat, 1L,
        options, 0, lnum_stop, &tm);
    if (n == 0 || (firstpos.lnum != 0 && equalpos(pos, firstpos)))

      break;

    if (firstpos.lnum == 0)
      firstpos = pos;
    if (equalpos(pos, foundpos)) {



      if (dir == BACKWARD)
        decl(&pos);
      else
        incl(&pos);
    }
    foundpos = pos;


    options &= ~0x100;


    if (*skip != '\000') {
      save_pos = curwin->w_cursor;
      curwin->w_cursor = pos;
      _Bool err;
      r = eval_to_bool(skip, &err, ((void*)0), 0);
      curwin->w_cursor = save_pos;
      if (err) {

        curwin->w_cursor = save_cursor;
        retval = -1;
        break;
      }
      if (r)
        continue;
    }

    if ((dir == BACKWARD && n == 3) || (dir == FORWARD && n == 2)) {


      ++nest;
      pat = pat2;
    } else {


      if (--nest == 1)
        pat = pat3;
    }

    if (nest == 0) {

      if (flags & 0x04)
        ++retval;
      else
        retval = pos.lnum;
      if (flags & 0x08)
        setpcmark();
      curwin->w_cursor = pos;
      if (!(flags & 0x02))
        break;
      nest = 1;
    }
  }

  if (match_pos != ((void*)0)) {

    match_pos->lnum = curwin->w_cursor.lnum;
    match_pos->col = curwin->w_cursor.col + 1;
  }


  if ((flags & 0x01) || retval == 0)
    curwin->w_cursor = save_cursor;

  xfree(pat2);
  xfree(pat3);
  if (p_cpo == empty_option)
    p_cpo = save_cpo;
  else

    free_string_option(save_cpo);

  return retval;
}




static void f_searchpos(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  pos_T match_pos;
  int lnum = 0;
  int col = 0;
  int n;
  int flags = 0;

  tv_list_alloc_ret(rettv);

  n = search_cmn(argvars, &match_pos, &flags);
  if (n > 0) {
    lnum = match_pos.lnum;
    col = match_pos.col;
  }

  tv_list_append_number(rettv->vval.v_list, (varnumber_T)lnum);
  tv_list_append_number(rettv->vval.v_list, (varnumber_T)col);
  if (flags & 0x20) {
    tv_list_append_number(rettv->vval.v_list, (varnumber_T)n);
  }
}


static void f_serverlist(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  size_t n;
  char **addrs = server_address_list(&n);


  list_T *l = tv_list_alloc_ret(rettv);
  for (size_t i = 0; i < n; i++) {
    tv_list_append_allocated_string(l, addrs[i]);
  }
  xfree(addrs);
}


static void f_serverstart(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);

  if (check_restricted() || check_secure()) {
    return;
  }

  char *address;

  if (argvars[0].v_type != VAR_UNKNOWN) {
    if (argvars[0].v_type != VAR_STRING) {
      emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
      return;
    } else {
      address = xstrdup(tv_get_string(argvars));
    }
  } else {
    address = server_address_new();
  }

  int result = server_start(address);
  xfree(address);

  if (result != 0) {
    emsgf((const char *) ("Failed to start server: %s"), (result > 0 ? "Unknown system error" : uv_strerror(result)));

    return;
  }



  size_t n;
  char **addrs = server_address_list(&n);
  rettv->vval.v_string = (char_u *)addrs[n - 1];

  n--;
  for (size_t i = 0; i < n; i++) {
    xfree(addrs[i]);
  }
  xfree(addrs);
}


static void f_serverstop(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_STRING) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }

  if (argvars[0].vval.v_string) {
    server_stop((char *) argvars[0].vval.v_string);
  }
}




static void f_setbufvar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (check_restricted()
      || check_secure()
      || !tv_check_str_or_nr(&argvars[0])) {
    return;
  }
  const char *varname = tv_get_string_chk(&argvars[1]);
  buf_T *const buf = get_buf_tv(&argvars[0], 0);
  typval_T *varp = &argvars[2];

  if (buf != ((void*)0) && varname != ((void*)0)) {
    if (*varname == '&') {
      long numval;
      _Bool error = 0;
      aco_save_T aco;


      aucmd_prepbuf(&aco, buf);

      varname++;
      numval = tv_get_number_chk(varp, &error);
      char nbuf[NUMBUFLEN];
      const char *const strval = tv_get_string_buf_chk(varp, nbuf);
      if (!error && strval != ((void*)0)) {
        set_option_value(varname, numval, strval, OPT_LOCAL);
      }


      aucmd_restbuf(&aco);
    } else {
      buf_T *save_curbuf = curbuf;

      const size_t varname_len = strlen((char *)(varname));
      char *const bufvarname = xmalloc(varname_len + 3);
      curbuf = buf;
      __builtin___memcpy_chk (bufvarname, "b:", 2, __builtin_object_size (bufvarname, 0));
      __builtin___memcpy_chk (bufvarname + 2, varname, varname_len + 1, __builtin_object_size (bufvarname + 2, 0));
      set_var(bufvarname, varname_len + 2, varp, 1);
      xfree(bufvarname);
      curbuf = save_curbuf;
    }
  }
}

static void f_setcharsearch(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  dict_T *d;
  dictitem_T *di;

  if (argvars[0].v_type != VAR_DICT) {
    emsg((char_u *)(libintl_gettext((char *)(e_dictreq))));
    return;
  }

  if ((d = argvars[0].vval.v_dict) != ((void*)0)) {
    char_u *const csearch = (char_u *)tv_dict_get_string(d, "char", 0);
    if (csearch != ((void*)0)) {
      if (1) {
        int pcc[6];
        int c = utfc_ptr2char(csearch, pcc);
        set_last_csearch(c, csearch, utfc_ptr2len(csearch));
      }
      else
        set_last_csearch(utf_ptr2char(csearch),
                         csearch, utfc_ptr2len(csearch));
    }

    di = tv_dict_find(d, ("forward"), (sizeof("forward") - 1));
    if (di != ((void*)0)) {
      set_csearch_direction(tv_get_number(&di->di_tv) ? FORWARD : BACKWARD);
    }

    di = tv_dict_find(d, ("until"), (sizeof("until") - 1));
    if (di != ((void*)0)) {
      set_csearch_until(!!tv_get_number(&di->di_tv));
    }
  }
}




static void f_setcmdpos(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const int pos = (int)tv_get_number(&argvars[0]) - 1;

  if (pos >= 0) {
    rettv->vval.v_number = set_cmdline_pos(pos);
  }
}



static void f_setfperm(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = 0;

  const char *const fname = tv_get_string_chk(&argvars[0]);
  if (fname == ((void*)0)) {
    return;
  }

  char modebuf[NUMBUFLEN];
  const char *const mode_str = tv_get_string_buf_chk(&argvars[1], modebuf);
  if (mode_str == ((void*)0)) {
    return;
  }
  if (strlen(mode_str) != 9) {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (mode_str));
    return;
  }

  int mask = 1;
  int mode = 0;
  for (int i = 8; i >= 0; i--) {
    if (mode_str[i] != '-') {
      mode |= mask;
    }
    mask = mask << 1;
  }
  rettv->vval.v_number = os_setperm(fname, mode) == 1;
}




static void f_setline(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  list_T *l = ((void*)0);
  listitem_T *li = ((void*)0);
  long added = 0;
  linenr_T lcount = curbuf->b_ml.ml_line_count;

  linenr_T lnum = tv_get_lnum(&argvars[0]);
  const char *line = ((void*)0);
  if (argvars[1].v_type == VAR_LIST) {
    l = argvars[1].vval.v_list;
    li = tv_list_first(l);
  } else {
    line = tv_get_string_chk(&argvars[1]);
  }


  for (;; ) {
    if (argvars[1].v_type == VAR_LIST) {

      if (li == ((void*)0)) {
        break;
      }
      line = tv_get_string_chk((&(li)->li_tv));
      li = ((li)->li_next);
    }

    rettv->vval.v_number = 1;
    if (line == ((void*)0) || lnum < 1 || lnum > curbuf->b_ml.ml_line_count + 1) {
      break;
    }



    if (u_sync_once == 2) {
      u_sync_once = 1;
      u_sync(1);
    }

    if (lnum <= curbuf->b_ml.ml_line_count) {

      if (u_savesub(lnum) == 1
          && ml_replace(lnum, (char_u *)line, 1) == 1) {
        changed_bytes(lnum, 0);
        if (lnum == curwin->w_cursor.lnum)
          check_cursor_col();
        rettv->vval.v_number = 0;
      }
    } else if (added > 0 || u_save(lnum - 1, lnum) == 1) {

      added++;
      if (ml_append(lnum - 1, (char_u *)line, 0, 0) == 1) {
        rettv->vval.v_number = 0;
      }
    }

    if (l == ((void*)0))
      break;
    ++lnum;
  }

  if (added > 0)
    appended_lines_mark(lcount, added);
}
# 14618 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static void set_qf_ll_list(win_T *wp, typval_T *args, typval_T *rettv)
  FUNC_ATTR_NONNULL_ARG(2, 3)
{
  static char *e_invact = "E927: Invalid action: '%s'";
  const char *title = ((void*)0);
  int action = ' ';
  rettv->vval.v_number = -1;
  dict_T *d = ((void*)0);

  typval_T *list_arg = &args[0];
  if (list_arg->v_type != VAR_LIST) {
    emsg((char_u *)(libintl_gettext((char *)(e_listreq))));
    return;
  }

  typval_T *action_arg = &args[1];
  if (action_arg->v_type == VAR_UNKNOWN) {

    goto skip_args;
  } else if (action_arg->v_type != VAR_STRING) {
    emsg((char_u *)(libintl_gettext((char *)(e_stringreq))));
    return;
  }
  const char *const act = tv_get_string_chk(action_arg);
  if ((*act == 'a' || *act == 'r' || *act == ' ' || *act == 'f')
      && act[1] == '\000') {
    action = *act;
  } else {
    emsgf((const char *) (libintl_gettext((char *)(e_invact))), (act));
    return;
  }

  typval_T *title_arg = &args[2];
  if (title_arg->v_type == VAR_UNKNOWN) {

    goto skip_args;
  } else if (title_arg->v_type == VAR_STRING) {
    title = tv_get_string_chk(title_arg);
    if (!title) {

      return;
    }
  } else if (title_arg->v_type == VAR_DICT) {
    d = title_arg->vval.v_dict;
  } else {
    emsgf(libintl_gettext((char *)(e_dictreq)));
    return;
  }

skip_args:
  if (!title) {
    title = (wp ? "setloclist()" : "setqflist()");
  }

  list_T *const l = list_arg->vval.v_list;
  if (set_errorlist(wp, l, action, (char_u *)title, d) == 1) {
    rettv->vval.v_number = 0;
  }
}




static void f_setloclist(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  win_T *win;

  rettv->vval.v_number = -1;

  win = find_win_by_nr(&argvars[0], ((void*)0));
  if (win != ((void*)0)) {
    set_qf_ll_list(win, &argvars[1], rettv);
  }
}




static void f_setmatches(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  dict_T *d;
  list_T *s = ((void*)0);

  rettv->vval.v_number = -1;
  if (argvars[0].v_type != VAR_LIST) {
    emsg((char_u *)(libintl_gettext((char *)(e_listreq))));
    return;
  }
  list_T *const l = argvars[0].vval.v_list;


  int i = 0;
  do { const list_T *const l_ = (l); if (l_ != ((void*)0)) { for (const listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { if ((&(li)->li_tv)->v_type != VAR_DICT || (d = (&(li)->li_tv)->vval.v_dict) == ((void*)0)) { emsgf(libintl_gettext((char *)("E474: List item %d is either not a dictionary " "or an empty one")), i); return; } if (!(tv_dict_find(d, ("group"), (sizeof("group") - 1)) != ((void*)0) && (tv_dict_find(d, ("pattern"), (sizeof("pattern") - 1)) != ((void*)0) || tv_dict_find(d, ("pos1"), (sizeof("pos1") - 1)) != ((void*)0)) && tv_dict_find(d, ("priority"), (sizeof("priority") - 1)) != ((void*)0) && tv_dict_find(d, ("id"), (sizeof("id") - 1)) != ((void*)0))) { emsgf(libintl_gettext((char *)("E474: List item %d is missing one of the required keys")), i); return; } i++; } } } } while (0);
# 14728 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  clear_matches(curwin);
  _Bool match_add_failed = 0;
  do { const list_T *const l_ = (l); if (l_ != ((void*)0)) { for (const listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { int i = 0; d = (&(li)->li_tv)->vval.v_dict; dictitem_T *const di = tv_dict_find(d, ("pattern"), (sizeof("pattern") - 1)); if (di == ((void*)0)) { if (s == ((void*)0)) { s = tv_list_alloc(); } for (i = 1; i < 9; i++) { char buf[5]; __builtin___snprintf_chk (buf, sizeof(buf), 0, __builtin_object_size (buf, 1 > 1 ? 1 : 0), "pos%d", i); dictitem_T *const pos_di = tv_dict_find(d, buf, -1); if (pos_di != ((void*)0)) { if (pos_di->di_tv.v_type != VAR_LIST) { return; } tv_list_append_tv(s, &pos_di->di_tv); tv_list_ref(s); } else { break; } } } char group_buf[NUMBUFLEN]; const char *const group = tv_dict_get_string_buf(d, "group", group_buf); const int priority = (int)tv_dict_get_number(d, "priority"); const int id = (int)tv_dict_get_number(d, "id"); dictitem_T *const conceal_di = tv_dict_find(d, ("conceal"), (sizeof("conceal") - 1)); const char *const conceal = (conceal_di != ((void*)0) ? tv_get_string(&conceal_di->di_tv) : ((void*)0)); if (i == 0) { if (match_add(curwin, group, tv_dict_get_string(d, "pattern", 0), priority, id, ((void*)0), conceal) != id) { match_add_failed = 1; } } else { if (match_add(curwin, group, ((void*)0), priority, id, s, conceal) != id) { match_add_failed = 1; } tv_list_unref(s); s = ((void*)0); } } } } } while (0);
# 14787 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  if (!match_add_failed) {
    rettv->vval.v_number = 0;
  }
}




static void f_setpos(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  pos_T pos;
  int fnum;
  colnr_T curswant = -1;

  rettv->vval.v_number = -1;
  const char *const name = tv_get_string_chk(argvars);
  if (name != ((void*)0)) {
    if (list2fpos(&argvars[1], &pos, &fnum, &curswant) == 1) {
      if (--pos.col < 0) {
        pos.col = 0;
      }
      if (name[0] == '.' && name[1] == '\000') {

        if (fnum == curbuf->handle) {
          curwin->w_cursor = pos;
          if (curswant >= 0) {
            curwin->w_curswant = curswant - 1;
            curwin->w_set_curswant = 0;
          }
          check_cursor();
          rettv->vval.v_number = 0;
        } else {
          emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
        }
      } else if (name[0] == '\'' && name[1] != '\000' && name[2] == '\000') {

        if (setmark_pos((uint8_t)name[1], &pos, fnum) == 1) {
          rettv->vval.v_number = 0;
        }
      } else {
        emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
      }
    }
  }
}




static void f_setqflist(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  set_qf_ll_list(((void*)0), argvars, rettv);
}




static void f_setreg(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int regname;
  _Bool append = 0;
  MotionType yank_type;
  long block_len;

  block_len = -1;
  yank_type = kMTUnknown;

  rettv->vval.v_number = 1;

  const char *const strregname = tv_get_string_chk(argvars);
  if (strregname == ((void*)0)) {
    return;
  }
  regname = (uint8_t)(*strregname);
  if (regname == 0 || regname == '@') {
    regname = '"';
  }

  _Bool set_unnamed = 0;
  if (argvars[2].v_type != VAR_UNKNOWN) {
    const char *stropt = tv_get_string_chk(&argvars[2]);
    if (stropt == ((void*)0)) {
      return;
    }
    for (; *stropt != '\000'; stropt++) {
      switch (*stropt) {
        case 'a': case 'A': {
          append = 1;
          break;
        }
        case 'v': case 'c': {
          yank_type = kMTCharWise;
          break;
        }
        case 'V': case 'l': {
          yank_type = kMTLineWise;
          break;
        }
        case 'b': case 22: {
          yank_type = kMTBlockWise;
          if (ascii_isdigit(stropt[1])) {
            stropt++;
            block_len = getdigits_long((char_u **)&stropt) - 1;
            stropt--;
          }
          break;
        }
        case 'u': case '"': {
          set_unnamed = 1;
          break;
        }
      }
    }
  }

  if (argvars[1].v_type == VAR_LIST) {
    list_T *ll = argvars[1].vval.v_list;

    const int len = tv_list_len(ll);



    char **lstval = xmalloc(sizeof(char *) * ((len + 1) * 2));
    const char **curval = (const char **)lstval;
    char **allocval = lstval + len + 2;
    char **curallocval = allocval;

    do { const list_T *const l_ = (ll); if (l_ != ((void*)0)) { for (const listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { char buf[NUMBUFLEN]; *curval = tv_get_string_buf_chk((&(li)->li_tv), buf); if (*curval == ((void*)0)) { goto free_lstval; } if (*curval == buf) { *curallocval = xstrdup(*curval); *curval = *curallocval; curallocval++; } curval++; } } } } while (0);
# 14929 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
    *curval++ = ((void*)0);

    write_reg_contents_lst(regname, (char_u **)lstval, append, yank_type,
                           block_len);

free_lstval:
    while (curallocval > allocval) {
      xfree(*--curallocval);
    }
    xfree(lstval);
  } else {
    const char *strval = tv_get_string_chk(&argvars[1]);
    if (strval == ((void*)0)) {
      return;
    }
    write_reg_contents_ex(regname, (const char_u *)strval, strlen((char *)(strval)),
                          append, yank_type, block_len);
  }
  rettv->vval.v_number = 0;

  if (set_unnamed) {

    if (op_register_set_previous(regname)) { }
  }
}




static void f_settabvar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  tabpage_T *const tp = find_tabpage((int)tv_get_number_chk(&argvars[0], ((void*)0)));
  const char *const varname = tv_get_string_chk(&argvars[1]);
  typval_T *const varp = &argvars[2];

  if (varname != ((void*)0) && tp != ((void*)0)) {
    tabpage_T *const save_curtab = curtab;
    goto_tabpage_tp(tp, 0, 0);

    const size_t varname_len = strlen(varname);
    char *const tabvarname = xmalloc(varname_len + 3);
    __builtin___memcpy_chk (tabvarname, "t:", 2, __builtin_object_size (tabvarname, 0));
    __builtin___memcpy_chk (tabvarname + 2, varname, varname_len + 1, __builtin_object_size (tabvarname + 2, 0));
    set_var(tabvarname, varname_len + 2, varp, 1);
    xfree(tabvarname);


    if (valid_tabpage(save_curtab)) {
      goto_tabpage_tp(save_curtab, 0, 0);
    }
  }
}




static void f_settabwinvar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  setwinvar(argvars, rettv, 1);
}




static void f_setwinvar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  setwinvar(argvars, rettv, 0);
}





static void setwinvar(typval_T *argvars, typval_T *rettv, int off)
{
  if (check_restricted() || check_secure()) {
    return;
  }

  tabpage_T *tp = ((void*)0);
  if (off == 1) {
    tp = find_tabpage((int)tv_get_number_chk(&argvars[0], ((void*)0)));
  } else {
    tp = curtab;
  }
  win_T *const win = find_win_by_nr(&argvars[off], tp);
  const char *varname = tv_get_string_chk(&argvars[off + 1]);
  typval_T *varp = &argvars[off + 2];

  if (win != ((void*)0) && varname != ((void*)0) && varp != ((void*)0)) {
    win_T *save_curwin;
    tabpage_T *save_curtab;
    _Bool need_switch_win = tp != curtab || win != curwin;
    if (!need_switch_win
        || switch_win(&save_curwin, &save_curtab, win, tp, 1) == 1) {
      if (*varname == '&') {
        long numval;
        _Bool error = 0;

        varname++;
        numval = tv_get_number_chk(varp, &error);
        char nbuf[NUMBUFLEN];
        const char *const strval = tv_get_string_buf_chk(varp, nbuf);
        if (!error && strval != ((void*)0)) {
          set_option_value(varname, numval, strval, OPT_LOCAL);
        }
      } else {
        const size_t varname_len = strlen(varname);
        char *const winvarname = xmalloc(varname_len + 3);
        __builtin___memcpy_chk (winvarname, "w:", 2, __builtin_object_size (winvarname, 0));
        __builtin___memcpy_chk (winvarname + 2, varname, varname_len + 1, __builtin_object_size (winvarname + 2, 0));
        set_var(winvarname, varname_len + 2, varp, 1);
        xfree(winvarname);
      }
    }
    if (need_switch_win) {
      restore_win(save_curwin, save_curtab, 1);
    }
  }
}


static void f_sha256(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *p = tv_get_string(&argvars[0]);
  const char *hash = sha256_bytes((const uint8_t *)p, strlen(p) , ((void*)0), 0);


  rettv->vval.v_string = (char_u *)xstrdup(hash);
  rettv->v_type = VAR_STRING;
}




static void f_shellescape(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_string = vim_strsave_shellescape(
      (const char_u *)tv_get_string(&argvars[0]), non_zero_arg(&argvars[1]),
      1);
  rettv->v_type = VAR_STRING;
}




static void f_shiftwidth(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = get_sw_value(curbuf);
}




static void f_simplify(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *const p = tv_get_string(&argvars[0]);
  rettv->vval.v_string = (char_u *)xstrdup(p);
  simplify_filename(rettv->vval.v_string);
  rettv->v_type = VAR_STRING;
}


static void f_sockconnect(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (argvars[0].v_type != VAR_STRING || argvars[1].v_type != VAR_STRING) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }
  if (argvars[2].v_type != VAR_DICT && argvars[2].v_type != VAR_UNKNOWN) {

    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("expected dictionary"));
    return;
  }

  const char *mode = tv_get_string(&argvars[0]);
  const char *address = tv_get_string(&argvars[1]);

  _Bool tcp;
  if (strcmp(mode, "tcp") == 0) {
    tcp = 1;
  } else if (strcmp(mode, "pipe") == 0) {
    tcp = 0;
  } else {
    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("invalid mode"));
    return;
  }

  _Bool rpc = 0;
  CallbackReader on_data = ((CallbackReader){ .cb = ((Callback){ .type = kCallbackNone }), .self = ((void*)0), .buffer = { 0, 0, 0, 1, ((void*)0) }, .buffered = 0 });
  if (argvars[2].v_type == VAR_DICT) {
    dict_T *opts = argvars[2].vval.v_dict;
    rpc = tv_dict_get_number(opts, "rpc") != 0;

    if (!tv_dict_get_callback(opts, ("on_data"), (sizeof("on_data") - 1), &on_data.cb)) {
      return;
    }
    on_data.buffered = tv_dict_get_number(opts, "data_buffered");
    if (on_data.buffered && on_data.cb.type == kCallbackNone) {
      on_data.self = opts;
    }
  }

  const char *error = ((void*)0);
  uint64_t id = channel_connect(tcp, address, rpc, on_data, 50, &error);

  if (error) {
    emsgf((const char *) (libintl_gettext((char *)("connection failed: %s"))), (error));
  }

  rettv->vval.v_number = (varnumber_T)id;
  rettv->v_type = VAR_NUMBER;
}


typedef struct {
  int item_compare_ic;
  _Bool item_compare_numeric;
  _Bool item_compare_numbers;
  _Bool item_compare_float;
  const char *item_compare_func;
  partial_T *item_compare_partial;
  dict_T *item_compare_selfdict;
  _Bool item_compare_func_err;
} sortinfo_T;
static sortinfo_T *sortinfo = ((void*)0);






static int item_compare(const void *s1, const void *s2, _Bool keep_zero)
{
  ListSortItem *const si1 = (ListSortItem *)s1;
  ListSortItem *const si2 = (ListSortItem *)s2;

  typval_T *const tv1 = (&(si1->item)->li_tv);
  typval_T *const tv2 = (&(si2->item)->li_tv);

  int res;

  if (sortinfo->item_compare_numbers) {
    const varnumber_T v1 = tv_get_number(tv1);
    const varnumber_T v2 = tv_get_number(tv2);

    res = v1 == v2 ? 0 : v1 > v2 ? 1 : -1;
    goto item_compare_end;
  }

  if (sortinfo->item_compare_float) {
    const float_T v1 = tv_get_float(tv1);
    const float_T v2 = tv_get_float(tv2);

    res = v1 == v2 ? 0 : v1 > v2 ? 1 : -1;
    goto item_compare_end;
  }

  char *tofree1 = ((void*)0);
  char *tofree2 = ((void*)0);
  char *p1;
  char *p2;




  if (tv1->v_type == VAR_STRING) {
    if (tv2->v_type != VAR_STRING || sortinfo->item_compare_numeric) {
      p1 = "'";
    } else {
      p1 = (char *)tv1->vval.v_string;
    }
  } else {
    tofree1 = p1 = encode_tv2string(tv1, ((void*)0));
  }
  if (tv2->v_type == VAR_STRING) {
    if (tv1->v_type != VAR_STRING || sortinfo->item_compare_numeric) {
      p2 = "'";
    } else {
      p2 = (char *)tv2->vval.v_string;
    }
  } else {
    tofree2 = p2 = encode_tv2string(tv2, ((void*)0));
  }
  if (p1 == ((void*)0)) {
    p1 = "";
  }
  if (p2 == ((void*)0)) {
    p2 = "";
  }
  if (!sortinfo->item_compare_numeric) {
    if (sortinfo->item_compare_ic) {
      res = strcasecmp((char *)(p1), (char *)(p2));
    } else {
      res = strcmp((char *)(p1), (char *)(p2));
    }
  } else {
    double n1, n2;
    n1 = strtod(p1, &p1);
    n2 = strtod(p2, &p2);
    res = n1 == n2 ? 0 : n1 > n2 ? 1 : -1;
  }

  xfree(tofree1);
  xfree(tofree2);

item_compare_end:


  if (res == 0 && !keep_zero) {


    res = si1->idx > si2->idx ? 1 : -1;
  }
  return res;
}

static int item_compare_keeping_zero(const void *s1, const void *s2)
{
  return item_compare(s1, s2, 1);
}

static int item_compare_not_keeping_zero(const void *s1, const void *s2)
{
  return item_compare(s1, s2, 0);
}

static int item_compare2(const void *s1, const void *s2, _Bool keep_zero)
{
  ListSortItem *si1, *si2;
  int res;
  typval_T rettv;
  typval_T argv[3];
  int dummy;
  const char *func_name;
  partial_T *partial = sortinfo->item_compare_partial;


  if (sortinfo->item_compare_func_err) {
    return 0;
  }

  si1 = (ListSortItem *)s1;
  si2 = (ListSortItem *)s2;

  if (partial == ((void*)0)) {
    func_name = sortinfo->item_compare_func;
  } else {
    func_name = (const char *)partial_name(partial);
  }



  tv_copy((&(si1->item)->li_tv), &argv[0]);
  tv_copy((&(si2->item)->li_tv), &argv[1]);

  rettv.v_type = VAR_UNKNOWN;
  res = call_func((const char_u *)func_name,
                  (int)strlen((char *)(func_name)),
                  &rettv, 2, argv, ((void*)0), 0L, 0L, &dummy, 1,
                  partial, sortinfo->item_compare_selfdict);
  tv_clear(&argv[0]);
  tv_clear(&argv[1]);

  if (res == 0) {
    res = 999;
  } else {
    res = tv_get_number_chk(&rettv, &sortinfo->item_compare_func_err);
  }
  if (sortinfo->item_compare_func_err) {
    res = 999;
  }
  tv_clear(&rettv);



  if (res == 0 && !keep_zero) {


    res = si1->idx > si2->idx ? 1 : -1;
  }

  return res;
}

static int item_compare2_keeping_zero(const void *s1, const void *s2)
{
  return item_compare2(s1, s2, 1);
}

static int item_compare2_not_keeping_zero(const void *s1, const void *s2)
{
  return item_compare2(s1, s2, 0);
}




static void do_sort_uniq(typval_T *argvars, typval_T *rettv, _Bool sort)
{
  ListSortItem *ptrs;
  long len;
  long i;



  sortinfo_T info;
  sortinfo_T *old_sortinfo = sortinfo;
  sortinfo = &info;

  const char *const arg_errmsg = (sort
                                  ? "sort() argument"
                                  : "uniq() argument");

  if (argvars[0].v_type != VAR_LIST) {
    emsgf((const char *) (libintl_gettext((char *)(e_listarg))), (sort ? "sort()" : "uniq()"));
  } else {
    list_T *const l = argvars[0].vval.v_list;
    if (tv_check_lock(tv_list_locked(l), arg_errmsg, (18446744073709551615ULL))) {
      goto theend;
    }
    rettv->vval.v_list = l;
    rettv->v_type = VAR_LIST;
    tv_list_ref(l);

    len = tv_list_len(l);
    if (len <= 1) {
      goto theend;
    }

    info.item_compare_ic = 0;
    info.item_compare_numeric = 0;
    info.item_compare_numbers = 0;
    info.item_compare_float = 0;
    info.item_compare_func = ((void*)0);
    info.item_compare_partial = ((void*)0);
    info.item_compare_selfdict = ((void*)0);

    if (argvars[1].v_type != VAR_UNKNOWN) {

      if (argvars[1].v_type == VAR_FUNC) {
        info.item_compare_func = (const char *)argvars[1].vval.v_string;
      } else if (argvars[1].v_type == VAR_PARTIAL) {
        info.item_compare_partial = argvars[1].vval.v_partial;
      } else {
        _Bool error = 0;

        i = tv_get_number_chk(&argvars[1], &error);
        if (error) {
          goto theend;
        }
        if (i == 1) {
          info.item_compare_ic = 1;
        } else if (argvars[1].v_type != VAR_NUMBER) {
          info.item_compare_func = tv_get_string(&argvars[1]);
        } else if (i != 0) {
          emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
          goto theend;
        }
        if (info.item_compare_func != ((void*)0)) {
          if (*info.item_compare_func == '\000') {

            info.item_compare_func = ((void*)0);
          } else if (strcmp(info.item_compare_func, "n") == 0) {
            info.item_compare_func = ((void*)0);
            info.item_compare_numeric = 1;
          } else if (strcmp(info.item_compare_func, "N") == 0) {
            info.item_compare_func = ((void*)0);
            info.item_compare_numbers = 1;
          } else if (strcmp(info.item_compare_func, "f") == 0) {
            info.item_compare_func = ((void*)0);
            info.item_compare_float = 1;
          } else if (strcmp(info.item_compare_func, "i") == 0) {
            info.item_compare_func = ((void*)0);
            info.item_compare_ic = 1;
          }
        }
      }

      if (argvars[2].v_type != VAR_UNKNOWN) {

        if (argvars[2].v_type != VAR_DICT) {
          emsg((char_u *)(libintl_gettext((char *)(e_dictreq))));
          goto theend;
        }
        info.item_compare_selfdict = argvars[2].vval.v_dict;
      }
    }


    ptrs = xmalloc((size_t)(len * sizeof(ListSortItem)));

    if (sort) {
      info.item_compare_func_err = 0;
      tv_list_item_sort(l, ptrs,
                        ((info.item_compare_func == ((void*)0)
                          && info.item_compare_partial == ((void*)0))
                         ? item_compare_not_keeping_zero
                         : item_compare2_not_keeping_zero),
                        &info.item_compare_func_err);
      if (info.item_compare_func_err) {
        emsg((char_u *)(libintl_gettext((char *)("E702: Sort compare function failed"))));
      }
    } else {
      ListSorter item_compare_func_ptr;


      info.item_compare_func_err = 0;
      if (info.item_compare_func != ((void*)0)
          || info.item_compare_partial != ((void*)0)) {
        item_compare_func_ptr = item_compare2_keeping_zero;
      } else {
        item_compare_func_ptr = item_compare_keeping_zero;
      }

      int idx = 0;
      for (listitem_T *li = ((tv_list_first(l))->li_next)
           ; li != ((void*)0);) {
        listitem_T *const prev_li = ((li)->li_prev);
        if (item_compare_func_ptr(&prev_li, &li) == 0) {
          if (info.item_compare_func_err) {
            emsg((char_u *)(libintl_gettext((char *)("E882: Uniq compare function failed"))));
            break;
          }
          li = tv_list_item_remove(l, li);
        } else {
          idx++;
          li = ((li)->li_next);
        }
      }
    }

    xfree(ptrs);
  }

theend:
  sortinfo = old_sortinfo;
}


static void f_sort(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  do_sort_uniq(argvars, rettv, 1);
}


static void f_stdioopen(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (argvars[0].v_type != VAR_DICT) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }


  _Bool rpc = 0;
  CallbackReader on_stdin = ((CallbackReader){ .cb = ((Callback){ .type = kCallbackNone }), .self = ((void*)0), .buffer = { 0, 0, 0, 1, ((void*)0) }, .buffered = 0 });
  dict_T *opts = argvars[0].vval.v_dict;
  rpc = tv_dict_get_number(opts, "rpc") != 0;

  if (!tv_dict_get_callback(opts, ("on_stdin"), (sizeof("on_stdin") - 1), &on_stdin.cb)) {
    return;
  }
  on_stdin.buffered = tv_dict_get_number(opts, "stdin_buffered");
  if (on_stdin.buffered && on_stdin.cb.type == kCallbackNone) {
    on_stdin.self = opts;
  }

  const char *error;
  uint64_t id = channel_from_stdio(rpc, on_stdin, &error);
  if (!id) {
    emsgf((const char *) (e_stdiochan2), (error));
  }


  rettv->vval.v_number = (varnumber_T)id;
  rettv->v_type = VAR_NUMBER;
}


static void f_uniq(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  do_sort_uniq(argvars, rettv, 0);
}




static void f_reltimefloat(typval_T *argvars , typval_T *rettv, FunPtr fptr)
  FUNC_ATTR_NONNULL_ALL
{
  proftime_T tm;

  rettv->v_type = VAR_FLOAT;
  rettv->vval.v_float = 0;
  if (list2proftime(&argvars[0], &tm) == 1) {
    rettv->vval.v_float = ((float_T)tm) / 1000000000;
  }
}




static void f_soundfold(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  const char *const s = tv_get_string(&argvars[0]);
  rettv->vval.v_string = (char_u *)eval_soundfold(s);
}




static void f_spellbadword(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *word = "";
  hlf_T attr = HLF_COUNT;
  size_t len = 0;

  tv_list_alloc_ret(rettv);

  if (argvars[0].v_type == VAR_UNKNOWN) {

    len = spell_move_to(curwin, FORWARD, 1, 1, &attr);
    if (len != 0) {
      word = (char *)get_cursor_pos_ptr();
    }
  } else if (curwin->w_onebuf_opt.wo_spell && *curbuf->b_s.b_p_spl != '\000') {
    const char *str = tv_get_string_chk(&argvars[0]);
    int capcol = -1;

    if (str != ((void*)0)) {

      while (*str != '\000') {
        len = spell_check(curwin, (char_u *)str, &attr, &capcol, 0);
        if (attr != HLF_COUNT) {
          word = str;
          break;
        }
        str += len;
      }
    }
  }

  ((void)0);
  tv_list_append_string(rettv->vval.v_list, word, len);
  tv_list_append_string(rettv->vval.v_list,
                        (attr == HLF_SPB ? "bad"
                         : attr == HLF_SPR ? "rare"
                         : attr == HLF_SPL ? "local"
                         : attr == HLF_SPC ? "caps"
                         : ((void*)0)), -1);
}




static void f_spellsuggest(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  _Bool typeerr = 0;
  int maxcount;
  garray_T ga;
  _Bool need_capital = 0;

  tv_list_alloc_ret(rettv);

  if (curwin->w_onebuf_opt.wo_spell && *curwin->w_s->b_p_spl != '\000') {
    const char *const str = tv_get_string(&argvars[0]);
    if (argvars[1].v_type != VAR_UNKNOWN) {
      maxcount = tv_get_number_chk(&argvars[1], &typeerr);
      if (maxcount <= 0) {
        return;
      }
      if (argvars[2].v_type != VAR_UNKNOWN) {
        need_capital = tv_get_number_chk(&argvars[2], &typeerr);
        if (typeerr) {
          return;
        }
      }
    } else
      maxcount = 25;

    spell_suggest_list(&ga, (char_u *)str, maxcount, need_capital, 0);

    for (int i = 0; i < ga.ga_len; i++) {
      char *p = ((char **)ga.ga_data)[i];
      tv_list_append_allocated_string(rettv->vval.v_list, p);
    }
    ga_clear(&ga);
  }
}

static void f_split(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  regmatch_T regmatch;
  char_u *save_cpo;
  int match;
  colnr_T col = 0;
  _Bool keepempty = 0;
  _Bool typeerr = 0;


  save_cpo = p_cpo;
  p_cpo = (char_u *)"";

  const char *str = tv_get_string(&argvars[0]);
  const char *pat = ((void*)0);
  char patbuf[NUMBUFLEN];
  if (argvars[1].v_type != VAR_UNKNOWN) {
    pat = tv_get_string_buf_chk(&argvars[1], patbuf);
    if (pat == ((void*)0)) {
      typeerr = 1;
    }
    if (argvars[2].v_type != VAR_UNKNOWN) {
      keepempty = (_Bool)tv_get_number_chk(&argvars[2], &typeerr);
    }
  }
  if (pat == ((void*)0) || *pat == '\000') {
    pat = "[\\x01- ]\\+";
  }

  tv_list_alloc_ret(rettv);

  if (typeerr)
    return;

  regmatch.regprog = vim_regcomp((char_u *)pat, 1 + 2);
  if (regmatch.regprog != ((void*)0)) {
    regmatch.rm_ic = 0;
    while (*str != '\000' || keepempty) {
      if (*str == '\000') {
        match = 0;
      } else {
        match = vim_regexec_nl(&regmatch, (char_u *)str, col);
      }
      const char *end;
      if (match) {
        end = (const char *)regmatch.startp[0];
      } else {
        end = str + strlen(str);
      }
      if (keepempty || end > str || (tv_list_len(rettv->vval.v_list) > 0
                                     && *str != '\000'
                                     && match
                                     && end < (const char *)regmatch.endp[0])) {
        tv_list_append_string(rettv->vval.v_list, str, end - str);
      }
      if (!match)
        break;

      if (regmatch.endp[0] > (char_u *)str) {
        col = 0;
      } else {

        col = (*utfc_ptr2len)(regmatch.endp[0]);
      }
      str = (const char *)regmatch.endp[0];
    }

    vim_regfree(regmatch.regprog);
  }

  p_cpo = save_cpo;
}




static void f_str2float(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char_u *p = skipwhite((const char_u *)tv_get_string(&argvars[0]));
  _Bool isneg = (*p == '-');

  if (*p == '+' || *p == '-') {
    p = skipwhite(p + 1);
  }
  (void)string2float((char *)p, &rettv->vval.v_float);
  if (isneg) {
    rettv->vval.v_float *= -1;
  }
  rettv->v_type = VAR_FLOAT;
}


static void f_str2nr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int base = 10;
  varnumber_T n;
  int what;

  if (argvars[1].v_type != VAR_UNKNOWN) {
    base = tv_get_number(&argvars[1]);
    if (base != 2 && base != 8 && base != 10 && base != 16) {
      emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
      return;
    }
  }

  char_u *p = skipwhite((const char_u *)tv_get_string(&argvars[0]));
  _Bool isneg = (*p == '-');
  if (*p == '+' || *p == '-') {
    p = skipwhite(p + 1);
  }
  switch (base) {
    case 2: {
      what = STR2NR_BIN | STR2NR_FORCE;
      break;
    }
    case 8: {
      what = STR2NR_OCT | STR2NR_FORCE;
      break;
    }
    case 16: {
      what = STR2NR_HEX | STR2NR_FORCE;
      break;
    }
    default: {
      what = 0;
    }
  }
  vim_str2nr(p, ((void*)0), ((void*)0), what, &n, ((void*)0), 0);
  if (isneg) {
    rettv->vval.v_number = -n;
  } else {
    rettv->vval.v_number = n;
  }
}




static void f_strftime(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  time_t seconds;

  rettv->v_type = VAR_STRING;

  char *p = (char *)tv_get_string(&argvars[0]);
  if (argvars[1].v_type == VAR_UNKNOWN) {
    seconds = time(((void*)0));
  } else {
    seconds = (time_t)tv_get_number(&argvars[1]);
  }

  struct tm curtime;
  struct tm *curtime_ptr = os_localtime_r(&seconds, &curtime);

  if (curtime_ptr == ((void*)0))
    rettv->vval.v_string = vim_strsave((char_u *)libintl_gettext((char *)("(Invalid)")));
  else {
    vimconv_T conv;
    char_u *enc;

    conv.vc_type = CONV_NONE;
    enc = enc_locale();
    convert_setup(&conv, p_enc, enc);
    if (conv.vc_type != CONV_NONE) {
      p = (char *)string_convert(&conv, (char_u *)p, ((void*)0));
    }
    char result_buf[256];
    if (p != ((void*)0)) {
      (void)strftime(result_buf, sizeof(result_buf), p, curtime_ptr);
    } else {
      result_buf[0] = '\000';
    }

    if (conv.vc_type != CONV_NONE) {
      xfree(p);
    }
    convert_setup(&conv, enc, p_enc);
    if (conv.vc_type != CONV_NONE) {
      rettv->vval.v_string = string_convert(&conv, (char_u *)result_buf, ((void*)0));
    } else {
      rettv->vval.v_string = (char_u *)xstrdup(result_buf);
    }


    convert_setup(&conv, ((void*)0), ((void*)0));
    xfree(enc);
  }
}


static void f_strgetchar(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = -1;

  const char *const str = tv_get_string_chk(&argvars[0]);
  if (str == ((void*)0)) {
    return;
  }
  _Bool error = 0;
  varnumber_T charidx = tv_get_number_chk(&argvars[1], &error);
  if (error) {
    return;
  }

  const size_t len = strlen((char *)(str));
  size_t byteidx = 0;

  while (charidx >= 0 && byteidx < len) {
    if (charidx == 0) {
      rettv->vval.v_number = utf_ptr2char((const char_u *)str + byteidx);
      break;
    }
    charidx--;
    byteidx += utf_ptr2len((const char_u *)str + byteidx);
  }
}




static void f_stridx(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = -1;

  char buf[NUMBUFLEN];
  const char *const needle = tv_get_string_chk(&argvars[1]);
  const char *haystack = tv_get_string_buf_chk(&argvars[0], buf);
  const char *const haystack_start = haystack;
  if (needle == ((void*)0) || haystack == ((void*)0)) {
    return;
  }

  if (argvars[2].v_type != VAR_UNKNOWN) {
    _Bool error = 0;

    const ptrdiff_t start_idx = (ptrdiff_t)tv_get_number_chk(&argvars[2],
                                                             &error);
    if (error || start_idx >= (ptrdiff_t)strlen(haystack)) {
      return;
    }
    if (start_idx >= 0) {
      haystack += start_idx;
    }
  }

  const char *pos = strstr(haystack, needle);
  if (pos != ((void*)0)) {
    rettv->vval.v_number = (varnumber_T)(pos - haystack_start);
  }
}




static void f_string(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = (char_u *) encode_tv2string(&argvars[0], ((void*)0));
}




static void f_strlen(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = (varnumber_T)strlen(tv_get_string(&argvars[0]));
}




static void f_strchars(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *s = tv_get_string(&argvars[0]);
  int skipcc = 0;
  varnumber_T len = 0;
  int (*func_mb_ptr2char_adv)(const char_u **pp);

  if (argvars[1].v_type != VAR_UNKNOWN) {
    skipcc = tv_get_number_chk(&argvars[1], ((void*)0));
  }
  if (skipcc < 0 || skipcc > 1) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
  } else {
    func_mb_ptr2char_adv = skipcc ? mb_ptr2char_adv : mb_cptr2char_adv;
    while (*s != '\000') {
      func_mb_ptr2char_adv((const char_u **)&s);
      len++;
    }
    rettv->vval.v_number = len;
  }
}




static void f_strdisplaywidth(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *const s = tv_get_string(&argvars[0]);
  int col = 0;

  if (argvars[1].v_type != VAR_UNKNOWN) {
    col = tv_get_number(&argvars[1]);
  }

  rettv->vval.v_number = (varnumber_T)(linetabsize_col(col, (char_u *)s) - col);
}




static void f_strwidth(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *const s = tv_get_string(&argvars[0]);

  rettv->vval.v_number = (varnumber_T)mb_string2cells((const char_u *)s);
}


static void f_strcharpart(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *const p = tv_get_string(&argvars[0]);
  const size_t slen = strlen((char *)(p));

  int nbyte = 0;
  _Bool error = 0;
  varnumber_T nchar = tv_get_number_chk(&argvars[1], &error);
  if (!error) {
    if (nchar > 0) {
      while (nchar > 0 && (size_t)nbyte < slen) {
        nbyte += utf_ptr2len((const char_u *)p + nbyte);
        nchar--;
      }
    } else {
      nbyte = nchar;
    }
  }
  int len = 0;
  if (argvars[2].v_type != VAR_UNKNOWN) {
    int charlen = tv_get_number(&argvars[2]);
    while (charlen > 0 && nbyte + len < (int)slen) {
      int off = nbyte + len;

      if (off < 0) {
        len += 1;
      } else {
        len += (size_t)utf_ptr2len((const char_u *)p + off);
      }
      charlen--;
    }
  } else {
    len = slen - nbyte;
  }



  if (nbyte < 0) {
    len += nbyte;
    nbyte = 0;
  } else if ((size_t)nbyte > slen) {
    nbyte = slen;
  }
  if (len < 0) {
    len = 0;
  } else if (nbyte + len > (int)slen) {
    len = slen - nbyte;
  }

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = (char_u *)xstrndup(p + nbyte, (size_t)len);
}




static void f_strpart(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  _Bool error = 0;

  const char *const p = tv_get_string(&argvars[0]);
  const size_t slen = strlen(p);

  varnumber_T n = tv_get_number_chk(&argvars[1], &error);
  varnumber_T len;
  if (error) {
    len = 0;
  } else if (argvars[2].v_type != VAR_UNKNOWN) {
    len = tv_get_number(&argvars[2]);
  } else {
    len = slen - n;
  }



  if (n < 0) {
    len += n;
    n = 0;
  } else if (n > (varnumber_T)slen) {
    n = slen;
  }
  if (len < 0) {
    len = 0;
  } else if (n + len > (varnumber_T)slen) {
    len = slen - n;
  }

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = (char_u *)xmemdupz(p + n, (size_t)len);
}




static void f_strridx(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char buf[NUMBUFLEN];
  const char *const needle = tv_get_string_chk(&argvars[1]);
  const char *const haystack = tv_get_string_buf_chk(&argvars[0], buf);

  rettv->vval.v_number = -1;
  if (needle == ((void*)0) || haystack == ((void*)0)) {
    return;
  }

  const size_t haystack_len = strlen((char *)(haystack));
  ptrdiff_t end_idx;
  if (argvars[2].v_type != VAR_UNKNOWN) {

    end_idx = (ptrdiff_t)tv_get_number_chk(&argvars[2], ((void*)0));
    if (end_idx < 0) {
      return;
    }
  } else {
    end_idx = (ptrdiff_t)haystack_len;
  }

  const char *lastmatch = ((void*)0);
  if (*needle == '\000') {

    lastmatch = haystack + end_idx;
  } else {
    for (const char *rest = haystack; *rest != '\000'; rest++) {
      rest = strstr(rest, needle);
      if (rest == ((void*)0) || rest > haystack + end_idx) {
        break;
      }
      lastmatch = rest;
    }
  }

  if (lastmatch == ((void*)0)) {
    rettv->vval.v_number = -1;
  } else {
    rettv->vval.v_number = (varnumber_T)(lastmatch - haystack);
  }
}




static void f_strtrans(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = transstr((char_u *)tv_get_string(&argvars[0]));
}




static void f_submatch(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  _Bool error = 0;
  int no = (int)tv_get_number_chk(&argvars[0], &error);
  if (error) {
    return;
  }

  if (no < 0 || no >= 10) {
    emsgf((const char *) (libintl_gettext((char *)("E935: invalid submatch number: %d"))), (int64_t)(no));
    return;
  }
  int retList = 0;

  if (argvars[1].v_type != VAR_UNKNOWN) {
    retList = tv_get_number_chk(&argvars[1], &error);
    if (error) {
      return;
    }
  }

  if (retList == 0) {
    rettv->v_type = VAR_STRING;
    rettv->vval.v_string = reg_submatch(no);
  } else {
    rettv->v_type = VAR_LIST;
    rettv->vval.v_list = reg_submatch_list(no);
  }
}




static void f_substitute(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char patbuf[NUMBUFLEN];
  char subbuf[NUMBUFLEN];
  char flagsbuf[NUMBUFLEN];

  const char *const str = tv_get_string_chk(&argvars[0]);
  const char *const pat = tv_get_string_buf_chk(&argvars[1], patbuf);
  const char *sub = ((void*)0);
  const char *const flg = tv_get_string_buf_chk(&argvars[3], flagsbuf);

  typval_T *expr = ((void*)0);
  if (tv_is_func(argvars[2])) {
    expr = &argvars[2];
  } else {
    sub = tv_get_string_buf_chk(&argvars[2], subbuf);
  }

  rettv->v_type = VAR_STRING;
  if (str == ((void*)0) || pat == ((void*)0) || (sub == ((void*)0) && expr == ((void*)0))
      || flg == ((void*)0)) {
    rettv->vval.v_string = ((void*)0);
  } else {
    rettv->vval.v_string = do_string_sub((char_u *)str, (char_u *)pat,
                                         (char_u *)sub, expr, (char_u *)flg);
  }
}


static void f_synID(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{

  const linenr_T lnum = tv_get_lnum(argvars);
  const colnr_T col = (colnr_T)tv_get_number(&argvars[1]) - 1;

  _Bool transerr = 0;
  const int trans = tv_get_number_chk(&argvars[2], &transerr);

  int id = 0;
  if (!transerr && lnum >= 1 && lnum <= curbuf->b_ml.ml_line_count
      && col >= 0 && (size_t)col < strlen((char *)(ml_get(lnum)))) {
    id = syn_get_id(curwin, lnum, col, trans, ((void*)0), 0);
  }

  rettv->vval.v_number = id;
}




static void f_synIDattr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const int id = (int)tv_get_number(&argvars[0]);
  const char *const what = tv_get_string(&argvars[1]);
  int modec;
  if (argvars[2].v_type != VAR_UNKNOWN) {
    char modebuf[NUMBUFLEN];
    const char *const mode = tv_get_string_buf(&argvars[2], modebuf);
    modec = (((mode[0]) < 'A' || (mode[0]) > 'Z') ? (mode[0]) : (mode[0]) + ('a' - 'A'));
    if (modec != 'c' && modec != 'g') {
      modec = 0;
    }
  } else if (ui_rgb_attached()) {
    modec = 'g';
  } else {
    modec = 'c';
  }


  const char *p = ((void*)0);
  switch ((((what[0]) < 'A' || (what[0]) > 'Z') ? (what[0]) : (what[0]) + ('a' - 'A'))) {
    case 'b': {
      if ((((what[1]) < 'A' || (what[1]) > 'Z') ? (what[1]) : (what[1]) + ('a' - 'A')) == 'g') {
        p = highlight_color(id, what, modec);
      } else {
        p = highlight_has_attr(id, 0x02, modec);
      }
      break;
    }
    case 'f': {
      p = highlight_color(id, what, modec);
      break;
    }
    case 'i': {
      if ((((what[1]) < 'A' || (what[1]) > 'Z') ? (what[1]) : (what[1]) + ('a' - 'A')) == 'n') {
        p = highlight_has_attr(id, 0x01, modec);
      } else {
        p = highlight_has_attr(id, 0x04, modec);
      }
      break;
    }
    case 'n': {
      p = get_highlight_name(((void*)0), id - 1);
      break;
    }
    case 'r': {
      p = highlight_has_attr(id, 0x01, modec);
      break;
    }
    case 's': {
      if ((((what[1]) < 'A' || (what[1]) > 'Z') ? (what[1]) : (what[1]) + ('a' - 'A')) == 'p') {
        p = highlight_color(id, what, modec);
      } else {
        p = highlight_has_attr(id, 0x20, modec);
      }
      break;
    }
    case 'u': {
      if (strlen((char *)(what)) <= 5 || (((what[5]) < 'A' || (what[5]) > 'Z') ? (what[5]) : (what[5]) + ('a' - 'A')) != 'c') {
        p = highlight_has_attr(id, 0x08, modec);
      } else {
        p = highlight_has_attr(id, 0x10, modec);
      }
      break;
    }
  }

  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = (char_u *)(p == ((void*)0) ? p : xstrdup(p));
}




static void f_synIDtrans(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int id = tv_get_number(&argvars[0]);

  if (id > 0) {
    id = syn_get_final_id(id);
  } else {
    id = 0;
  }

  rettv->vval.v_number = id;
}




static void f_synconcealed(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int syntax_flags = 0;
  int cchar;
  int matchid = 0;
  char_u str[NUMBUFLEN];

  rettv->v_type = VAR_LIST;
  rettv->vval.v_list = ((void*)0);


  const linenr_T lnum = tv_get_lnum(argvars);
  const colnr_T col = (colnr_T)tv_get_number(&argvars[1]) - 1;

  __builtin___memset_chk (str, '\000', sizeof(str), __builtin_object_size (str, 0));

  tv_list_alloc_ret(rettv);
  if (lnum >= 1 && lnum <= curbuf->b_ml.ml_line_count && col >= 0
      && (size_t)col <= strlen((char *)(ml_get(lnum))) && curwin->w_onebuf_opt.wo_cole > 0) {
    (void)syn_get_id(curwin, lnum, col, 0, ((void*)0), 0);
    syntax_flags = get_syntax_info(&matchid);


    if ((syntax_flags & 0x20000) && curwin->w_onebuf_opt.wo_cole < 3) {
      cchar = syn_get_sub_char();
      if (cchar == '\000' && curwin->w_onebuf_opt.wo_cole == 1 && lcs_conceal != '\000') {
        cchar = lcs_conceal;
      }
      if (cchar != '\000') {
        if (1)
          (*utf_char2bytes)(cchar, str);
        else
          str[0] = cchar;
      }
    }
  }

  tv_list_append_number(rettv->vval.v_list, (syntax_flags & 0x20000) != 0);

  tv_list_append_string(rettv->vval.v_list, (const char *)str, -1);
  tv_list_append_number(rettv->vval.v_list, matchid);
}




static void f_synstack(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_LIST;
  rettv->vval.v_list = ((void*)0);


  const linenr_T lnum = tv_get_lnum(argvars);
  const colnr_T col = (colnr_T)tv_get_number(&argvars[1]) - 1;

  if (lnum >= 1
      && lnum <= curbuf->b_ml.ml_line_count
      && col >= 0
      && (size_t)col <= strlen((char *)(ml_get(lnum)))) {
    tv_list_alloc_ret(rettv);
    (void)syn_get_id(curwin, lnum, col, 0, ((void*)0), 1);

    int id;
    int i = 0;
    while ((id = syn_get_stack_item(i++)) >= 0) {
      tv_list_append_number(rettv->vval.v_list, id);
    }
  }
}

static list_T *string_to_list(const char *str, size_t len, const _Bool keepempty)
{
  if (!keepempty && str[len - 1] == '\012') {
    len--;
  }
  list_T *const list = tv_list_alloc();
  encode_list_write(list, str, len);
  return list;
}

static void get_system_output_as_rettv(typval_T *argvars, typval_T *rettv,
                                       _Bool retlist)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);

  if (check_restricted() || check_secure()) {
    return;
  }


  ptrdiff_t input_len;
  char *input = save_tv_as_string(&argvars[1], &input_len, 0);
  if (input_len < 0) {
    ((void)0);
    return;
  }


  _Bool executable = 1;
  char **argv = tv_to_argv(&argvars[0], ((void*)0), &executable);
  if (!argv) {
    if (!executable) {
      set_vim_var_nr(VV_SHELL_ERROR, (long)-1);
    }
    xfree(input);
    return;
  }


  size_t nread = 0;
  char *res = ((void*)0);
  int status = os_system(argv, input, input_len, &res, &nread);

  xfree(input);

  set_vim_var_nr(VV_SHELL_ERROR, (long) status);

  if (res == ((void*)0)) {
    if (retlist) {

      tv_list_alloc_ret(rettv);
    } else {
      rettv->vval.v_string = (char_u *) xstrdup("");
    }
    return;
  }

  if (retlist) {
    int keepempty = 0;
    if (argvars[1].v_type != VAR_UNKNOWN && argvars[2].v_type != VAR_UNKNOWN) {
      keepempty = tv_get_number(&argvars[2]);
    }
    rettv->vval.v_list = string_to_list(res, nread, (_Bool)keepempty);
    tv_list_ref(rettv->vval.v_list);
    rettv->v_type = VAR_LIST;

    xfree(res);
  } else {


    memchrsub(res, '\000', 1, nread);
# 16424 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
    rettv->vval.v_string = (char_u *) res;
  }
}


static void f_system(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  get_system_output_as_rettv(argvars, rettv, 0);
}

static void f_systemlist(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  get_system_output_as_rettv(argvars, rettv, 1);
}





static void f_tabpagebuflist(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  win_T *wp = ((void*)0);

  if (argvars[0].v_type == VAR_UNKNOWN) {
    wp = firstwin;
  } else {
    tabpage_T *const tp = find_tabpage((int)tv_get_number(&argvars[0]));
    if (tp != ((void*)0)) {
      wp = (tp == curtab) ? firstwin : tp->tp_firstwin;
    }
  }
  if (wp != ((void*)0)) {
    tv_list_alloc_ret(rettv);
    while (wp != ((void*)0)) {
      tv_list_append_number(rettv->vval.v_list, wp->w_buffer->handle);
      wp = wp->w_next;
    }
  }
}





static void f_tabpagenr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int nr = 1;

  if (argvars[0].v_type != VAR_UNKNOWN) {
    const char *const arg = tv_get_string_chk(&argvars[0]);
    nr = 0;
    if (arg != ((void*)0)) {
      if (strcmp(arg, "$") == 0) {
        nr = tabpage_index(((void*)0)) - 1;
      } else {
        emsgf((const char *) (libintl_gettext((char *)(e_invexpr2))), (arg));
      }
    }
  } else {
    nr = tabpage_index(curtab);
  }
  rettv->vval.v_number = nr;
}






static int get_winnr(tabpage_T *tp, typval_T *argvar)
{
  win_T *twin;
  int nr = 1;
  win_T *wp;

  twin = (tp == curtab) ? curwin : tp->tp_curwin;
  if (argvar->v_type != VAR_UNKNOWN) {
    const char *const arg = tv_get_string_chk(argvar);
    if (arg == ((void*)0)) {
      nr = 0;
    } else if (strcmp(arg, "$") == 0) {
      twin = (tp == curtab) ? lastwin : tp->tp_lastwin;
    } else if (strcmp(arg, "#") == 0) {
      twin = (tp == curtab) ? prevwin : tp->tp_prevwin;
      if (twin == ((void*)0)) {
        nr = 0;
      }
    } else {
      emsgf((const char *) (libintl_gettext((char *)(e_invexpr2))), (arg));
      nr = 0;
    }
  }

  if (nr > 0)
    for (wp = (tp == curtab) ? firstwin : tp->tp_firstwin;
         wp != twin; wp = wp->w_next) {
      if (wp == ((void*)0)) {

        nr = 0;
        break;
      }
      ++nr;
    }
  return nr;
}




static void f_tabpagewinnr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int nr = 1;
  tabpage_T *const tp = find_tabpage((int)tv_get_number(&argvars[0]));
  if (tp == ((void*)0)) {
    nr = 0;
  } else {
    nr = get_winnr(tp, &argvars[1]);
  }
  rettv->vval.v_number = nr;
}





static void f_tagfiles(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char *fname;
  tagname_T tn;

  tv_list_alloc_ret(rettv);
  fname = xmalloc(1024);

  _Bool first = 1;
  while (get_tagfname(&tn, first, (char_u *)fname) == 1) {
    tv_list_append_string(rettv->vval.v_list, fname, -1);
    first = 0;
  }

  tagname_free(&tn);
  xfree(fname);
}




static void f_taglist(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const char *const tag_pattern = tv_get_string(&argvars[0]);

  rettv->vval.v_number = 0;
  if (*tag_pattern == '\000') {
    return;
  }

  const char *fname = ((void*)0);
  if (argvars[1].v_type != VAR_UNKNOWN) {
    fname = tv_get_string(&argvars[1]);
  }
  (void)get_tags(tv_list_alloc_ret(rettv), (char_u *)tag_pattern,
                 (char_u *)fname);
}




static void f_tempname(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = vim_tempname();
}


static void f_termopen(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (check_restricted() || check_secure()) {
    return;
  }

  if (curbuf->b_changed) {
    emsg((char_u *)(libintl_gettext((char *)("Can only call this function in an unmodified buffer"))));
    return;
  }

  const char *cmd;
  _Bool executable = 1;
  char **argv = tv_to_argv(&argvars[0], &cmd, &executable);
  if (!argv) {
    rettv->vval.v_number = executable ? 0 : -1;
    return;
  }

  if (argvars[1].v_type != VAR_DICT && argvars[1].v_type != VAR_UNKNOWN) {

    emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("expected dictionary"));
    shell_free_argv(argv);
    return;
  }

  CallbackReader on_stdout = ((CallbackReader){ .cb = ((Callback){ .type = kCallbackNone }), .self = ((void*)0), .buffer = { 0, 0, 0, 1, ((void*)0) }, .buffered = 0 }),
                 on_stderr = ((CallbackReader){ .cb = ((Callback){ .type = kCallbackNone }), .self = ((void*)0), .buffer = { 0, 0, 0, 1, ((void*)0) }, .buffered = 0 });
  Callback on_exit = ((Callback){ .type = kCallbackNone });
  dict_T *job_opts = ((void*)0);
  const char *cwd = ".";
  if (argvars[1].v_type == VAR_DICT) {
    job_opts = argvars[1].vval.v_dict;

    const char *const new_cwd = tv_dict_get_string(job_opts, "cwd", 0);
    if (new_cwd && *new_cwd != '\000') {
      cwd = new_cwd;

      if (!os_isdir((const char_u *)cwd)) {
        emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), ("expected valid directory"));
        shell_free_argv(argv);
        return;
      }
    }

    if (!common_job_callbacks(job_opts, &on_stdout, &on_stderr, &on_exit)) {
      shell_free_argv(argv);
      return;
    }
  }

  uint16_t term_width = (((0)>(curwin->w_width - win_col_off(curwin)))?(0):(curwin->w_width - win_col_off(curwin)));
  Channel *chan = channel_job_start(argv, on_stdout, on_stderr, on_exit,
                                    1, 0, 0, cwd,
                                    term_width, curwin->w_height,
                                    xstrdup("xterm-256color"),
                                    &rettv->vval.v_number);
  if (rettv->vval.v_number <= 0) {
    return;
  }

  int pid = chan->stream.pty.process.pid;

  char buf[1024];

  __builtin___snprintf_chk (buf, sizeof(buf), 0, __builtin_object_size (buf, 1 > 1 ? 1 : 0), "term://%s//%d:%s", cwd, pid, cmd);


  curbuf->b_p_swf = 0;
  (void)setfname(curbuf, (char_u *)buf, ((void*)0), 1);

  Error err = { .type = kErrorTypeNone, .msg = ((void*)0) };

  dict_set_var(curbuf->b_vars, cstr_as_string("terminal_job_id"),
               ((Object) { .type = kObjectTypeInteger, .data.integer = chan->id }), 0, 0, &err);
  api_clear_error(&err);
  dict_set_var(curbuf->b_vars, cstr_as_string("terminal_job_pid"),
               ((Object) { .type = kObjectTypeInteger, .data.integer = pid }), 0, 0, &err);
  api_clear_error(&err);

  channel_terminal_open(chan);
  channel_create_event(chan, ((void*)0));
}


static void f_test_garbagecollect_now(typval_T *argvars,
                                      typval_T *rettv, FunPtr fptr)
{


  garbage_collect(1);
}

_Bool callback_from_typval(Callback *const callback, typval_T *const arg)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
{
  if (arg->v_type == VAR_PARTIAL && arg->vval.v_partial != ((void*)0)) {
    callback->data.partial = arg->vval.v_partial;
    callback->data.partial->pt_refcount++;
    callback->type = kCallbackPartial;
  } else if (arg->v_type == VAR_FUNC || arg->v_type == VAR_STRING) {
    char_u *name = arg->vval.v_string;
    func_ref(name);
    callback->data.funcref = vim_strsave(name);
    callback->type = kCallbackFuncref;
  } else if (arg->v_type == VAR_NUMBER && arg->vval.v_number == 0) {
    callback->type = kCallbackNone;
  } else {
    emsg((char_u *)(libintl_gettext((char *)("E921: Invalid callback argument"))));
    return 0;
  }
  return 1;
}

_Bool callback_call(Callback *const callback, const int argcount_in,
                   typval_T *const argvars_in, typval_T *const rettv)
  FUNC_ATTR_NONNULL_ALL
{
  partial_T *partial;
  char_u *name;
  switch (callback->type) {
    case kCallbackFuncref:
      name = callback->data.funcref;
      partial = ((void*)0);
      break;

    case kCallbackPartial:
      partial = callback->data.partial;
      name = partial_name(partial);
      break;

    case kCallbackNone:
      return 0;
      break;

    default:
      abort();
  }

  int dummy;
  return call_func(name, (int)strlen((char *)(name)), rettv, argcount_in, argvars_in,
                   ((void*)0), curwin->w_cursor.lnum, curwin->w_cursor.lnum, &dummy,
                   1, partial, ((void*)0));
}

static _Bool set_ref_in_callback(Callback *callback, int copyID,
                                ht_stack_T **ht_stack,
                                list_stack_T **list_stack)
{
  typval_T tv;
  switch (callback->type) {
    case kCallbackFuncref:
    case kCallbackNone:
      break;

    case kCallbackPartial:
      tv.v_type = VAR_PARTIAL;
      tv.vval.v_partial = callback->data.partial;
      return set_ref_in_item(&tv, copyID, ht_stack, list_stack);
      break;


    default:
      abort();
  }
  return 0;
}

static _Bool set_ref_in_callback_reader(CallbackReader *reader, int copyID,
                                       ht_stack_T **ht_stack,
                                       list_stack_T **list_stack)
{
  if (set_ref_in_callback(&reader->cb, copyID, ht_stack, list_stack)) {
    return 1;
  }

  if (reader->self) {
    typval_T tv;
    tv.v_type = VAR_DICT;
    tv.vval.v_dict = reader->self;
    return set_ref_in_item(&tv, copyID, ht_stack, list_stack);
  }
  return 0;
}

static void add_timer_info(typval_T *rettv, timer_T *timer)
{
  list_T *list = rettv->vval.v_list;
  dict_T *dict = tv_dict_alloc();

  tv_list_append_dict(list, dict);
  tv_dict_add_nr(dict, ("id"), (sizeof("id") - 1), timer->timer_id);
  tv_dict_add_nr(dict, ("time"), (sizeof("time") - 1), timer->timeout);
  tv_dict_add_nr(dict, ("paused"), (sizeof("paused") - 1), timer->paused);

  tv_dict_add_nr(dict, ("repeat"), (sizeof("repeat") - 1),
                 (timer->repeat_count < 0 ? -1 : timer->repeat_count));

  dictitem_T *di = tv_dict_item_alloc("callback");
  if (tv_dict_add(dict, di) == 0) {
    xfree(di);
    return;
  }

  if (timer->callback.type == kCallbackPartial) {
    di->di_tv.v_type = VAR_PARTIAL;
    di->di_tv.vval.v_partial = timer->callback.data.partial;
    timer->callback.data.partial->pt_refcount++;
  } else if (timer->callback.type == kCallbackFuncref) {
    di->di_tv.v_type = VAR_FUNC;
    di->di_tv.vval.v_string = vim_strsave(timer->callback.data.funcref);
  }
  di->di_tv.v_lock = 0;
}

static void add_timer_info_all(typval_T *rettv)
{
  timer_T *timer;
  { khint_t __i; for (__i = (khint_t)(0); __i != ((timers->table)->n_buckets); ++__i) { if (!(!(((timers->table)->flags[(__i)>>4]>>(((__i)&0xfU)<<1))&3))) continue; (timer) = ((timers->table)->vals[__i]); { if (!timer->stopped) { add_timer_info(rettv, timer); } }; } }




}


static void f_timer_info(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  tv_list_alloc_ret(rettv);
  if (argvars[0].v_type != VAR_UNKNOWN) {
    if (argvars[0].v_type != VAR_NUMBER) {
      emsg((char_u *)(libintl_gettext((char *)(e_number_exp))));
      return;
    }
    timer_T *timer = map_uint64_t_ptr_t_get(timers, tv_get_number(&argvars[0]));
    if (timer != ((void*)0) && !timer->stopped) {
      add_timer_info(rettv, timer);
    }
  } else {
    add_timer_info_all(rettv);
  }
}


static void f_timer_pause(typval_T *argvars, typval_T *unused, FunPtr fptr)
{
  if (argvars[0].v_type != VAR_NUMBER) {
    emsg((char_u *)(libintl_gettext((char *)(e_number_exp))));
    return;
  }
  int paused = (_Bool)tv_get_number(&argvars[1]);
  timer_T *timer = map_uint64_t_ptr_t_get(timers, tv_get_number(&argvars[0]));
  if (timer != ((void*)0)) {
    timer->paused = paused;
  }
}


static void f_timer_start(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  const long timeout = tv_get_number(&argvars[0]);
  timer_T *timer;
  int repeat = 1;
  dict_T *dict;

  rettv->vval.v_number = -1;

  if (argvars[2].v_type != VAR_UNKNOWN) {
    if (argvars[2].v_type != VAR_DICT
        || (dict = argvars[2].vval.v_dict) == ((void*)0)) {
      emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (tv_get_string(&argvars[2])));
      return;
    }
    dictitem_T *const di = tv_dict_find(dict, ("repeat"), (sizeof("repeat") - 1));
    if (di != ((void*)0)) {
      repeat = tv_get_number(&di->di_tv);
      if (repeat == 0) {
        repeat = 1;
      }
    }
  }

  Callback callback;
  if (!callback_from_typval(&callback, &argvars[1])) {
    return;
  }

  timer = xmalloc(sizeof *timer);
  timer->refcount = 1;
  timer->stopped = 0;
  timer->paused = 0;
  timer->repeat_count = repeat;
  timer->timeout = timeout;
  timer->timer_id = last_timer_id++;
  timer->callback = callback;

  time_watcher_init(&main_loop, &timer->tw, timer);
  timer->tw.events = multiqueue_new_child(main_loop.events);

  timer->tw.blockable = 1;
  time_watcher_start(&timer->tw, timer_due_cb, timeout, timeout);

  map_uint64_t_ptr_t_put(timers, timer->timer_id, timer);
  rettv->vval.v_number = timer->timer_id;
}



static void f_timer_stop(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
    if (argvars[0].v_type != VAR_NUMBER) {
        emsg((char_u *)(libintl_gettext((char *)(e_number_exp))));
        return;
    }

    timer_T *timer = map_uint64_t_ptr_t_get(timers, tv_get_number(&argvars[0]));

    if (timer == ((void*)0)) {
      return;
    }

    timer_stop(timer);
}

static void f_timer_stopall(typval_T *argvars, typval_T *unused, FunPtr fptr)
{
  timer_stop_all();
}


static void timer_due_cb(TimeWatcher *tw, void *data)
{
  timer_T *timer = (timer_T *)data;
  if (timer->stopped || timer->paused) {
    return;
  }

  timer->refcount++;

  if (timer->repeat_count >= 0 && --timer->repeat_count == 0) {
    timer_stop(timer);
  }

  typval_T argv[2] = { ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, }), ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, }) };
  argv[0].v_type = VAR_NUMBER;
  argv[0].vval.v_number = timer->timer_id;
  typval_T rettv = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });

  callback_call(&timer->callback, 1, argv, &rettv);
  tv_clear(&rettv);

  if (!timer->stopped && timer->timeout == 0) {




    time_watcher_start(&timer->tw, timer_due_cb, 0, 0);
  }
  timer_decref(timer);
}

static void timer_stop(timer_T *timer)
{
  if (timer->stopped) {

    return;
  }
  timer->stopped = 1;
  time_watcher_stop(&timer->tw);
  time_watcher_close(&timer->tw, timer_close_cb);
}


static void timer_close_cb(TimeWatcher *tw, void *data)
{
  timer_T *timer = (timer_T *)data;
  multiqueue_free(timer->tw.events);
  callback_free(&timer->callback);
  map_uint64_t_ptr_t_del(timers, timer->timer_id);
  timer_decref(timer);
}

static void timer_decref(timer_T *timer)
{
  if (--timer->refcount == 0) {
    xfree(timer);
  }
}

static void timer_stop_all(void)
{
  timer_T *timer;
  { khint_t __i; for (__i = (khint_t)(0); __i != ((timers->table)->n_buckets); ++__i) { if (!(!(((timers->table)->flags[(__i)>>4]>>(((__i)&0xfU)<<1))&3))) continue; (timer) = ((timers->table)->vals[__i]); { timer_stop(timer); }; } }


}

void timer_teardown(void)
{
  timer_stop_all();
}




static void f_tolower(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = (char_u *)strcase_save(tv_get_string(&argvars[0]),
                                                0);
}




static void f_toupper(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = (char_u *)strcase_save(tv_get_string(&argvars[0]),
                                                1);
}




static void f_tr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char buf[NUMBUFLEN];
  char buf2[NUMBUFLEN];

  const char *in_str = tv_get_string(&argvars[0]);
  const char *fromstr = tv_get_string_buf_chk(&argvars[1], buf);
  const char *tostr = tv_get_string_buf_chk(&argvars[2], buf2);


  rettv->v_type = VAR_STRING;
  rettv->vval.v_string = ((void*)0);
  if (fromstr == ((void*)0) || tostr == ((void*)0)) {
    return;
  }
  garray_T ga;
  ga_init(&ga, (int)sizeof(char), 80);

  if (!1) {

    if (strlen(fromstr) != strlen(tostr)) {
      goto error;
    }
  }


  _Bool first = 1;
  while (*in_str != '\000') {
    if (1) {
      const char *cpstr = in_str;
      const int inlen = (*utfc_ptr2len)((const char_u *)in_str);
      int cplen = inlen;
      int idx = 0;
      int fromlen;
      for (const char *p = fromstr; *p != '\000'; p += fromlen) {
        fromlen = (*utfc_ptr2len)((const char_u *)p);
        if (fromlen == inlen && strncmp((char *)(in_str), (char *)(p), (size_t)(inlen)) == 0) {
          int tolen;
          for (p = tostr; *p != '\000'; p += tolen) {
            tolen = (*utfc_ptr2len)((const char_u *)p);
            if (idx-- == 0) {
              cplen = tolen;
              cpstr = (char *)p;
              break;
            }
          }
          if (*p == '\000') {
            goto error;
          }
          break;
        }
        idx++;
      }

      if (first && cpstr == in_str) {



        first = 0;
        int tolen;
        for (const char *p = tostr; *p != '\000'; p += tolen) {
          tolen = (*utfc_ptr2len)((const char_u *)p);
          idx--;
        }
        if (idx != 0) {
          goto error;
        }
      }

      ga_grow(&ga, cplen);
      __builtin___memmove_chk ((char *)ga.ga_data + ga.ga_len, cpstr, (size_t)cplen, __builtin_object_size ((char *)ga.ga_data + ga.ga_len, 0));
      ga.ga_len += cplen;

      in_str += inlen;
    } else {

      const char *const p = strchr(fromstr, *in_str);
      if (p != ((void*)0)) {
        ga_append(&ga, tostr[p - fromstr]);
      } else {
        ga_append(&ga, *in_str);
      }
      in_str++;
    }
  }


  ga_append(&ga, '\000');

  rettv->vval.v_string = ga.ga_data;
  return;
error:
  emsgf((const char *) (libintl_gettext((char *)(e_invarg2))), (fromstr));
  ga_clear(&ga);
  return;
}




static void f_type(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int n = -1;

  switch (argvars[0].v_type) {
    case VAR_NUMBER: n = 0; break;
    case VAR_STRING: n = 1; break;
    case VAR_PARTIAL:
    case VAR_FUNC: n = 2; break;
    case VAR_LIST: n = 3; break;
    case VAR_DICT: n = 4; break;
    case VAR_FLOAT: n = 5; break;
    case VAR_SPECIAL: {
      switch (argvars[0].vval.v_special) {
        case kSpecialVarTrue:
        case kSpecialVarFalse: {
          n = 6;
          break;
        }
        case kSpecialVarNull: {
          n = 7;
          break;
        }
      }
      break;
    }
    case VAR_UNKNOWN: {
      internal_error("f_type(UNKNOWN)");
      break;
    }
  }
  rettv->vval.v_number = n;
}




static void f_undofile(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->v_type = VAR_STRING;
  const char *const fname = tv_get_string(&argvars[0]);

  if (*fname == '\000') {

    rettv->vval.v_string = ((void*)0);
  } else {
    char *ffname = FullName_save(fname, 0);

    if (ffname != ((void*)0)) {
      rettv->vval.v_string = (char_u *)u_get_undo_file_name(ffname, 0);
    }
    xfree(ffname);
  }
}




static void f_undotree(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  tv_dict_alloc_ret(rettv);

  dict_T *dict = rettv->vval.v_dict;
  list_T *list;

  tv_dict_add_nr(dict, ("synced"), (sizeof("synced") - 1), (varnumber_T)curbuf->b_u_synced);
  tv_dict_add_nr(dict, ("seq_last"), (sizeof("seq_last") - 1), (varnumber_T)curbuf->b_u_seq_last);
  tv_dict_add_nr(dict, ("save_last"), (sizeof("save_last") - 1),
                 (varnumber_T)curbuf->b_u_save_nr_last);
  tv_dict_add_nr(dict, ("seq_cur"), (sizeof("seq_cur") - 1), (varnumber_T)curbuf->b_u_seq_cur);
  tv_dict_add_nr(dict, ("time_cur"), (sizeof("time_cur") - 1), (varnumber_T)curbuf->b_u_time_cur);
  tv_dict_add_nr(dict, ("save_cur"), (sizeof("save_cur") - 1), (varnumber_T)curbuf->b_u_save_nr_cur);

  list = tv_list_alloc();
  u_eval_tree(curbuf->b_u_oldhead, list);
  tv_dict_add_list(dict, ("entries"), (sizeof("entries") - 1), list);
}




static void f_values(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  dict_list(argvars, rettv, 1);
}




static void f_virtcol(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  colnr_T vcol = 0;
  pos_T *fp;
  int fnum = curbuf->handle;

  fp = var2fpos(&argvars[0], 0, &fnum);
  if (fp != ((void*)0) && fp->lnum <= curbuf->b_ml.ml_line_count
      && fnum == curbuf->handle) {
    getvvcol(curwin, fp, ((void*)0), ((void*)0), &vcol);
    ++vcol;
  }

  rettv->vval.v_number = vcol;
}




static void f_visualmode(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  char_u str[2];

  rettv->v_type = VAR_STRING;
  str[0] = curbuf->b_visual_mode_eval;
  str[1] = '\000';
  rettv->vval.v_string = vim_strsave(str);


  if (non_zero_arg(&argvars[0]))
    curbuf->b_visual_mode_eval = '\000';
}




static void f_wildmenumode(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  if (wild_menu_showing)
    rettv->vval.v_number = 1;
}


static void f_win_findbuf(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  tv_list_alloc_ret(rettv);
  win_findbuf(argvars, rettv->vval.v_list);
}


static void f_win_getid(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = win_getid(argvars);
}


static void f_win_gotoid(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = win_gotoid(argvars);
}


static void f_win_id2tabwin(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  tv_list_alloc_ret(rettv);
  win_id2tabwin(argvars, rettv->vval.v_list);
}


static void f_win_id2win(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = win_id2win(argvars);
}




static void f_winbufnr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  win_T *wp;

  wp = find_win_by_nr(&argvars[0], ((void*)0));
  if (wp == ((void*)0))
    rettv->vval.v_number = -1;
  else
    rettv->vval.v_number = wp->w_buffer->handle;
}




static void f_wincol(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  validate_cursor();
  rettv->vval.v_number = curwin->w_wcol + 1;
}




static void f_winheight(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  win_T *wp;

  wp = find_win_by_nr(&argvars[0], ((void*)0));
  if (wp == ((void*)0))
    rettv->vval.v_number = -1;
  else
    rettv->vval.v_number = wp->w_height;
}




static void f_winline(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  validate_cursor();
  rettv->vval.v_number = curwin->w_wrow + 1;
}




static void f_winnr(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int nr = 1;

  nr = get_winnr(curtab, &argvars[0]);
  rettv->vval.v_number = nr;
}




static void f_winrestcmd(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  int winnr = 1;
  garray_T ga;
  char_u buf[50];

  ga_init(&ga, (int)sizeof(char), 70);
  for (win_T *wp = ((curtab) == curtab) ? firstwin : (curtab)->tp_firstwin; wp != ((void*)0); wp = wp->w_next) {
    __builtin___sprintf_chk ((char *)buf, 0, __builtin_object_size ((char *)buf, 1 > 1 ? 1 : 0), "%dresize %d|", winnr, wp->w_height);
    ga_concat(&ga, buf);
    __builtin___sprintf_chk ((char *)buf, 0, __builtin_object_size ((char *)buf, 1 > 1 ? 1 : 0), "vert %dresize %d|", winnr, wp->w_width);
    ga_concat(&ga, buf);
    ++winnr;
  }
  ga_append(&ga, '\000');

  rettv->vval.v_string = ga.ga_data;
  rettv->v_type = VAR_STRING;
}




static void f_winrestview(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  dict_T *dict;

  if (argvars[0].v_type != VAR_DICT
      || (dict = argvars[0].vval.v_dict) == ((void*)0)) {
    emsgf(libintl_gettext((char *)(e_invarg)));
  } else {
    dictitem_T *di;
    if ((di = tv_dict_find(dict, ("lnum"), (sizeof("lnum") - 1))) != ((void*)0)) {
      curwin->w_cursor.lnum = tv_get_number(&di->di_tv);
    }
    if ((di = tv_dict_find(dict, ("col"), (sizeof("col") - 1))) != ((void*)0)) {
      curwin->w_cursor.col = tv_get_number(&di->di_tv);
    }
    if ((di = tv_dict_find(dict, ("coladd"), (sizeof("coladd") - 1))) != ((void*)0)) {
      curwin->w_cursor.coladd = tv_get_number(&di->di_tv);
    }
    if ((di = tv_dict_find(dict, ("curswant"), (sizeof("curswant") - 1))) != ((void*)0)) {
      curwin->w_curswant = tv_get_number(&di->di_tv);
      curwin->w_set_curswant = 0;
    }
    if ((di = tv_dict_find(dict, ("topline"), (sizeof("topline") - 1))) != ((void*)0)) {
      set_topline(curwin, tv_get_number(&di->di_tv));
    }
    if ((di = tv_dict_find(dict, ("topfill"), (sizeof("topfill") - 1))) != ((void*)0)) {
      curwin->w_topfill = tv_get_number(&di->di_tv);
    }
    if ((di = tv_dict_find(dict, ("leftcol"), (sizeof("leftcol") - 1))) != ((void*)0)) {
      curwin->w_leftcol = tv_get_number(&di->di_tv);
    }
    if ((di = tv_dict_find(dict, ("skipcol"), (sizeof("skipcol") - 1))) != ((void*)0)) {
      curwin->w_skipcol = tv_get_number(&di->di_tv);
    }

    check_cursor();
    win_new_height(curwin, curwin->w_height);
    win_new_width(curwin, curwin->w_width);
    changed_window_setting();

    if (curwin->w_topline <= 0)
      curwin->w_topline = 1;
    if (curwin->w_topline > curbuf->b_ml.ml_line_count)
      curwin->w_topline = curbuf->b_ml.ml_line_count;
    check_topfill(curwin, 1);
  }
}




static void f_winsaveview(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  dict_T *dict;

  tv_dict_alloc_ret(rettv);
  dict = rettv->vval.v_dict;

  tv_dict_add_nr(dict, ("lnum"), (sizeof("lnum") - 1), (varnumber_T)curwin->w_cursor.lnum);
  tv_dict_add_nr(dict, ("col"), (sizeof("col") - 1), (varnumber_T)curwin->w_cursor.col);
  tv_dict_add_nr(dict, ("coladd"), (sizeof("coladd") - 1), (varnumber_T)curwin->w_cursor.coladd);
  update_curswant();
  tv_dict_add_nr(dict, ("curswant"), (sizeof("curswant") - 1), (varnumber_T)curwin->w_curswant);

  tv_dict_add_nr(dict, ("topline"), (sizeof("topline") - 1), (varnumber_T)curwin->w_topline);
  tv_dict_add_nr(dict, ("topfill"), (sizeof("topfill") - 1), (varnumber_T)curwin->w_topfill);
  tv_dict_add_nr(dict, ("leftcol"), (sizeof("leftcol") - 1), (varnumber_T)curwin->w_leftcol);
  tv_dict_add_nr(dict, ("skipcol"), (sizeof("skipcol") - 1), (varnumber_T)curwin->w_skipcol);
}
# 17445 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static _Bool write_list(FileDescriptor *const fp, const list_T *const list,
                       const _Bool binary)
  FUNC_ATTR_NONNULL_ARG(1)
{
  int error = 0;
  do { const list_T *const l_ = (list); if (l_ != ((void*)0)) { for (const listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { const char *const s = tv_get_string_chk((&(li)->li_tv)); if (s == ((void*)0)) { return 0; } const char *hunk_start = s; for (const char *p = hunk_start;; p++) { if (*p == '\000' || *p == '\012') { if (p != hunk_start) { const ptrdiff_t written = file_write(fp, hunk_start, (size_t)(p - hunk_start)); if (written < 0) { error = (int)written; goto write_list_error; } } if (*p == '\000') { break; } else { hunk_start = p + 1; const ptrdiff_t written = file_write(fp, (char[]){ '\000' }, 1); if (written < 0) { error = (int)written; break; } } } } if (!binary || ((li)->li_next) != ((void*)0)) { const ptrdiff_t written = file_write(fp, "\n", 1); if (written < 0) { error = (int)written; goto write_list_error; } } } } } } while (0);
# 17486 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  if ((error = file_flush(fp)) != 0) {
    goto write_list_error;
  }
  return 1;
write_list_error:
  emsgf(libintl_gettext((char *)("E80: Error while writing: %s")), uv_strerror(error));
  return 0;
}
# 17504 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static char *save_tv_as_string(typval_T *tv, ptrdiff_t *const len, _Bool endnl)
  FUNC_ATTR_MALLOC FUNC_ATTR_NONNULL_ALL
{
  if (tv->v_type == VAR_UNKNOWN) {
    *len = 0;
    return ((void*)0);
  }



  if (tv->v_type != VAR_LIST) {
    const char *ret = tv_get_string_chk(tv);
    if (ret && (*len = strlen(ret))) {
      return xmemdupz(ret, (size_t)(*len));
    } else {
      *len = -1;
      return ((void*)0);
    }
  }


  *len = 0;
  list_T *list = tv->vval.v_list;
  do { const list_T *const l_ = (list); if (l_ != ((void*)0)) { for (const listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { *len += strlen(tv_get_string((&(li)->li_tv))) + 1; } } } } while (0);



  if (*len == 0) {
    return ((void*)0);
  }

  char *ret = xmalloc(*len + endnl);
  char *end = ret;
  do { const list_T *const l_ = (list); if (l_ != ((void*)0)) { for (const listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { for (const char *s = tv_get_string((&(li)->li_tv)); *s != '\000'; s++) { *end++ = (*s == '\n') ? '\000' : *s; } if (endnl || ((li)->li_next) != ((void*)0)) { *end++ = '\n'; } } } } } while (0);







  *end = '\000';
  *len = end - ret;
  return ret;
}




static void f_winwidth(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  win_T *wp;

  wp = find_win_by_nr(&argvars[0], ((void*)0));
  if (wp == ((void*)0))
    rettv->vval.v_number = -1;
  else
    rettv->vval.v_number = wp->w_width;
}


static void f_wordcount(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  tv_dict_alloc_ret(rettv);
  cursor_pos_info(rettv->vval.v_dict);
}


static void f_writefile(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = 0;

  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_LIST) {
    emsgf((const char *) (libintl_gettext((char *)(e_listarg))), ("writefile()"));
    return;
  }

  _Bool binary = 0;
  _Bool append = 0;
  _Bool do_fsync = !!p_fs;
  if (argvars[2].v_type != VAR_UNKNOWN) {
    const char *const flags = tv_get_string_chk(&argvars[2]);
    if (flags == ((void*)0)) {
      return;
    }
    for (const char *p = flags; *p; p++) {
      switch (*p) {
        case 'b': { binary = 1; break; }
        case 'a': { append = 1; break; }
        case 's': { do_fsync = 1; break; }
        case 'S': { do_fsync = 0; break; }
        default: {

          emsgf(libintl_gettext((char *)("E5060: Unknown flag: %s")), p);
          return;
        }
      }
    }
  }

  char buf[NUMBUFLEN];
  const char *const fname = tv_get_string_buf_chk(&argvars[1], buf);
  if (fname == ((void*)0)) {
    return;
  }
  FileDescriptor fp;
  int error;
  rettv->vval.v_number = -1;
  if (*fname == '\000') {
    emsg((char_u *)(libintl_gettext((char *)("E482: Can't open file with an empty name"))));
  } else if ((error = file_open(&fp, fname,
                                ((append ? kFileAppend : kFileTruncate)
                                 | kFileCreate), 0666)) != 0) {
    emsgf(libintl_gettext((char *)("E482: Can't open file %s for writing: %s")),
          fname, uv_strerror(error));
  } else {
    if (write_list(&fp, argvars[0].vval.v_list, binary)) {
      rettv->vval.v_number = 0;
    }
    if ((error = file_close(&fp, do_fsync)) != 0) {
      emsgf(libintl_gettext((char *)("E80: Error when closing file %s: %s")),
            fname, uv_strerror(error));
    }
  }
}



static void f_xor(typval_T *argvars, typval_T *rettv, FunPtr fptr)
{
  rettv->vval.v_number = tv_get_number_chk(&argvars[0], ((void*)0))
                         ^ tv_get_number_chk(&argvars[1], ((void*)0));
}
# 17653 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
pos_T *var2fpos(const typval_T *const tv, const int dollar_lnum,
                int *const ret_fnum)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
{
  static pos_T pos;
  pos_T *pp;


  if (tv->v_type == VAR_LIST) {
    list_T *l;
    int len;
    _Bool error = 0;
    listitem_T *li;

    l = tv->vval.v_list;
    if (l == ((void*)0)) {
      return ((void*)0);
    }


    pos.lnum = tv_list_find_nr(l, 0L, &error);
    if (error || pos.lnum <= 0 || pos.lnum > curbuf->b_ml.ml_line_count) {

      return ((void*)0);
    }


    pos.col = tv_list_find_nr(l, 1L, &error);
    if (error) {
      return ((void*)0);
    }
    len = (long)strlen((char *)(ml_get(pos.lnum)));


    li = tv_list_find(l, 1L);
    if (li != ((void*)0) && (&(li)->li_tv)->v_type == VAR_STRING
        && (&(li)->li_tv)->vval.v_string != ((void*)0)
        && strcmp((char *)((&(li)->li_tv)->vval.v_string), (char *)("$")) == 0) {
      pos.col = len + 1;
    }


    if (pos.col == 0 || (int)pos.col > len + 1) {

      return ((void*)0);
    }
    pos.col--;


    pos.coladd = tv_list_find_nr(l, 2L, &error);
    if (error) {
      pos.coladd = 0;
    }

    return &pos;
  }

  const char *const name = tv_get_string_chk(tv);
  if (name == ((void*)0)) {
    return ((void*)0);
  }
  if (name[0] == '.') {
    return &curwin->w_cursor;
  }
  if (name[0] == 'v' && name[1] == '\000') {
    if (VIsual_active) {
      return &VIsual;
    }
    return &curwin->w_cursor;
  }
  if (name[0] == '\'') {
    pp = getmark_buf_fnum(curbuf, (uint8_t)name[1], 0, ret_fnum);
    if (pp == ((void*)0) || pp == (pos_T *)-1 || pp->lnum <= 0) {
      return ((void*)0);
    }
    return pp;
  }

  pos.coladd = 0;

  if (name[0] == 'w' && dollar_lnum) {
    pos.col = 0;
    if (name[1] == '0') {
      update_topline();
      pos.lnum = curwin->w_topline;
      return &pos;
    } else if (name[1] == '$') {
      validate_botline();
      pos.lnum = curwin->w_botline - 1;
      return &pos;
    }
  } else if (name[0] == '$') {
    if (dollar_lnum) {
      pos.lnum = curbuf->b_ml.ml_line_count;
      pos.col = 0;
    } else {
      pos.lnum = curwin->w_cursor.lnum;
      pos.col = (colnr_T)strlen((char *)(get_cursor_line_ptr()));
    }
    return &pos;
  }
  return ((void*)0);
}
# 17765 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int list2fpos(typval_T *arg, pos_T *posp, int *fnump, colnr_T *curswantp)
{
  list_T *l;
  long i = 0;
  long n;



  if (arg->v_type != VAR_LIST
      || (l = arg->vval.v_list) == ((void*)0)
      || tv_list_len(l) < (fnump == ((void*)0) ? 2 : 3)
      || tv_list_len(l) > (fnump == ((void*)0) ? 4 : 5)) {
    return 0;
  }

  if (fnump != ((void*)0)) {
    n = tv_list_find_nr(l, i++, ((void*)0));
    if (n < 0) {
      return 0;
    }
    if (n == 0) {
      n = curbuf->handle;
    }
    *fnump = n;
  }

  n = tv_list_find_nr(l, i++, ((void*)0));
  if (n < 0) {
    return 0;
  }
  posp->lnum = n;

  n = tv_list_find_nr(l, i++, ((void*)0));
  if (n < 0) {
    return 0;
  }
  posp->col = n;

  n = tv_list_find_nr(l, i, ((void*)0));
  if (n < 0) {
    posp->coladd = 0;
  } else {
    posp->coladd = n;
  }

  if (curswantp != ((void*)0)) {
    *curswantp = tv_list_find_nr(l, i + 1, ((void*)0));
  }

  return 1;
}






static int get_env_len(const char_u **arg)
{
  int len;

  const char_u *p;
  for (p = *arg; vim_isIDc(*p); p++) {
  }
  if (p == *arg) {
    return 0;
  }

  len = (int)(p - *arg);
  *arg = p;
  return len;
}




static int get_id_len(const char **const arg)
{
  int len;


  const char *p;
  for (p = *arg; eval_isnamec(*p); p++) {
    if (*p == ':') {


      len = (int)(p - *arg);
      if (len > 1
          || (len == 1 && vim_strchr(namespace_char, **arg) == ((void*)0))) {
        break;
      }
    }
  }
  if (p == *arg) {
    return 0;
  }

  len = (int)(p - *arg);
  *arg = (const char *)skipwhite((const char_u *)p);

  return len;
}
# 17877 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static int get_name_len(const char **const arg,
                        char **alias,
                        int evaluate,
                        int verbose)
{
  int len;

  *alias = ((void*)0);

  if ((*arg)[0] == (char)(0x80) && (*arg)[1] == (char)253
      && (*arg)[2] == (char)KE_SNR) {

    *arg += 3;
    return get_id_len(arg) + 3;
  }
  len = eval_fname_script(*arg);
  if (len > 0) {

    *arg += len;
  }


  char_u *expr_start;
  char_u *expr_end;
  const char *p = (const char *)find_name_end((char_u *)(*arg),
                                              (const char_u **)&expr_start,
                                              (const char_u **)&expr_end,
                                              len > 0 ? 0 : 2);
  if (expr_start != ((void*)0)) {
    if (!evaluate) {
      len += (int)(p - *arg);
      *arg = (const char *)skipwhite((const char_u *)p);
      return len;
    }





    char_u *temp_string = make_expanded_name((char_u *)(*arg) - len, expr_start,
                                             expr_end, (char_u *)p);
    if (temp_string == ((void*)0)) {
      return -1;
    }
    *alias = (char *)temp_string;
    *arg = (const char *)skipwhite((const char_u *)p);
    return (int)strlen((char *)(temp_string));
  }

  len += get_id_len(arg);
  if (len == 0 && verbose)
    emsgf((const char *) (libintl_gettext((char *)(e_invexpr2))), (*arg));

  return len;
}







static const char_u *find_name_end(const char_u *arg, const char_u **expr_start,
                                   const char_u **expr_end, int flags)
{
  int mb_nest = 0;
  int br_nest = 0;
  int len;

  if (expr_start != ((void*)0)) {
    *expr_start = ((void*)0);
    *expr_end = ((void*)0);
  }


  if ((flags & 2) && !eval_isnamec1(*arg) && *arg != '{') {
    return arg;
  }

  const char_u *p;
  for (p = arg; *p != '\000'
       && (eval_isnamec(*p)
           || *p == '{'
           || ((flags & 1) && (*p == '[' || *p == '.'))
           || mb_nest != 0
           || br_nest != 0); (p += utfc_ptr2len((char_u *)p))) {
    if (*p == '\'') {

      for (p = p + 1; *p != '\000' && *p != '\''; (p += utfc_ptr2len((char_u *)p)))
        ;
      if (*p == '\000')
        break;
    } else if (*p == '"') {

      for (p = p + 1; *p != '\000' && *p != '"'; (p += utfc_ptr2len((char_u *)p))) {
        if (*p == '\\' && p[1] != '\000') {
          ++p;
        }
      }
      if (*p == '\000') {
        break;
      }
    } else if (br_nest == 0 && mb_nest == 0 && *p == ':') {


      len = (int)(p - arg);
      if ((len > 1 && p[-1] != '}')
          || (len == 1 && vim_strchr(namespace_char, *arg) == ((void*)0))) {
        break;
      }
    }

    if (mb_nest == 0) {
      if (*p == '[') {
        ++br_nest;
      } else if (*p == ']') {
        --br_nest;
      }
    }

    if (br_nest == 0) {
      if (*p == '{') {
        mb_nest++;
        if (expr_start != ((void*)0) && *expr_start == ((void*)0)) {
          *expr_start = p;
        }
      } else if (*p == '}') {
        mb_nest--;
        if (expr_start != ((void*)0) && mb_nest == 0 && *expr_end == ((void*)0)) {
          *expr_end = p;
        }
      }
    }
  }

  return p;
}
# 18028 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static char_u *make_expanded_name(const char_u *in_start, char_u *expr_start,
                                  char_u *expr_end, char_u *in_end)
{
  char_u c1;
  char_u *retval = ((void*)0);
  char_u *temp_result;
  char_u *nextcmd = ((void*)0);

  if (expr_end == ((void*)0) || in_end == ((void*)0))
    return ((void*)0);
  *expr_start = '\000';
  *expr_end = '\000';
  c1 = *in_end;
  *in_end = '\000';

  temp_result = eval_to_string(expr_start + 1, &nextcmd, 0);
  if (temp_result != ((void*)0) && nextcmd == ((void*)0)) {
    retval = xmalloc(strlen((char *)(temp_result)) + (expr_start - in_start)
                     + (in_end - expr_end) + 1);
    __builtin___strcpy_chk ((char *)(retval), (char *)(in_start), __builtin_object_size ((char *)(retval), 1 > 1 ? 1 : 0));
    __builtin___strcat_chk ((char *)(retval), (char *)(temp_result), __builtin_object_size ((char *)(retval), 1 > 1 ? 1 : 0));
    __builtin___strcat_chk ((char *)(retval), (char *)(expr_end + 1), __builtin_object_size ((char *)(retval), 1 > 1 ? 1 : 0));
  }
  xfree(temp_result);

  *in_end = c1;
  *expr_start = '{';
  *expr_end = '}';

  if (retval != ((void*)0)) {
    temp_result = (char_u *)find_name_end(retval,
                                          (const char_u **)&expr_start,
                                          (const char_u **)&expr_end, 0);
    if (expr_start != ((void*)0)) {

      temp_result = make_expanded_name(retval, expr_start,
          expr_end, temp_result);
      xfree(retval);
      retval = temp_result;
    }
  }

  return retval;
}





static int eval_isnamec(int c)
{
  return ((((unsigned)(c) >= 'A' && (unsigned)(c) <= 'Z') || ((unsigned)(c) >= 'a' && (unsigned)(c) <= 'z')) || ascii_isdigit(c)) || c == '_' || c == ':' || c == '#';
}





static int eval_isnamec1(int c)
{
  return (((unsigned)(c) >= 'A' && (unsigned)(c) <= 'Z') || ((unsigned)(c) >= 'a' && (unsigned)(c) <= 'z')) || c == '_';
}




varnumber_T get_vim_var_nr(int idx) FUNC_ATTR_PURE
{
  return vimvars[idx].vv_di.di_tv.vval.v_number;
}




char_u *get_vim_var_str(int idx) FUNC_ATTR_PURE FUNC_ATTR_NONNULL_RET
{
  return (char_u *)tv_get_string(&vimvars[idx].vv_di.di_tv);
}





list_T *get_vim_var_list(int idx) FUNC_ATTR_PURE
{
  return vimvars[idx].vv_di.di_tv.vval.v_list;
}



dict_T *get_vim_var_dict(int idx) FUNC_ATTR_PURE
{
  return vimvars[idx].vv_di.di_tv.vval.v_dict;
}




void set_vim_var_char(int c)
{
  char buf[21 + 1];

  if (1) {
    buf[(*utf_char2bytes)(c, (char_u *) buf)] = '\000';
  } else {
    buf[0] = c;
    buf[1] = '\000';
  }
  set_vim_var_string(VV_CHAR, buf, -1);
}





void set_vcount(long count, long count1, int set_prevcount)
{
  if (set_prevcount)
    vimvars[VV_PREVCOUNT].vv_di.di_tv.vval.v_number = vimvars[VV_COUNT].vv_di.di_tv.vval.v_number;
  vimvars[VV_COUNT].vv_di.di_tv.vval.v_number = count;
  vimvars[VV_COUNT1].vv_di.di_tv.vval.v_number = count1;
}





void set_vim_var_nr(const VimVarIndex idx, const varnumber_T val)
{
  tv_clear(&vimvars[idx].vv_di.di_tv);
  vimvars[idx].vv_di.di_tv.v_type = VAR_NUMBER;
  vimvars[idx].vv_di.di_tv.vval.v_number = val;
}





void set_vim_var_special(const VimVarIndex idx, const SpecialVarValue val)
{
  tv_clear(&vimvars[idx].vv_di.di_tv);
  vimvars[idx].vv_di.di_tv.v_type = VAR_SPECIAL;
  vimvars[idx].vv_di.di_tv.vval.v_special = val;
}







void set_vim_var_string(const VimVarIndex idx, const char *const val,
                        const ptrdiff_t len)
{
  tv_clear(&vimvars[idx].vv_di.di_tv);
  vimvars[idx].vv_di.di_tv.v_type = VAR_STRING;
  if (val == ((void*)0)) {
    vimvars[idx].vv_di.di_tv.vval.v_string = ((void*)0);
  } else if (len == -1) {
    vimvars[idx].vv_di.di_tv.vval.v_string = (char_u *) xstrdup(val);
  } else {
    vimvars[idx].vv_di.di_tv.vval.v_string = (char_u *) xstrndup(val, (size_t) len);
  }
}





void set_vim_var_list(const VimVarIndex idx, list_T *const val)
{
  tv_clear(&vimvars[idx].vv_di.di_tv);
  vimvars[idx].vv_di.di_tv.v_type = VAR_LIST;
  vimvars[idx].vv_di.di_tv.vval.v_list = val;
  if (val != ((void*)0)) {
    tv_list_ref(val);
  }
}






void set_vim_var_dict(const VimVarIndex idx, dict_T *const val)
{
  tv_clear(&vimvars[idx].vv_di.di_tv);
  vimvars[idx].vv_di.di_tv.v_type = VAR_DICT;
  vimvars[idx].vv_di.di_tv.vval.v_dict = val;

  if (val != ((void*)0)) {
    val->dv_refcount++;

    tv_dict_set_keys_readonly(val);
  }
}




void set_reg_var(int c)
{
  char regname;

  if (c == 0 || c == ' ') {
    regname = '"';
  } else {
    regname = c;
  }

  if (vimvars[VV_REG].vv_di.di_tv.vval.v_string == ((void*)0) || vimvars[VV_REG].vv_di.di_tv.vval.v_string[0] != c) {
    set_vim_var_string(VV_REG, &regname, 1);
  }
}







char_u *v_exception(char_u *oldval)
{
  if (oldval == ((void*)0))
    return vimvars[VV_EXCEPTION].vv_di.di_tv.vval.v_string;

  vimvars[VV_EXCEPTION].vv_di.di_tv.vval.v_string = oldval;
  return ((void*)0);
}







char_u *v_throwpoint(char_u *oldval)
{
  if (oldval == ((void*)0))
    return vimvars[VV_THROWPOINT].vv_di.di_tv.vval.v_string;

  vimvars[VV_THROWPOINT].vv_di.di_tv.vval.v_string = oldval;
  return ((void*)0);
}







char_u *set_cmdarg(exarg_T *eap, char_u *oldarg)
{
  char_u *oldval;
  char_u *newval;

  oldval = vimvars[VV_CMDARG].vv_di.di_tv.vval.v_string;
  if (eap == ((void*)0)) {
    xfree(oldval);
    vimvars[VV_CMDARG].vv_di.di_tv.vval.v_string = oldarg;
    return ((void*)0);
  }

  size_t len = 0;
  if (eap->force_bin == 1)
    len = 6;
  else if (eap->force_bin == 2)
    len = 8;

  if (eap->read_edit)
    len += 7;

  if (eap->force_ff != 0)
    len += strlen((char *)(eap->cmd + eap->force_ff)) + 6;
  if (eap->force_enc != 0)
    len += strlen((char *)(eap->cmd + eap->force_enc)) + 7;
  if (eap->bad_char != 0)
    len += 7 + 4;

  newval = xmalloc(len + 1);

  if (eap->force_bin == 1)
    __builtin___sprintf_chk ((char *)newval, 0, __builtin_object_size ((char *)newval, 1 > 1 ? 1 : 0), " ++bin");
  else if (eap->force_bin == 2)
    __builtin___sprintf_chk ((char *)newval, 0, __builtin_object_size ((char *)newval, 1 > 1 ? 1 : 0), " ++nobin");
  else
    *newval = '\000';

  if (eap->read_edit)
    __builtin___strcat_chk ((char *)(newval), (char *)(" ++edit"), __builtin_object_size ((char *)(newval), 1 > 1 ? 1 : 0));

  if (eap->force_ff != 0)
    __builtin___sprintf_chk ((char *)newval + strlen((char *)(newval)), 0, __builtin_object_size ((char *)newval + strlen((char *)(newval)), 1 > 1 ? 1 : 0), " ++ff=%s", eap->cmd + eap->force_ff);

  if (eap->force_enc != 0)
    __builtin___sprintf_chk ((char *)newval + strlen((char *)(newval)), 0, __builtin_object_size ((char *)newval + strlen((char *)(newval)), 1 > 1 ? 1 : 0), " ++enc=%s", eap->cmd + eap->force_enc);

  if (eap->bad_char == -1)
    __builtin___strcpy_chk ((char *)(newval + strlen((char *)(newval))), (char *)(" ++bad=keep"), __builtin_object_size ((char *)(newval + strlen((char *)(newval))), 1 > 1 ? 1 : 0));
  else if (eap->bad_char == -2)
    __builtin___strcpy_chk ((char *)(newval + strlen((char *)(newval))), (char *)(" ++bad=drop"), __builtin_object_size ((char *)(newval + strlen((char *)(newval))), 1 > 1 ? 1 : 0));
  else if (eap->bad_char != 0)
    __builtin___sprintf_chk ((char *)newval + strlen((char *)(newval)), 0, __builtin_object_size ((char *)newval + strlen((char *)(newval)), 1 > 1 ? 1 : 0), " ++bad=%c", eap->bad_char);
  vimvars[VV_CMDARG].vv_di.di_tv.vval.v_string = newval;
  return oldval;
}





static int get_var_tv(
    const char *name,
    int len,
    typval_T *rettv,
    dictitem_T **dip,
    int verbose,
    int no_autoload
)
{
  int ret = 1;
  typval_T *tv = ((void*)0);
  dictitem_T *v;

  v = find_var(name, (size_t)len, ((void*)0), no_autoload);
  if (v != ((void*)0)) {
    tv = &v->di_tv;
    if (dip != ((void*)0)) {
      *dip = v;
    }
  }

  if (tv == ((void*)0)) {
    if (rettv != ((void*)0) && verbose) {
      emsgf(libintl_gettext((char *)("E121: Undefined variable: %.*s")), len, name);
    }
    ret = 0;
  } else if (rettv != ((void*)0)) {
    tv_copy(tv, rettv);
  }

  return ret;
}



static void check_vars(const char *name, size_t len)
{
  if (eval_lavars_used == ((void*)0)) {
    return;
  }

  const char *varname;
  hashtab_T *ht = find_var_ht(name, len, &varname);

  if (ht == get_funccal_local_ht() || ht == get_funccal_args_ht()) {
    if (find_var(name, len, ((void*)0), 1) != ((void*)0)) {
      *eval_lavars_used = 1;
    }
  }
}




static int
handle_subscript(
    const char **const arg,
    typval_T *rettv,
    int evaluate,
    int verbose
)
{
  int ret = 1;
  dict_T *selfdict = ((void*)0);
  char_u *s;
  int len;
  typval_T functv;

  while (ret == 1
         && (**arg == '['
             || (**arg == '.' && rettv->v_type == VAR_DICT)
             || (**arg == '(' && (!evaluate || tv_is_func(*rettv))))
         && !ascii_iswhite(*(*arg - 1))) {
    if (**arg == '(') {
      partial_T *pt = ((void*)0);

      if (evaluate) {
        functv = *rettv;
        rettv->v_type = VAR_UNKNOWN;


        if (functv.v_type == VAR_PARTIAL) {
          pt = functv.vval.v_partial;
          s = partial_name(pt);
        } else {
          s = functv.vval.v_string;
        }
      } else {
        s = (char_u *)"";
      }
      ret = get_func_tv(s, (int)strlen((char *)(s)), rettv, (char_u **)arg,
                        curwin->w_cursor.lnum, curwin->w_cursor.lnum,
                        &len, evaluate, pt, selfdict);



      if (evaluate) {
        tv_clear(&functv);
      }




      if (aborting()) {
        if (ret == 1) {
          tv_clear(rettv);
        }
        ret = 0;
      }
      tv_dict_unref(selfdict);
      selfdict = ((void*)0);
    } else {
      tv_dict_unref(selfdict);
      if (rettv->v_type == VAR_DICT) {
        selfdict = rettv->vval.v_dict;
        if (selfdict != ((void*)0))
          ++selfdict->dv_refcount;
      } else
        selfdict = ((void*)0);
      if (eval_index((char_u **)arg, rettv, evaluate, verbose) == 0) {
        tv_clear(rettv);
        ret = 0;
      }
    }
  }


  if (selfdict != ((void*)0) && tv_is_func(*rettv)) {
    set_selfdict(rettv, selfdict);
  }

  tv_dict_unref(selfdict);
  return ret;
}

void set_selfdict(typval_T *rettv, dict_T *selfdict)
{


  if (rettv->v_type == VAR_PARTIAL && !rettv->vval.v_partial->pt_auto
      && rettv->vval.v_partial->pt_dict != ((void*)0)) {
    return;
  }
  char_u *fname;
  char_u *tofree = ((void*)0);
  ufunc_T *fp;
  char_u fname_buf[40 + 1];
  int error;

  if (rettv->v_type == VAR_PARTIAL && rettv->vval.v_partial->pt_func != ((void*)0)) {
    fp = rettv->vval.v_partial->pt_func;
  } else {
    fname = rettv->v_type == VAR_FUNC || rettv->v_type == VAR_STRING
                                      ? rettv->vval.v_string
                                      : rettv->vval.v_partial->pt_name;

    fname = fname_trans_sid(fname, fname_buf, &tofree, &error);
    fp = find_func(fname);
    xfree(tofree);
  }


  if (fp != ((void*)0) && (fp->uf_flags & 0x04)) {
    partial_T *pt = (partial_T *)xcalloc(1, sizeof(partial_T));
    pt->pt_refcount = 1;
    pt->pt_dict = selfdict;
    (selfdict->dv_refcount)++;
    pt->pt_auto = 1;
    if (rettv->v_type == VAR_FUNC || rettv->v_type == VAR_STRING) {

      pt->pt_name = rettv->vval.v_string;
    } else {
      partial_T *ret_pt = rettv->vval.v_partial;
      int i;




      if (ret_pt->pt_name != ((void*)0)) {
        pt->pt_name = vim_strsave(ret_pt->pt_name);
        func_ref(pt->pt_name);
      } else {
        pt->pt_func = ret_pt->pt_func;
        func_ptr_ref(pt->pt_func);
      }
      if (ret_pt->pt_argc > 0) {
        size_t arg_size = sizeof(typval_T) * ret_pt->pt_argc;
        pt->pt_argv = (typval_T *)xmalloc(arg_size);
        pt->pt_argc = ret_pt->pt_argc;
        for (i = 0; i < pt->pt_argc; i++) {
          tv_copy(&ret_pt->pt_argv[i], &pt->pt_argv[i]);
        }
      }
      partial_unref(ret_pt);
    }
    rettv->v_type = VAR_PARTIAL;
    rettv->vval.v_partial = pt;
  }
}






static dictitem_T *find_var(const char *const name, const size_t name_len,
                            hashtab_T **htp, int no_autoload)
{
  const char *varname;
  hashtab_T *const ht = find_var_ht(name, name_len, &varname);
  if (htp != ((void*)0)) {
    *htp = ht;
  }
  if (ht == ((void*)0)) {
    return ((void*)0);
  }
  dictitem_T *const ret = find_var_in_ht(ht, *name,
                                         varname,
                                         name_len - (size_t)(varname - name),
                                         no_autoload || htp != ((void*)0));
  if (ret != ((void*)0)) {
    return ret;
  }


  return find_var_in_scoped_ht(name, name_len, no_autoload || htp != ((void*)0));
}
# 18578 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static dictitem_T *find_var_in_ht(hashtab_T *const ht,
                                  int htname,
                                  const char *const varname,
                                  const size_t varname_len,
                                  int no_autoload)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
{
  hashitem_T *hi;

  if (varname_len == 0) {

    switch (htname) {
      case 's': return (dictitem_T *)&(((scriptvar_T **)ga_scripts.ga_data)[(current_SID) - 1])->sv_var;
      case 'g': return (dictitem_T *)&globvars_var;
      case 'v': return (dictitem_T *)&vimvars_var;
      case 'b': return (dictitem_T *)&curbuf->b_bufvar;
      case 'w': return (dictitem_T *)&curwin->w_winvar;
      case 't': return (dictitem_T *)&curtab->tp_winvar;
      case 'l': return (current_funccal == ((void*)0)
                        ? ((void*)0) : (dictitem_T *)&current_funccal->l_vars_var);
      case 'a': return (current_funccal == ((void*)0)
                        ? ((void*)0) : (dictitem_T *)&get_funccal()->l_avars_var);
    }
    return ((void*)0);
  }

  hi = hash_find_len(ht, varname, varname_len);
  if (((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {




    if (ht == &globvardict.dv_hashtab && !no_autoload) {


      if (!script_autoload(varname, varname_len, 0) || aborting()) {
        return ((void*)0);
      }
      hi = hash_find_len(ht, varname, varname_len);
    }
    if (((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
      return ((void*)0);
    }
  }
  return ((dictitem_T *)((hi)->hi_key - __builtin_offsetof(dictitem_T, di_key)));
}


static funccall_T *get_funccal(void)
{
  funccall_T *funccal = current_funccal;
  if (debug_backtrace_level > 0) {
    for (int i = 0; i < debug_backtrace_level; i++) {
      funccall_T *temp_funccal = funccal->caller;
      if (temp_funccal) {
        funccal = temp_funccal;
      } else {

        debug_backtrace_level = i;
      }
    }
  }

  return funccal;
}



static hashtab_T *get_funccal_args_ht(void)
{
  if (current_funccal == ((void*)0)) {
    return ((void*)0);
  }
  return &get_funccal()->l_avars.dv_hashtab;
}



static hashtab_T *get_funccal_local_ht(void)
{
  if (current_funccal == ((void*)0)) {
    return ((void*)0);
  }
  return &get_funccal()->l_vars.dv_hashtab;
}
# 18673 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static hashtab_T *find_var_ht_dict(const char *name, const size_t name_len,
                                   const char **varname, dict_T **d)
{
  hashitem_T *hi;
  *d = ((void*)0);

  if (name_len == 0) {
    return ((void*)0);
  }
  if (name_len == 1 || (name_len >= 2 && name[1] != ':')) {

    if (name[0] == ':' || name[0] == '#') {

      return ((void*)0);
    }
    *varname = name;


    hi = hash_find_len(&compat_hashtab, name, name_len);
    if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
      return &compat_hashtab;
    }

    if (current_funccal == ((void*)0)) {
      *d = &globvardict;
    } else {
      *d = &get_funccal()->l_vars;
    }
    goto end;
  }

  *varname = name + 2;
  if (*name == 'g') {
    *d = &globvardict;
  } else if (name_len > 2
             && (memchr(name + 2, ':', name_len - 2) != ((void*)0)
                 || memchr(name + 2, '#', name_len - 2) != ((void*)0))) {

    return ((void*)0);
  }

  if (*name == 'b') {
    *d = curbuf->b_vars;
  } else if (*name == 'w') {
    *d = curwin->w_vars;
  } else if (*name == 't') {
    *d = curtab->tp_vars;
  } else if (*name == 'v') {
    *d = &vimvardict;
  } else if (*name == 'a' && current_funccal != ((void*)0)) {
    *d = &get_funccal()->l_avars;
  } else if (*name == 'l' && current_funccal != ((void*)0)) {
    *d = &get_funccal()->l_vars;
  } else if (*name == 's'
             && current_SID > 0 && current_SID <= ga_scripts.ga_len) {
    *d = &(((scriptvar_T **)ga_scripts.ga_data)[(current_SID) - 1])->sv_dict;
  }

end:
  return *d ? &(*d)->dv_hashtab : ((void*)0);
}
# 18743 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static hashtab_T *find_var_ht(const char *name, const size_t name_len,
                              const char **varname)
{
  dict_T *d;
  return find_var_ht_dict(name, name_len, varname, &d);
}






char_u *get_var_value(const char *const name)
{
  dictitem_T *v;

  v = find_var(name, strlen(name), ((void*)0), 0);
  if (v == ((void*)0)) {
    return ((void*)0);
  }
  return (char_u *)tv_get_string(&v->di_tv);
}





void new_script_vars(scid_T id)
{
  hashtab_T *ht;
  scriptvar_T *sv;

  ga_grow(&ga_scripts, (int)(id - ga_scripts.ga_len));
  {



    for (int i = 1; i <= ga_scripts.ga_len; ++i) {
      ht = &((((scriptvar_T **)ga_scripts.ga_data)[(i) - 1])->sv_dict.dv_hashtab);
      if (ht->ht_mask == 16 - 1)
        ht->ht_array = ht->ht_smallarray;
      sv = (((scriptvar_T **)ga_scripts.ga_data)[(i) - 1]);
      sv->sv_var.di_tv.vval.v_dict = &sv->sv_dict;
    }

    while (ga_scripts.ga_len < id) {
      sv = (((scriptvar_T **)ga_scripts.ga_data)[(ga_scripts.ga_len + 1) - 1]) = xcalloc(1, sizeof(scriptvar_T));
      init_var_dict(&sv->sv_dict, &sv->sv_var, VAR_SCOPE);
      ++ga_scripts.ga_len;
    }
  }
}





void init_var_dict(dict_T *dict, ScopeDictDictItem *dict_var, int scope)
{
  hash_init(&dict->dv_hashtab);
  dict->dv_lock = VAR_UNLOCKED;
  dict->dv_scope = scope;
  dict->dv_refcount = DO_NOT_FREE_CNT;
  dict->dv_copyID = 0;
  dict_var->di_tv.vval.v_dict = dict;
  dict_var->di_tv.v_type = VAR_DICT;
  dict_var->di_tv.v_lock = VAR_FIXED;
  dict_var->di_flags = DI_FLAGS_RO | DI_FLAGS_FIX;
  dict_var->di_key[0] = '\000';
  QUEUE_INIT(&dict->watchers);
}




void unref_var_dict(dict_T *dict)
{


  dict->dv_refcount -= DO_NOT_FREE_CNT - 1;
  tv_dict_unref(dict);
}






void vars_clear(hashtab_T *ht)
{
  vars_clear_ext(ht, 1);
}




static void vars_clear_ext(hashtab_T *ht, int free_val)
{
  int todo;
  hashitem_T *hi;
  dictitem_T *v;

  hash_lock(ht);
  todo = (int)ht->ht_used;
  for (hi = ht->ht_array; todo > 0; ++hi) {
    if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
      --todo;




      v = ((dictitem_T *)((hi)->hi_key - __builtin_offsetof(dictitem_T, di_key)));
      if (free_val) {
        tv_clear(&v->di_tv);
      }
      if (v->di_flags & DI_FLAGS_ALLOC) {
        xfree(v);
      }
    }
  }
  hash_clear(ht);
  ht->ht_used = 0;
}





static void delete_var(hashtab_T *ht, hashitem_T *hi)
{
  dictitem_T *di = ((dictitem_T *)((hi)->hi_key - __builtin_offsetof(dictitem_T, di_key)));

  hash_remove(ht, hi);
  tv_clear(&di->di_tv);
  xfree(di);
}




static void list_one_var(dictitem_T *v, const char *prefix, int *first)
{
  char *const s = encode_tv2echo(&v->di_tv, ((void*)0));
  list_one_var_a(prefix, (const char *)v->di_key, strlen((char *)(v->di_key)),
                 v->di_tv.v_type, (s == ((void*)0) ? "" : s), first);
  xfree(s);
}




static void list_one_var_a(const char *prefix, const char *name,
                           const ptrdiff_t name_len, const int type,
                           const char *string, int *first)
{

  msg_start();
  msg_puts(prefix);
  if (name != ((void*)0)) {
    msg_puts_attr_len(name, name_len, 0);
  }
  msg_putchar(' ');
  msg_advance(22);
  if (type == VAR_NUMBER) {
    msg_putchar('#');
  } else if (type == VAR_FUNC || type == VAR_PARTIAL) {
    msg_putchar('*');
  } else if (type == VAR_LIST) {
    msg_putchar('[');
    if (*string == '[')
      ++string;
  } else if (type == VAR_DICT) {
    msg_putchar('{');
    if (*string == '{')
      ++string;
  } else
    msg_putchar(' ');

  msg_outtrans((char_u *)string);

  if (type == VAR_FUNC || type == VAR_PARTIAL) {
    msg_puts("()");
  }
  if (*first) {
    msg_clr_eos();
    *first = 0;
  }
}
# 18941 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static void set_var(const char *name, const size_t name_len, typval_T *const tv,
                    const _Bool copy)
  FUNC_ATTR_NONNULL_ALL
{
  dictitem_T *v;
  hashtab_T *ht;
  dict_T *dict;

  const char *varname;
  ht = find_var_ht_dict(name, name_len, &varname, &dict);
  const _Bool watched = tv_dict_is_watched(dict);

  if (ht == ((void*)0) || *varname == '\000') {
    emsgf((const char *) (libintl_gettext((char *)(e_illvar))), (name));
    return;
  }
  v = find_var_in_ht(ht, 0, varname, name_len - (size_t)(varname - name), 1);


  if (v == ((void*)0)) {
    v = find_var_in_scoped_ht((const char *)name, name_len, 1);
  }

  if (tv_is_func(*tv) && !var_check_func_name(name, v == ((void*)0))) {
    return;
  }

  typval_T oldtv = ((typval_T) { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED, });
  if (v != ((void*)0)) {

    if (var_check_ro(v->di_flags, name, name_len)
        || tv_check_lock(v->di_tv.v_lock, name, name_len)) {
      return;
    }



    if (ht == &vimvardict.dv_hashtab) {
      if (v->di_tv.v_type == VAR_STRING) {
        xfree(v->di_tv.vval.v_string);
        if (copy || tv->v_type != VAR_STRING) {
          v->di_tv.vval.v_string = (char_u *)xstrdup(tv_get_string(tv));
        } else {

          v->di_tv.vval.v_string = tv->vval.v_string;
          tv->vval.v_string = ((void*)0);
        }
        return;
      } else if (v->di_tv.v_type == VAR_NUMBER) {
        v->di_tv.vval.v_number = tv_get_number(tv);
        if (strcmp(varname, "searchforward") == 0) {
          set_search_direction(v->di_tv.vval.v_number ? '/' : '?');
        } else if (strcmp(varname, "hlsearch") == 0) {
          no_hlsearch = !v->di_tv.vval.v_number;
          redraw_all_later(35);
        }
        return;
      } else if (v->di_tv.v_type != tv->v_type) {
        internal_error("set_var()");
      }
    }

    if (watched) {
      tv_copy(&v->di_tv, &oldtv);
    }
    tv_clear(&v->di_tv);
  } else {

    if (ht == &vimvardict.dv_hashtab) {
      emsgf(libintl_gettext((char *)(e_illvar)), name);
      return;
    }


    if (!valid_varname(varname)) {
      return;
    }


    ((void)0);

    v = xmalloc(sizeof(dictitem_T) + strlen(varname));
    __builtin___strcpy_chk ((char *)(v->di_key), (char *)(varname), __builtin_object_size ((char *)(v->di_key), 1 > 1 ? 1 : 0));
    if (tv_dict_add(dict, v) == 0) {
      xfree(v);
      return;
    }
    v->di_flags = DI_FLAGS_ALLOC;
  }

  if (copy || tv->v_type == VAR_NUMBER || tv->v_type == VAR_FLOAT) {
    tv_copy(tv, &v->di_tv);
  } else {
    v->di_tv = *tv;
    v->di_tv.v_lock = 0;
    tv_init(tv);
  }

  if (watched) {
    if (oldtv.v_type == VAR_UNKNOWN) {
      tv_dict_watcher_notify(dict, (char *)v->di_key, &v->di_tv, ((void*)0));
    } else {
      tv_dict_watcher_notify(dict, (char *)v->di_key, &v->di_tv, &oldtv);
      tv_clear(&oldtv);
    }
  }
}
# 19068 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
_Bool var_check_ro(const int flags, const char *name,
                  size_t name_len)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
{
  const char *error_message = ((void*)0);
  if (flags & DI_FLAGS_RO) {
    error_message = e_readonlyvar;
  } else if ((flags & DI_FLAGS_RO_SBX) && sandbox) {
    error_message = "E794: Cannot set variable in the sandbox: \"%.*s\"";
  }

  if (error_message == ((void*)0)) {
    return 0;
  }
  if (name_len == (18446744073709551615ULL)) {
    name = libintl_gettext((char *)(name));
    name_len = strlen(name);
  } else if (name_len == (18446744073709551615ULL - 1)) {
    name_len = strlen(name);
  }

  emsgf(libintl_gettext((char *)(error_message)), (int)name_len, name);

  return 1;
}
# 19112 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static _Bool var_check_fixed(const int flags, const char *name,
                            size_t name_len)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL
{
  if (flags & DI_FLAGS_FIX) {
    if (name_len == (18446744073709551615ULL)) {
      name = libintl_gettext((char *)(name));
      name_len = strlen(name);
    } else if (name_len == (18446744073709551615ULL - 1)) {
      name_len = strlen(name);
    }
    emsgf(libintl_gettext((char *)("E795: Cannot delete variable %.*s")), (int)name_len, name);
    return 1;
  }
  return 0;
}
# 19138 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
_Bool var_check_func_name(const char *const name, const _Bool new_var)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
{

  if (!(vim_strchr((char_u *)"wbst", name[0]) != ((void*)0) && name[1] == ':')
      && !((unsigned)((name[0] != '\000' && name[1] == ':') ? name[2] : name[0]) >= 'A' && (unsigned)((name[0] != '\000' && name[1] == ':') ? name[2] : name[0]) <= 'Z')) {

    emsgf((const char *) (libintl_gettext((char *)("E704: Funcref variable name must start with a capital: %s"))), (name));
    return 0;
  }



  if (new_var && function_exists((const char *)name, 0)) {
    emsgf((const char *) (libintl_gettext((char *)("E705: Variable name conflicts with existing function: %s"))), (name));

    return 0;
  }
  return 1;
}
# 19167 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
_Bool valid_varname(const char *varname)
  FUNC_ATTR_NONNULL_ALL FUNC_ATTR_WARN_UNUSED_RESULT
{
  for (const char *p = varname; *p != '\000'; p++) {
    if (!eval_isnamec1((int)(uint8_t)(*p))
        && (p == varname || !ascii_isdigit(*p))
        && *p != '#') {
      emsgf(libintl_gettext((char *)(e_illvar)), varname);
      return 0;
    }
  }
  return 1;
}
# 19197 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
int var_item_copy(const vimconv_T *const conv,
                  typval_T *const from,
                  typval_T *const to,
                  const _Bool deep,
                  const int copyID)
  FUNC_ATTR_NONNULL_ARG(2, 3)
{
  static int recurse = 0;
  int ret = 1;

  if (recurse >= 100) {
    emsg((char_u *)(libintl_gettext((char *)("E698: variable nested too deep for making a copy"))));
    return 0;
  }
  ++recurse;

  switch (from->v_type) {
  case VAR_NUMBER:
  case VAR_FLOAT:
  case VAR_FUNC:
  case VAR_PARTIAL:
  case VAR_SPECIAL:
    tv_copy(from, to);
    break;
  case VAR_STRING:
    if (conv == ((void*)0) || conv->vc_type == CONV_NONE
        || from->vval.v_string == ((void*)0)) {
      tv_copy(from, to);
    } else {
      to->v_type = VAR_STRING;
      to->v_lock = 0;
      if ((to->vval.v_string = string_convert((vimconv_T *)conv,
                                              from->vval.v_string,
                                              ((void*)0)))
          == ((void*)0)) {
        to->vval.v_string = (char_u *) xstrdup((char *) from->vval.v_string);
      }
    }
    break;
  case VAR_LIST:
    to->v_type = VAR_LIST;
    to->v_lock = 0;
    if (from->vval.v_list == ((void*)0)) {
      to->vval.v_list = ((void*)0);
    } else if (copyID != 0 && tv_list_copyid(from->vval.v_list) == copyID) {

      to->vval.v_list = tv_list_latest_copy(from->vval.v_list);
      tv_list_ref(to->vval.v_list);
    } else {
      to->vval.v_list = tv_list_copy(conv, from->vval.v_list, deep, copyID);
    }
    if (to->vval.v_list == ((void*)0) && from->vval.v_list != ((void*)0)) {
      ret = 0;
    }
    break;
  case VAR_DICT:
    to->v_type = VAR_DICT;
    to->v_lock = 0;
    if (from->vval.v_dict == ((void*)0))
      to->vval.v_dict = ((void*)0);
    else if (copyID != 0 && from->vval.v_dict->dv_copyID == copyID) {

      to->vval.v_dict = from->vval.v_dict->dv_copydict;
      ++to->vval.v_dict->dv_refcount;
    } else {
      to->vval.v_dict = tv_dict_copy(conv, from->vval.v_dict, deep, copyID);
    }
    if (to->vval.v_dict == ((void*)0) && from->vval.v_dict != ((void*)0)) {
      ret = 0;
    }
    break;
  case VAR_UNKNOWN:
    internal_error("var_item_copy(UNKNOWN)");
    ret = 0;
  }
  --recurse;
  return ret;
}






void ex_echo(exarg_T *eap)
{
  char_u *arg = eap->arg;
  typval_T rettv;
  _Bool needclr = 1;
  _Bool atstart = 1;

  if (eap->skip)
    ++emsg_skip;
  while (*arg != '\000' && *arg != '|' && *arg != '\n' && !got_int) {


    need_clr_eos = needclr;

    {
      char_u *p = arg;
      if (eval1(&arg, &rettv, !eap->skip) == 0) {



        if (!aborting()) {
          emsgf((const char *) (libintl_gettext((char *)(e_invexpr2))), (p));
        }
        need_clr_eos = 0;
        break;
      }
      need_clr_eos = 0;
    }

    if (!eap->skip) {
      if (atstart) {
        atstart = 0;


        if (eap->cmdidx == CMD_echo) {



          msg_sb_eol();
          msg_start();
        }
      } else if (eap->cmdidx == CMD_echo) {
        msg_puts_attr(" ", echo_attr);
      }
      char *tofree = encode_tv2echo(&rettv, ((void*)0));
      const char *p = tofree;
      if (p != ((void*)0)) {
        if (ui_is_external(kUIMessages)) {
           ui_call_msg_start_kind(cstr_to_string("echo"));
        }
        for (; *p != '\000' && !got_int; ++p) {
          if (*p == '\n' || *p == '\r' || *p == '\011') {
            if (*p != '\011' && needclr) {

              msg_clr_eos();
              needclr = 0;
            }
            msg_putchar_attr((uint8_t)(*p), echo_attr);
          } else {
            if (1) {
              int i = (*utfc_ptr2len)((const char_u *)p);

              (void)msg_outtrans_len_attr((char_u *)p, i, echo_attr);
              p += i - 1;
            } else {
              (void)msg_outtrans_len_attr((char_u *)p, 1, echo_attr);
            }
          }
        }
      }
      xfree(tofree);
    }
    tv_clear(&rettv);
    arg = skipwhite(arg);
  }
  eap->nextcmd = check_nextcmd(arg);

  if (eap->skip)
    --emsg_skip;
  else {

    if (needclr)
      msg_clr_eos();
    if (eap->cmdidx == CMD_echo)
      msg_end();
  }
}




void ex_echohl(exarg_T *eap)
{
  int id;

  id = syn_name2id(eap->arg);
  if (id == 0)
    echo_attr = 0;
  else
    echo_attr = syn_id2attr(id);
}
# 19390 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
void ex_execute(exarg_T *eap)
{
  char_u *arg = eap->arg;
  typval_T rettv;
  int ret = 1;
  char_u *p;
  garray_T ga;
  int save_did_emsg;

  ga_init(&ga, 1, 80);

  if (eap->skip)
    ++emsg_skip;
  while (*arg != '\000' && *arg != '|' && *arg != '\n') {
    p = arg;
    if (eval1(&arg, &rettv, !eap->skip) == 0) {





      if (!aborting())
        emsgf((const char *) (libintl_gettext((char *)(e_invexpr2))), (p));
      ret = 0;
      break;
    }

    if (!eap->skip) {
      const char *const argstr = tv_get_string(&rettv);
      const size_t len = strlen(argstr);
      ga_grow(&ga, len + 2);
      if (!((&ga)->ga_len <= 0)) {
        ((char_u *)(ga.ga_data))[ga.ga_len++] = ' ';
      }
      __builtin___memcpy_chk ((char_u *)(ga.ga_data) + ga.ga_len, argstr, len + 1, __builtin_object_size ((char_u *)(ga.ga_data) + ga.ga_len, 0));
      ga.ga_len += len;
    }

    tv_clear(&rettv);
    arg = skipwhite(arg);
  }

  if (ret != 0 && ga.ga_data != ((void*)0)) {
    if (eap->cmdidx == CMD_echomsg) {
      if (ui_is_external(kUIMessages)) {
        ui_call_msg_start_kind(cstr_to_string("echomsg"));
      }
      msg_attr((const char *)(ga.ga_data), (echo_attr));
      ui_flush();
    } else if (eap->cmdidx == CMD_echoerr) {

      save_did_emsg = did_emsg;
      emsg((char_u *)((char_u *)ga.ga_data));
      if (!force_abort)
        did_emsg = save_did_emsg;
    } else if (eap->cmdidx == CMD_execute)
      do_cmdline((char_u *)ga.ga_data,
          eap->getline, eap->cookie, 0x02|0x01);
  }

  ga_clear(&ga);

  if (eap->skip)
    --emsg_skip;

  eap->nextcmd = check_nextcmd(arg);
}







static const char *find_option_end(const char **const arg, int *const opt_flags)
{
  const char *p = *arg;

  ++p;
  if (*p == 'g' && p[1] == ':') {
    *opt_flags = OPT_GLOBAL;
    p += 2;
  } else if (*p == 'l' && p[1] == ':') {
    *opt_flags = OPT_LOCAL;
    p += 2;
  } else {
    *opt_flags = 0;
  }

  if (!(((unsigned)(*p) >= 'A' && (unsigned)(*p) <= 'Z') || ((unsigned)(*p) >= 'a' && (unsigned)(*p) <= 'z'))) {
    return ((void*)0);
  }
  *arg = p;

  if (p[0] == 't' && p[1] == '_' && p[2] != '\000' && p[3] != '\000') {
    p += 4;
  } else {
    while ((((unsigned)(*p) >= 'A' && (unsigned)(*p) <= 'Z') || ((unsigned)(*p) >= 'a' && (unsigned)(*p) <= 'z'))) {
      p++;
    }
  }
  return p;
}




void ex_function(exarg_T *eap)
{
  char_u *theline;
  int c;
  int saved_did_emsg;
  int saved_wait_return = need_wait_return;
  char_u *name = ((void*)0);
  char_u *p;
  char_u *arg;
  char_u *line_arg = ((void*)0);
  garray_T newargs;
  garray_T newlines;
  int varargs = 0;
  int flags = 0;
  ufunc_T *fp;
  _Bool overwrite = 0;
  int indent;
  int nesting;
  char_u *skip_until = ((void*)0);
  dictitem_T *v;
  funcdict_T fudi;
  static int func_nr = 0;
  int paren;
  hashtab_T *ht;
  int todo;
  hashitem_T *hi;
  int sourcing_lnum_off;
  _Bool show_block = 0;




  if (ends_excmd(*eap->arg)) {
    if (!eap->skip) {
      todo = (int)func_hashtab.ht_used;
      for (hi = func_hashtab.ht_array; todo > 0 && !got_int; ++hi) {
        if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
          --todo;
          fp = ((ufunc_T *)((hi)->hi_key - __builtin_offsetof(ufunc_T, uf_name)));
          if (!func_name_refcount(fp->uf_name)) {
            list_func_head(fp, 0);
          }
        }
      }
    }
    eap->nextcmd = check_nextcmd(eap->arg);
    return;
  }




  if (*eap->arg == '/') {
    p = skip_regexp(eap->arg + 1, '/', 1, ((void*)0));
    if (!eap->skip) {
      regmatch_T regmatch;

      c = *p;
      *p = '\000';
      regmatch.regprog = vim_regcomp(eap->arg + 1, 1);
      *p = c;
      if (regmatch.regprog != ((void*)0)) {
        regmatch.rm_ic = p_ic;

        todo = (int)func_hashtab.ht_used;
        for (hi = func_hashtab.ht_array; todo > 0 && !got_int; ++hi) {
          if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
            --todo;
            fp = ((ufunc_T *)((hi)->hi_key - __builtin_offsetof(ufunc_T, uf_name)));
            if (!isdigit(*fp->uf_name)
                && vim_regexec(&regmatch, fp->uf_name, 0))
              list_func_head(fp, 0);
          }
        }
        vim_regfree(regmatch.regprog);
      }
    }
    if (*p == '/')
      ++p;
    eap->nextcmd = check_nextcmd(p);
    return;
  }
# 19594 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  p = eap->arg;
  name = trans_function_name(&p, eap->skip, 0, &fudi, ((void*)0));
  paren = (vim_strchr(p, '(') != ((void*)0));
  if (name == ((void*)0) && (fudi.fd_dict == ((void*)0) || !paren) && !eap->skip) {





    if (!aborting()) {
      if (fudi.fd_newkey != ((void*)0)) {
        emsgf((const char *) (libintl_gettext((char *)(e_dictkey))), (fudi.fd_newkey));
      }
      xfree(fudi.fd_newkey);
      return;
    } else
      eap->skip = 1;
  }



  saved_did_emsg = did_emsg;
  did_emsg = 0;




  if (!paren) {
    if (!ends_excmd(*skipwhite(p))) {
      emsg((char_u *)(libintl_gettext((char *)(e_trailing))));
      goto ret_free;
    }
    eap->nextcmd = check_nextcmd(p);
    if (eap->nextcmd != ((void*)0))
      *p = '\000';
    if (!eap->skip && !got_int) {
      fp = find_func(name);
      if (fp != ((void*)0)) {
        list_func_head(fp, 1);
        for (int j = 0; j < fp->uf_lines.ga_len && !got_int; ++j) {
          if (((char_u **)(fp->uf_lines.ga_data))[j] == ((void*)0))
            continue;
          msg_putchar('\n');
          msg_outnum((long)(j + 1));
          if (j < 9)
            msg_putchar(' ');
          if (j < 99)
            msg_putchar(' ');
          msg_prt_line(((char_u **)(fp->uf_lines.ga_data))[j], 0);
          ui_flush();
          os_breakcheck();
        }
        if (!got_int) {
          msg_putchar('\n');
          msg_puts("   endfunction");
        }
      } else
        emsg_funcname("E123: Undefined function: %s", name);
    }
    goto ret_free;
  }




  p = skipwhite(p);
  if (*p != '(') {
    if (!eap->skip) {
      emsgf((const char *) (libintl_gettext((char *)("E124: Missing '(': %s"))), (eap->arg));
      goto ret_free;
    }

    if (vim_strchr(p, '(') != ((void*)0))
      p = vim_strchr(p, '(');
  }
  p = skipwhite(p + 1);

  ga_init(&newargs, (int)sizeof(char_u *), 3);
  ga_init(&newlines, (int)sizeof(char_u *), 3);

  if (!eap->skip) {


    if (name != ((void*)0))
      arg = name;
    else
      arg = fudi.fd_newkey;
    if (arg != ((void*)0) && (fudi.fd_di == ((void*)0) || !tv_is_func(fudi.fd_di->di_tv))) {
      int j = (*arg == (0x80)) ? 3 : 0;
      while (arg[j] != '\000' && (j == 0 ? eval_isnamec1(arg[j])
                               : eval_isnamec(arg[j])))
        ++j;
      if (arg[j] != '\000')
        emsg_funcname((char *)e_invarg2, arg);
    }

    if (fudi.fd_dict != ((void*)0) && fudi.fd_dict->dv_scope == VAR_DEF_SCOPE)
      emsg((char_u *)(libintl_gettext((char *)("E862: Cannot use g: here"))));
  }

  if (get_function_args(&p, ')', &newargs, &varargs, eap->skip) == 0) {
    goto errret_2;
  }

  if (KeyTyped && ui_is_external(kUICmdline)) {
    show_block = 1;
    ui_ext_cmdline_block_append(0, (const char *)eap->cmd);
  }


  for (;; ) {
    p = skipwhite(p);
    if (strncmp((char *)(p), (char *)("range"), (size_t)(5)) == 0) {
      flags |= 0x02;
      p += 5;
    } else if (strncmp((char *)(p), (char *)("dict"), (size_t)(4)) == 0) {
      flags |= 0x04;
      p += 4;
    } else if (strncmp((char *)(p), (char *)("abort"), (size_t)(5)) == 0) {
      flags |= 0x01;
      p += 5;
    } else if (strncmp((char *)(p), (char *)("closure"), (size_t)(7)) == 0) {
      flags |= 0x08;
      p += 7;
      if (current_funccal == ((void*)0)) {
        emsg_funcname("E932: Closure function should not be at top level: %s",

                      name == ((void*)0) ? (char_u *)"" : name);
        goto erret;
      }
    } else {
      break;
    }
  }



  const char *const end = (const char *)p + strlen((char *)(p));
  if (*p == '\n') {
    line_arg = p + 1;
  } else if (*p != '\000' && *p != '"' && !eap->skip && !did_emsg) {
    emsgf(libintl_gettext((char *)(e_trailing)));
  }




  if (KeyTyped) {



    if (!eap->skip && !eap->forceit) {
      if (fudi.fd_dict != ((void*)0) && fudi.fd_newkey == ((void*)0))
        emsg((char_u *)(libintl_gettext((char *)(e_funcdict))));
      else if (name != ((void*)0) && find_func(name) != ((void*)0))
        emsg_funcname(e_funcexts, name);
    }

    if (!eap->skip && did_emsg)
      goto erret;

    if (!ui_is_external(kUICmdline)) {
      msg_putchar('\n');
    }
    cmdline_row = msg_row;
  }

  indent = 2;
  nesting = 0;
  for (;; ) {
    if (KeyTyped) {
      msg_scroll = 1;
      saved_wait_return = 0;
    }
    need_wait_return = 0;
    sourcing_lnum_off = sourcing_lnum;

    if (line_arg != ((void*)0)) {

      theline = line_arg;
      p = vim_strchr(theline, '\n');
      if (p == ((void*)0))
        line_arg += strlen((char *)(line_arg));
      else {
        *p = '\000';
        line_arg = p + 1;
      }
    } else if (eap->getline == ((void*)0))
      theline = getcmdline(':', 0L, indent);
    else
      theline = eap->getline(':', eap->cookie, indent);
    if (KeyTyped)
      lines_left = Rows - 1;
    if (theline == ((void*)0)) {
      emsg((char_u *)(libintl_gettext((char *)("E126: Missing :endfunction"))));
      goto erret;
    }
    if (show_block) {
      ui_ext_cmdline_block_append(indent, (const char *)theline);
    }


    if (sourcing_lnum > sourcing_lnum_off + 1)
      sourcing_lnum_off = sourcing_lnum - sourcing_lnum_off - 1;
    else
      sourcing_lnum_off = 0;

    if (skip_until != ((void*)0)) {


      if (strcmp((char *)(theline), (char *)(skip_until)) == 0) {
        xfree(skip_until);
        skip_until = ((void*)0);
      }
    } else {

      for (p = theline; ascii_iswhite(*p) || *p == ':'; ++p)
        ;


      if (checkforcmd(&p, "endfunction", 4) && nesting-- == 0) {
        if (*p == '!') {
          p++;
        }
        const char *const comment_start = strchr((const char *)p, '"');
        const char *const endfunc_end = (comment_start
                                         ? strchr(comment_start, '\n')
                                         : strpbrk((const char *)p, "\n|"));
        p = (endfunc_end
             ? (char_u *)endfunc_end
             : p + strlen((char *)(p)));
        if (*p == '|') {
          emsgf(libintl_gettext((char *)(e_trailing2)), p);
          if (line_arg == ((void*)0)) {
            xfree(theline);
          }
          goto erret;
        }
        if (line_arg == ((void*)0)) {
          xfree(theline);
        } else {
          if ((const char *)p < end) {
            eap->nextcmd = p + 1;
          }
        }
        break;
      }



      if (indent > 2 && strncmp((char *)(p), (char *)("end"), (size_t)(3)) == 0)
        indent -= 2;
      else if (strncmp((char *)(p), (char *)("if"), (size_t)(2)) == 0
               || strncmp((char *)(p), (char *)("wh"), (size_t)(2)) == 0
               || strncmp((char *)(p), (char *)("for"), (size_t)(3)) == 0
               || strncmp((char *)(p), (char *)("try"), (size_t)(3)) == 0)
        indent += 2;


      if (checkforcmd(&p, "function", 2)) {
        if (*p == '!') {
          p = skipwhite(p + 1);
        }
        p += eval_fname_script((const char *)p);
        xfree(trans_function_name(&p, 1, 0, ((void*)0), ((void*)0)));
        if (*skipwhite(p) == '(') {
          nesting++;
          indent += 2;
        }
      }


      p = skip_range(p, ((void*)0));
      if ((p[0] == 'a' && (!(((unsigned)(p[1]) >= 'A' && (unsigned)(p[1]) <= 'Z') || ((unsigned)(p[1]) >= 'a' && (unsigned)(p[1]) <= 'z')) || p[1] == 'p'))
          || (p[0] == 'c'
              && (!(((unsigned)(p[1]) >= 'A' && (unsigned)(p[1]) <= 'Z') || ((unsigned)(p[1]) >= 'a' && (unsigned)(p[1]) <= 'z'))
                  || (p[1] == 'h' && (!(((unsigned)(p[2]) >= 'A' && (unsigned)(p[2]) <= 'Z') || ((unsigned)(p[2]) >= 'a' && (unsigned)(p[2]) <= 'z'))
                                      || (p[2] == 'a'
                                          && (strncmp((char *)(&p[3]), (char *)("nge"), (size_t)(3)) != 0
                                              || !(((unsigned)(p[6]) >= 'A' && (unsigned)(p[6]) <= 'Z') || ((unsigned)(p[6]) >= 'a' && (unsigned)(p[6]) <= 'z'))))))))
          || (p[0] == 'i'
              && (!(((unsigned)(p[1]) >= 'A' && (unsigned)(p[1]) <= 'Z') || ((unsigned)(p[1]) >= 'a' && (unsigned)(p[1]) <= 'z')) || (p[1] == 'n'
                                           && (!(((unsigned)(p[2]) >= 'A' && (unsigned)(p[2]) <= 'Z') || ((unsigned)(p[2]) >= 'a' && (unsigned)(p[2]) <= 'z'))
                                               || (p[2] == 's')))))) {
        skip_until = vim_strsave((char_u *)".");
      }


      arg = skipwhite(skiptowhite(p));
      if (arg[0] == '<' && arg[1] =='<'
          && ((p[0] == 'p' && p[1] == 'y'
               && (!(((unsigned)(p[2]) >= 'A' && (unsigned)(p[2]) <= 'Z') || ((unsigned)(p[2]) >= 'a' && (unsigned)(p[2]) <= 'z')) || p[2] == 't'))
              || (p[0] == 'p' && p[1] == 'e'
                  && (!(((unsigned)(p[2]) >= 'A' && (unsigned)(p[2]) <= 'Z') || ((unsigned)(p[2]) >= 'a' && (unsigned)(p[2]) <= 'z')) || p[2] == 'r'))
              || (p[0] == 't' && p[1] == 'c'
                  && (!(((unsigned)(p[2]) >= 'A' && (unsigned)(p[2]) <= 'Z') || ((unsigned)(p[2]) >= 'a' && (unsigned)(p[2]) <= 'z')) || p[2] == 'l'))
              || (p[0] == 'l' && p[1] == 'u' && p[2] == 'a'
                  && !(((unsigned)(p[3]) >= 'A' && (unsigned)(p[3]) <= 'Z') || ((unsigned)(p[3]) >= 'a' && (unsigned)(p[3]) <= 'z')))
              || (p[0] == 'r' && p[1] == 'u' && p[2] == 'b'
                  && (!(((unsigned)(p[3]) >= 'A' && (unsigned)(p[3]) <= 'Z') || ((unsigned)(p[3]) >= 'a' && (unsigned)(p[3]) <= 'z')) || p[3] == 'y'))
              || (p[0] == 'm' && p[1] == 'z'
                  && (!(((unsigned)(p[2]) >= 'A' && (unsigned)(p[2]) <= 'Z') || ((unsigned)(p[2]) >= 'a' && (unsigned)(p[2]) <= 'z')) || p[2] == 's'))
              )) {

        p = skipwhite(arg + 2);
        if (*p == '\000')
          skip_until = vim_strsave((char_u *)".");
        else
          skip_until = vim_strsave(p);
      }
    }


    ga_grow(&newlines, 1 + sourcing_lnum_off);




    p = vim_strsave(theline);
    if (line_arg == ((void*)0))
      xfree(theline);
    theline = p;

    ((char_u **)(newlines.ga_data))[newlines.ga_len++] = theline;



    while (sourcing_lnum_off-- > 0)
      ((char_u **)(newlines.ga_data))[newlines.ga_len++] = ((void*)0);


    if (line_arg != ((void*)0) && *line_arg == '\000')
      line_arg = ((void*)0);
  }



  if (eap->skip || did_emsg)
    goto erret;




  if (fudi.fd_dict == ((void*)0)) {
    v = find_var((const char *)name, strlen((char *)(name)), &ht, 0);
    if (v != ((void*)0) && v->di_tv.v_type == VAR_FUNC) {
      emsg_funcname("E707: Function name conflicts with variable: %s",
          name);
      goto erret;
    }

    fp = find_func(name);
    if (fp != ((void*)0)) {
      if (!eap->forceit) {
        emsg_funcname(e_funcexts, name);
        goto erret;
      }
      if (fp->uf_calls > 0) {
        emsg_funcname("E127: Cannot redefine function %s: It is in use",
            name);
        goto erret;
      }
      if (fp->uf_refcount > 1) {


        (fp->uf_refcount)--;
        fp->uf_flags |= 0x20;
        fp = ((void*)0);
        overwrite = 1;
      } else {

        ga_clear_strings(&(fp->uf_args));
        ga_clear_strings(&(fp->uf_lines));
        xfree(name);
        name = ((void*)0);
      }
    }
  } else {
    char numbuf[20];

    fp = ((void*)0);
    if (fudi.fd_newkey == ((void*)0) && !eap->forceit) {
      emsg((char_u *)(libintl_gettext((char *)(e_funcdict))));
      goto erret;
    }
    if (fudi.fd_di == ((void*)0)) {
      if (tv_check_lock(fudi.fd_dict->dv_lock, (const char *)eap->arg,
                        (18446744073709551615ULL - 1))) {

        goto erret;
      }
    } else if (tv_check_lock(fudi.fd_di->di_tv.v_lock, (const char *)eap->arg,
                             (18446744073709551615ULL - 1))) {

      goto erret;
    }



    xfree(name);
    __builtin___sprintf_chk (numbuf, 0, __builtin_object_size (numbuf, 1 > 1 ? 1 : 0), "%d", ++func_nr);
    name = vim_strsave((char_u *)numbuf);
  }

  if (fp == ((void*)0)) {
    if (fudi.fd_dict == ((void*)0) && vim_strchr(name, '#') != ((void*)0)) {
      int slen, plen;
      char_u *scriptname;


      int j = 0;
      if (sourcing_name != ((void*)0)) {
        scriptname = (char_u *)autoload_name((const char *)name, strlen((char *)(name)));
        p = vim_strchr(scriptname, '/');
        plen = (int)strlen((char *)(p));
        slen = (int)strlen((char *)(sourcing_name));
        if (slen > plen && path_fnamecmp((const char *)(p), (const char *)(sourcing_name + slen - plen)) == 0)

          j = 1;
        xfree(scriptname);
      }
      if (j == 0) {
        emsgf((const char *) (libintl_gettext((char *)("E746: Function name does not match script file name: %s"))), (name));


        goto erret;
      }
    }

    fp = xcalloc(1, sizeof(ufunc_T) + strlen((char *)(name)));

    if (fudi.fd_dict != ((void*)0)) {
      if (fudi.fd_di == ((void*)0)) {

        fudi.fd_di = tv_dict_item_alloc((const char *)fudi.fd_newkey);
        if (tv_dict_add(fudi.fd_dict, fudi.fd_di) == 0) {
          xfree(fudi.fd_di);
          xfree(fp);
          goto erret;
        }
      } else {

        tv_clear(&fudi.fd_di->di_tv);
      }
      fudi.fd_di->di_tv.v_type = VAR_FUNC;
      fudi.fd_di->di_tv.v_lock = 0;
      fudi.fd_di->di_tv.vval.v_string = vim_strsave(name);


      flags |= 0x04;
    }


    __builtin___strcpy_chk ((char *)(fp->uf_name), (char *)(name), __builtin_object_size ((char *)(fp->uf_name), 1 > 1 ? 1 : 0));
    if (overwrite) {
      hi = hash_find(&func_hashtab, name);
      hi->hi_key = ((fp)->uf_name);
    } else if (hash_add(&func_hashtab, ((fp)->uf_name)) == 0) {
      xfree(fp);
      goto erret;
    }
    fp->uf_refcount = 1;
  }
  fp->uf_args = newargs;
  fp->uf_lines = newlines;
  if ((flags & 0x08) != 0) {
    register_closure(fp);
  } else {
    fp->uf_scoped = ((void*)0);
  }
  fp->uf_tml_count = ((void*)0);
  fp->uf_tml_total = ((void*)0);
  fp->uf_tml_self = ((void*)0);
  fp->uf_profiling = 0;
  if (prof_def_func())
    func_do_profile(fp);
  fp->uf_varargs = varargs;
  fp->uf_flags = flags;
  fp->uf_calls = 0;
  fp->uf_script_ID = current_SID;
  goto ret_free;

erret:
  ga_clear_strings(&newargs);
errret_2:
  ga_clear_strings(&newlines);
ret_free:
  xfree(skip_until);
  xfree(fudi.fd_newkey);
  xfree(name);
  did_emsg |= saved_did_emsg;
  need_wait_return |= saved_wait_return;
  if (show_block) {
    ui_ext_cmdline_block_leave();
  }
}
# 20101 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static char_u *
trans_function_name(
    char_u **pp,
    int skip,
    int flags,
    funcdict_T *fdp,
    partial_T **partial
)
{
  char_u *name = ((void*)0);
  const char_u *start;
  const char_u *end;
  int lead;
  int len;
  lval_T lv;

  if (fdp != ((void*)0))
    __builtin___memset_chk (fdp, 0, sizeof(funcdict_T), __builtin_object_size (fdp, 0));
  start = *pp;



  if ((*pp)[0] == (0x80) && (*pp)[1] == 253
      && (*pp)[2] == (int)KE_SNR) {
    *pp += 3;
    len = get_id_len((const char **)pp) + 3;
    return (char_u *)xmemdupz(start, len);
  }



  lead = eval_fname_script((const char *)start);
  if (lead > 2) {
    start += lead;
  }


  end = get_lval((char_u *)start, ((void*)0), &lv, 0, skip, flags,
                 lead > 2 ? 0 : 2);
  if (end == start) {
    if (!skip)
      emsg((char_u *)(libintl_gettext((char *)("E129: Function name required"))));
    goto theend;
  }
  if (end == ((void*)0) || (lv.ll_tv != ((void*)0) && (lead > 2 || lv.ll_range))) {





    if (!aborting()) {
      if (end != ((void*)0)) {
        emsgf(libintl_gettext((char *)(e_invarg2)), start);
      }
    } else {
      *pp = (char_u *)find_name_end(start, ((void*)0), ((void*)0), 1);
    }
    goto theend;
  }

  if (lv.ll_tv != ((void*)0)) {
    if (fdp != ((void*)0)) {
      fdp->fd_dict = lv.ll_dict;
      fdp->fd_newkey = lv.ll_newkey;
      lv.ll_newkey = ((void*)0);
      fdp->fd_di = lv.ll_di;
    }
    if (lv.ll_tv->v_type == VAR_FUNC && lv.ll_tv->vval.v_string != ((void*)0)) {
      name = vim_strsave(lv.ll_tv->vval.v_string);
      *pp = (char_u *)end;
    } else if (lv.ll_tv->v_type == VAR_PARTIAL
               && lv.ll_tv->vval.v_partial != ((void*)0)) {
      name = vim_strsave(partial_name(lv.ll_tv->vval.v_partial));
      *pp = (char_u *)end;
      if (partial != ((void*)0)) {
        *partial = lv.ll_tv->vval.v_partial;
      }
    } else {
      if (!skip && !(flags & TFN_QUIET) && (fdp == ((void*)0)
                                            || lv.ll_dict == ((void*)0)
                                            || fdp->fd_newkey == ((void*)0))) {
        emsg((char_u *)(libintl_gettext((char *)(e_funcref))));
      } else {
        *pp = (char_u *)end;
      }
      name = ((void*)0);
    }
    goto theend;
  }

  if (lv.ll_name == ((void*)0)) {

    *pp = (char_u *)end;
    goto theend;
  }


  if (lv.ll_exp_name != ((void*)0)) {
    len = (int)strlen(lv.ll_exp_name);
    name = deref_func_name(lv.ll_exp_name, &len, partial,
                           flags & TFN_NO_AUTOLOAD);
    if ((const char *)name == lv.ll_exp_name) {
      name = ((void*)0);
    }
  } else if (!(flags & TFN_NO_DEREF)) {
    len = (int)(end - *pp);
    name = deref_func_name((const char *)(*pp), &len, partial,
                           flags & TFN_NO_AUTOLOAD);
    if (name == *pp) {
      name = ((void*)0);
    }
  }
  if (name != ((void*)0)) {
    name = vim_strsave(name);
    *pp = (char_u *)end;
    if (strncmp((char *)name, "<SNR>", 5) == 0) {

      name[0] = (0x80);
      name[1] = 253;
      name[2] = (int)KE_SNR;
      __builtin___memmove_chk (name + 3, name + 5, strlen((char *)name + 5) + 1, __builtin_object_size (name + 3, 0));
    }
    goto theend;
  }

  if (lv.ll_exp_name != ((void*)0)) {
    len = (int)strlen(lv.ll_exp_name);
    if (lead <= 2 && lv.ll_name == lv.ll_exp_name
        && lv.ll_name_len >= 2 && memcmp(lv.ll_name, "s:", 2) == 0) {


      lv.ll_name += 2;
      lv.ll_name_len -= 2;
      len -= 2;
      lead = 2;
    }
  } else {

    if (lead == 2 || (lv.ll_name[0] == 'g' && lv.ll_name[1] == ':')) {
      lv.ll_name += 2;
      lv.ll_name_len -= 2;
    }
    len = (int)((const char *)end - lv.ll_name);
  }

  size_t sid_buf_len = 0;
  char sid_buf[20];




  if (skip) {
    lead = 0;
  } else if (lead > 0) {
    lead = 3;
    if ((lv.ll_exp_name != ((void*)0) && eval_fname_sid(lv.ll_exp_name))
        || eval_fname_sid((const char *)(*pp))) {

      if (current_SID <= 0) {
        emsg((char_u *)(libintl_gettext((char *)(e_usingsid))));
        goto theend;
      }
      sid_buf_len = __builtin___snprintf_chk (sid_buf, sizeof(sid_buf), 0, __builtin_object_size (sid_buf, 1 > 1 ? 1 : 0), "%" "d" "_", current_SID);

      lead += sid_buf_len;
    }
  } else if (!(flags & TFN_INT)
             && builtin_function(lv.ll_name, lv.ll_name_len)) {
    emsgf((const char *) (libintl_gettext((char *)("E128: Function name must start with a capital or \"s:\": %s"))), (start));

    goto theend;
  }

  if (!skip && !(flags & TFN_QUIET) && !(flags & TFN_NO_DEREF)) {
    char_u *cp = xmemrchr(lv.ll_name, ':', lv.ll_name_len);

    if (cp != ((void*)0) && cp < end) {
      emsgf((const char *) (libintl_gettext((char *)("E884: Function name cannot contain a colon: %s"))), (start));
      goto theend;
    }
  }

  name = xmalloc(len + lead + 1);
  if (lead > 0){
    name[0] = (0x80);
    name[1] = 253;
    name[2] = (int)KE_SNR;
    if (sid_buf_len > 0) {
      __builtin___memcpy_chk (name + 3, sid_buf, sid_buf_len, __builtin_object_size (name + 3, 0));
    }
  }
  __builtin___memmove_chk (name + lead, lv.ll_name, len, __builtin_object_size (name + lead, 0));
  name[lead + len] = '\000';
  *pp = (char_u *)end;

theend:
  clear_lval(&lv);
  return name;
}






static int eval_fname_script(const char *const p)
{


  if (p[0] == '<'
      && (mb_strnicmp((char_u *)p + 1, (char_u *)"SID>", 4) == 0
          || mb_strnicmp((char_u *)p + 1, (char_u *)"SNR>", 4) == 0)) {
    return 5;
  }
  if (p[0] == 's' && p[1] == ':') {
    return 2;
  }
  return 0;
}
# 20329 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static inline _Bool eval_fname_sid(const char *const name)
  FUNC_ATTR_PURE FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_WARN_UNUSED_RESULT
  FUNC_ATTR_NONNULL_ALL
{
  return *name == 's' || (((name[2]) < 'a' || (name[2]) > 'z') ? (name[2]) : (name[2]) - ('a' - 'A')) == 'I';
}




static void list_func_head(ufunc_T *fp, int indent)
{
  msg_start();
  if (indent)
    msg_puts((const char *)("   "));
  msg_puts((const char *)("function "));
  if (fp->uf_name[0] == (0x80)) {
    msg_puts_attr((const char *)("<SNR>"), (highlight_attr[(int)(HLF_8)]));
    msg_puts((const char *)fp->uf_name + 3);
  } else {
    msg_puts((const char *)fp->uf_name);
  }
  msg_putchar('(');
  int j;
  for (j = 0; j < fp->uf_args.ga_len; j++) {
    if (j) {
      msg_puts(", ");
    }
    msg_puts((const char *)((char_u **)(fp->uf_args.ga_data))[j]);
  }
  if (fp->uf_varargs) {
    if (j) {
      msg_puts(", ");
    }
    msg_puts("...");
  }
  msg_putchar(')');
  if (fp->uf_flags & 0x01) {
    msg_puts(" abort");
  }
  if (fp->uf_flags & 0x02) {
    msg_puts(" range");
  }
  if (fp->uf_flags & 0x04) {
    msg_puts(" dict");
  }
  if (fp->uf_flags & 0x08) {
    msg_puts(" closure");
  }
  msg_clr_eos();
  if (p_verbose > 0)
    last_set_msg(fp->uf_script_ID);
}



static ufunc_T *find_func(const char_u *name)
{
  hashitem_T *hi;

  hi = hash_find(&func_hashtab, name);
  if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed))
    return ((ufunc_T *)((hi)->hi_key - __builtin_offsetof(ufunc_T, uf_name)));
  return ((void*)0);
}
# 20457 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
_Bool translated_function_exists(const char *name)
{
  if (builtin_function(name, -1)) {
    return find_internal_func((char *)name) != ((void*)0);
  }
  return find_func((const char_u *)name) != ((void*)0);
}







static _Bool function_exists(const char *const name, _Bool no_deref)
{
  const char_u *nm = (const char_u *)name;
  _Bool n = 0;
  int flag = TFN_INT | TFN_QUIET | TFN_NO_AUTOLOAD;

  if (no_deref) {
    flag |= TFN_NO_DEREF;
  }
  char *const p = (char *)trans_function_name((char_u **)&nm, 0, flag, ((void*)0),
                                              ((void*)0));
  nm = skipwhite(nm);



  if (p != ((void*)0) && (*nm == '\000' || *nm == '(')) {
    n = translated_function_exists(p);
  }
  xfree(p);
  return n;
}
# 20500 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static _Bool builtin_function(const char *name, int len)
{
  if (!((unsigned)(name[0]) >= 'a' && (unsigned)(name[0]) <= 'z')) {
    return 0;
  }

  const char *p = (len == -1
                   ? strchr(name, '#')
                   : memchr(name, '#', (size_t)len));

  return p == ((void*)0);
}




static void func_do_profile(ufunc_T *fp)
{
  int len = fp->uf_lines.ga_len;

  if (len == 0)
    len = 1;
  fp->uf_tm_count = 0;
  fp->uf_tm_self = profile_zero();
  fp->uf_tm_total = profile_zero();

  if (fp->uf_tml_count == ((void*)0)) {
    fp->uf_tml_count = xcalloc(len, sizeof(int));
  }

  if (fp->uf_tml_total == ((void*)0)) {
    fp->uf_tml_total = xcalloc(len, sizeof(proftime_T));
  }

  if (fp->uf_tml_self == ((void*)0)) {
    fp->uf_tml_self = xcalloc(len, sizeof(proftime_T));
  }

  fp->uf_tml_idx = -1;

  fp->uf_profiling = 1;
}




void func_dump_profile(FILE *fd)
{
  hashitem_T *hi;
  int todo;
  ufunc_T *fp;
  ufunc_T **sorttab;
  int st_len = 0;

  todo = (int)func_hashtab.ht_used;
  if (todo == 0)
    return;

  sorttab = xmalloc(sizeof(ufunc_T *) * todo);

  for (hi = func_hashtab.ht_array; todo > 0; ++hi) {
    if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
      --todo;
      fp = ((ufunc_T *)((hi)->hi_key - __builtin_offsetof(ufunc_T, uf_name)));
      if (fp->uf_profiling) {
        sorttab[st_len++] = fp;

        if (fp->uf_name[0] == (0x80))
          fprintf(fd, "FUNCTION  <SNR>%s()\n", fp->uf_name + 3);
        else
          fprintf(fd, "FUNCTION  %s()\n", fp->uf_name);
        if (fp->uf_tm_count == 1)
          fprintf(fd, "Called 1 time\n");
        else
          fprintf(fd, "Called %d times\n", fp->uf_tm_count);
        fprintf(fd, "Total time: %s\n", profile_msg(fp->uf_tm_total));
        fprintf(fd, " Self time: %s\n", profile_msg(fp->uf_tm_self));
        fprintf(fd, "\n");
        fprintf(fd, "count  total (s)   self (s)\n");

        for (int i = 0; i < fp->uf_lines.ga_len; ++i) {
          if (((char_u **)(fp->uf_lines.ga_data))[i] == ((void*)0))
            continue;
          prof_func_line(fd, fp->uf_tml_count[i],
              &fp->uf_tml_total[i], &fp->uf_tml_self[i], 1);
          fprintf(fd, "%s\n", ((char_u **)(fp->uf_lines.ga_data))[i]);
        }
        fprintf(fd, "\n");
      }
    }
  }

  if (st_len > 0) {
    qsort((void *)sorttab, (size_t)st_len, sizeof(ufunc_T *),
        prof_total_cmp);
    prof_sort_list(fd, sorttab, st_len, "TOTAL", 0);
    qsort((void *)sorttab, (size_t)st_len, sizeof(ufunc_T *),
        prof_self_cmp);
    prof_sort_list(fd, sorttab, st_len, "SELF", 1);
  }

  xfree(sorttab);
}

static void
prof_sort_list (
    FILE *fd,
    ufunc_T **sorttab,
    int st_len,
    char *title,
    int prefer_self
)
{
  int i;
  ufunc_T *fp;

  fprintf(fd, "FUNCTIONS SORTED ON %s TIME\n", title);
  fprintf(fd, "count  total (s)   self (s)  function\n");
  for (i = 0; i < 20 && i < st_len; ++i) {
    fp = sorttab[i];
    prof_func_line(fd, fp->uf_tm_count, &fp->uf_tm_total, &fp->uf_tm_self,
        prefer_self);
    if (fp->uf_name[0] == (0x80))
      fprintf(fd, " <SNR>%s()\n", fp->uf_name + 3);
    else
      fprintf(fd, " %s()\n", fp->uf_name);
  }
  fprintf(fd, "\n");
}




static void prof_func_line(
    FILE *fd,
    int count,
    proftime_T *total,
    proftime_T *self,
    int prefer_self
    )
{
  if (count > 0) {
    fprintf(fd, "%5d ", count);
    if (prefer_self && profile_equal(*total, *self))
      fprintf(fd, "           ");
    else
      fprintf(fd, "%s ", profile_msg(*total));
    if (!prefer_self && profile_equal(*total, *self))
      fprintf(fd, "           ");
    else
      fprintf(fd, "%s ", profile_msg(*self));
  } else
    fprintf(fd, "                            ");
}




static int prof_total_cmp(const void *s1, const void *s2)
{
  ufunc_T *p1 = *(ufunc_T **)s1;
  ufunc_T *p2 = *(ufunc_T **)s2;
  return profile_cmp(p1->uf_tm_total, p2->uf_tm_total);
}




static int prof_self_cmp(const void *s1, const void *s2)
{
  ufunc_T *p1 = *(ufunc_T **)s1;
  ufunc_T *p2 = *(ufunc_T **)s2;
  return profile_cmp(p1->uf_tm_self, p2->uf_tm_self);
}
# 20683 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
static _Bool script_autoload(const char *const name, const size_t name_len,
                            const _Bool reload)
{

  const char *p = memchr(name, '#', name_len);
  if (p == ((void*)0) || p == name) {
    return 0;
  }

  _Bool ret = 0;
  char *tofree = autoload_name(name, name_len);
  char *scriptname = tofree;



  int i = 0;
  for (; i < ga_loaded.ga_len; i++) {
    if (strcmp((char *)(((char **)ga_loaded.ga_data)[i] + 9), (char *)(scriptname + 9)) == 0) {
      break;
    }
  }
  if (!reload && i < ga_loaded.ga_len) {
    ret = 0;
  } else {

    if (i == ga_loaded.ga_len) {
      do { ga_grow(&ga_loaded, 1); ((char * *)(&ga_loaded)->ga_data)[(&ga_loaded)->ga_len++] = (scriptname); } while (0);
      tofree = ((void*)0);
    }


    if (source_runtime((char_u *)scriptname, 0) == 1) {
      ret = 1;
    }
  }

  xfree(tofree);
  return ret;
}







static char *autoload_name(const char *const name, const size_t name_len)
  FUNC_ATTR_MALLOC FUNC_ATTR_WARN_UNUSED_RESULT
{

  char *const scriptname = xmalloc(name_len + sizeof("autoload/.vim"));
  __builtin___memcpy_chk (scriptname, "autoload/", sizeof("autoload/") - 1, __builtin_object_size (scriptname, 0));
  __builtin___memcpy_chk (scriptname + sizeof("autoload/") - 1, name, name_len, __builtin_object_size (scriptname + sizeof("autoload/") - 1, 0));
  size_t auchar_idx = 0;
  for (size_t i = sizeof("autoload/") - 1;
       i - sizeof("autoload/") + 1 < name_len;
       i++) {
    if (scriptname[i] == '#') {
      scriptname[i] = '/';
      auchar_idx = i;
    }
  }
  __builtin___memcpy_chk (scriptname + auchar_idx, ".vim", sizeof(".vim"), __builtin_object_size (scriptname + auchar_idx, 0));

  return scriptname;
}






char_u *get_user_func_name(expand_T *xp, int idx)
{
  static size_t done;
  static hashitem_T *hi;
  ufunc_T *fp;

  if (idx == 0) {
    done = 0;
    hi = func_hashtab.ht_array;
  }
  ((void)0);
  if (done < func_hashtab.ht_used) {
    if (done++ > 0)
      ++hi;
    while (((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed))
      ++hi;
    fp = ((ufunc_T *)((hi)->hi_key - __builtin_offsetof(ufunc_T, uf_name)));

    if ((fp->uf_flags & 0x04)
        || strncmp((char *)(fp->uf_name), (char *)("<lambda>"), (size_t)(8)) == 0) {
      return (char_u *)"";
    }

    if (strlen((char *)(fp->uf_name)) + 4 >= (1024+1))
      return fp->uf_name;

    cat_func_name(IObuff, fp);
    if (xp->xp_context != EXPAND_USER_FUNC) {
      __builtin___strcat_chk ((char *)(IObuff), (char *)("("), __builtin_object_size ((char *)(IObuff), 1 > 1 ? 1 : 0));
      if (!fp->uf_varargs && ((&fp->uf_args)->ga_len <= 0))
        __builtin___strcat_chk ((char *)(IObuff), (char *)(")"), __builtin_object_size ((char *)(IObuff), 1 > 1 ? 1 : 0));
    }
    return IObuff;
  }
  return ((void*)0);
}







static void cat_func_name(char_u *buf, ufunc_T *fp)
{
  if (fp->uf_name[0] == (0x80)) {
    __builtin___strcpy_chk ((char *)(buf), (char *)("<SNR>"), __builtin_object_size ((char *)(buf), 1 > 1 ? 1 : 0));
    __builtin___strcat_chk ((char *)(buf), (char *)(fp->uf_name + 3), __builtin_object_size ((char *)(buf), 1 > 1 ? 1 : 0));
  } else
    __builtin___strcpy_chk ((char *)(buf), (char *)(fp->uf_name), __builtin_object_size ((char *)(buf), 1 > 1 ? 1 : 0));
}







static _Bool func_name_refcount(char_u *name)
{
  return isdigit(*name) || *name == '<';
}


void ex_delfunction(exarg_T *eap)
{
  ufunc_T *fp = ((void*)0);
  char_u *p;
  char_u *name;
  funcdict_T fudi;

  p = eap->arg;
  name = trans_function_name(&p, eap->skip, 0, &fudi, ((void*)0));
  xfree(fudi.fd_newkey);
  if (name == ((void*)0)) {
    if (fudi.fd_dict != ((void*)0) && !eap->skip)
      emsg((char_u *)(libintl_gettext((char *)(e_funcref))));
    return;
  }
  if (!ends_excmd(*skipwhite(p))) {
    xfree(name);
    emsg((char_u *)(libintl_gettext((char *)(e_trailing))));
    return;
  }
  eap->nextcmd = check_nextcmd(p);
  if (eap->nextcmd != ((void*)0))
    *p = '\000';

  if (!eap->skip)
    fp = find_func(name);
  xfree(name);

  if (!eap->skip) {
    if (fp == ((void*)0)) {
      emsgf((const char *) (libintl_gettext((char *)(e_nofunc))), (eap->arg));
      return;
    }
    if (fp->uf_calls > 0) {
      emsgf((const char *) (libintl_gettext((char *)("E131: Cannot delete function %s: It is in use"))), (eap->arg));
      return;
    }


    if (fp->uf_refcount > 2) {
      emsgf((const char *) (libintl_gettext((char *)("Cannot delete function %s: It is being used internally"))), (eap->arg));

      return;
    }

    if (fudi.fd_dict != ((void*)0)) {


      tv_dict_item_remove(fudi.fd_dict, fudi.fd_di);
    } else {





      if (fp->uf_refcount > (func_name_refcount(fp->uf_name) ? 0 : 1)) {


        if (func_remove(fp)) {
          fp->uf_refcount--;
        }
        fp->uf_flags |= 0x10;
      } else {
        func_clear_free(fp, 0);
      }
    }
  }
}





static _Bool func_remove(ufunc_T *fp)
{
  hashitem_T *hi = hash_find(&func_hashtab, ((fp)->uf_name));

  if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
    hash_remove(&func_hashtab, hi);
    return 1;
  }

  return 0;
}





static void func_clear(ufunc_T *fp, _Bool force)
{
  if (fp->uf_cleared) {
    return;
  }
  fp->uf_cleared = 1;


  ga_clear_strings(&(fp->uf_args));
  ga_clear_strings(&(fp->uf_lines));
  xfree(fp->uf_tml_count);
  xfree(fp->uf_tml_total);
  xfree(fp->uf_tml_self);
  funccal_unref(fp->uf_scoped, fp, force);
}





static void func_free(ufunc_T *fp)
{


  if ((fp->uf_flags & (0x10 | 0x20)) == 0) {
    func_remove(fp);
  }
  xfree(fp);
}




static void func_clear_free(ufunc_T *fp, _Bool force)
{
  func_clear(fp, force);
  func_free(fp);
}





void func_unref(char_u *name)
{
  ufunc_T *fp = ((void*)0);

  if (name == ((void*)0) || !func_name_refcount(name)) {
    return;
  }

  fp = find_func(name);
  if (fp == ((void*)0) && isdigit(*name)) {






      internal_error("func_unref()");
      abort();

  }
  func_ptr_unref(fp);
}
# 20981 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
void func_ptr_unref(ufunc_T *fp)
{
  if (fp != ((void*)0) && --fp->uf_refcount <= 0) {


    if (fp->uf_calls == 0) {
      func_clear_free(fp, 0);
    }
  }
}


void func_ref(char_u *name)
{
  ufunc_T *fp;

  if (name == ((void*)0) || !func_name_refcount(name)) {
    return;
  }
  fp = find_func(name);
  if (fp != ((void*)0)) {
    (fp->uf_refcount)++;
  } else if (isdigit(*name)) {


    internal_error("func_ref()");
  }
}


void func_ptr_ref(ufunc_T *fp)
{
  if (fp != ((void*)0)) {
    (fp->uf_refcount)++;
  }
}






static inline _Bool fc_referenced(const funccall_T *const fc)
  FUNC_ATTR_ALWAYS_INLINE FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT
  FUNC_ATTR_NONNULL_ALL
{
  return ((fc->l_varlist.lv_refcount
           != DO_NOT_FREE_CNT)
          || fc->l_vars.dv_refcount != DO_NOT_FREE_CNT
          || fc->l_avars.dv_refcount != DO_NOT_FREE_CNT
          || fc->fc_refcount > 0);
}
# 21043 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
void call_user_func(ufunc_T *fp, int argcount, typval_T *argvars,
                    typval_T *rettv, linenr_T firstline, linenr_T lastline,
                    dict_T *selfdict)
  FUNC_ATTR_NONNULL_ARG(1, 3, 4)
{
  char_u *save_sourcing_name;
  linenr_T save_sourcing_lnum;
  scid_T save_current_SID;
  funccall_T *fc;
  int save_did_emsg;
  static int depth = 0;
  dictitem_T *v;
  int fixvar_idx = 0;
  int ai;
  _Bool islambda = 0;
  char_u numbuf[NUMBUFLEN];
  char_u *name;
  proftime_T wait_start;
  proftime_T call_start;
  _Bool did_save_redo = 0;


  if (depth >= p_mfd) {
    emsg((char_u *)(libintl_gettext((char *)("E132: Function call depth is higher than 'maxfuncdepth'"))));
    rettv->v_type = VAR_NUMBER;
    rettv->vval.v_number = -1;
    return;
  }
  ++depth;

  save_search_patterns();
  if (!ins_compl_active()) {
    saveRedobuff();
    did_save_redo = 1;
  }
  ++fp->uf_calls;

  line_breakcheck();

  fc = xmalloc(sizeof(funccall_T));
  fc->caller = current_funccal;
  current_funccal = fc;
  fc->func = fp;
  fc->rettv = rettv;
  rettv->vval.v_number = 0;
  fc->linenr = 0;
  fc->returned = 0;
  fc->level = ex_nesting_level;

  fc->breakpoint = dbg_find_breakpoint(0, fp->uf_name, (linenr_T)0);
  fc->dbg_tick = debug_tick;


  fc->fc_refcount = 0;
  fc->fc_copyID = 0;
  ga_init(&fc->fc_funcs, sizeof(ufunc_T *), 1);
  func_ptr_ref(fp);

  if (strncmp((char *)(fp->uf_name), (char *)("<lambda>"), (size_t)(8)) == 0) {
    islambda = 1;
  }






  init_var_dict(&fc->l_vars, &fc->l_vars_var, VAR_DEF_SCOPE);
  if (selfdict != ((void*)0)) {


    v = (dictitem_T *)&fc->fixvar[fixvar_idx++];

    name = v->di_key;
    __builtin___strcpy_chk ((char *)(name), (char *)("self"), __builtin_object_size ((char *)(name), 1 > 1 ? 1 : 0));

    v->di_flags = DI_FLAGS_RO + DI_FLAGS_FIX;
    tv_dict_add(&fc->l_vars, v);
    v->di_tv.v_type = VAR_DICT;
    v->di_tv.v_lock = 0;
    v->di_tv.vval.v_dict = selfdict;
    ++selfdict->dv_refcount;
  }






  init_var_dict(&fc->l_avars, &fc->l_avars_var, VAR_SCOPE);
  add_nr_var(&fc->l_avars, (dictitem_T *)&fc->fixvar[fixvar_idx++], "0",
             (varnumber_T)(argcount - fp->uf_args.ga_len));


  v = (dictitem_T *)&fc->fixvar[fixvar_idx++];

  name = v->di_key;
  __builtin___strcpy_chk ((char *)(name), (char *)("000"), __builtin_object_size ((char *)(name), 1 > 1 ? 1 : 0));

  v->di_flags = DI_FLAGS_RO | DI_FLAGS_FIX;
  tv_dict_add(&fc->l_avars, v);
  v->di_tv.v_type = VAR_LIST;
  v->di_tv.v_lock = VAR_FIXED;
  v->di_tv.vval.v_list = &fc->l_varlist;
  tv_list_init_static(&fc->l_varlist);
  tv_list_set_lock(&fc->l_varlist, VAR_FIXED);




  add_nr_var(&fc->l_avars, (dictitem_T *)&fc->fixvar[fixvar_idx++],
             "firstline", (varnumber_T)firstline);
  add_nr_var(&fc->l_avars, (dictitem_T *)&fc->fixvar[fixvar_idx++],
             "lastline", (varnumber_T)lastline);
  for (int i = 0; i < argcount; i++) {
    _Bool addlocal = 0;

    ai = i - fp->uf_args.ga_len;
    if (ai < 0) {

      name = ((char_u **)(fp->uf_args.ga_data))[i];
      if (islambda) {
        addlocal = 1;
      }
    } else {

      __builtin___snprintf_chk ((char *)numbuf, sizeof(numbuf), 0, __builtin_object_size ((char *)numbuf, 1 > 1 ? 1 : 0), "%d", ai + 1);
      name = numbuf;
    }
    if (fixvar_idx < 12 && strlen((char *)(name)) <= 20) {
      v = (dictitem_T *)&fc->fixvar[fixvar_idx++];
      v->di_flags = DI_FLAGS_RO | DI_FLAGS_FIX;
    } else {
      v = xmalloc(sizeof(dictitem_T) + strlen((char *)(name)));
      v->di_flags = DI_FLAGS_RO | DI_FLAGS_FIX | DI_FLAGS_ALLOC;
    }
    __builtin___strcpy_chk ((char *)(v->di_key), (char *)(name), __builtin_object_size ((char *)(v->di_key), 1 > 1 ? 1 : 0));



    v->di_tv = argvars[i];
    v->di_tv.v_lock = VAR_FIXED;

    if (addlocal) {


      tv_copy(&v->di_tv, &v->di_tv);
      tv_dict_add(&fc->l_vars, v);
    } else {
      tv_dict_add(&fc->l_avars, v);
    }

    if (ai >= 0 && ai < 20) {
      tv_list_append(&fc->l_varlist, &fc->l_listitems[ai]);
      *(&(&fc->l_listitems[ai])->li_tv) = argvars[i];
      (&(&fc->l_listitems[ai])->li_tv)->v_lock = VAR_FIXED;
    }
  }


  ++RedrawingDisabled;
  save_sourcing_name = sourcing_name;
  save_sourcing_lnum = sourcing_lnum;
  sourcing_lnum = 1;





  size_t len = (save_sourcing_name == ((void*)0) ? 0 : strlen((char *)(save_sourcing_name)))
               + strlen((char *)(fp->uf_name)) + 27;
  sourcing_name = xmalloc(len);
  {
    if (save_sourcing_name != ((void*)0)
        && strncmp((char *)(save_sourcing_name), (char *)("function "), (size_t)(9)) == 0) {
      vim_snprintf((char *)sourcing_name,
                   len,
                   "%s[%" "ll" "d" "]..",
                   save_sourcing_name,
                   (int64_t)save_sourcing_lnum);
    } else {
      __builtin___strcpy_chk ((char *)(sourcing_name), (char *)("function "), __builtin_object_size ((char *)(sourcing_name), 1 > 1 ? 1 : 0));
    }
    cat_func_name(sourcing_name + strlen((char *)(sourcing_name)), fp);

    if (p_verbose >= 12) {
      ++no_wait_return;
      verbose_enter_scroll();

      smsg(libintl_gettext((char *)("calling %s")), sourcing_name);
      if (p_verbose >= 14) {
        msg_puts("(");
        for (int i = 0; i < argcount; i++) {
          if (i > 0) {
            msg_puts(", ");
          }
          if (argvars[i].v_type == VAR_NUMBER) {
            msg_outnum((long)argvars[i].vval.v_number);
          } else {

            emsg_off++;
            char *tofree = encode_tv2string(&argvars[i], ((void*)0));
            emsg_off--;
            if (tofree != ((void*)0)) {
              char *s = tofree;
              char buf[480];
              if (vim_strsize((char_u *)s) > (480 / 6)) {
                trunc_string((char_u *)s, (char_u *)buf, (480 / 6),
                             sizeof(buf));
                s = buf;
              }
              msg_puts(s);
              xfree(tofree);
            }
          }
        }
        msg_puts(")");
      }
      msg_puts("\n");

      verbose_leave_scroll();
      --no_wait_return;
    }
  }

  const _Bool do_profiling_yes = do_profiling == 1;

  _Bool func_not_yet_profiling_but_should =
    do_profiling_yes
    && !fp->uf_profiling && has_profiling(0, fp->uf_name, ((void*)0));

  if (func_not_yet_profiling_but_should)
    func_do_profile(fp);

  _Bool func_or_func_caller_profiling =
    do_profiling_yes
    && (fp->uf_profiling
        || (fc->caller != ((void*)0) && fc->caller->func->uf_profiling));

  if (func_or_func_caller_profiling) {
    ++fp->uf_tm_count;
    call_start = profile_start();
    fp->uf_tm_children = profile_zero();
  }

  if (do_profiling_yes) {
    script_prof_save(&wait_start);
  }

  save_current_SID = current_SID;
  current_SID = fp->uf_script_ID;
  save_did_emsg = did_emsg;
  did_emsg = 0;


  do_cmdline(((void*)0), get_func_line, (void *)fc,
      0x02|0x01|0x04);

  --RedrawingDisabled;


  if ((did_emsg
       && (fp->uf_flags & 0x01)) || rettv->v_type == VAR_UNKNOWN) {
    tv_clear(rettv);
    rettv->v_type = VAR_NUMBER;
    rettv->vval.v_number = -1;
  }

  if (func_or_func_caller_profiling) {
    call_start = profile_end(call_start);
    call_start = profile_sub_wait(wait_start, call_start);
    fp->uf_tm_total = profile_add(fp->uf_tm_total, call_start);
    fp->uf_tm_self = profile_self(fp->uf_tm_self, call_start,
        fp->uf_tm_children);
    if (fc->caller != ((void*)0) && fc->caller->func->uf_profiling) {
      fc->caller->func->uf_tm_children =
        profile_add(fc->caller->func->uf_tm_children, call_start);
      fc->caller->func->uf_tml_children =
        profile_add(fc->caller->func->uf_tml_children, call_start);
    }
  }


  if (p_verbose >= 12) {
    ++no_wait_return;
    verbose_enter_scroll();

    if (aborting())
      smsg(libintl_gettext((char *)("%s aborted")), sourcing_name);
    else if (fc->rettv->v_type == VAR_NUMBER)
      smsg(libintl_gettext((char *)("%s returning #%" "ll" "d" "")),
           sourcing_name, (int64_t)fc->rettv->vval.v_number);
    else {
      char_u buf[480];




      emsg_off++;
      char_u *s = (char_u *) encode_tv2string(fc->rettv, ((void*)0));
      char_u *tofree = s;
      emsg_off--;
      if (s != ((void*)0)) {
        if (vim_strsize(s) > (480 / 6)) {
          trunc_string(s, buf, (480 / 6), 480);
          s = buf;
        }
        smsg(libintl_gettext((char *)("%s returning %s")), sourcing_name, s);
        xfree(tofree);
      }
    }
    msg_puts("\n");

    verbose_leave_scroll();
    --no_wait_return;
  }

  xfree(sourcing_name);
  sourcing_name = save_sourcing_name;
  sourcing_lnum = save_sourcing_lnum;
  current_SID = save_current_SID;
  if (do_profiling_yes) {
    script_prof_restore(&wait_start);
  }

  if (p_verbose >= 12 && sourcing_name != ((void*)0)) {
    ++no_wait_return;
    verbose_enter_scroll();

    smsg(libintl_gettext((char *)("continuing in %s")), sourcing_name);
    msg_puts("\n");

    verbose_leave_scroll();
    --no_wait_return;
  }

  did_emsg |= save_did_emsg;
  current_funccal = fc->caller;
  --depth;



  if (!fc_referenced(fc)) {
    free_funccal(fc, 0);
  } else {



    fc->caller = previous_funccal;
    previous_funccal = fc;


    do { hashtab_T *const dihi_ht_ = (&(&fc->l_avars)->dv_hashtab); size_t dihi_todo_ = dihi_ht_->ht_used; for (hashitem_T *dihi_ = dihi_ht_->ht_array; dihi_todo_; dihi_++) { if (!((dihi_)->hi_key == ((void*)0) || (dihi_)->hi_key == (char_u *)&hash_removed)) { { { { dictitem_T *const di = ((dictitem_T *)((dihi_)->hi_key - __builtin_offsetof(dictitem_T, di_key))); { { tv_copy(&di->di_tv, &di->di_tv); } } } } } dihi_todo_--; } } } while (0);




    do { list_T *const l_ = (&fc->l_varlist); if (l_ != ((void*)0)) { for ( listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { tv_copy((&(li)->li_tv), (&(li)->li_tv)); } } } } while (0);


  }

  if (--fp->uf_calls <= 0 && fp->uf_refcount <= 0) {

    func_clear_free(fp, 0);
  }

  if (did_save_redo) {
    restoreRedobuff();
  }
  restore_search_patterns();
}





static void funccal_unref(funccall_T *fc, ufunc_T *fp, _Bool force)
{
  funccall_T **pfc;
  int i;

  if (fc == ((void*)0)) {
    return;
  }

  fc->fc_refcount--;
  if (force ? fc->fc_refcount <= 0 : !fc_referenced(fc)) {
    for (pfc = &previous_funccal; *pfc != ((void*)0); pfc = &(*pfc)->caller) {
      if (fc == *pfc) {
        *pfc = fc->caller;
        free_funccal(fc, 1);
        return;
      }
    }
  }
  for (i = 0; i < fc->fc_funcs.ga_len; i++) {
    if (((ufunc_T **)(fc->fc_funcs.ga_data))[i] == fp) {
      ((ufunc_T **)(fc->fc_funcs.ga_data))[i] = ((void*)0);
    }
  }
}



static int can_free_funccal(funccall_T *fc, int copyID)
{
  return fc->l_varlist.lv_copyID != copyID
         && fc->l_vars.dv_copyID != copyID
         && fc->l_avars.dv_copyID != copyID
         && fc->fc_copyID != copyID;
}




static void
free_funccal (
    funccall_T *fc,
    int free_val
)
{
  for (int i = 0; i < fc->fc_funcs.ga_len; i++) {
    ufunc_T *fp = ((ufunc_T **)(fc->fc_funcs.ga_data))[i];





    if (fp != ((void*)0) && fp->uf_scoped == fc) {
      fp->uf_scoped = ((void*)0);
    }
  }
  ga_clear(&fc->fc_funcs);



  vars_clear_ext(&fc->l_avars.dv_hashtab, free_val);


  vars_clear(&fc->l_vars.dv_hashtab);


  if (free_val) {
    do { list_T *const l_ = (&fc->l_varlist); if (l_ != ((void*)0)) { for ( listitem_T *li = l_->lv_first; li != ((void*)0); li = li->li_next) { { tv_clear((&(li)->li_tv)); } } } } while (0);


  }

  func_ptr_unref(fc->func);
  xfree(fc);
}




static void add_nr_var(dict_T *dp, dictitem_T *v, char *name, varnumber_T nr)
{

  __builtin___strcpy_chk ((char *)(v->di_key), (char *)(name), __builtin_object_size ((char *)(v->di_key), 1 > 1 ? 1 : 0));

  v->di_flags = DI_FLAGS_RO | DI_FLAGS_FIX;
  tv_dict_add(dp, v);
  v->di_tv.v_type = VAR_NUMBER;
  v->di_tv.v_lock = VAR_FIXED;
  v->di_tv.vval.v_number = nr;
}




void ex_return(exarg_T *eap)
{
  char_u *arg = eap->arg;
  typval_T rettv;
  int returning = 0;

  if (current_funccal == ((void*)0)) {
    emsg((char_u *)(libintl_gettext((char *)("E133: :return not inside a function"))));
    return;
  }

  if (eap->skip)
    ++emsg_skip;

  eap->nextcmd = ((void*)0);
  if ((*arg != '\000' && *arg != '|' && *arg != '\n')
      && eval0(arg, &rettv, &eap->nextcmd, !eap->skip) != 0) {
    if (!eap->skip) {
      returning = do_return(eap, 0, 1, &rettv);
    } else {
      tv_clear(&rettv);
    }
  }

  else if (!eap->skip) {




    if (!aborting())
      returning = do_return(eap, 0, 1, ((void*)0));
  }




  if (returning)
    eap->nextcmd = ((void*)0);
  else if (eap->nextcmd == ((void*)0))
    eap->nextcmd = check_nextcmd(arg);

  if (eap->skip)
    --emsg_skip;
}
# 21567 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
int do_return(exarg_T *eap, int reanimate, int is_cmd, void *rettv)
{
  int idx;
  struct condstack *cstack = eap->cstack;

  if (reanimate)

    current_funccal->returned = 0;







  idx = cleanup_conditionals(eap->cstack, 0, 1);
  if (idx >= 0) {
    cstack->cs_pending[idx] = 24;

    if (!is_cmd && !reanimate)



      cstack->cs_pend.csp_rv[idx] = rettv;
    else {


      if (reanimate) {
        ((void)0);
        rettv = current_funccal->rettv;
      }

      if (rettv != ((void*)0)) {

        cstack->cs_pend.csp_rv[idx] = xcalloc(1, sizeof(typval_T));
        *(typval_T *)cstack->cs_pend.csp_rv[idx] = *(typval_T *)rettv;
      } else
        cstack->cs_pend.csp_rv[idx] = ((void*)0);

      if (reanimate) {



        current_funccal->rettv->v_type = VAR_NUMBER;
        current_funccal->rettv->vval.v_number = 0;
      }
    }
    report_make_pending(24, rettv);
  } else {
    current_funccal->returned = 1;




    if (!reanimate && rettv != ((void*)0)) {
      tv_clear(current_funccal->rettv);
      *current_funccal->rettv = *(typval_T *)rettv;
      if (!is_cmd)
        xfree(rettv);
    }
  }

  return idx < 0;
}





char_u *get_return_cmd(void *rettv)
{
  char_u *s = ((void*)0);
  char_u *tofree = ((void*)0);

  if (rettv != ((void*)0)) {
    tofree = s = (char_u *) encode_tv2echo((typval_T *) rettv, ((void*)0));
  }
  if (s == ((void*)0)) {
    s = (char_u *)"";
  }

  __builtin___strcpy_chk ((char *)(IObuff), (char *)(":return "), __builtin_object_size ((char *)(IObuff), 1 > 1 ? 1 : 0));
  xstrlcpy((char *)(IObuff + 8), (char *)(s), (size_t)((1024+1) - 8));
  if (strlen((char *)(s)) + 8 >= (1024+1))
    __builtin___strcpy_chk ((char *)(IObuff + (1024+1) - 4), (char *)("..."), __builtin_object_size ((char *)(IObuff + (1024+1) - 4), 1 > 1 ? 1 : 0));
  xfree(tofree);
  return vim_strsave(IObuff);
}






char_u *get_func_line(int c, void *cookie, int indent)
{
  funccall_T *fcp = (funccall_T *)cookie;
  ufunc_T *fp = fcp->func;
  char_u *retval;
  garray_T *gap;


  if (fcp->dbg_tick != debug_tick) {
    fcp->breakpoint = dbg_find_breakpoint(0, fp->uf_name,
        sourcing_lnum);
    fcp->dbg_tick = debug_tick;
  }
  if (do_profiling == 1)
    func_line_end(cookie);

  gap = &fp->uf_lines;
  if (((fp->uf_flags & 0x01) && did_emsg && !aborted_in_try())
      || fcp->returned)
    retval = ((void*)0);
  else {

    while (fcp->linenr < gap->ga_len
           && ((char_u **)(gap->ga_data))[fcp->linenr] == ((void*)0))
      ++fcp->linenr;
    if (fcp->linenr >= gap->ga_len)
      retval = ((void*)0);
    else {
      retval = vim_strsave(((char_u **)(gap->ga_data))[fcp->linenr++]);
      sourcing_lnum = fcp->linenr;
      if (do_profiling == 1)
        func_line_start(cookie);
    }
  }


  if (fcp->breakpoint != 0 && fcp->breakpoint <= sourcing_lnum) {
    dbg_breakpoint(fp->uf_name, sourcing_lnum);

    fcp->breakpoint = dbg_find_breakpoint(0, fp->uf_name,
        sourcing_lnum);
    fcp->dbg_tick = debug_tick;
  }

  return retval;
}







void func_line_start(void *cookie)
{
  funccall_T *fcp = (funccall_T *)cookie;
  ufunc_T *fp = fcp->func;

  if (fp->uf_profiling && sourcing_lnum >= 1
      && sourcing_lnum <= fp->uf_lines.ga_len) {
    fp->uf_tml_idx = sourcing_lnum - 1;

    while (fp->uf_tml_idx > 0 && ((char_u **)(fp->uf_lines.ga_data))[fp->uf_tml_idx] == ((void*)0))
      --fp->uf_tml_idx;
    fp->uf_tml_execed = 0;
    fp->uf_tml_start = profile_start();
    fp->uf_tml_children = profile_zero();
    fp->uf_tml_wait = profile_get_wait();
  }
}




void func_line_exec(void *cookie)
{
  funccall_T *fcp = (funccall_T *)cookie;
  ufunc_T *fp = fcp->func;

  if (fp->uf_profiling && fp->uf_tml_idx >= 0)
    fp->uf_tml_execed = 1;
}




void func_line_end(void *cookie)
{
  funccall_T *fcp = (funccall_T *)cookie;
  ufunc_T *fp = fcp->func;

  if (fp->uf_profiling && fp->uf_tml_idx >= 0) {
    if (fp->uf_tml_execed) {
      ++fp->uf_tml_count[fp->uf_tml_idx];
      fp->uf_tml_start = profile_end(fp->uf_tml_start);
      fp->uf_tml_start = profile_sub_wait(fp->uf_tml_wait, fp->uf_tml_start);
      fp->uf_tml_total[fp->uf_tml_idx] =
        profile_add(fp->uf_tml_total[fp->uf_tml_idx], fp->uf_tml_start);
      fp->uf_tml_self[fp->uf_tml_idx] =
        profile_self(fp->uf_tml_self[fp->uf_tml_idx], fp->uf_tml_start,
          fp->uf_tml_children);
    }
    fp->uf_tml_idx = -1;
  }
}





int func_has_ended(void *cookie)
{
  funccall_T *fcp = (funccall_T *)cookie;



  return ((fcp->func->uf_flags & 0x01) && did_emsg && !aborted_in_try())
         || fcp->returned;
}




int func_has_abort(void *cookie)
{
  return ((funccall_T *)cookie)->func->uf_flags & 0x01;
}

static var_flavour_T var_flavour(char_u *varname)
{
  char_u *p = varname;

  if (((unsigned)(*p) >= 'A' && (unsigned)(*p) <= 'Z')) {
    while (*(++p))
      if (((unsigned)(*p) >= 'a' && (unsigned)(*p) <= 'z')) {
        return VAR_FLAVOUR_SESSION;
      }
    return VAR_FLAVOUR_SHADA;
  } else {
    return VAR_FLAVOUR_DEFAULT;
  }
}


hashitem_T *find_hi_in_scoped_ht(const char *name, hashtab_T **pht)
{
  if (current_funccal == ((void*)0) || current_funccal->func->uf_scoped == ((void*)0)) {
    return ((void*)0);
  }

  funccall_T *old_current_funccal = current_funccal;
  hashitem_T *hi = ((void*)0);
  const size_t namelen = strlen(name);
  const char *varname;


  current_funccal = current_funccal->func->uf_scoped;
  while (current_funccal != ((void*)0)) {
    hashtab_T *ht = find_var_ht(name, namelen, &varname);
    if (ht != ((void*)0) && *varname != '\000') {
      hi = hash_find_len(ht, varname, namelen - (varname - name));
      if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)) {
        *pht = ht;
        break;
      }
    }
    if (current_funccal == current_funccal->func->uf_scoped) {
      break;
    }
    current_funccal = current_funccal->func->uf_scoped;
  }
  current_funccal = old_current_funccal;

  return hi;
}


dictitem_T *find_var_in_scoped_ht(const char *name, const size_t namelen,
                                  int no_autoload)
{
  if (current_funccal == ((void*)0) || current_funccal->func->uf_scoped == ((void*)0)) {
    return ((void*)0);
  }

  dictitem_T *v = ((void*)0);
  funccall_T *old_current_funccal = current_funccal;
  const char *varname;


  current_funccal = current_funccal->func->uf_scoped;
  while (current_funccal) {
    hashtab_T *ht = find_var_ht(name, namelen, &varname);
    if (ht != ((void*)0) && *varname != '\000') {
      v = find_var_in_ht(ht, *name, varname,
                         namelen - (size_t)(varname - name), no_autoload);
      if (v != ((void*)0)) {
        break;
      }
    }
    if (current_funccal == current_funccal->func->uf_scoped) {
      break;
    }
    current_funccal = current_funccal->func->uf_scoped;
  }
  current_funccal = old_current_funccal;

  return v;
}
# 21881 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
const void *var_shada_iter(const void *const iter, const char **const name,
                           typval_T *rettv)
  FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ARG(2, 3)
{
  const hashitem_T *hi;
  const hashitem_T *hifirst = globvardict.dv_hashtab.ht_array;
  const size_t hinum = (size_t) globvardict.dv_hashtab.ht_mask + 1;
  *name = ((void*)0);
  if (iter == ((void*)0)) {
    hi = globvardict.dv_hashtab.ht_array;
    while ((size_t) (hi - hifirst) < hinum
           && (((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed)
               || var_flavour(hi->hi_key) != VAR_FLAVOUR_SHADA)) {
      hi++;
    }
    if ((size_t) (hi - hifirst) == hinum) {
      return ((void*)0);
    }
  } else {
    hi = (const hashitem_T *) iter;
  }
  *name = (char *)((dictitem_T *)((hi)->hi_key - __builtin_offsetof(dictitem_T, di_key)))->di_key;
  tv_copy(&((dictitem_T *)((hi)->hi_key - __builtin_offsetof(dictitem_T, di_key)))->di_tv, rettv);
  while ((size_t)(++hi - hifirst) < hinum) {
    if (!((hi)->hi_key == ((void*)0) || (hi)->hi_key == (char_u *)&hash_removed) && var_flavour(hi->hi_key) == VAR_FLAVOUR_SHADA) {
      return hi;
    }
  }
  return ((void*)0);
}

void var_set_global(const char *const name, typval_T vartv)
{
  funccall_T *const saved_current_funccal = current_funccal;
  current_funccal = ((void*)0);
  set_var(name, strlen(name), &vartv, 0);
  current_funccal = saved_current_funccal;
}

int store_session_globals(FILE *fd)
{
  do { hashtab_T *const this_varhi_ht_ = (&(&globvardict)->dv_hashtab); size_t this_varhi_todo_ = this_varhi_ht_->ht_used; for (hashitem_T *this_varhi_ = this_varhi_ht_->ht_array; this_varhi_todo_; this_varhi_++) { if (!((this_varhi_)->hi_key == ((void*)0) || (this_varhi_)->hi_key == (char_u *)&hash_removed)) { { { { dictitem_T *const this_var = ((dictitem_T *)((this_varhi_)->hi_key - __builtin_offsetof(dictitem_T, di_key))); { { if ((this_var->di_tv.v_type == VAR_NUMBER || this_var->di_tv.v_type == VAR_STRING) && var_flavour(this_var->di_key) == VAR_FLAVOUR_SESSION) { char_u *const p = vim_strsave_escaped( (const char_u *)tv_get_string(&this_var->di_tv), (const char_u *)"\\\"\n\r"); for (char_u *t = p; *t != '\000'; t++) { if (*t == '\n') { *t = 'n'; } else if (*t == '\r') { *t = 'r'; } } if ((fprintf(fd, "let %s = %c%s%c", this_var->di_key, ((this_var->di_tv.v_type == VAR_STRING) ? '"' : ' '), p, ((this_var->di_tv.v_type == VAR_STRING) ? '"' : ' ')) < 0) || put_eol(fd) == 0) { xfree(p); return 0; } xfree(p); } else if (this_var->di_tv.v_type == VAR_FLOAT && var_flavour(this_var->di_key) == VAR_FLAVOUR_SESSION) { float_T f = this_var->di_tv.vval.v_float; int sign = ' '; if (f < 0) { f = -f; sign = '-'; } if ((fprintf(fd, "let %s = %c%f", this_var->di_key, sign, f) < 0) || put_eol(fd) == 0) { return 0; } } } } } } } this_varhi_todo_--; } } } while (0);
# 21965 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  return 1;
}





void last_set_msg(scid_T scriptID)
{
  if (scriptID != 0) {
    char_u *p = home_replace_save(((void*)0), get_scriptname(scriptID));
    verbose_enter();
    msg_puts((const char *)(libintl_gettext((char *)("\n\tLast set from "))));
    msg_puts((const char *)(p));
    xfree(p);
    verbose_leave();
  }
}


void reset_v_option_vars(void)
{
  set_vim_var_string(VV_OPTION_NEW, ((void*)0), -1);
  set_vim_var_string(VV_OPTION_OLD, ((void*)0), -1);
  set_vim_var_string(VV_OPTION_TYPE, ((void*)0), -1);
}
# 21999 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
int
modify_fname (
    char_u *src,
    size_t *usedlen,
    char_u **fnamep,
    char_u **bufp,
    size_t *fnamelen
)
{
  int valid = 0;
  char_u *tail;
  char_u *s, *p, *pbuf;
  char_u dirname[1024];
  int c;
  int has_fullname = 0;

repeat:

  if (src[*usedlen] == ':' && src[*usedlen + 1] == 'p') {
    has_fullname = 1;

    valid |= 1;
    *usedlen += 2;


    if ((*fnamep)[0] == '~'
# 22033 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
        ) {
      *fnamep = expand_env_save(*fnamep);
      xfree(*bufp);
      *bufp = *fnamep;
      if (*fnamep == ((void*)0))
        return -1;
    }


    for (p = *fnamep; *p != '\000'; (p += utfc_ptr2len((char_u *)p))) {
      if (vim_ispathsep(*p)
          && p[1] == '.'
          && (p[2] == '\000'
              || vim_ispathsep(p[2])
              || (p[2] == '.'
                  && (p[3] == '\000' || vim_ispathsep(p[3])))))
        break;
    }


    if (*p != '\000' || !vim_isAbsName(*fnamep)) {
      *fnamep = (char_u *)FullName_save((char *)*fnamep, *p != '\000');
      xfree(*bufp);
      *bufp = *fnamep;
      if (*fnamep == ((void*)0))
        return -1;
    }


    if (os_isdir(*fnamep)) {

      *fnamep = vim_strnsave(*fnamep, strlen((char *)(*fnamep)) + 2);
      xfree(*bufp);
      *bufp = *fnamep;
      if (*fnamep == ((void*)0))
        return -1;
      add_pathsep((char *)*fnamep);
    }
  }




  while (src[*usedlen] == ':'
         && ((c = src[*usedlen + 1]) == '.' || c == '~' || c == '8')) {
    *usedlen += 2;
    if (c == '8') {
      continue;
    }
    pbuf = ((void*)0);

    if (!has_fullname) {
      if (c == '.' && **fnamep == '~')
        p = pbuf = expand_env_save(*fnamep);
      else
        p = pbuf = (char_u *)FullName_save((char *)*fnamep, 0);
    } else
      p = *fnamep;

    has_fullname = 0;

    if (p != ((void*)0)) {
      if (c == '.') {
        os_dirname(dirname, 1024);
        s = path_shorten_fname(p, dirname);
        if (s != ((void*)0)) {
          *fnamep = s;
          if (pbuf != ((void*)0)) {
            xfree(*bufp);
            *bufp = pbuf;
            pbuf = ((void*)0);
          }
        }
      } else {
        home_replace(((void*)0), p, dirname, 1024, 1);

        if (*dirname == '~') {
          s = vim_strsave(dirname);
          *fnamep = s;
          xfree(*bufp);
          *bufp = s;
        }
      }
      xfree(pbuf);
    }
  }

  tail = path_tail(*fnamep);
  *fnamelen = strlen((char *)(*fnamep));



  while (src[*usedlen] == ':' && src[*usedlen + 1] == 'h') {
    valid |= 2;
    *usedlen += 2;
    s = get_past_head(*fnamep);
    while (tail > s && after_pathsep((char *)s, (char *)tail))
      (tail -= utf_head_off((char_u *)*fnamep, (char_u *)tail - 1) + 1);
    *fnamelen = (size_t)(tail - *fnamep);
    if (*fnamelen == 0) {

      xfree(*bufp);
      *bufp = *fnamep = tail = vim_strsave((char_u *)".");
      *fnamelen = 1;
    } else {
      while (tail > s && !after_pathsep((char *)s, (char *)tail))
        (tail -= utf_head_off((char_u *)*fnamep, (char_u *)tail - 1) + 1);
    }
  }


  if (src[*usedlen] == ':' && src[*usedlen + 1] == '8') {
    *usedlen += 2;
  }



  if (src[*usedlen] == ':' && src[*usedlen + 1] == 't') {
    *usedlen += 2;
    *fnamelen -= (size_t)(tail - *fnamep);
    *fnamep = tail;
  }



  while (src[*usedlen] == ':'
         && (src[*usedlen + 1] == 'e' || src[*usedlen + 1] == 'r')) {




    if (src[*usedlen + 1] == 'e' && *fnamep > tail)
      s = *fnamep - 2;
    else
      s = *fnamep + *fnamelen - 1;
    for (; s > tail; --s)
      if (s[0] == '.')
        break;
    if (src[*usedlen + 1] == 'e') {
      if (s > tail) {
        *fnamelen += (size_t)(*fnamep - (s + 1));
        *fnamep = s + 1;
      } else if (*fnamep <= tail)
        *fnamelen = 0;
    } else {
      if (s > tail)
        *fnamelen = (size_t)(s - *fnamep);
    }
    *usedlen += 2;
  }



  if (src[*usedlen] == ':'
      && (src[*usedlen + 1] == 's'
          || (src[*usedlen + 1] == 'g' && src[*usedlen + 2] == 's'))) {
    char_u *str;
    char_u *pat;
    char_u *sub;
    int sep;
    char_u *flags;
    int didit = 0;

    flags = (char_u *)"";
    s = src + *usedlen + 2;
    if (src[*usedlen + 1] == 'g') {
      flags = (char_u *)"g";
      ++s;
    }

    sep = *s++;
    if (sep) {

      p = vim_strchr(s, sep);
      if (p != ((void*)0)) {
        pat = vim_strnsave(s, (int)(p - s));
        s = p + 1;

        p = vim_strchr(s, sep);
        if (p != ((void*)0)) {
          sub = vim_strnsave(s, (int)(p - s));
          str = vim_strnsave(*fnamep, *fnamelen);
          *usedlen = (size_t)(p + 1 - src);
          s = do_string_sub(str, pat, sub, ((void*)0), flags);
          *fnamep = s;
          *fnamelen = strlen((char *)(s));
          xfree(*bufp);
          *bufp = s;
          didit = 1;
          xfree(sub);
          xfree(str);
        }
        xfree(pat);
      }

      if (didit)
        goto repeat;
    }
  }

  if (src[*usedlen] == ':' && src[*usedlen + 1] == 'S') {

    c = (*fnamep)[*fnamelen];
    if (c != '\000') {
      (*fnamep)[*fnamelen] = '\000';
    }
    p = vim_strsave_shellescape(*fnamep, 0, 0);
    if (c != '\000') {
      (*fnamep)[*fnamelen] = c;
    }
    xfree(*bufp);
    *bufp = *fnamep = p;
    *fnamelen = strlen((char *)(p));
    *usedlen += 2;
  }

  return valid;
}





char_u *do_string_sub(char_u *str, char_u *pat, char_u *sub,
                      typval_T *expr, char_u *flags)
{
  int sublen;
  regmatch_T regmatch;
  int do_all;
  char_u *tail;
  char_u *end;
  garray_T ga;
  char_u *save_cpo;
  char_u *zero_width = ((void*)0);


  save_cpo = p_cpo;
  p_cpo = empty_option;

  ga_init(&ga, 1, 200);

  do_all = (flags[0] == 'g');

  regmatch.rm_ic = p_ic;
  regmatch.regprog = vim_regcomp(pat, 1 + 2);
  if (regmatch.regprog != ((void*)0)) {
    tail = str;
    end = str + strlen((char *)(str));
    while (vim_regexec_nl(&regmatch, str, (colnr_T)(tail - str))) {

      if (regmatch.startp[0] == regmatch.endp[0]) {
        if (zero_width == regmatch.startp[0]) {

          int i = utfc_ptr2len(tail);
          __builtin___memmove_chk ((char_u *)ga.ga_data + ga.ga_len, tail, (size_t)i, __builtin_object_size ((char_u *)ga.ga_data + ga.ga_len, 0));
          ga.ga_len += i;
          tail += i;
          continue;
        }
        zero_width = regmatch.startp[0];
      }






      sublen = vim_regsub(&regmatch, sub, expr, tail, 0, 1, 0);
      ga_grow(&ga, (int)((end - tail) + sublen -
                     (regmatch.endp[0] - regmatch.startp[0])));


      int i = (int)(regmatch.startp[0] - tail);
      __builtin___memmove_chk ((char_u *)ga.ga_data + ga.ga_len, tail, (size_t)i, __builtin_object_size ((char_u *)ga.ga_data + ga.ga_len, 0));

      (void)vim_regsub(&regmatch, sub, expr, (char_u *)ga.ga_data
                       + ga.ga_len + i, 1, 1, 0);
      ga.ga_len += i + sublen - 1;
      tail = regmatch.endp[0];
      if (*tail == '\000')
        break;
      if (!do_all)
        break;
    }

    if (ga.ga_data != ((void*)0))
      __builtin___strcpy_chk ((char *)((char *)ga.ga_data + ga.ga_len), (char *)(tail), __builtin_object_size ((char *)((char *)ga.ga_data + ga.ga_len), 1 > 1 ? 1 : 0));

    vim_regfree(regmatch.regprog);
  }

  char_u *ret = vim_strsave(ga.ga_data == ((void*)0) ? str : (char_u *)ga.ga_data);
  ga_clear(&ga);
  if (p_cpo == empty_option) {
    p_cpo = save_cpo;
  } else {

    free_string_option(save_cpo);
  }

  return ret;
}




static inline _Bool common_job_callbacks(dict_T *vopts,
                                        CallbackReader *on_stdout,
                                        CallbackReader *on_stderr,
                                        Callback *on_exit)
{
  if (tv_dict_get_callback(vopts, ("on_stdout"), (sizeof("on_stdout") - 1), &on_stdout->cb)
      &&tv_dict_get_callback(vopts, ("on_stderr"), (sizeof("on_stderr") - 1), &on_stderr->cb)
      && tv_dict_get_callback(vopts, ("on_exit"), (sizeof("on_exit") - 1), on_exit)) {
    on_stdout->buffered = tv_dict_get_number(vopts, "stdout_buffered");
    on_stderr->buffered = tv_dict_get_number(vopts, "stderr_buffered");
    if (on_stdout->buffered && on_stdout->cb.type == kCallbackNone) {
      on_stdout->self = vopts;
    }
    if (on_stderr->buffered && on_stderr->cb.type == kCallbackNone) {
      on_stderr->self = vopts;
    }
    vopts->dv_refcount++;
    return 1;
  }

  callback_reader_free(on_stdout);
  callback_reader_free(on_stderr);
  callback_free(on_exit);
  return 0;
}


static Channel *find_job(uint64_t id, _Bool show_error)
{
  Channel *data = find_channel(id);
  if (!data || data->streamtype != kChannelStreamProc
      || process_is_stopped(&data->stream.proc)) {
    if (show_error) {
      if (data && data->streamtype != kChannelStreamProc) {
        emsg((char_u *)(libintl_gettext((char *)(e_invchanjob))));
      } else {
        emsg((char_u *)(libintl_gettext((char *)(e_invchan))));
      }
    }
    return ((void*)0);
  }
  return data;
}


static void script_host_eval(char *name, typval_T *argvars, typval_T *rettv)
{
  if (check_restricted() || check_secure()) {
    return;
  }

  if (argvars[0].v_type != VAR_STRING) {
    emsg((char_u *)(libintl_gettext((char *)(e_invarg))));
    return;
  }

  list_T *args = tv_list_alloc();
  tv_list_append_string(args, (const char *)argvars[0].vval.v_string, -1);
  *rettv = eval_call_provider(name, "eval", args);
}

typval_T eval_call_provider(char *provider, char *method, list_T *arguments)
{
  char func[256];
  int name_len = __builtin___snprintf_chk (func, sizeof(func), 0, __builtin_object_size (func, 1 > 1 ? 1 : 0), "provider#%s#Call", provider);


  struct caller_scope saved_provider_caller_scope = provider_caller_scope;
  provider_caller_scope = (struct caller_scope) {
    .SID = current_SID,
    .sourcing_name = sourcing_name,
    .sourcing_lnum = sourcing_lnum,
    .autocmd_fname = autocmd_fname,
    .autocmd_match = autocmd_match,
    .autocmd_fname_full = autocmd_fname_full,
    .autocmd_bufnr = autocmd_bufnr,
    .funccalp = save_funccal()
  };
  provider_call_nesting++;

  typval_T argvars[3] = {
    {.v_type = VAR_STRING, .vval.v_string = (uint8_t *)method, .v_lock = 0},
    {.v_type = VAR_LIST, .vval.v_list = arguments, .v_lock = 0},
    {.v_type = VAR_UNKNOWN}
  };
  typval_T rettv = { .v_type = VAR_UNKNOWN, .v_lock = VAR_UNLOCKED };
  tv_list_ref(arguments);

  int dummy;
  (void)call_func((const char_u *)func,
                  name_len,
                  &rettv,
                  2,
                  argvars,
                  ((void*)0),
                  curwin->w_cursor.lnum,
                  curwin->w_cursor.lnum,
                  &dummy,
                  1,
                  ((void*)0),
                  ((void*)0));

  tv_list_unref(arguments);

  restore_funccal(provider_caller_scope.funccalp);
  provider_caller_scope = saved_provider_caller_scope;
  provider_call_nesting--;

  return rettv;
}

_Bool eval_has_provider(const char *name)
{
# 22463 "/Users/a/Documents/projects/neovim-src/src/nvim/eval.c"
  static int has_clipboard = -1;
  static int has_python = -1;
  static int has_python3 = -1;
  static int has_ruby = -1;

  if (strequal(name, "clipboard")) {
    if (has_clipboard == -1) { has_clipboard = !!find_func((char_u *)"provider#" "clipboard" "#Call"); if (!has_clipboard) { script_autoload("provider#" "clipboard" "#Call", sizeof("provider#" "clipboard" "#Call") - 1, 0); has_clipboard = !!find_func((char_u *)"provider#" "clipboard" "#Call"); } };
    return has_clipboard;
  } else if (strequal(name, "python3")) {
    if (has_python3 == -1) { has_python3 = !!find_func((char_u *)"provider#" "python3" "#Call"); if (!has_python3) { script_autoload("provider#" "python3" "#Call", sizeof("provider#" "python3" "#Call") - 1, 0); has_python3 = !!find_func((char_u *)"provider#" "python3" "#Call"); } };
    return has_python3;
  } else if (strequal(name, "python")) {
    if (has_python == -1) { has_python = !!find_func((char_u *)"provider#" "python" "#Call"); if (!has_python) { script_autoload("provider#" "python" "#Call", sizeof("provider#" "python" "#Call") - 1, 0); has_python = !!find_func((char_u *)"provider#" "python" "#Call"); } };
    return has_python;
  } else if (strequal(name, "ruby")) {
    if (has_ruby == -1) { has_ruby = !!find_func((char_u *)"provider#" "ruby" "#Call"); if (!has_ruby) { script_autoload("provider#" "ruby" "#Call", sizeof("provider#" "ruby" "#Call") - 1, 0); has_ruby = !!find_func((char_u *)"provider#" "ruby" "#Call"); } };
    return has_ruby;
  }

  return 0;
}


void eval_format_source_name_line(char *buf, size_t bufsize)
{
  __builtin___snprintf_chk (buf, bufsize, 0, __builtin_object_size (buf, 1 > 1 ? 1 : 0), "%s:%" "ld", (sourcing_name ? sourcing_name : (char_u *)"?"), (sourcing_name ? sourcing_lnum : 0));


}


void ex_checkhealth(exarg_T *eap)
{
  _Bool found = !!find_func((char_u *)"health#check");
  if (!found
      && script_autoload("health#check", sizeof("health#check") - 1, 0)) {
    found = !!find_func((char_u *)"health#check");
  }
  if (!found) {
    const char *vimruntime_env = os_getenv("VIMRUNTIME");
    if (vimruntime_env == ((void*)0)) {
      emsg((char_u *)(libintl_gettext((char *)("E5009: $VIMRUNTIME is empty or unset"))));
    } else {
      _Bool rtp_ok = ((void*)0) != strstr((char *)p_rtp, vimruntime_env);
      if (rtp_ok) {
        emsgf((const char *) (libintl_gettext((char *)("E5009: Invalid $VIMRUNTIME: %s"))), (vimruntime_env));
      } else {
        emsg((char_u *)(libintl_gettext((char *)("E5009: Invalid 'runtimepath'"))));
      }
    }
    return;
  }

  size_t bufsize = strlen((char *)(eap->arg)) + sizeof("call health#check('')");
  char *buf = xmalloc(bufsize);
  __builtin___snprintf_chk (buf, bufsize, 0, __builtin_object_size (buf, 1 > 1 ? 1 : 0), "call health#check('%s')", eap->arg);

  do_cmdline_cmd(buf);

  xfree(buf);
}
